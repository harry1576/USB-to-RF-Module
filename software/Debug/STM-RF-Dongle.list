
STM-RF-Dongle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fd0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091f4  080091f4  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  080091f4  080091f4  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091f4  080091f4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091f4  080091f4  000191f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080091fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b8  20000204  08009400  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200012bc  08009400  000212bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc3b  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b3  00000000  00000000  0003ce6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00040728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  000416a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002322e  00000000  00000000  00042490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013190  00000000  00000000  000656be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3896  00000000  00000000  0007884e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c0e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f3c  00000000  00000000  0013c138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000204 	.word	0x20000204
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009144 	.word	0x08009144

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000208 	.word	0x20000208
 80001c8:	08009144 	.word	0x08009144

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e2:	f000 fce6 	bl	8000bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e6:	f000 f843 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f000 f901 	bl	80003f0 <MX_GPIO_Init>
  MX_SPI3_Init();
 80001ee:	f000 f8c1 	bl	8000374 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80001f2:	f008 f907 	bl	8008404 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(50);
 80001f6:	2032      	movs	r0, #50	; 0x32
 80001f8:	f000 fd50 	bl	8000c9c <HAL_Delay>

  NRF24_Init();
 80001fc:	f000 fabe 	bl	800077c <NRF24_Init>
  HAL_Delay(500);
 8000200:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000204:	f000 fd4a 	bl	8000c9c <HAL_Delay>
  NRF24_TxMode(TxAddress,10);
 8000208:	210a      	movs	r1, #10
 800020a:	4815      	ldr	r0, [pc, #84]	; (8000260 <main+0x84>)
 800020c:	f000 fadd 	bl	80007ca <NRF24_TxMode>
  NRF24_ReadAll(&txBuffer[0]);
 8000210:	4814      	ldr	r0, [pc, #80]	; (8000264 <main+0x88>)
 8000212:	f000 fb37 	bl	8000884 <NRF24_ReadAll>

  HAL_Delay(50);
 8000216:	2032      	movs	r0, #50	; 0x32
 8000218:	f000 fd40 	bl	8000c9c <HAL_Delay>

  uint8_t count = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(NRF24_Transmit(TxData) == 1)
 8000220:	4811      	ldr	r0, [pc, #68]	; (8000268 <main+0x8c>)
 8000222:	f000 faf1 	bl	8000808 <NRF24_Transmit>
 8000226:	4603      	mov	r3, r0
 8000228:	2b01      	cmp	r3, #1
 800022a:	d107      	bne.n	800023c <main+0x60>
	  {
		//sprintf(txBuffer,"%u\r\n",count);
		//CDC_Transmit_FS((uint8_t *) txBuffer,strlen(txBuffer));
	   	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 800022c:	2101      	movs	r1, #1
 800022e:	480f      	ldr	r0, [pc, #60]	; (800026c <main+0x90>)
 8000230:	f000 ffec 	bl	800120c <HAL_GPIO_TogglePin>
	   	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 8000234:	2102      	movs	r1, #2
 8000236:	480d      	ldr	r0, [pc, #52]	; (800026c <main+0x90>)
 8000238:	f000 ffe8 	bl	800120c <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay(100);
 800023c:	2064      	movs	r0, #100	; 0x64
 800023e:	f000 fd2d 	bl	8000c9c <HAL_Delay>

	  NRF24_ReadAll(&txBuffer[0]);
 8000242:	4808      	ldr	r0, [pc, #32]	; (8000264 <main+0x88>)
 8000244:	f000 fb1e 	bl	8000884 <NRF24_ReadAll>
	  CDC_Transmit_FS((uint8_t *) txBuffer,strlen(txBuffer));
 8000248:	4806      	ldr	r0, [pc, #24]	; (8000264 <main+0x88>)
 800024a:	f7ff ffbf 	bl	80001cc <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	4619      	mov	r1, r3
 8000254:	4803      	ldr	r0, [pc, #12]	; (8000264 <main+0x88>)
 8000256:	f008 f9a9 	bl	80085ac <CDC_Transmit_FS>

	count = 2;
 800025a:	2302      	movs	r3, #2
 800025c:	71fb      	strb	r3, [r7, #7]
	  if(NRF24_Transmit(TxData) == 1)
 800025e:	e7df      	b.n	8000220 <main+0x44>
 8000260:	20000000 	.word	0x20000000
 8000264:	200002d4 	.word	0x200002d4
 8000268:	20000008 	.word	0x20000008
 800026c:	48000400 	.word	0x48000400

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b0ac      	sub	sp, #176	; 0xb0
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800027a:	2244      	movs	r2, #68	; 0x44
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f008 fe90 	bl	8008fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2254      	movs	r2, #84	; 0x54
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f008 fe82 	bl	8008fa4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002a0:	2310      	movs	r3, #16
 80002a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002a4:	2301      	movs	r3, #1
 80002a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002b0:	2360      	movs	r3, #96	; 0x60
 80002b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	2302      	movs	r3, #2
 80002b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002bc:	2301      	movs	r3, #1
 80002be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002c2:	2301      	movs	r3, #1
 80002c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002c8:	2328      	movs	r3, #40	; 0x28
 80002ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002ce:	2307      	movs	r3, #7
 80002d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002d4:	2302      	movs	r3, #2
 80002d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002da:	2302      	movs	r3, #2
 80002dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002e4:	4618      	mov	r0, r3
 80002e6:	f002 fbc3 	bl	8002a70 <HAL_RCC_OscConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002f0:	f000 f8ca 	bl	8000488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f4:	230f      	movs	r3, #15
 80002f6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	2303      	movs	r3, #3
 80002fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000308:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800030c:	2104      	movs	r1, #4
 800030e:	4618      	mov	r0, r3
 8000310:	f002 ffce 	bl	80032b0 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800031a:	f000 f8b5 	bl	8000488 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800031e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000322:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000324:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000328:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800032a:	2301      	movs	r3, #1
 800032c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800032e:	2301      	movs	r3, #1
 8000330:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000332:	2318      	movs	r3, #24
 8000334:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000336:	2307      	movs	r3, #7
 8000338:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800033a:	2302      	movs	r3, #2
 800033c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800033e:	2302      	movs	r3, #2
 8000340:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000342:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000346:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4618      	mov	r0, r3
 800034c:	f003 f97e 	bl	800364c <HAL_RCCEx_PeriphCLKConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000356:	f000 f897 	bl	8000488 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800035a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800035e:	f002 fb21 	bl	80029a4 <HAL_PWREx_ControlVoltageScaling>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000368:	f000 f88e 	bl	8000488 <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	37b0      	adds	r7, #176	; 0xb0
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <MX_SPI3_Init+0x74>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <MX_SPI3_Init+0x78>)
 800037c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800037e:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <MX_SPI3_Init+0x74>)
 8000380:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000384:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000386:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <MX_SPI3_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <MX_SPI3_Init+0x74>)
 800038e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000392:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_SPI3_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <MX_SPI3_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_SPI3_Init+0x74>)
 80003a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_SPI3_Init+0x74>)
 80003aa:	2220      	movs	r2, #32
 80003ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_SPI3_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_SPI3_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_SPI3_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_SPI3_Init+0x74>)
 80003c2:	2207      	movs	r2, #7
 80003c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_SPI3_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_SPI3_Init+0x74>)
 80003ce:	2208      	movs	r2, #8
 80003d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_SPI3_Init+0x74>)
 80003d4:	f003 fc20 	bl	8003c18 <HAL_SPI_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80003de:	f000 f853 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000230 	.word	0x20000230
 80003ec:	40003c00 	.word	0x40003c00

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000406:	4b1e      	ldr	r3, [pc, #120]	; (8000480 <MX_GPIO_Init+0x90>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	4a1d      	ldr	r2, [pc, #116]	; (8000480 <MX_GPIO_Init+0x90>)
 800040c:	f043 0302 	orr.w	r3, r3, #2
 8000410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000412:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <MX_GPIO_Init+0x90>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	f003 0302 	and.w	r3, r3, #2
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b18      	ldr	r3, [pc, #96]	; (8000480 <MX_GPIO_Init+0x90>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000422:	4a17      	ldr	r2, [pc, #92]	; (8000480 <MX_GPIO_Init+0x90>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <MX_GPIO_Init+0x90>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	21c3      	movs	r1, #195	; 0xc3
 800043a:	4812      	ldr	r0, [pc, #72]	; (8000484 <MX_GPIO_Init+0x94>)
 800043c:	f000 fece 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin NRF_CS_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin;
 8000440:	23c3      	movs	r3, #195	; 0xc3
 8000442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000444:	2301      	movs	r3, #1
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000450:	f107 030c 	add.w	r3, r7, #12
 8000454:	4619      	mov	r1, r3
 8000456:	480b      	ldr	r0, [pc, #44]	; (8000484 <MX_GPIO_Init+0x94>)
 8000458:	f000 fd56 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800045c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	4619      	mov	r1, r3
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f000 fd48 	bl	8000f08 <HAL_GPIO_Init>

}
 8000478:	bf00      	nop
 800047a:	3720      	adds	r7, #32
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40021000 	.word	0x40021000
 8000484:	48000400 	.word	0x48000400

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <Error_Handler+0x8>
	...

08000494 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_6


void CS_Select (void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2140      	movs	r1, #64	; 0x40
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <CS_Select+0x14>)
 800049e:	f000 fe9d 	bl	80011dc <HAL_GPIO_WritePin>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	48000400 	.word	0x48000400

080004ac <CS_UnSelect>:

void CS_UnSelect (void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2140      	movs	r1, #64	; 0x40
 80004b4:	4802      	ldr	r0, [pc, #8]	; (80004c0 <CS_UnSelect+0x14>)
 80004b6:	f000 fe91 	bl	80011dc <HAL_GPIO_WritePin>
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	48000400 	.word	0x48000400

080004c4 <CE_Enable>:


void CE_Enable (void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2180      	movs	r1, #128	; 0x80
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <CE_Enable+0x14>)
 80004ce:	f000 fe85 	bl	80011dc <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	48000400 	.word	0x48000400

080004dc <CE_Disable>:

void CE_Disable (void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <CE_Disable+0x14>)
 80004e6:	f000 fe79 	bl	80011dc <HAL_GPIO_WritePin>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	48000400 	.word	0x48000400

080004f4 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	f043 0320 	orr.w	r3, r3, #32
 800050a:	b2db      	uxtb	r3, r3
 800050c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800050e:	79bb      	ldrb	r3, [r7, #6]
 8000510:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000512:	f7ff ffbf 	bl	8000494 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000516:	f107 010c 	add.w	r1, r7, #12
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	2202      	movs	r2, #2
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <nrf24_WriteReg+0x40>)
 8000522:	f003 fc1c 	bl	8003d5e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000526:	f7ff ffc1 	bl	80004ac <CS_UnSelect>
}
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000230 	.word	0x20000230

08000538 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	f043 0320 	orr.w	r3, r3, #32
 800054c:	b2db      	uxtb	r3, r3
 800054e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000550:	f7ff ffa0 	bl	8000494 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000554:	f107 0114 	add.w	r1, r7, #20
 8000558:	2364      	movs	r3, #100	; 0x64
 800055a:	2201      	movs	r2, #1
 800055c:	4808      	ldr	r0, [pc, #32]	; (8000580 <nrf24_WriteRegMulti+0x48>)
 800055e:	f003 fbfe 	bl	8003d5e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	b29a      	uxth	r2, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	68b9      	ldr	r1, [r7, #8]
 800056c:	4804      	ldr	r0, [pc, #16]	; (8000580 <nrf24_WriteRegMulti+0x48>)
 800056e:	f003 fbf6 	bl	8003d5e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000572:	f7ff ff9b 	bl	80004ac <CS_UnSelect>
}
 8000576:	bf00      	nop
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000230 	.word	0x20000230

08000584 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800058e:	2300      	movs	r3, #0
 8000590:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000592:	f7ff ff7f 	bl	8000494 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000596:	1df9      	adds	r1, r7, #7
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	2201      	movs	r2, #1
 800059c:	4808      	ldr	r0, [pc, #32]	; (80005c0 <nrf24_ReadReg+0x3c>)
 800059e:	f003 fbde 	bl	8003d5e <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80005a2:	f107 010f 	add.w	r1, r7, #15
 80005a6:	2364      	movs	r3, #100	; 0x64
 80005a8:	2201      	movs	r2, #1
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <nrf24_ReadReg+0x3c>)
 80005ac:	f003 fd45 	bl	800403a <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005b0:	f7ff ff7c 	bl	80004ac <CS_UnSelect>

	return data;
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000230 	.word	0x20000230

080005c4 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005d2:	f7ff ff5f 	bl	8000494 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80005d6:	f107 010f 	add.w	r1, r7, #15
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	2201      	movs	r2, #1
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <nrf24_ReadReg_Multi+0x3c>)
 80005e0:	f003 fbbd 	bl	8003d5e <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ec:	68b9      	ldr	r1, [r7, #8]
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <nrf24_ReadReg_Multi+0x3c>)
 80005f0:	f003 fd23 	bl	800403a <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005f4:	f7ff ff5a 	bl	80004ac <CS_UnSelect>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000230 	.word	0x20000230

08000604 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800060e:	f7ff ff41 	bl	8000494 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000612:	1df9      	adds	r1, r7, #7
 8000614:	2364      	movs	r3, #100	; 0x64
 8000616:	2201      	movs	r2, #1
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <nrfsendCmd+0x28>)
 800061a:	f003 fba0 	bl	8003d5e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800061e:	f7ff ff45 	bl	80004ac <CS_UnSelect>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000230 	.word	0x20000230

08000630 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b07      	cmp	r3, #7
 800063e:	d104      	bne.n	800064a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000640:	2100      	movs	r1, #0
 8000642:	2007      	movs	r0, #7
 8000644:	f7ff ff56 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000648:	e090      	b.n	800076c <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b17      	cmp	r3, #23
 800064e:	d104      	bne.n	800065a <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000650:	2111      	movs	r1, #17
 8000652:	2017      	movs	r0, #23
 8000654:	f7ff ff4e 	bl	80004f4 <nrf24_WriteReg>
}
 8000658:	e088      	b.n	800076c <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800065a:	2108      	movs	r1, #8
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff ff49 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000662:	213f      	movs	r1, #63	; 0x3f
 8000664:	2001      	movs	r0, #1
 8000666:	f7ff ff45 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800066a:	2103      	movs	r1, #3
 800066c:	2002      	movs	r0, #2
 800066e:	f7ff ff41 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000672:	2103      	movs	r1, #3
 8000674:	2003      	movs	r0, #3
 8000676:	f7ff ff3d 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800067a:	2103      	movs	r1, #3
 800067c:	2004      	movs	r0, #4
 800067e:	f7ff ff39 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000682:	2102      	movs	r1, #2
 8000684:	2005      	movs	r0, #5
 8000686:	f7ff ff35 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800068a:	210e      	movs	r1, #14
 800068c:	2006      	movs	r0, #6
 800068e:	f7ff ff31 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000692:	2100      	movs	r1, #0
 8000694:	2007      	movs	r0, #7
 8000696:	f7ff ff2d 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800069a:	2100      	movs	r1, #0
 800069c:	2008      	movs	r0, #8
 800069e:	f7ff ff29 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80006a2:	2100      	movs	r1, #0
 80006a4:	2009      	movs	r0, #9
 80006a6:	f7ff ff25 	bl	80004f4 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006aa:	4a32      	ldr	r2, [pc, #200]	; (8000774 <nrf24_reset+0x144>)
 80006ac:	f107 0318 	add.w	r3, r7, #24
 80006b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b4:	6018      	str	r0, [r3, #0]
 80006b6:	3304      	adds	r3, #4
 80006b8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	2205      	movs	r2, #5
 80006c0:	4619      	mov	r1, r3
 80006c2:	200a      	movs	r0, #10
 80006c4:	f7ff ff38 	bl	8000538 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80006c8:	4a2b      	ldr	r2, [pc, #172]	; (8000778 <nrf24_reset+0x148>)
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d2:	6018      	str	r0, [r3, #0]
 80006d4:	3304      	adds	r3, #4
 80006d6:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	2205      	movs	r2, #5
 80006de:	4619      	mov	r1, r3
 80006e0:	200b      	movs	r0, #11
 80006e2:	f7ff ff29 	bl	8000538 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80006e6:	21c3      	movs	r1, #195	; 0xc3
 80006e8:	200c      	movs	r0, #12
 80006ea:	f7ff ff03 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80006ee:	21c4      	movs	r1, #196	; 0xc4
 80006f0:	200d      	movs	r0, #13
 80006f2:	f7ff feff 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80006f6:	21c5      	movs	r1, #197	; 0xc5
 80006f8:	200e      	movs	r0, #14
 80006fa:	f7ff fefb 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80006fe:	21c6      	movs	r1, #198	; 0xc6
 8000700:	200f      	movs	r0, #15
 8000702:	f7ff fef7 	bl	80004f4 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000706:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <nrf24_reset+0x144>)
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000710:	6018      	str	r0, [r3, #0]
 8000712:	3304      	adds	r3, #4
 8000714:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	2205      	movs	r2, #5
 800071c:	4619      	mov	r1, r3
 800071e:	2010      	movs	r0, #16
 8000720:	f7ff ff0a 	bl	8000538 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000724:	2100      	movs	r1, #0
 8000726:	2011      	movs	r0, #17
 8000728:	f7ff fee4 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800072c:	2100      	movs	r1, #0
 800072e:	2012      	movs	r0, #18
 8000730:	f7ff fee0 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000734:	2100      	movs	r1, #0
 8000736:	2013      	movs	r0, #19
 8000738:	f7ff fedc 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800073c:	2100      	movs	r1, #0
 800073e:	2014      	movs	r0, #20
 8000740:	f7ff fed8 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000744:	2100      	movs	r1, #0
 8000746:	2015      	movs	r0, #21
 8000748:	f7ff fed4 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800074c:	2100      	movs	r1, #0
 800074e:	2016      	movs	r0, #22
 8000750:	f7ff fed0 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000754:	2111      	movs	r1, #17
 8000756:	2017      	movs	r0, #23
 8000758:	f7ff fecc 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 800075c:	2100      	movs	r1, #0
 800075e:	201c      	movs	r0, #28
 8000760:	f7ff fec8 	bl	80004f4 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000764:	2100      	movs	r1, #0
 8000766:	201d      	movs	r0, #29
 8000768:	f7ff fec4 	bl	80004f4 <nrf24_WriteReg>
}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	0800915c 	.word	0x0800915c
 8000778:	08009164 	.word	0x08009164

0800077c <NRF24_Init>:




void NRF24_Init (void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000780:	f7ff feac 	bl	80004dc <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff ff53 	bl	8000630 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800078a:	2100      	movs	r1, #0
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff feb1 	bl	80004f4 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000792:	2100      	movs	r1, #0
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff fead 	bl	80004f4 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800079a:	2100      	movs	r1, #0
 800079c:	2002      	movs	r0, #2
 800079e:	f7ff fea9 	bl	80004f4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80007a2:	2103      	movs	r1, #3
 80007a4:	2003      	movs	r0, #3
 80007a6:	f7ff fea5 	bl	80004f4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80007aa:	2100      	movs	r1, #0
 80007ac:	2004      	movs	r0, #4
 80007ae:	f7ff fea1 	bl	80004f4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80007b2:	2100      	movs	r1, #0
 80007b4:	2005      	movs	r0, #5
 80007b6:	f7ff fe9d 	bl	80004f4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 80007ba:	210e      	movs	r1, #14
 80007bc:	2006      	movs	r0, #6
 80007be:	f7ff fe99 	bl	80004f4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80007c2:	f7ff fe7f 	bl	80004c4 <CE_Enable>

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}

080007ca <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b084      	sub	sp, #16
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	460b      	mov	r3, r1
 80007d4:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80007d6:	f7ff fe81 	bl	80004dc <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	4619      	mov	r1, r3
 80007de:	2005      	movs	r0, #5
 80007e0:	f7ff fe88 	bl	80004f4 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 80007e4:	2205      	movs	r2, #5
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	2010      	movs	r0, #16
 80007ea:	f7ff fea5 	bl	8000538 <nrf24_WriteRegMulti>


	// power up the device
	//uint8_t config = nrf24_ReadReg(CONFIG);
	//	config = config | (1<<1);   // write 1 in the PWR_UP bit
	uint8_t config = (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 80007ee:	23f2      	movs	r3, #242	; 0xf2
 80007f0:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (CONFIG, config);
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	4619      	mov	r1, r3
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff fe7c 	bl	80004f4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80007fc:	f7ff fe62 	bl	80004c4 <CE_Enable>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 8000814:	f7ff fe3e 	bl	8000494 <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 8000818:	23a0      	movs	r3, #160	; 0xa0
 800081a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 800081c:	f107 010e 	add.w	r1, r7, #14
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	2201      	movs	r2, #1
 8000824:	4816      	ldr	r0, [pc, #88]	; (8000880 <NRF24_Transmit+0x78>)
 8000826:	f003 fa9a 	bl	8003d5e <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	2220      	movs	r2, #32
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	4813      	ldr	r0, [pc, #76]	; (8000880 <NRF24_Transmit+0x78>)
 8000834:	f003 fa93 	bl	8003d5e <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 8000838:	f7ff fe38 	bl	80004ac <CS_UnSelect>

	HAL_Delay(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f000 fa2d 	bl	8000c9c <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 8000842:	2017      	movs	r0, #23
 8000844:	f7ff fe9e 	bl	8000584 <nrf24_ReadReg>
 8000848:	4603      	mov	r3, r0
 800084a:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	f003 0310 	and.w	r3, r3, #16
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00f      	beq.n	8000876 <NRF24_Transmit+0x6e>
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10a      	bne.n	8000876 <NRF24_Transmit+0x6e>
	{
		cmdtosend = FLUSH_TX;
 8000860:	23e1      	movs	r3, #225	; 0xe1
 8000862:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 8000864:	7bbb      	ldrb	r3, [r7, #14]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fecc 	bl	8000604 <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 800086c:	2017      	movs	r0, #23
 800086e:	f7ff fedf 	bl	8000630 <nrf24_reset>

		return 1;
 8000872:	2301      	movs	r3, #1
 8000874:	e000      	b.n	8000878 <NRF24_Transmit+0x70>
	}

	return 0;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000230 	.word	0x20000230

08000884 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e00c      	b.n	80008ac <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	b2d9      	uxtb	r1, r3
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	18d4      	adds	r4, r2, r3
 800089c:	4608      	mov	r0, r1
 800089e:	f7ff fe71 	bl	8000584 <nrf24_ReadReg>
 80008a2:	4603      	mov	r3, r0
 80008a4:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	3301      	adds	r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b09      	cmp	r3, #9
 80008b0:	ddef      	ble.n	8000892 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	330a      	adds	r3, #10
 80008b6:	2205      	movs	r2, #5
 80008b8:	4619      	mov	r1, r3
 80008ba:	200a      	movs	r0, #10
 80008bc:	f7ff fe82 	bl	80005c4 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	330f      	adds	r3, #15
 80008c4:	2205      	movs	r2, #5
 80008c6:	4619      	mov	r1, r3
 80008c8:	200b      	movs	r0, #11
 80008ca:	f7ff fe7b 	bl	80005c4 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f103 0414 	add.w	r4, r3, #20
 80008d4:	200c      	movs	r0, #12
 80008d6:	f7ff fe55 	bl	8000584 <nrf24_ReadReg>
 80008da:	4603      	mov	r3, r0
 80008dc:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f103 0415 	add.w	r4, r3, #21
 80008e4:	200d      	movs	r0, #13
 80008e6:	f7ff fe4d 	bl	8000584 <nrf24_ReadReg>
 80008ea:	4603      	mov	r3, r0
 80008ec:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f103 0416 	add.w	r4, r3, #22
 80008f4:	200e      	movs	r0, #14
 80008f6:	f7ff fe45 	bl	8000584 <nrf24_ReadReg>
 80008fa:	4603      	mov	r3, r0
 80008fc:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f103 0417 	add.w	r4, r3, #23
 8000904:	200f      	movs	r0, #15
 8000906:	f7ff fe3d 	bl	8000584 <nrf24_ReadReg>
 800090a:	4603      	mov	r3, r0
 800090c:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3318      	adds	r3, #24
 8000912:	2205      	movs	r2, #5
 8000914:	4619      	mov	r1, r3
 8000916:	200a      	movs	r0, #10
 8000918:	f7ff fe54 	bl	80005c4 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 800091c:	231d      	movs	r3, #29
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	e00e      	b.n	8000940 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	3b0c      	subs	r3, #12
 8000928:	b2d9      	uxtb	r1, r3
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	18d4      	adds	r4, r2, r3
 8000930:	4608      	mov	r0, r1
 8000932:	f7ff fe27 	bl	8000584 <nrf24_ReadReg>
 8000936:	4603      	mov	r3, r0
 8000938:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	3301      	adds	r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	2b25      	cmp	r3, #37	; 0x25
 8000944:	dded      	ble.n	8000922 <NRF24_ReadAll+0x9e>
	}

}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bd90      	pop	{r4, r7, pc}

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_MspInit+0x44>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <HAL_MspInit+0x44>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6613      	str	r3, [r2, #96]	; 0x60
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x44>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x44>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6593      	str	r3, [r2, #88]	; 0x58
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <HAL_SPI_MspInit+0x7c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d127      	bne.n	8000a0a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <HAL_SPI_MspInit+0x80>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <HAL_SPI_MspInit+0x80>)
 80009c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c4:	6593      	str	r3, [r2, #88]	; 0x58
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <HAL_SPI_MspInit+0x80>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_SPI_MspInit+0x80>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <HAL_SPI_MspInit+0x80>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_SPI_MspInit+0x80>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009ea:	2338      	movs	r3, #56	; 0x38
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009fa:	2306      	movs	r3, #6
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <HAL_SPI_MspInit+0x84>)
 8000a06:	f000 fa7f 	bl	8000f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40003c00 	.word	0x40003c00
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000400 	.word	0x48000400

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f8f6 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <USB_IRQHandler+0x10>)
 8000a7a:	f000 fd15 	bl	80014a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000fb8 	.word	0x20000fb8

08000a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a90:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <_sbrk+0x5c>)
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <_sbrk+0x60>)
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <_sbrk+0x64>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <_sbrk+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d207      	bcs.n	8000ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab8:	f008 fa3a 	bl	8008f30 <__errno>
 8000abc:	4603      	mov	r3, r0
 8000abe:	220c      	movs	r2, #12
 8000ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ac6:	e009      	b.n	8000adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <_sbrk+0x64>)
 8000ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20010000 	.word	0x20010000
 8000ae8:	00000800 	.word	0x00000800
 8000aec:	20000220 	.word	0x20000220
 8000af0:	200012c0 	.word	0x200012c0

08000af4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <SystemInit+0x64>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <SystemInit+0x64>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <SystemInit+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <SystemInit+0x68>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <SystemInit+0x68>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <SystemInit+0x68>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <SystemInit+0x68>)
 8000b20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <SystemInit+0x68>)
 8000b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <SystemInit+0x68>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <SystemInit+0x68>)
 8000b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <SystemInit+0x68>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SystemInit+0x64>)
 8000b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	40021000 	.word	0x40021000

08000b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b64:	f7ff ffc6 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b6a:	e003      	b.n	8000b74 <LoopCopyDataInit>

08000b6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b72:	3104      	adds	r1, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b74:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b7c:	d3f6      	bcc.n	8000b6c <CopyDataInit>
	ldr	r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b80:	e002      	b.n	8000b88 <LoopFillZerobss>

08000b82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b84:	f842 3b04 	str.w	r3, [r2], #4

08000b88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <LoopForever+0x16>)
	cmp	r2, r3
 8000b8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b8c:	d3f9      	bcc.n	8000b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f008 f9d5 	bl	8008f3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b92:	f7ff fb23 	bl	80001dc <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b98:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000b9c:	080091fc 	.word	0x080091fc
	ldr	r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ba4:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 8000ba8:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 8000bac:	200012bc 	.word	0x200012bc

08000bb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_IRQHandler>

08000bb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 f961 	bl	8000e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 f80e 	bl	8000be4 <HAL_InitTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	e001      	b.n	8000bd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd4:	f7ff febc 	bl	8000950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_InitTick+0x6c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d023      	beq.n	8000c40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_InitTick+0x70>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_InitTick+0x6c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f96d 	bl	8000eee <HAL_SYSTICK_Config>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10f      	bne.n	8000c3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d809      	bhi.n	8000c34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	f000 f937 	bl	8000e9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_InitTick+0x74>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e007      	b.n	8000c44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e004      	b.n	8000c44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
 8000c3e:	e001      	b.n	8000c44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000018 	.word	0x20000018
 8000c54:	20000010 	.word	0x20000010
 8000c58:	20000014 	.word	0x20000014

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000018 	.word	0x20000018
 8000c80:	20000314 	.word	0x20000314

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000314 	.word	0x20000314

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff ffee 	bl	8000c84 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_Delay+0x44>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff ffde 	bl	8000c84 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000018 	.word	0x20000018

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4907      	ldr	r1, [pc, #28]	; (8000d80 <__NVIC_EnableIRQ+0x38>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e50:	d301      	bcc.n	8000e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00f      	b.n	8000e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <SysTick_Config+0x40>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5e:	210f      	movs	r1, #15
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e64:	f7ff ff8e 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <SysTick_Config+0x40>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <SysTick_Config+0x40>)
 8000e70:	2207      	movs	r2, #7
 8000e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	e000e010 	.word	0xe000e010

08000e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff29 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff3e 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff8e 	bl	8000dd8 <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5d 	bl	8000d84 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff31 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffa2 	bl	8000e40 <SysTick_Config>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f16:	e148      	b.n	80011aa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 813a 	beq.w	80011a4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d00b      	beq.n	8000f50 <HAL_GPIO_Init+0x48>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d007      	beq.n	8000f50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f44:	2b11      	cmp	r3, #17
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b12      	cmp	r3, #18
 8000f4e:	d130      	bne.n	8000fb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f86:	2201      	movs	r2, #1
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	091b      	lsrs	r3, r3, #4
 8000f9c:	f003 0201 	and.w	r2, r3, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0xea>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b12      	cmp	r3, #18
 8000ff0:	d123      	bne.n	800103a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3208      	adds	r2, #8
 8000ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	220f      	movs	r2, #15
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	6939      	ldr	r1, [r7, #16]
 8001036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0203 	and.w	r2, r3, #3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8094 	beq.w	80011a4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107c:	4b52      	ldr	r3, [pc, #328]	; (80011c8 <HAL_GPIO_Init+0x2c0>)
 800107e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001080:	4a51      	ldr	r2, [pc, #324]	; (80011c8 <HAL_GPIO_Init+0x2c0>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6613      	str	r3, [r2, #96]	; 0x60
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <HAL_GPIO_Init+0x2c0>)
 800108a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001094:	4a4d      	ldr	r2, [pc, #308]	; (80011cc <HAL_GPIO_Init+0x2c4>)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	089b      	lsrs	r3, r3, #2
 800109a:	3302      	adds	r3, #2
 800109c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	220f      	movs	r2, #15
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010be:	d00d      	beq.n	80010dc <HAL_GPIO_Init+0x1d4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a43      	ldr	r2, [pc, #268]	; (80011d0 <HAL_GPIO_Init+0x2c8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d007      	beq.n	80010d8 <HAL_GPIO_Init+0x1d0>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a42      	ldr	r2, [pc, #264]	; (80011d4 <HAL_GPIO_Init+0x2cc>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d101      	bne.n	80010d4 <HAL_GPIO_Init+0x1cc>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e004      	b.n	80010de <HAL_GPIO_Init+0x1d6>
 80010d4:	2307      	movs	r3, #7
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x1d6>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <HAL_GPIO_Init+0x1d6>
 80010dc:	2300      	movs	r3, #0
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	f002 0203 	and.w	r2, r2, #3
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	4093      	lsls	r3, r2
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ee:	4937      	ldr	r1, [pc, #220]	; (80011cc <HAL_GPIO_Init+0x2c4>)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010fc:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001120:	4a2d      	ldr	r2, [pc, #180]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800114a:	4a23      	ldr	r2, [pc, #140]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001150:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001174:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3301      	adds	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	fa22 f303 	lsr.w	r3, r2, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f47f aeaf 	bne.w	8000f18 <HAL_GPIO_Init+0x10>
  }
}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010000 	.word	0x40010000
 80011d0:	48000400 	.word	0x48000400
 80011d4:	48000800 	.word	0x48000800
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4013      	ands	r3, r2
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43d9      	mvns	r1, r3
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	400b      	ands	r3, r1
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	b08b      	sub	sp, #44	; 0x2c
 8001244:	af06      	add	r7, sp, #24
 8001246:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e104      	b.n	800145c <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d106      	bne.n	800126c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f007 fafa 	bl	8008860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2203      	movs	r2, #3
 8001270:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fbfd 	bl	8004a78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	687e      	ldr	r6, [r7, #4]
 8001286:	466d      	mov	r5, sp
 8001288:	f106 0410 	add.w	r4, r6, #16
 800128c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	602b      	str	r3, [r5, #0]
 8001294:	1d33      	adds	r3, r6, #4
 8001296:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001298:	6838      	ldr	r0, [r7, #0]
 800129a:	f003 fbc5 	bl	8004a28 <USB_CoreInit>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2202      	movs	r2, #2
 80012a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0d5      	b.n	800145c <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 fbf9 	bl	8004aae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e04c      	b.n	800135c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	3301      	adds	r3, #1
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	440b      	add	r3, r1
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	b298      	uxth	r0, r3
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	440b      	add	r3, r1
 80012fe:	3336      	adds	r3, #54	; 0x36
 8001300:	4602      	mov	r2, r0
 8001302:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	440b      	add	r3, r1
 8001314:	3303      	adds	r3, #3
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	3338      	adds	r3, #56	; 0x38
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	440b      	add	r3, r1
 800133c:	333c      	adds	r3, #60	; 0x3c
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	440b      	add	r3, r1
 8001350:	3340      	adds	r3, #64	; 0x40
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	3301      	adds	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	d3ad      	bcc.n	80012c2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e044      	b.n	80013f6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	440b      	add	r3, r1
 8001390:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	440b      	add	r3, r1
 80013bc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	3301      	adds	r3, #1
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d3b5      	bcc.n	800136c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	687e      	ldr	r6, [r7, #4]
 8001408:	466d      	mov	r5, sp
 800140a:	f106 0410 	add.w	r4, r6, #16
 800140e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	602b      	str	r3, [r5, #0]
 8001416:	1d33      	adds	r3, r6, #4
 8001418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141a:	6838      	ldr	r0, [r7, #0]
 800141c:	f003 fb54 	bl	8004ac8 <USB_DevInit>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2202      	movs	r2, #2
 800142a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e014      	b.n	800145c <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d102      	bne.n	8001450 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f001 fa71 	bl	8002932 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f005 fb0d 	bl	8006a74 <USB_DevDisconnect>

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001464 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_PCD_Start+0x16>
 8001476:	2302      	movs	r3, #2
 8001478:	e012      	b.n	80014a0 <HAL_PCD_Start+0x3c>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fadf 	bl	8004a4a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f005 fad8 	bl	8006a46 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f005 faf2 	bl	8006a9e <USB_ReadInterrupts>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014c4:	d102      	bne.n	80014cc <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 fb5b 	bl	8001b82 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 fae4 	bl	8006a9e <USB_ReadInterrupts>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e0:	d112      	bne.n	8001508 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014f4:	b292      	uxth	r2, r2
 80014f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f007 fa2b 	bl	8008956 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001500:	2100      	movs	r1, #0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f91e 	bl	8001744 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f005 fac6 	bl	8006a9e <USB_ReadInterrupts>
 8001512:	4603      	mov	r3, r0
 8001514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800151c:	d10b      	bne.n	8001536 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001526:	b29a      	uxth	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001530:	b292      	uxth	r2, r2
 8001532:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f005 faaf 	bl	8006a9e <USB_ReadInterrupts>
 8001540:	4603      	mov	r3, r0
 8001542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800154a:	d10b      	bne.n	8001564 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001554:	b29a      	uxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800155e:	b292      	uxth	r2, r2
 8001560:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f005 fa98 	bl	8006a9e <USB_ReadInterrupts>
 800156e:	4603      	mov	r3, r0
 8001570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001578:	d133      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001582:	b29a      	uxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0204 	bic.w	r2, r2, #4
 800158c:	b292      	uxth	r2, r2
 800158e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0208 	bic.w	r2, r2, #8
 80015a4:	b292      	uxth	r2, r2
 80015a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d107      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015bc:	2100      	movs	r1, #0
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f007 fc7a 	bl	8008eb8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f007 f9ff 	bl	80089c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015dc:	b292      	uxth	r2, r2
 80015de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f005 fa59 	bl	8006a9e <USB_ReadInterrupts>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015f6:	d126      	bne.n	8001646 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001600:	b29a      	uxth	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0208 	orr.w	r2, r2, #8
 800160a:	b292      	uxth	r2, r2
 800160c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001618:	b29a      	uxth	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001622:	b292      	uxth	r2, r2
 8001624:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001630:	b29a      	uxth	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0204 	orr.w	r2, r2, #4
 800163a:	b292      	uxth	r2, r2
 800163c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f007 f9a7 	bl	8008994 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f005 fa27 	bl	8006a9e <USB_ReadInterrupts>
 8001650:	4603      	mov	r3, r0
 8001652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001656:	2b80      	cmp	r3, #128	; 0x80
 8001658:	d13f      	bne.n	80016da <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001662:	b29a      	uxth	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800166c:	b292      	uxth	r2, r2
 800166e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d12b      	bne.n	80016d4 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001684:	b29a      	uxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0204 	orr.w	r2, r2, #4
 800168e:	b292      	uxth	r2, r2
 8001690:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800169c:	b29a      	uxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0208 	orr.w	r2, r2, #8
 80016a6:	b292      	uxth	r2, r2
 80016a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80016bc:	b29b      	uxth	r3, r3
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80016ca:	2101      	movs	r1, #1
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f007 fbf3 	bl	8008eb8 <HAL_PCDEx_LPM_Callback>
 80016d2:	e002      	b.n	80016da <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f007 f95d 	bl	8008994 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f005 f9dd 	bl	8006a9e <USB_ReadInterrupts>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ee:	d10e      	bne.n	800170e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001702:	b292      	uxth	r2, r2
 8001704:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f007 f916 	bl	800893a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f005 f9c3 	bl	8006a9e <USB_ReadInterrupts>
 8001718:	4603      	mov	r3, r0
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001722:	d10b      	bne.n	800173c <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800172c:	b29a      	uxth	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001736:	b292      	uxth	r2, r2
 8001738:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_PCD_SetAddress+0x1a>
 800175a:	2302      	movs	r3, #2
 800175c:	e013      	b.n	8001786 <HAL_PCD_SetAddress+0x42>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f005 f951 	bl	8006a1e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	4608      	mov	r0, r1
 8001798:	4611      	mov	r1, r2
 800179a:	461a      	mov	r2, r3
 800179c:	4603      	mov	r3, r0
 800179e:	70fb      	strb	r3, [r7, #3]
 80017a0:	460b      	mov	r3, r1
 80017a2:	803b      	strh	r3, [r7, #0]
 80017a4:	4613      	mov	r3, r2
 80017a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da0e      	bge.n	80017d2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2201      	movs	r2, #1
 80017ce:	705a      	strb	r2, [r3, #1]
 80017d0:	e00e      	b.n	80017f0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	f003 0207 	and.w	r2, r3, #7
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80017fc:	883a      	ldrh	r2, [r7, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	78ba      	ldrb	r2, [r7, #2]
 8001806:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	785b      	ldrb	r3, [r3, #1]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800181a:	78bb      	ldrb	r3, [r7, #2]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d102      	bne.n	8001826 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_PCD_EP_Open+0xa6>
 8001830:	2302      	movs	r3, #2
 8001832:	e00e      	b.n	8001852 <HAL_PCD_EP_Open+0xc4>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	4618      	mov	r0, r3
 8001844:	f003 f962 	bl	8004b0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001850:	7afb      	ldrb	r3, [r7, #11]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800186a:	2b00      	cmp	r3, #0
 800186c:	da0e      	bge.n	800188c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	705a      	strb	r2, [r3, #1]
 800188a:	e00e      	b.n	80018aa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	f003 0207 	and.w	r2, r3, #7
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_PCD_EP_Close+0x6a>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e00e      	b.n	80018e2 <HAL_PCD_EP_Close+0x88>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68f9      	ldr	r1, [r7, #12]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 fc88 	bl	80051e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	460b      	mov	r3, r1
 80018f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018fa:	7afb      	ldrb	r3, [r7, #11]
 80018fc:	f003 0207 	and.w	r2, r3, #7
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2200      	movs	r2, #0
 8001922:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2200      	movs	r2, #0
 8001928:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800192a:	7afb      	ldrb	r3, [r7, #11]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	b2da      	uxtb	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001936:	7afb      	ldrb	r3, [r7, #11]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	2b00      	cmp	r3, #0
 800193e:	d106      	bne.n	800194e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6979      	ldr	r1, [r7, #20]
 8001946:	4618      	mov	r0, r3
 8001948:	f003 fe3b 	bl	80055c2 <USB_EPStartXfer>
 800194c:	e005      	b.n	800195a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6979      	ldr	r1, [r7, #20]
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fe34 	bl	80055c2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	f003 0207 	and.w	r2, r3, #7
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	460b      	mov	r3, r1
 80019a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2201      	movs	r2, #1
 80019de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019e0:	7afb      	ldrb	r3, [r7, #11]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019ec:	7afb      	ldrb	r3, [r7, #11]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6979      	ldr	r1, [r7, #20]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 fde0 	bl	80055c2 <USB_EPStartXfer>
 8001a02:	e005      	b.n	8001a10 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6979      	ldr	r1, [r7, #20]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 fdd9 	bl	80055c2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	f003 0207 	and.w	r2, r3, #7
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d901      	bls.n	8001a38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e04c      	b.n	8001ad2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	da0e      	bge.n	8001a5e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	705a      	strb	r2, [r3, #1]
 8001a5c:	e00c      	b.n	8001a78 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a5e:	78fa      	ldrb	r2, [r7, #3]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_PCD_EP_SetStall+0x7e>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e01c      	b.n	8001ad2 <HAL_PCD_EP_SetStall+0xb8>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68f9      	ldr	r1, [r7, #12]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f004 feba 	bl	8006820 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d108      	bne.n	8001ac8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	f004 fffb 	bl	8006abe <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	f003 020f 	and.w	r2, r3, #15
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d901      	bls.n	8001af8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e040      	b.n	8001b7a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	da0e      	bge.n	8001b1e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	705a      	strb	r2, [r3, #1]
 8001b1c:	e00e      	b.n	8001b3c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 0207 	and.w	r2, r3, #7
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_PCD_EP_ClrStall+0x82>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e00e      	b.n	8001b7a <HAL_PCD_EP_ClrStall+0xa0>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f004 fea9 	bl	80068c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b08e      	sub	sp, #56	; 0x38
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b8a:	e2d1      	b.n	8002130 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b94:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001ba2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 8152 	bne.w	8001e50 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d150      	bne.n	8001c58 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc6:	81fb      	strh	r3, [r7, #14]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	89fb      	ldrh	r3, [r7, #14]
 8001bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3328      	adds	r3, #40	; 0x28
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	441a      	add	r2, r3
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c16:	2100      	movs	r1, #0
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f006 fe74 	bl	8008906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8282 	beq.w	8002130 <PCD_EP_ISR_Handler+0x5ae>
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 827d 	bne.w	8002130 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b292      	uxth	r2, r2
 8001c4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c56:	e26b      	b.n	8002130 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d032      	beq.n	8001cd8 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f004 ff54 	bl	8006b5a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	823b      	strh	r3, [r7, #16]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	8a3a      	ldrh	r2, [r7, #16]
 8001cc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ccc:	b292      	uxth	r2, r2
 8001cce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f006 fdeb 	bl	80088ac <HAL_PCD_SetupStageCallback>
 8001cd6:	e22b      	b.n	8002130 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cd8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f280 8227 	bge.w	8002130 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cee:	4013      	ands	r3, r2
 8001cf0:	83bb      	strh	r3, [r7, #28]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	8bba      	ldrh	r2, [r7, #28]
 8001cf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cfc:	b292      	uxth	r2, r2
 8001cfe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d019      	beq.n	8001d64 <PCD_EP_ISR_Handler+0x1e2>
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d015      	beq.n	8001d64 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	6959      	ldr	r1, [r3, #20]
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	f004 ff06 	bl	8006b5a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	441a      	add	r2, r3
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f006 fdb6 	bl	80088d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4413      	add	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d112      	bne.n	8001db2 <PCD_EP_ISR_Handler+0x230>
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	801a      	strh	r2, [r3, #0]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	e02f      	b.n	8001e12 <PCD_EP_ISR_Handler+0x290>
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b3e      	cmp	r3, #62	; 0x3e
 8001db8:	d813      	bhi.n	8001de2 <PCD_EP_ISR_Handler+0x260>
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	085b      	lsrs	r3, r3, #1
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <PCD_EP_ISR_Handler+0x252>
 8001dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8001dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	801a      	strh	r2, [r3, #0]
 8001de0:	e017      	b.n	8001e12 <PCD_EP_ISR_Handler+0x290>
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <PCD_EP_ISR_Handler+0x27a>
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	029b      	lsls	r3, r3, #10
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e22:	827b      	strh	r3, [r7, #18]
 8001e24:	8a7b      	ldrh	r3, [r7, #18]
 8001e26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e2a:	827b      	strh	r3, [r7, #18]
 8001e2c:	8a7b      	ldrh	r3, [r7, #18]
 8001e2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e32:	827b      	strh	r3, [r7, #18]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	8a7b      	ldrh	r3, [r7, #18]
 8001e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	8013      	strh	r3, [r2, #0]
 8001e4e:	e16f      	b.n	8002130 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e62:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f280 80e4 	bge.w	8002034 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e82:	4013      	ands	r3, r2
 8001e84:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e9a:	b292      	uxth	r2, r2
 8001e9c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e9e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	7b1b      	ldrb	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d120      	bne.n	8001efe <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001ee2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8083 	beq.w	8001ff0 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	6959      	ldr	r1, [r3, #20]
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	88da      	ldrh	r2, [r3, #6]
 8001ef6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ef8:	f004 fe2f 	bl	8006b5a <USB_ReadPMA>
 8001efc:	e078      	b.n	8001ff0 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	78db      	ldrb	r3, [r3, #3]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d108      	bne.n	8001f18 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f08:	461a      	mov	r2, r3
 8001f0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f91d 	bl	800214c <HAL_PCD_EP_DB_Receive>
 8001f12:	4603      	mov	r3, r0
 8001f14:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f16:	e06b      	b.n	8001ff0 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f32:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	441a      	add	r2, r3
 8001f42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01f      	beq.n	8001fb2 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f96:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d028      	beq.n	8001ff0 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	6959      	ldr	r1, [r3, #20]
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	891a      	ldrh	r2, [r3, #8]
 8001faa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fac:	f004 fdd5 	bl	8006b5a <USB_ReadPMA>
 8001fb0:	e01e      	b.n	8001ff0 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	6959      	ldr	r1, [r3, #20]
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	895a      	ldrh	r2, [r3, #10]
 8001fea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fec:	f004 fdb5 	bl	8006b5a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ff6:	441a      	add	r2, r3
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002002:	441a      	add	r2, r3
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d004      	beq.n	800201a <PCD_EP_ISR_Handler+0x498>
 8002010:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	429a      	cmp	r2, r3
 8002018:	d206      	bcs.n	8002028 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4619      	mov	r1, r3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f006 fc55 	bl	80088d0 <HAL_PCD_DataOutStageCallback>
 8002026:	e005      	b.n	8002034 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fac7 	bl	80055c2 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002034:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	2b00      	cmp	r3, #0
 800203c:	d078      	beq.n	8002130 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 800203e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206c:	843b      	strh	r3, [r7, #32]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	441a      	add	r2, r3
 800207c:	8c3b      	ldrh	r3, [r7, #32]
 800207e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002086:	b29b      	uxth	r3, r3
 8002088:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	78db      	ldrb	r3, [r3, #3]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d108      	bne.n	80020a4 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002096:	2b02      	cmp	r3, #2
 8002098:	d144      	bne.n	8002124 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800209a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d13f      	bne.n	8002124 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	4413      	add	r3, r2
 80020be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	8bfb      	ldrh	r3, [r7, #30]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d906      	bls.n	80020e2 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	699a      	ldr	r2, [r3, #24]
 80020d8:	8bfb      	ldrh	r3, [r7, #30]
 80020da:	1ad2      	subs	r2, r2, r3
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	619a      	str	r2, [r3, #24]
 80020e0:	e002      	b.n	80020e8 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d106      	bne.n	80020fe <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f006 fc05 	bl	8008906 <HAL_PCD_DataInStageCallback>
 80020fc:	e018      	b.n	8002130 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	8bfb      	ldrh	r3, [r7, #30]
 8002104:	441a      	add	r2, r3
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	69da      	ldr	r2, [r3, #28]
 800210e:	8bfb      	ldrh	r3, [r7, #30]
 8002110:	441a      	add	r2, r3
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800211c:	4618      	mov	r0, r3
 800211e:	f003 fa50 	bl	80055c2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002122:	e005      	b.n	8002130 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002124:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002126:	461a      	mov	r2, r3
 8002128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f917 	bl	800235e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002138:	b29b      	uxth	r3, r3
 800213a:	b21b      	sxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	f6ff ad25 	blt.w	8001b8c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3738      	adds	r7, #56	; 0x38
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	4613      	mov	r3, r2
 8002158:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d07c      	beq.n	800225e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216c:	b29b      	uxth	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	4413      	add	r3, r2
 800217e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002188:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	8b7b      	ldrh	r3, [r7, #26]
 8002190:	429a      	cmp	r2, r3
 8002192:	d306      	bcc.n	80021a2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	699a      	ldr	r2, [r3, #24]
 8002198:	8b7b      	ldrh	r3, [r7, #26]
 800219a:	1ad2      	subs	r2, r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	619a      	str	r2, [r3, #24]
 80021a0:	e002      	b.n	80021a8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d123      	bne.n	80021f8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ca:	833b      	strh	r3, [r7, #24]
 80021cc:	8b3b      	ldrh	r3, [r7, #24]
 80021ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021d2:	833b      	strh	r3, [r7, #24]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	441a      	add	r2, r3
 80021e2:	8b3b      	ldrh	r3, [r7, #24]
 80021e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01f      	beq.n	8002242 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221c:	82fb      	strh	r3, [r7, #22]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	441a      	add	r2, r3
 800222c:	8afb      	ldrh	r3, [r7, #22]
 800222e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800223a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800223e:	b29b      	uxth	r3, r3
 8002240:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002242:	8b7b      	ldrh	r3, [r7, #26]
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 8085 	beq.w	8002354 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	6959      	ldr	r1, [r3, #20]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	891a      	ldrh	r2, [r3, #8]
 8002256:	8b7b      	ldrh	r3, [r7, #26]
 8002258:	f004 fc7f 	bl	8006b5a <USB_ReadPMA>
 800225c:	e07a      	b.n	8002354 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	4413      	add	r3, r2
 8002278:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002282:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	8b7b      	ldrh	r3, [r7, #26]
 800228a:	429a      	cmp	r2, r3
 800228c:	d306      	bcc.n	800229c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	8b7b      	ldrh	r3, [r7, #26]
 8002294:	1ad2      	subs	r2, r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	619a      	str	r2, [r3, #24]
 800229a:	e002      	b.n	80022a2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2200      	movs	r2, #0
 80022a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d123      	bne.n	80022f2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c4:	83fb      	strh	r3, [r7, #30]
 80022c6:	8bfb      	ldrh	r3, [r7, #30]
 80022c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022cc:	83fb      	strh	r3, [r7, #30]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	441a      	add	r2, r3
 80022dc:	8bfb      	ldrh	r3, [r7, #30]
 80022de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d11f      	bne.n	800233c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002316:	83bb      	strh	r3, [r7, #28]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	441a      	add	r2, r3
 8002326:	8bbb      	ldrh	r3, [r7, #28]
 8002328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800232c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002334:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002338:	b29b      	uxth	r3, r3
 800233a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800233c:	8b7b      	ldrh	r3, [r7, #26]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	6959      	ldr	r1, [r3, #20]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	895a      	ldrh	r2, [r3, #10]
 800234e:	8b7b      	ldrh	r3, [r7, #26]
 8002350:	f004 fc03 	bl	8006b5a <USB_ReadPMA>
    }
  }

  return count;
 8002354:	8b7b      	ldrh	r3, [r7, #26]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b094      	sub	sp, #80	; 0x50
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	4613      	mov	r3, r2
 800236a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8136 	beq.w	80025e4 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002380:	b29b      	uxth	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	4413      	add	r3, r2
 8002392:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800239c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d907      	bls.n	80023bc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023b4:	1ad2      	subs	r2, r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	619a      	str	r2, [r3, #24]
 80023ba:	e002      	b.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d12c      	bne.n	8002424 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f006 fa98 	bl	8008906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8238 	beq.w	8002852 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fc:	82fb      	strh	r3, [r7, #22]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	441a      	add	r2, r3
 800240c:	8afb      	ldrh	r3, [r7, #22]
 800240e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002416:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800241a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800241e:	b29b      	uxth	r3, r3
 8002420:	8013      	strh	r3, [r2, #0]
 8002422:	e216      	b.n	8002852 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01f      	beq.n	800246e <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002448:	857b      	strh	r3, [r7, #42]	; 0x2a
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	441a      	add	r2, r3
 8002458:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800245a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800245e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800246a:	b29b      	uxth	r3, r3
 800246c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002474:	2b01      	cmp	r3, #1
 8002476:	f040 81ec 	bne.w	8002852 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002482:	441a      	add	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	69da      	ldr	r2, [r3, #28]
 800248c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002490:	441a      	add	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	6a1a      	ldr	r2, [r3, #32]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d309      	bcc.n	80024b6 <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6a1a      	ldr	r2, [r3, #32]
 80024ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ae:	1ad2      	subs	r2, r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	621a      	str	r2, [r3, #32]
 80024b4:	e015      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d107      	bne.n	80024ce <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 80024be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024c2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024cc:	e009      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2200      	movs	r2, #0
 80024e0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	785b      	ldrb	r3, [r3, #1]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d155      	bne.n	8002596 <HAL_PCD_EP_DB_Transmit+0x238>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	00da      	lsls	r2, r3, #3
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	4413      	add	r3, r2
 800250c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002514:	2b00      	cmp	r3, #0
 8002516:	d112      	bne.n	800253e <HAL_PCD_EP_DB_Transmit+0x1e0>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002522:	b29a      	uxth	r2, r3
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	801a      	strh	r2, [r3, #0]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002536:	b29a      	uxth	r2, r3
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	801a      	strh	r2, [r3, #0]
 800253c:	e047      	b.n	80025ce <HAL_PCD_EP_DB_Transmit+0x270>
 800253e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002540:	2b3e      	cmp	r3, #62	; 0x3e
 8002542:	d811      	bhi.n	8002568 <HAL_PCD_EP_DB_Transmit+0x20a>
 8002544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <HAL_PCD_EP_DB_Transmit+0x1fc>
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	3301      	adds	r3, #1
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	b29b      	uxth	r3, r3
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	b29a      	uxth	r2, r3
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	e032      	b.n	80025ce <HAL_PCD_EP_DB_Transmit+0x270>
 8002568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800256e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <HAL_PCD_EP_DB_Transmit+0x220>
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	3b01      	subs	r3, #1
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	b29b      	uxth	r3, r3
 8002582:	029b      	lsls	r3, r3, #10
 8002584:	b29b      	uxth	r3, r3
 8002586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800258a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800258e:	b29a      	uxth	r2, r3
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	801a      	strh	r2, [r3, #0]
 8002594:	e01b      	b.n	80025ce <HAL_PCD_EP_DB_Transmit+0x270>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	785b      	ldrb	r3, [r3, #1]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d117      	bne.n	80025ce <HAL_PCD_EP_DB_Transmit+0x270>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	4413      	add	r3, r2
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	00da      	lsls	r2, r3, #3
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	4413      	add	r3, r2
 80025c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025c4:	623b      	str	r3, [r7, #32]
 80025c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	6959      	ldr	r1, [r3, #20]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	891a      	ldrh	r2, [r3, #8]
 80025da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f004 fa7a 	bl	8006ad6 <USB_WritePMA>
 80025e2:	e136      	b.n	8002852 <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002608:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	699a      	ldr	r2, [r3, #24]
 8002610:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002614:	429a      	cmp	r2, r3
 8002616:	d307      	bcc.n	8002628 <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	699a      	ldr	r2, [r3, #24]
 800261c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002620:	1ad2      	subs	r2, r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	619a      	str	r2, [r3, #24]
 8002626:	e002      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d12e      	bne.n	8002694 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f006 f962 	bl	8008906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f040 8102 	bne.w	8002852 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002668:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800267e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800268a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268e:	b29b      	uxth	r3, r3
 8002690:	8013      	strh	r3, [r2, #0]
 8002692:	e0de      	b.n	8002852 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11f      	bne.n	80026de <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	441a      	add	r2, r3
 80026c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80026ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026da:	b29b      	uxth	r3, r3
 80026dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	f040 80b4 	bne.w	8002852 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026f2:	441a      	add	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002700:	441a      	add	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	6a1a      	ldr	r2, [r3, #32]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	429a      	cmp	r2, r3
 8002710:	d309      	bcc.n	8002726 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800271e:	1ad2      	subs	r2, r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	621a      	str	r2, [r3, #32]
 8002724:	e015      	b.n	8002752 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 800272e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002732:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800273c:	e009      	b.n	8002752 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	643b      	str	r3, [r7, #64]	; 0x40
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	785b      	ldrb	r3, [r3, #1]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d155      	bne.n	800280c <HAL_PCD_EP_DB_Transmit+0x4ae>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	63bb      	str	r3, [r7, #56]	; 0x38
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276e:	b29b      	uxth	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002774:	4413      	add	r3, r2
 8002776:	63bb      	str	r3, [r7, #56]	; 0x38
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	00da      	lsls	r2, r3, #3
 800277e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002780:	4413      	add	r3, r2
 8002782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002786:	637b      	str	r3, [r7, #52]	; 0x34
 8002788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800278a:	2b00      	cmp	r3, #0
 800278c:	d112      	bne.n	80027b4 <HAL_PCD_EP_DB_Transmit+0x456>
 800278e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002798:	b29a      	uxth	r2, r3
 800279a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	e044      	b.n	800283e <HAL_PCD_EP_DB_Transmit+0x4e0>
 80027b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b6:	2b3e      	cmp	r3, #62	; 0x3e
 80027b8:	d811      	bhi.n	80027de <HAL_PCD_EP_DB_Transmit+0x480>
 80027ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027bc:	085b      	lsrs	r3, r3, #1
 80027be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x472>
 80027ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027cc:	3301      	adds	r3, #1
 80027ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	029b      	lsls	r3, r3, #10
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027da:	801a      	strh	r2, [r3, #0]
 80027dc:	e02f      	b.n	800283e <HAL_PCD_EP_DB_Transmit+0x4e0>
 80027de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_PCD_EP_DB_Transmit+0x496>
 80027ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f0:	3b01      	subs	r3, #1
 80027f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	029b      	lsls	r3, r3, #10
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002804:	b29a      	uxth	r2, r3
 8002806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	e018      	b.n	800283e <HAL_PCD_EP_DB_Transmit+0x4e0>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d114      	bne.n	800283e <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002822:	4413      	add	r3, r2
 8002824:	643b      	str	r3, [r7, #64]	; 0x40
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	00da      	lsls	r2, r3, #3
 800282c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800282e:	4413      	add	r3, r2
 8002830:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002838:	b29a      	uxth	r2, r3
 800283a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800283c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	6959      	ldr	r1, [r3, #20]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	895a      	ldrh	r2, [r3, #10]
 800284a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284c:	b29b      	uxth	r3, r3
 800284e:	f004 f942 	bl	8006ad6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	b29b      	uxth	r3, r3
 8002864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800286c:	82bb      	strh	r3, [r7, #20]
 800286e:	8abb      	ldrh	r3, [r7, #20]
 8002870:	f083 0310 	eor.w	r3, r3, #16
 8002874:	82bb      	strh	r3, [r7, #20]
 8002876:	8abb      	ldrh	r3, [r7, #20]
 8002878:	f083 0320 	eor.w	r3, r3, #32
 800287c:	82bb      	strh	r3, [r7, #20]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	441a      	add	r2, r3
 800288c:	8abb      	ldrh	r3, [r7, #20]
 800288e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800289a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289e:	b29b      	uxth	r3, r3
 80028a0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3750      	adds	r7, #80	; 0x50
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	817b      	strh	r3, [r7, #10]
 80028ba:	4613      	mov	r3, r2
 80028bc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028be:	897b      	ldrh	r3, [r7, #10]
 80028c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4413      	add	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	e009      	b.n	80028f6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028e2:	897a      	ldrh	r2, [r7, #10]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028f6:	893b      	ldrh	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d107      	bne.n	800290c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2200      	movs	r2, #0
 8002900:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	b29a      	uxth	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	80da      	strh	r2, [r3, #6]
 800290a:	e00b      	b.n	8002924 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2201      	movs	r2, #1
 8002910:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	b29a      	uxth	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	b29a      	uxth	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002932:	b480      	push	{r7}
 8002934:	b085      	sub	sp, #20
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002956:	b29b      	uxth	r3, r3
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800296a:	b29b      	uxth	r3, r3
 800296c:	f043 0302 	orr.w	r3, r3, #2
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40007000 	.word	0x40007000

080029a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b2:	d130      	bne.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c0:	d038      	beq.n	8002a34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029ca:	4a1e      	ldr	r2, [pc, #120]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2232      	movs	r2, #50	; 0x32
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0c9b      	lsrs	r3, r3, #18
 80029e4:	3301      	adds	r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029e8:	e002      	b.n	80029f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fc:	d102      	bne.n	8002a04 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f2      	bne.n	80029ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a10:	d110      	bne.n	8002a34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e00f      	b.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a22:	d007      	beq.n	8002a34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a2c:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40007000 	.word	0x40007000
 8002a48:	20000010 	.word	0x20000010
 8002a4c:	431bde83 	.word	0x431bde83

08002a50 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5e:	6053      	str	r3, [r2, #4]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40007000 	.word	0x40007000

08002a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f000 bc11 	b.w	80032a6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a84:	4ba0      	ldr	r3, [pc, #640]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a8e:	4b9e      	ldr	r3, [pc, #632]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80e4 	beq.w	8002c6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <HAL_RCC_OscConfig+0x4c>
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	f040 808b 	bne.w	8002bca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	f040 8087 	bne.w	8002bca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002abc:	4b92      	ldr	r3, [pc, #584]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x64>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e3e8      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1a      	ldr	r2, [r3, #32]
 8002ad8:	4b8b      	ldr	r3, [pc, #556]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d004      	beq.n	8002aee <HAL_RCC_OscConfig+0x7e>
 8002ae4:	4b88      	ldr	r3, [pc, #544]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aec:	e005      	b.n	8002afa <HAL_RCC_OscConfig+0x8a>
 8002aee:	4b86      	ldr	r3, [pc, #536]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d223      	bcs.n	8002b46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fd42 	bl	800358c <RCC_SetFlashLatencyFromMSIRange>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e3c9      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b12:	4b7d      	ldr	r3, [pc, #500]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a7c      	ldr	r2, [pc, #496]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002b18:	f043 0308 	orr.w	r3, r3, #8
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b7a      	ldr	r3, [pc, #488]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	4977      	ldr	r1, [pc, #476]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b30:	4b75      	ldr	r3, [pc, #468]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	4972      	ldr	r1, [pc, #456]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
 8002b44:	e025      	b.n	8002b92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b46:	4b70      	ldr	r3, [pc, #448]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a6f      	ldr	r2, [pc, #444]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002b4c:	f043 0308 	orr.w	r3, r3, #8
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b6d      	ldr	r3, [pc, #436]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	496a      	ldr	r1, [pc, #424]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b64:	4b68      	ldr	r3, [pc, #416]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	4965      	ldr	r1, [pc, #404]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fd02 	bl	800358c <RCC_SetFlashLatencyFromMSIRange>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e389      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b92:	f000 fc6f 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8002b96:	4602      	mov	r2, r0
 8002b98:	4b5b      	ldr	r3, [pc, #364]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	495a      	ldr	r1, [pc, #360]	; (8002d0c <HAL_RCC_OscConfig+0x29c>)
 8002ba4:	5ccb      	ldrb	r3, [r1, r3]
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a58      	ldr	r2, [pc, #352]	; (8002d10 <HAL_RCC_OscConfig+0x2a0>)
 8002bb0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bb2:	4b58      	ldr	r3, [pc, #352]	; (8002d14 <HAL_RCC_OscConfig+0x2a4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe f814 	bl	8000be4 <HAL_InitTick>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d052      	beq.n	8002c6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	e36d      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d032      	beq.n	8002c38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bd2:	4b4d      	ldr	r3, [pc, #308]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a4c      	ldr	r2, [pc, #304]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bde:	f7fe f851 	bl	8000c84 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002be6:	f7fe f84d 	bl	8000c84 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e356      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bf8:	4b43      	ldr	r3, [pc, #268]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c04:	4b40      	ldr	r3, [pc, #256]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a3f      	ldr	r2, [pc, #252]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002c0a:	f043 0308 	orr.w	r3, r3, #8
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b3d      	ldr	r3, [pc, #244]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	493a      	ldr	r1, [pc, #232]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c22:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	4935      	ldr	r1, [pc, #212]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
 8002c36:	e01a      	b.n	8002c6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c38:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a32      	ldr	r2, [pc, #200]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c44:	f7fe f81e 	bl	8000c84 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c4c:	f7fe f81a 	bl	8000c84 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e323      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x1dc>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d073      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_OscConfig+0x21c>
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d10e      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d063      	beq.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d15f      	bne.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e300      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	d106      	bne.n	8002cbc <HAL_RCC_OscConfig+0x24c>
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a15      	ldr	r2, [pc, #84]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e01d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x288>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x270>
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a0f      	ldr	r2, [pc, #60]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a0c      	ldr	r2, [pc, #48]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x288>
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a05      	ldr	r2, [pc, #20]	; (8002d08 <HAL_RCC_OscConfig+0x298>)
 8002cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01b      	beq.n	8002d38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fd ffc0 	bl	8000c84 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d06:	e010      	b.n	8002d2a <HAL_RCC_OscConfig+0x2ba>
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	080091b4 	.word	0x080091b4
 8002d10:	20000010 	.word	0x20000010
 8002d14:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d18:	f7fd ffb4 	bl	8000c84 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e2bd      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d2a:	4baf      	ldr	r3, [pc, #700]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x2a8>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fd ffa4 	bl	8000c84 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fd ffa0 	bl	8000c84 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e2a9      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d52:	4ba5      	ldr	r3, [pc, #660]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x2d0>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d060      	beq.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_OscConfig+0x310>
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d119      	bne.n	8002dae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d116      	bne.n	8002dae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d80:	4b99      	ldr	r3, [pc, #612]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_OscConfig+0x328>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e286      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d98:	4b93      	ldr	r3, [pc, #588]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	061b      	lsls	r3, r3, #24
 8002da6:	4990      	ldr	r1, [pc, #576]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dac:	e040      	b.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d023      	beq.n	8002dfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db6:	4b8c      	ldr	r3, [pc, #560]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a8b      	ldr	r2, [pc, #556]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fd ff5f 	bl	8000c84 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dca:	f7fd ff5b 	bl	8000c84 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e264      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ddc:	4b82      	ldr	r3, [pc, #520]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de8:	4b7f      	ldr	r3, [pc, #508]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	497c      	ldr	r1, [pc, #496]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
 8002dfc:	e018      	b.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dfe:	4b7a      	ldr	r3, [pc, #488]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a79      	ldr	r2, [pc, #484]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7fd ff3b 	bl	8000c84 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e12:	f7fd ff37 	bl	8000c84 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e240      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e24:	4b70      	ldr	r3, [pc, #448]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d03c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4a:	4a67      	ldr	r2, [pc, #412]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fd ff16 	bl	8000c84 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5c:	f7fd ff12 	bl	8000c84 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e21b      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e6e:	4b5e      	ldr	r3, [pc, #376]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ef      	beq.n	8002e5c <HAL_RCC_OscConfig+0x3ec>
 8002e7c:	e01b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7e:	4b5a      	ldr	r3, [pc, #360]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e84:	4a58      	ldr	r2, [pc, #352]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7fd fef9 	bl	8000c84 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e96:	f7fd fef5 	bl	8000c84 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e1fe      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea8:	4b4f      	ldr	r3, [pc, #316]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ef      	bne.n	8002e96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80a6 	beq.w	8003010 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ec8:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed4:	4b44      	ldr	r3, [pc, #272]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	4a43      	ldr	r2, [pc, #268]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee0:	4b41      	ldr	r3, [pc, #260]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eec:	2301      	movs	r3, #1
 8002eee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef0:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <HAL_RCC_OscConfig+0x57c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d118      	bne.n	8002f2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002efc:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCC_OscConfig+0x57c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a3a      	ldr	r2, [pc, #232]	; (8002fec <HAL_RCC_OscConfig+0x57c>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f08:	f7fd febc 	bl	8000c84 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f10:	f7fd feb8 	bl	8000c84 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1c1      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f22:	4b32      	ldr	r3, [pc, #200]	; (8002fec <HAL_RCC_OscConfig+0x57c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d108      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4d8>
 8002f36:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	4a2a      	ldr	r2, [pc, #168]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f46:	e024      	b.n	8002f92 <HAL_RCC_OscConfig+0x522>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d110      	bne.n	8002f72 <HAL_RCC_OscConfig+0x502>
 8002f50:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	4a24      	ldr	r2, [pc, #144]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002f58:	f043 0304 	orr.w	r3, r3, #4
 8002f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f70:	e00f      	b.n	8002f92 <HAL_RCC_OscConfig+0x522>
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f82:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002f8a:	f023 0304 	bic.w	r3, r3, #4
 8002f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fd fe73 	bl	8000c84 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fd fe6f 	bl	8000c84 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e176      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_OscConfig+0x578>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0ed      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x532>
 8002fc6:	e01a      	b.n	8002ffe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fd fe5c 	bl	8000c84 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fce:	e00f      	b.n	8002ff0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fd fe58 	bl	8000c84 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d906      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e15f      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff0:	4baa      	ldr	r3, [pc, #680]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e8      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ffe:	7ffb      	ldrb	r3, [r7, #31]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d105      	bne.n	8003010 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003004:	4ba5      	ldr	r3, [pc, #660]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	4aa4      	ldr	r2, [pc, #656]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 800300a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800300e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d03c      	beq.n	8003096 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01c      	beq.n	800305e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003024:	4b9d      	ldr	r3, [pc, #628]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003026:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800302a:	4a9c      	ldr	r2, [pc, #624]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fd fe26 	bl	8000c84 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800303c:	f7fd fe22 	bl	8000c84 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e12b      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800304e:	4b93      	ldr	r3, [pc, #588]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003050:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ef      	beq.n	800303c <HAL_RCC_OscConfig+0x5cc>
 800305c:	e01b      	b.n	8003096 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800305e:	4b8f      	ldr	r3, [pc, #572]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003060:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003064:	4a8d      	ldr	r2, [pc, #564]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306e:	f7fd fe09 	bl	8000c84 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003076:	f7fd fe05 	bl	8000c84 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e10e      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003088:	4b84      	ldr	r3, [pc, #528]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 800308a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1ef      	bne.n	8003076 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8102 	beq.w	80032a4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	f040 80c5 	bne.w	8003234 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030aa:	4b7c      	ldr	r3, [pc, #496]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f003 0203 	and.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d12c      	bne.n	8003118 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	3b01      	subs	r3, #1
 80030ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d123      	bne.n	8003118 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d11b      	bne.n	8003118 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d113      	bne.n	8003118 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	3b01      	subs	r3, #1
 80030fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d109      	bne.n	8003118 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	085b      	lsrs	r3, r3, #1
 8003110:	3b01      	subs	r3, #1
 8003112:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d067      	beq.n	80031e8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2b0c      	cmp	r3, #12
 800311c:	d062      	beq.n	80031e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800311e:	4b5f      	ldr	r3, [pc, #380]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0bb      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800312e:	4b5b      	ldr	r3, [pc, #364]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a5a      	ldr	r2, [pc, #360]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003138:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800313a:	f7fd fda3 	bl	8000c84 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003142:	f7fd fd9f 	bl	8000c84 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e0a8      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003154:	4b51      	ldr	r3, [pc, #324]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003160:	4b4e      	ldr	r3, [pc, #312]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	4b4e      	ldr	r3, [pc, #312]	; (80032a0 <HAL_RCC_OscConfig+0x830>)
 8003166:	4013      	ands	r3, r2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003170:	3a01      	subs	r2, #1
 8003172:	0112      	lsls	r2, r2, #4
 8003174:	4311      	orrs	r1, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800317a:	0212      	lsls	r2, r2, #8
 800317c:	4311      	orrs	r1, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003182:	0852      	lsrs	r2, r2, #1
 8003184:	3a01      	subs	r2, #1
 8003186:	0552      	lsls	r2, r2, #21
 8003188:	4311      	orrs	r1, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800318e:	0852      	lsrs	r2, r2, #1
 8003190:	3a01      	subs	r2, #1
 8003192:	0652      	lsls	r2, r2, #25
 8003194:	4311      	orrs	r1, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800319a:	06d2      	lsls	r2, r2, #27
 800319c:	430a      	orrs	r2, r1
 800319e:	493f      	ldr	r1, [pc, #252]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031a4:	4b3d      	ldr	r3, [pc, #244]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a3c      	ldr	r2, [pc, #240]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031b0:	4b3a      	ldr	r3, [pc, #232]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4a39      	ldr	r2, [pc, #228]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 80031b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031bc:	f7fd fd62 	bl	8000c84 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fd fd5e 	bl	8000c84 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e067      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d6:	4b31      	ldr	r3, [pc, #196]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031e2:	e05f      	b.n	80032a4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e05e      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e8:	4b2c      	ldr	r3, [pc, #176]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d157      	bne.n	80032a4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031f4:	4b29      	ldr	r3, [pc, #164]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a28      	ldr	r2, [pc, #160]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 80031fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003200:	4b26      	ldr	r3, [pc, #152]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4a25      	ldr	r2, [pc, #148]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800320a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800320c:	f7fd fd3a 	bl	8000c84 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003214:	f7fd fd36 	bl	8000c84 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e03f      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x7a4>
 8003232:	e037      	b.n	80032a4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d02d      	beq.n	8003296 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323a:	4b18      	ldr	r3, [pc, #96]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003244:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d105      	bne.n	800325e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4a11      	ldr	r2, [pc, #68]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003258:	f023 0303 	bic.w	r3, r3, #3
 800325c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	4a0e      	ldr	r2, [pc, #56]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 8003264:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326e:	f7fd fd09 	bl	8000c84 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003276:	f7fd fd05 	bl	8000c84 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e00e      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <HAL_RCC_OscConfig+0x82c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f0      	bne.n	8003276 <HAL_RCC_OscConfig+0x806>
 8003294:	e006      	b.n	80032a4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e005      	b.n	80032a6 <HAL_RCC_OscConfig+0x836>
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000
 80032a0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3720      	adds	r7, #32
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop

080032b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0c8      	b.n	8003456 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c4:	4b66      	ldr	r3, [pc, #408]	; (8003460 <HAL_RCC_ClockConfig+0x1b0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d910      	bls.n	80032f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b63      	ldr	r3, [pc, #396]	; (8003460 <HAL_RCC_ClockConfig+0x1b0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 0207 	bic.w	r2, r3, #7
 80032da:	4961      	ldr	r1, [pc, #388]	; (8003460 <HAL_RCC_ClockConfig+0x1b0>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b5f      	ldr	r3, [pc, #380]	; (8003460 <HAL_RCC_ClockConfig+0x1b0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0b0      	b.n	8003456 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d04c      	beq.n	800339a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d107      	bne.n	8003318 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003308:	4b56      	ldr	r3, [pc, #344]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d121      	bne.n	8003358 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e09e      	b.n	8003456 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d107      	bne.n	8003330 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d115      	bne.n	8003358 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e092      	b.n	8003456 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003338:	4b4a      	ldr	r3, [pc, #296]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d109      	bne.n	8003358 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e086      	b.n	8003456 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003348:	4b46      	ldr	r3, [pc, #280]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e07e      	b.n	8003456 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003358:	4b42      	ldr	r3, [pc, #264]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f023 0203 	bic.w	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	493f      	ldr	r1, [pc, #252]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336a:	f7fd fc8b 	bl	8000c84 <HAL_GetTick>
 800336e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003370:	e00a      	b.n	8003388 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003372:	f7fd fc87 	bl	8000c84 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e066      	b.n	8003456 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 020c 	and.w	r2, r3, #12
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	429a      	cmp	r2, r3
 8003398:	d1eb      	bne.n	8003372 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a6:	4b2f      	ldr	r3, [pc, #188]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	492c      	ldr	r1, [pc, #176]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b8:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_RCC_ClockConfig+0x1b0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d210      	bcs.n	80033e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b26      	ldr	r3, [pc, #152]	; (8003460 <HAL_RCC_ClockConfig+0x1b0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 0207 	bic.w	r2, r3, #7
 80033ce:	4924      	ldr	r1, [pc, #144]	; (8003460 <HAL_RCC_ClockConfig+0x1b0>)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b22      	ldr	r3, [pc, #136]	; (8003460 <HAL_RCC_ClockConfig+0x1b0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e036      	b.n	8003456 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4918      	ldr	r1, [pc, #96]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003412:	4b14      	ldr	r3, [pc, #80]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4910      	ldr	r1, [pc, #64]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003426:	f000 f825 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 800342a:	4602      	mov	r2, r0
 800342c:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <HAL_RCC_ClockConfig+0x1b4>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	490c      	ldr	r1, [pc, #48]	; (8003468 <HAL_RCC_ClockConfig+0x1b8>)
 8003438:	5ccb      	ldrb	r3, [r1, r3]
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	fa22 f303 	lsr.w	r3, r2, r3
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_ClockConfig+0x1c0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7fd fbca 	bl	8000be4 <HAL_InitTick>
 8003450:	4603      	mov	r3, r0
 8003452:	72fb      	strb	r3, [r7, #11]

  return status;
 8003454:	7afb      	ldrb	r3, [r7, #11]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40022000 	.word	0x40022000
 8003464:	40021000 	.word	0x40021000
 8003468:	080091b4 	.word	0x080091b4
 800346c:	20000010 	.word	0x20000010
 8003470:	20000014 	.word	0x20000014

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003482:	4b3e      	ldr	r3, [pc, #248]	; (800357c <HAL_RCC_GetSysClockFreq+0x108>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800348c:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_RCC_GetSysClockFreq+0x108>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x34>
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d121      	bne.n	80034e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d11e      	bne.n	80034e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034a8:	4b34      	ldr	r3, [pc, #208]	; (800357c <HAL_RCC_GetSysClockFreq+0x108>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d107      	bne.n	80034c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034b4:	4b31      	ldr	r3, [pc, #196]	; (800357c <HAL_RCC_GetSysClockFreq+0x108>)
 80034b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ba:	0a1b      	lsrs	r3, r3, #8
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	e005      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034c4:	4b2d      	ldr	r3, [pc, #180]	; (800357c <HAL_RCC_GetSysClockFreq+0x108>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034d0:	4a2b      	ldr	r2, [pc, #172]	; (8003580 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10d      	bne.n	80034fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d102      	bne.n	80034f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034ec:	4b25      	ldr	r3, [pc, #148]	; (8003584 <HAL_RCC_GetSysClockFreq+0x110>)
 80034ee:	61bb      	str	r3, [r7, #24]
 80034f0:	e004      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034f8:	4b23      	ldr	r3, [pc, #140]	; (8003588 <HAL_RCC_GetSysClockFreq+0x114>)
 80034fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b0c      	cmp	r3, #12
 8003500:	d134      	bne.n	800356c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <HAL_RCC_GetSysClockFreq+0x108>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d003      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0xa6>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b03      	cmp	r3, #3
 8003516:	d003      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0xac>
 8003518:	e005      	b.n	8003526 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <HAL_RCC_GetSysClockFreq+0x110>)
 800351c:	617b      	str	r3, [r7, #20]
      break;
 800351e:	e005      	b.n	800352c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <HAL_RCC_GetSysClockFreq+0x114>)
 8003522:	617b      	str	r3, [r7, #20]
      break;
 8003524:	e002      	b.n	800352c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	617b      	str	r3, [r7, #20]
      break;
 800352a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800352c:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_RCC_GetSysClockFreq+0x108>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	3301      	adds	r3, #1
 8003538:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <HAL_RCC_GetSysClockFreq+0x108>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	fb02 f203 	mul.w	r2, r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_RCC_GetSysClockFreq+0x108>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	0e5b      	lsrs	r3, r3, #25
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	3301      	adds	r3, #1
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800356c:	69bb      	ldr	r3, [r7, #24]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000
 8003580:	080091c4 	.word	0x080091c4
 8003584:	00f42400 	.word	0x00f42400
 8003588:	007a1200 	.word	0x007a1200

0800358c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003598:	4b2a      	ldr	r3, [pc, #168]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035a4:	f7ff f9f0 	bl	8002988 <HAL_PWREx_GetVoltageRange>
 80035a8:	6178      	str	r0, [r7, #20]
 80035aa:	e014      	b.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b0:	4a24      	ldr	r2, [pc, #144]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b6:	6593      	str	r3, [r2, #88]	; 0x58
 80035b8:	4b22      	ldr	r3, [pc, #136]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035c4:	f7ff f9e0 	bl	8002988 <HAL_PWREx_GetVoltageRange>
 80035c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ca:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ce:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035dc:	d10b      	bne.n	80035f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b80      	cmp	r3, #128	; 0x80
 80035e2:	d919      	bls.n	8003618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2ba0      	cmp	r3, #160	; 0xa0
 80035e8:	d902      	bls.n	80035f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ea:	2302      	movs	r3, #2
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	e013      	b.n	8003618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035f0:	2301      	movs	r3, #1
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	e010      	b.n	8003618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b80      	cmp	r3, #128	; 0x80
 80035fa:	d902      	bls.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035fc:	2303      	movs	r3, #3
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	e00a      	b.n	8003618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d102      	bne.n	800360e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003608:	2302      	movs	r3, #2
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	e004      	b.n	8003618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b70      	cmp	r3, #112	; 0x70
 8003612:	d101      	bne.n	8003618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003614:	2301      	movs	r3, #1
 8003616:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 0207 	bic.w	r2, r3, #7
 8003620:	4909      	ldr	r1, [pc, #36]	; (8003648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003628:	4b07      	ldr	r3, [pc, #28]	; (8003648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	429a      	cmp	r2, r3
 8003634:	d001      	beq.n	800363a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000
 8003648:	40022000 	.word	0x40022000

0800364c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003654:	2300      	movs	r3, #0
 8003656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003658:	2300      	movs	r3, #0
 800365a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003664:	2b00      	cmp	r3, #0
 8003666:	d031      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003670:	d01a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003672:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003676:	d814      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800367c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003680:	d10f      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003682:	4bac      	ldr	r3, [pc, #688]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	4aab      	ldr	r2, [pc, #684]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800368e:	e00c      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f9cc 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036a0:	e003      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	74fb      	strb	r3, [r7, #19]
      break;
 80036a6:	e000      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80036a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036aa:	7cfb      	ldrb	r3, [r7, #19]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10b      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036b0:	4ba0      	ldr	r3, [pc, #640]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	499d      	ldr	r1, [pc, #628]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036c6:	e001      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8099 	beq.w	800380c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036da:	2300      	movs	r3, #0
 80036dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036de:	4b95      	ldr	r3, [pc, #596]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80036ee:	2300      	movs	r3, #0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f4:	4b8f      	ldr	r3, [pc, #572]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	4a8e      	ldr	r2, [pc, #568]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003700:	4b8c      	ldr	r3, [pc, #560]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370c:	2301      	movs	r3, #1
 800370e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003710:	4b89      	ldr	r3, [pc, #548]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a88      	ldr	r2, [pc, #544]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800371c:	f7fd fab2 	bl	8000c84 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003722:	e009      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003724:	f7fd faae 	bl	8000c84 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d902      	bls.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	74fb      	strb	r3, [r7, #19]
        break;
 8003736:	e005      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003738:	4b7f      	ldr	r3, [pc, #508]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ef      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d155      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800374a:	4b7a      	ldr	r3, [pc, #488]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003754:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01e      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	429a      	cmp	r2, r3
 8003764:	d019      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003766:	4b73      	ldr	r3, [pc, #460]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003772:	4b70      	ldr	r3, [pc, #448]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	4a6e      	ldr	r2, [pc, #440]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800377a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003782:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	4a6a      	ldr	r2, [pc, #424]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800378a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003792:	4a68      	ldr	r2, [pc, #416]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d016      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fd fa6e 	bl	8000c84 <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037aa:	e00b      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ac:	f7fd fa6a 	bl	8000c84 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d902      	bls.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	74fb      	strb	r3, [r7, #19]
            break;
 80037c2:	e006      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c4:	4b5b      	ldr	r3, [pc, #364]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0ec      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80037d2:	7cfb      	ldrb	r3, [r7, #19]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d8:	4b56      	ldr	r3, [pc, #344]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e6:	4953      	ldr	r1, [pc, #332]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037ee:	e004      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	74bb      	strb	r3, [r7, #18]
 80037f4:	e001      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037fa:	7c7b      	ldrb	r3, [r7, #17]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d105      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003800:	4b4c      	ldr	r3, [pc, #304]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	4a4b      	ldr	r2, [pc, #300]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003818:	4b46      	ldr	r3, [pc, #280]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	f023 0203 	bic.w	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4943      	ldr	r1, [pc, #268]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800383a:	4b3e      	ldr	r3, [pc, #248]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003840:	f023 020c 	bic.w	r2, r3, #12
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	493a      	ldr	r1, [pc, #232]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800385c:	4b35      	ldr	r3, [pc, #212]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	4932      	ldr	r1, [pc, #200]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800387e:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388c:	4929      	ldr	r1, [pc, #164]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038a0:	4b24      	ldr	r3, [pc, #144]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	4921      	ldr	r1, [pc, #132]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038c2:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	4918      	ldr	r1, [pc, #96]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038e4:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4910      	ldr	r1, [pc, #64]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d02c      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	4907      	ldr	r1, [pc, #28]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003924:	d10a      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003926:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	4a02      	ldr	r2, [pc, #8]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800392c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003930:	60d3      	str	r3, [r2, #12]
 8003932:	e015      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003934:	40021000 	.word	0x40021000
 8003938:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003944:	d10c      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3304      	adds	r3, #4
 800394a:	2101      	movs	r1, #1
 800394c:	4618      	mov	r0, r3
 800394e:	f000 f871 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d028      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800396c:	4b30      	ldr	r3, [pc, #192]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	492d      	ldr	r1, [pc, #180]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800398a:	d106      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800398c:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4a27      	ldr	r2, [pc, #156]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003996:	60d3      	str	r3, [r2, #12]
 8003998:	e011      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039a2:	d10c      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	2101      	movs	r1, #1
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f842 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80039ba:	7cfb      	ldrb	r3, [r7, #19]
 80039bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01c      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039ca:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	4915      	ldr	r1, [pc, #84]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2102      	movs	r1, #2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f81f 	bl	8003a34 <RCCEx_PLLSAI1_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039fa:	7cfb      	ldrb	r3, [r7, #19]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a10:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1e:	4904      	ldr	r1, [pc, #16]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a26:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000

08003a34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a42:	4b74      	ldr	r3, [pc, #464]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d018      	beq.n	8003a80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a4e:	4b71      	ldr	r3, [pc, #452]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0203 	and.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d10d      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
       ||
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a66:	4b6b      	ldr	r3, [pc, #428]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	091b      	lsrs	r3, r3, #4
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
       ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d047      	beq.n	8003b0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
 8003a7e:	e044      	b.n	8003b0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d018      	beq.n	8003aba <RCCEx_PLLSAI1_Config+0x86>
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d825      	bhi.n	8003ad8 <RCCEx_PLLSAI1_Config+0xa4>
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d002      	beq.n	8003a96 <RCCEx_PLLSAI1_Config+0x62>
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d009      	beq.n	8003aa8 <RCCEx_PLLSAI1_Config+0x74>
 8003a94:	e020      	b.n	8003ad8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a96:	4b5f      	ldr	r3, [pc, #380]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d11d      	bne.n	8003ade <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa6:	e01a      	b.n	8003ade <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003aa8:	4b5a      	ldr	r3, [pc, #360]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d116      	bne.n	8003ae2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab8:	e013      	b.n	8003ae2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aba:	4b56      	ldr	r3, [pc, #344]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10f      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ac6:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ad6:	e006      	b.n	8003ae6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	73fb      	strb	r3, [r7, #15]
      break;
 8003adc:	e004      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e002      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ae6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10d      	bne.n	8003b0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003aee:	4b49      	ldr	r3, [pc, #292]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6819      	ldr	r1, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	430b      	orrs	r3, r1
 8003b04:	4943      	ldr	r1, [pc, #268]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d17c      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b10:	4b40      	ldr	r3, [pc, #256]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a3f      	ldr	r2, [pc, #252]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1c:	f7fd f8b2 	bl	8000c84 <HAL_GetTick>
 8003b20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b22:	e009      	b.n	8003b38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b24:	f7fd f8ae 	bl	8000c84 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d902      	bls.n	8003b38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	73fb      	strb	r3, [r7, #15]
        break;
 8003b36:	e005      	b.n	8003b44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b38:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ef      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d15f      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d110      	bne.n	8003b72 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b50:	4b30      	ldr	r3, [pc, #192]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6892      	ldr	r2, [r2, #8]
 8003b60:	0211      	lsls	r1, r2, #8
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68d2      	ldr	r2, [r2, #12]
 8003b66:	06d2      	lsls	r2, r2, #27
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	492a      	ldr	r1, [pc, #168]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	610b      	str	r3, [r1, #16]
 8003b70:	e027      	b.n	8003bc2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d112      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b78:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6892      	ldr	r2, [r2, #8]
 8003b88:	0211      	lsls	r1, r2, #8
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6912      	ldr	r2, [r2, #16]
 8003b8e:	0852      	lsrs	r2, r2, #1
 8003b90:	3a01      	subs	r2, #1
 8003b92:	0552      	lsls	r2, r2, #21
 8003b94:	430a      	orrs	r2, r1
 8003b96:	491f      	ldr	r1, [pc, #124]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	610b      	str	r3, [r1, #16]
 8003b9c:	e011      	b.n	8003bc2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ba6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6892      	ldr	r2, [r2, #8]
 8003bae:	0211      	lsls	r1, r2, #8
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6952      	ldr	r2, [r2, #20]
 8003bb4:	0852      	lsrs	r2, r2, #1
 8003bb6:	3a01      	subs	r2, #1
 8003bb8:	0652      	lsls	r2, r2, #25
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	4915      	ldr	r1, [pc, #84]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a13      	ldr	r2, [pc, #76]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bcc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fd f859 	bl	8000c84 <HAL_GetTick>
 8003bd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bd4:	e009      	b.n	8003bea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bd6:	f7fd f855 	bl	8000c84 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d902      	bls.n	8003bea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	73fb      	strb	r3, [r7, #15]
          break;
 8003be8:	e005      	b.n	8003bf6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0ef      	beq.n	8003bd6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d106      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	4903      	ldr	r1, [pc, #12]	; (8003c14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000

08003c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e095      	b.n	8003d56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d108      	bne.n	8003c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c3a:	d009      	beq.n	8003c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	61da      	str	r2, [r3, #28]
 8003c42:	e005      	b.n	8003c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fc fe94 	bl	8000998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c90:	d902      	bls.n	8003c98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	e002      	b.n	8003c9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ca6:	d007      	beq.n	8003cb8 <HAL_SPI_Init+0xa0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	ea42 0103 	orr.w	r1, r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	0c1b      	lsrs	r3, r3, #16
 8003d14:	f003 0204 	and.w	r2, r3, #4
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d34:	ea42 0103 	orr.w	r1, r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b088      	sub	sp, #32
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_SPI_Transmit+0x22>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e158      	b.n	8004032 <HAL_SPI_Transmit+0x2d4>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d88:	f7fc ff7c 	bl	8000c84 <HAL_GetTick>
 8003d8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d002      	beq.n	8003da4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003da2:	e13d      	b.n	8004020 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_SPI_Transmit+0x52>
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003db4:	e134      	b.n	8004020 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2203      	movs	r2, #3
 8003dba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	88fa      	ldrh	r2, [r7, #6]
 8003dce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	88fa      	ldrh	r2, [r7, #6]
 8003dd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e00:	d10f      	bne.n	8003e22 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d007      	beq.n	8003e40 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e48:	d94b      	bls.n	8003ee2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_SPI_Transmit+0xfa>
 8003e52:	8afb      	ldrh	r3, [r7, #22]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d13e      	bne.n	8003ed6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	881a      	ldrh	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	1c9a      	adds	r2, r3, #2
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e7c:	e02b      	b.n	8003ed6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d112      	bne.n	8003eb2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	881a      	ldrh	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	1c9a      	adds	r2, r3, #2
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eb0:	e011      	b.n	8003ed6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb2:	f7fc fee7 	bl	8000c84 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d803      	bhi.n	8003eca <HAL_SPI_Transmit+0x16c>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec8:	d102      	bne.n	8003ed0 <HAL_SPI_Transmit+0x172>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ed4:	e0a4      	b.n	8004020 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1ce      	bne.n	8003e7e <HAL_SPI_Transmit+0x120>
 8003ee0:	e07c      	b.n	8003fdc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_SPI_Transmit+0x192>
 8003eea:	8afb      	ldrh	r3, [r7, #22]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d170      	bne.n	8003fd2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d912      	bls.n	8003f20 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	881a      	ldrh	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	1c9a      	adds	r2, r3, #2
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b02      	subs	r3, #2
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f1e:	e058      	b.n	8003fd2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	7812      	ldrb	r2, [r2, #0]
 8003f2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f46:	e044      	b.n	8003fd2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d12b      	bne.n	8003fae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d912      	bls.n	8003f86 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	881a      	ldrh	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	1c9a      	adds	r2, r3, #2
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b02      	subs	r3, #2
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f84:	e025      	b.n	8003fd2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	7812      	ldrb	r2, [r2, #0]
 8003f92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fac:	e011      	b.n	8003fd2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fae:	f7fc fe69 	bl	8000c84 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d803      	bhi.n	8003fc6 <HAL_SPI_Transmit+0x268>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fc4:	d102      	bne.n	8003fcc <HAL_SPI_Transmit+0x26e>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fd0:	e026      	b.n	8004020 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1b5      	bne.n	8003f48 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	6839      	ldr	r1, [r7, #0]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fcdb 	bl	800499c <SPI_EndRxTxTransaction>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	77fb      	strb	r3, [r7, #31]
 800401c:	e000      	b.n	8004020 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800401e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004030:	7ffb      	ldrb	r3, [r7, #31]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b088      	sub	sp, #32
 800403e:	af02      	add	r7, sp, #8
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	603b      	str	r3, [r7, #0]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004056:	d112      	bne.n	800407e <HAL_SPI_Receive+0x44>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10e      	bne.n	800407e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2204      	movs	r2, #4
 8004064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004068:	88fa      	ldrh	r2, [r7, #6]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f910 	bl	800429a <HAL_SPI_TransmitReceive>
 800407a:	4603      	mov	r3, r0
 800407c:	e109      	b.n	8004292 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_SPI_Receive+0x52>
 8004088:	2302      	movs	r3, #2
 800408a:	e102      	b.n	8004292 <HAL_SPI_Receive+0x258>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004094:	f7fc fdf6 	bl	8000c84 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d002      	beq.n	80040ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
 80040a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040aa:	e0e9      	b.n	8004280 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_SPI_Receive+0x7e>
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040bc:	e0e0      	b.n	8004280 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2204      	movs	r2, #4
 80040c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	88fa      	ldrh	r2, [r7, #6]
 80040d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	88fa      	ldrh	r2, [r7, #6]
 80040de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004108:	d908      	bls.n	800411c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	e007      	b.n	800412c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800412a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004134:	d10f      	bne.n	8004156 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004144:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004154:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d007      	beq.n	8004174 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004172:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800417c:	d867      	bhi.n	800424e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800417e:	e030      	b.n	80041e2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b01      	cmp	r3, #1
 800418c:	d117      	bne.n	80041be <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f103 020c 	add.w	r2, r3, #12
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	7812      	ldrb	r2, [r2, #0]
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80041bc:	e011      	b.n	80041e2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041be:	f7fc fd61 	bl	8000c84 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d803      	bhi.n	80041d6 <HAL_SPI_Receive+0x19c>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d4:	d102      	bne.n	80041dc <HAL_SPI_Receive+0x1a2>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041e0:	e04e      	b.n	8004280 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1c8      	bne.n	8004180 <HAL_SPI_Receive+0x146>
 80041ee:	e034      	b.n	800425a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d115      	bne.n	800422a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	b292      	uxth	r2, r2
 800420a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	1c9a      	adds	r2, r3, #2
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004228:	e011      	b.n	800424e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800422a:	f7fc fd2b 	bl	8000c84 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d803      	bhi.n	8004242 <HAL_SPI_Receive+0x208>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004240:	d102      	bne.n	8004248 <HAL_SPI_Receive+0x20e>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800424c:	e018      	b.n	8004280 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1ca      	bne.n	80041f0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	6839      	ldr	r1, [r7, #0]
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fb44 	bl	80048ec <SPI_EndRxTransaction>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	75fb      	strb	r3, [r7, #23]
 800427c:	e000      	b.n	8004280 <HAL_SPI_Receive+0x246>
  }

error :
 800427e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004290:	7dfb      	ldrb	r3, [r7, #23]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b08a      	sub	sp, #40	; 0x28
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042a8:	2301      	movs	r3, #1
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x26>
 80042bc:	2302      	movs	r3, #2
 80042be:	e1fb      	b.n	80046b8 <HAL_SPI_TransmitReceive+0x41e>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042c8:	f7fc fcdc 	bl	8000c84 <HAL_GetTick>
 80042cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80042dc:	887b      	ldrh	r3, [r7, #2]
 80042de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80042e0:	887b      	ldrh	r3, [r7, #2]
 80042e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042e4:	7efb      	ldrb	r3, [r7, #27]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d00e      	beq.n	8004308 <HAL_SPI_TransmitReceive+0x6e>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f0:	d106      	bne.n	8004300 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <HAL_SPI_TransmitReceive+0x66>
 80042fa:	7efb      	ldrb	r3, [r7, #27]
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d003      	beq.n	8004308 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004300:	2302      	movs	r3, #2
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004306:	e1cd      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <HAL_SPI_TransmitReceive+0x80>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_SPI_TransmitReceive+0x80>
 8004314:	887b      	ldrh	r3, [r7, #2]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d103      	bne.n	8004322 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004320:	e1c0      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b04      	cmp	r3, #4
 800432c:	d003      	beq.n	8004336 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2205      	movs	r2, #5
 8004332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	887a      	ldrh	r2, [r7, #2]
 8004346:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	887a      	ldrh	r2, [r7, #2]
 800434e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	887a      	ldrh	r2, [r7, #2]
 800435c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	887a      	ldrh	r2, [r7, #2]
 8004362:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004378:	d802      	bhi.n	8004380 <HAL_SPI_TransmitReceive+0xe6>
 800437a:	8a3b      	ldrh	r3, [r7, #16]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d908      	bls.n	8004392 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800438e:	605a      	str	r2, [r3, #4]
 8004390:	e007      	b.n	80043a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d007      	beq.n	80043c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043c8:	d97c      	bls.n	80044c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_SPI_TransmitReceive+0x13e>
 80043d2:	8a7b      	ldrh	r3, [r7, #18]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d169      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	881a      	ldrh	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	1c9a      	adds	r2, r3, #2
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043fc:	e056      	b.n	80044ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b02      	cmp	r3, #2
 800440a:	d11b      	bne.n	8004444 <HAL_SPI_TransmitReceive+0x1aa>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d016      	beq.n	8004444 <HAL_SPI_TransmitReceive+0x1aa>
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	2b01      	cmp	r3, #1
 800441a:	d113      	bne.n	8004444 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	881a      	ldrh	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	1c9a      	adds	r2, r3, #2
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b01      	cmp	r3, #1
 8004450:	d11c      	bne.n	800448c <HAL_SPI_TransmitReceive+0x1f2>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d016      	beq.n	800448c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	b292      	uxth	r2, r2
 800446a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	1c9a      	adds	r2, r3, #2
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004488:	2301      	movs	r3, #1
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800448c:	f7fc fbfa 	bl	8000c84 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004498:	429a      	cmp	r2, r3
 800449a:	d807      	bhi.n	80044ac <HAL_SPI_TransmitReceive+0x212>
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a2:	d003      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80044aa:	e0fb      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1a3      	bne.n	80043fe <HAL_SPI_TransmitReceive+0x164>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d19d      	bne.n	80043fe <HAL_SPI_TransmitReceive+0x164>
 80044c2:	e0df      	b.n	8004684 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_SPI_TransmitReceive+0x23a>
 80044cc:	8a7b      	ldrh	r3, [r7, #18]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	f040 80cb 	bne.w	800466a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d912      	bls.n	8004504 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	881a      	ldrh	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	1c9a      	adds	r2, r3, #2
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b02      	subs	r3, #2
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004502:	e0b2      	b.n	800466a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	7812      	ldrb	r2, [r2, #0]
 8004510:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800452a:	e09e      	b.n	800466a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b02      	cmp	r3, #2
 8004538:	d134      	bne.n	80045a4 <HAL_SPI_TransmitReceive+0x30a>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d02f      	beq.n	80045a4 <HAL_SPI_TransmitReceive+0x30a>
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	2b01      	cmp	r3, #1
 8004548:	d12c      	bne.n	80045a4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d912      	bls.n	800457a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	881a      	ldrh	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	1c9a      	adds	r2, r3, #2
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b02      	subs	r3, #2
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004578:	e012      	b.n	80045a0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	330c      	adds	r3, #12
 8004584:	7812      	ldrb	r2, [r2, #0]
 8004586:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d148      	bne.n	8004644 <HAL_SPI_TransmitReceive+0x3aa>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d042      	beq.n	8004644 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d923      	bls.n	8004612 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	b292      	uxth	r2, r2
 80045d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	1c9a      	adds	r2, r3, #2
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b02      	subs	r3, #2
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d81f      	bhi.n	8004640 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	e016      	b.n	8004640 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f103 020c 	add.w	r2, r3, #12
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	7812      	ldrb	r2, [r2, #0]
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004640:	2301      	movs	r3, #1
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004644:	f7fc fb1e 	bl	8000c84 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004650:	429a      	cmp	r2, r3
 8004652:	d803      	bhi.n	800465c <HAL_SPI_TransmitReceive+0x3c2>
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800465a:	d102      	bne.n	8004662 <HAL_SPI_TransmitReceive+0x3c8>
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	2b00      	cmp	r3, #0
 8004660:	d103      	bne.n	800466a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004668:	e01c      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	f47f af5b 	bne.w	800452c <HAL_SPI_TransmitReceive+0x292>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	f47f af54 	bne.w	800452c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f987 	bl	800499c <SPI_EndRxTxTransaction>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d006      	beq.n	80046a2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	661a      	str	r2, [r3, #96]	; 0x60
 80046a0:	e000      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80046a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3728      	adds	r7, #40	; 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046d0:	f7fc fad8 	bl	8000c84 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	4413      	add	r3, r2
 80046de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046e0:	f7fc fad0 	bl	8000c84 <HAL_GetTick>
 80046e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046e6:	4b39      	ldr	r3, [pc, #228]	; (80047cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	015b      	lsls	r3, r3, #5
 80046ec:	0d1b      	lsrs	r3, r3, #20
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046f6:	e054      	b.n	80047a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046fe:	d050      	beq.n	80047a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004700:	f7fc fac0 	bl	8000c84 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	429a      	cmp	r2, r3
 800470e:	d902      	bls.n	8004716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d13d      	bne.n	8004792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800472e:	d111      	bne.n	8004754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004738:	d004      	beq.n	8004744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004742:	d107      	bne.n	8004754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475c:	d10f      	bne.n	800477e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800477c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e017      	b.n	80047c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	3b01      	subs	r3, #1
 80047a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4013      	ands	r3, r2
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	bf0c      	ite	eq
 80047b2:	2301      	moveq	r3, #1
 80047b4:	2300      	movne	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d19b      	bne.n	80046f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000010 	.word	0x20000010

080047d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80047de:	f7fc fa51 	bl	8000c84 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	1a9b      	subs	r3, r3, r2
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	4413      	add	r3, r2
 80047ec:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047ee:	f7fc fa49 	bl	8000c84 <HAL_GetTick>
 80047f2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80047f4:	4b3c      	ldr	r3, [pc, #240]	; (80048e8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	00da      	lsls	r2, r3, #3
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	0d1b      	lsrs	r3, r3, #20
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800480c:	e05f      	b.n	80048ce <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004814:	d106      	bne.n	8004824 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d103      	bne.n	8004824 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	330c      	adds	r3, #12
 8004822:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800482a:	d050      	beq.n	80048ce <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800482c:	f7fc fa2a 	bl	8000c84 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	429a      	cmp	r2, r3
 800483a:	d902      	bls.n	8004842 <SPI_WaitFifoStateUntilTimeout+0x72>
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d13d      	bne.n	80048be <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004850:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800485a:	d111      	bne.n	8004880 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004864:	d004      	beq.n	8004870 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486e:	d107      	bne.n	8004880 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800487e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004888:	d10f      	bne.n	80048aa <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e010      	b.n	80048e0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4013      	ands	r3, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d197      	bne.n	800480e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000010 	.word	0x20000010

080048ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004900:	d111      	bne.n	8004926 <SPI_EndRxTransaction+0x3a>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490a:	d004      	beq.n	8004916 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004914:	d107      	bne.n	8004926 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004924:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2200      	movs	r2, #0
 800492e:	2180      	movs	r1, #128	; 0x80
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff fec5 	bl	80046c0 <SPI_WaitFlagStateUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004940:	f043 0220 	orr.w	r2, r3, #32
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e023      	b.n	8004994 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004954:	d11d      	bne.n	8004992 <SPI_EndRxTransaction+0xa6>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495e:	d004      	beq.n	800496a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004968:	d113      	bne.n	8004992 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2200      	movs	r2, #0
 8004972:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f7ff ff2a 	bl	80047d0 <SPI_WaitFifoStateUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004986:	f043 0220 	orr.w	r2, r3, #32
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e000      	b.n	8004994 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff ff0b 	bl	80047d0 <SPI_WaitFifoStateUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e027      	b.n	8004a20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2200      	movs	r2, #0
 80049d8:	2180      	movs	r1, #128	; 0x80
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff fe70 	bl	80046c0 <SPI_WaitFlagStateUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ea:	f043 0220 	orr.w	r2, r3, #32
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e014      	b.n	8004a20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7ff fee4 	bl	80047d0 <SPI_WaitFifoStateUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e000      	b.n	8004a20 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a28:	b084      	sub	sp, #16
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	f107 0014 	add.w	r0, r7, #20
 8004a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	b004      	add	sp, #16
 8004a48:	4770      	bx	lr

08004a4a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a5a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a80:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a84:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	43db      	mvns	r3, r3
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	4013      	ands	r3, r2
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ac8:	b084      	sub	sp, #16
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	f107 0014 	add.w	r0, r7, #20
 8004ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	b004      	add	sp, #16
 8004b08:	4770      	bx	lr
	...

08004b0c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b09b      	sub	sp, #108	; 0x6c
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	78db      	ldrb	r3, [r3, #3]
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d81f      	bhi.n	8004b7e <USB_ActivateEndpoint+0x72>
 8004b3e:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <USB_ActivateEndpoint+0x38>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b71 	.word	0x08004b71
 8004b4c:	08004b87 	.word	0x08004b87
 8004b50:	08004b63 	.word	0x08004b63
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b5c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b60:	e012      	b.n	8004b88 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b66:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b6e:	e00b      	b.n	8004b88 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b7c:	e004      	b.n	8004b88 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b84:	e000      	b.n	8004b88 <USB_ActivateEndpoint+0x7c>
      break;
 8004b86:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	441a      	add	r2, r3
 8004b92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	b21b      	sxth	r3, r3
 8004bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc2:	b21a      	sxth	r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	b21b      	sxth	r3, r3
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	b21b      	sxth	r3, r3
 8004bce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	441a      	add	r2, r3
 8004bdc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	7b1b      	ldrb	r3, [r3, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f040 8149 	bne.w	8004e90 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	785b      	ldrb	r3, [r3, #1]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8084 	beq.w	8004d10 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	4413      	add	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	00da      	lsls	r2, r3, #3
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	88db      	ldrh	r3, [r3, #6]
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	81fb      	strh	r3, [r7, #14]
 8004c4a:	89fb      	ldrh	r3, [r7, #14]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01b      	beq.n	8004c8c <USB_ActivateEndpoint+0x180>
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	81bb      	strh	r3, [r7, #12]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	441a      	add	r2, r3
 8004c76:	89bb      	ldrh	r3, [r7, #12]
 8004c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	78db      	ldrb	r3, [r3, #3]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d020      	beq.n	8004cd6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004caa:	813b      	strh	r3, [r7, #8]
 8004cac:	893b      	ldrh	r3, [r7, #8]
 8004cae:	f083 0320 	eor.w	r3, r3, #32
 8004cb2:	813b      	strh	r3, [r7, #8]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	893b      	ldrh	r3, [r7, #8]
 8004cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	8013      	strh	r3, [r2, #0]
 8004cd4:	e27f      	b.n	80051d6 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cec:	817b      	strh	r3, [r7, #10]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	441a      	add	r2, r3
 8004cf8:	897b      	ldrh	r3, [r7, #10]
 8004cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	8013      	strh	r3, [r2, #0]
 8004d0e:	e262      	b.n	80051d6 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	4413      	add	r3, r2
 8004d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	00da      	lsls	r2, r3, #3
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	88db      	ldrh	r3, [r3, #6]
 8004d38:	085b      	lsrs	r3, r3, #1
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	4413      	add	r3, r2
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	00da      	lsls	r2, r3, #3
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	4413      	add	r3, r2
 8004d62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d66:	623b      	str	r3, [r7, #32]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d112      	bne.n	8004d96 <USB_ActivateEndpoint+0x28a>
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	801a      	strh	r2, [r3, #0]
 8004d94:	e02f      	b.n	8004df6 <USB_ActivateEndpoint+0x2ea>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d9c:	d813      	bhi.n	8004dc6 <USB_ActivateEndpoint+0x2ba>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	085b      	lsrs	r3, r3, #1
 8004da4:	663b      	str	r3, [r7, #96]	; 0x60
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <USB_ActivateEndpoint+0x2ac>
 8004db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004db4:	3301      	adds	r3, #1
 8004db6:	663b      	str	r3, [r7, #96]	; 0x60
 8004db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	029b      	lsls	r3, r3, #10
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	801a      	strh	r2, [r3, #0]
 8004dc4:	e017      	b.n	8004df6 <USB_ActivateEndpoint+0x2ea>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d102      	bne.n	8004de0 <USB_ActivateEndpoint+0x2d4>
 8004dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	663b      	str	r3, [r7, #96]	; 0x60
 8004de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	029b      	lsls	r3, r3, #10
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	83fb      	strh	r3, [r7, #30]
 8004e04:	8bfb      	ldrh	r3, [r7, #30]
 8004e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01b      	beq.n	8004e46 <USB_ActivateEndpoint+0x33a>
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e24:	83bb      	strh	r3, [r7, #28]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	441a      	add	r2, r3
 8004e30:	8bbb      	ldrh	r3, [r7, #28]
 8004e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5c:	837b      	strh	r3, [r7, #26]
 8004e5e:	8b7b      	ldrh	r3, [r7, #26]
 8004e60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e64:	837b      	strh	r3, [r7, #26]
 8004e66:	8b7b      	ldrh	r3, [r7, #26]
 8004e68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e6c:	837b      	strh	r3, [r7, #26]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	441a      	add	r2, r3
 8004e78:	8b7b      	ldrh	r3, [r7, #26]
 8004e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	8013      	strh	r3, [r2, #0]
 8004e8e:	e1a2      	b.n	80051d6 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	441a      	add	r2, r3
 8004eb4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004edc:	4413      	add	r3, r2
 8004ede:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	00da      	lsls	r2, r3, #3
 8004ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eee:	657b      	str	r3, [r7, #84]	; 0x54
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	891b      	ldrh	r3, [r3, #8]
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004efe:	801a      	strh	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	653b      	str	r3, [r7, #80]	; 0x50
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f10:	4413      	add	r3, r2
 8004f12:	653b      	str	r3, [r7, #80]	; 0x50
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	00da      	lsls	r2, r3, #3
 8004f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	895b      	ldrh	r3, [r3, #10]
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f32:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f040 8091 	bne.w	8005060 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01b      	beq.n	8004f8e <USB_ActivateEndpoint+0x482>
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	441a      	add	r2, r3
 8004f78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01b      	beq.n	8004fde <USB_ActivateEndpoint+0x4d2>
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	441a      	add	r2, r3
 8004fc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ff6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ff8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ffc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ffe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005000:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005004:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	441a      	add	r2, r3
 8005010:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005022:	b29b      	uxth	r3, r3
 8005024:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800503c:	867b      	strh	r3, [r7, #50]	; 0x32
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	441a      	add	r2, r3
 8005048:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800504a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505a:	b29b      	uxth	r3, r3
 800505c:	8013      	strh	r3, [r2, #0]
 800505e:	e0ba      	b.n	80051d6 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005070:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01d      	beq.n	80050b8 <USB_ActivateEndpoint+0x5ac>
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80050a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80050c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01d      	beq.n	8005110 <USB_ActivateEndpoint+0x604>
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	441a      	add	r2, r3
 80050f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005108:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800510c:	b29b      	uxth	r3, r3
 800510e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	78db      	ldrb	r3, [r3, #3]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d024      	beq.n	8005162 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005132:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005136:	f083 0320 	eor.w	r3, r3, #32
 800513a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	441a      	add	r2, r3
 8005148:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800514c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515c:	b29b      	uxth	r3, r3
 800515e:	8013      	strh	r3, [r2, #0]
 8005160:	e01d      	b.n	800519e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005178:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	441a      	add	r2, r3
 8005186:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800518a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519a:	b29b      	uxth	r3, r3
 800519c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	441a      	add	r2, r3
 80051c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80051d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051da:	4618      	mov	r0, r3
 80051dc:	376c      	adds	r7, #108	; 0x6c
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop

080051e8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b08d      	sub	sp, #52	; 0x34
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	7b1b      	ldrb	r3, [r3, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 808e 	bne.w	8005318 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	785b      	ldrb	r3, [r3, #1]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d044      	beq.n	800528e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	81bb      	strh	r3, [r7, #12]
 8005212:	89bb      	ldrh	r3, [r7, #12]
 8005214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01b      	beq.n	8005254 <USB_DeactivateEndpoint+0x6c>
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005232:	817b      	strh	r3, [r7, #10]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	441a      	add	r2, r3
 800523e:	897b      	ldrh	r3, [r7, #10]
 8005240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005250:	b29b      	uxth	r3, r3
 8005252:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	b29b      	uxth	r3, r3
 8005262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800526a:	813b      	strh	r3, [r7, #8]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	441a      	add	r2, r3
 8005276:	893b      	ldrh	r3, [r7, #8]
 8005278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005288:	b29b      	uxth	r3, r3
 800528a:	8013      	strh	r3, [r2, #0]
 800528c:	e192      	b.n	80055b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	827b      	strh	r3, [r7, #18]
 800529c:	8a7b      	ldrh	r3, [r7, #18]
 800529e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01b      	beq.n	80052de <USB_DeactivateEndpoint+0xf6>
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052bc:	823b      	strh	r3, [r7, #16]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	8a3b      	ldrh	r3, [r7, #16]
 80052ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052da:	b29b      	uxth	r3, r3
 80052dc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f4:	81fb      	strh	r3, [r7, #14]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	441a      	add	r2, r3
 8005300:	89fb      	ldrh	r3, [r7, #14]
 8005302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005312:	b29b      	uxth	r3, r3
 8005314:	8013      	strh	r3, [r2, #0]
 8005316:	e14d      	b.n	80055b4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	785b      	ldrb	r3, [r3, #1]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 80a5 	bne.w	800546c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	843b      	strh	r3, [r7, #32]
 8005330:	8c3b      	ldrh	r3, [r7, #32]
 8005332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01b      	beq.n	8005372 <USB_DeactivateEndpoint+0x18a>
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005350:	83fb      	strh	r3, [r7, #30]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	8bfb      	ldrh	r3, [r7, #30]
 800535e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005366:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800536a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536e:	b29b      	uxth	r3, r3
 8005370:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	83bb      	strh	r3, [r7, #28]
 8005380:	8bbb      	ldrh	r3, [r7, #28]
 8005382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01b      	beq.n	80053c2 <USB_DeactivateEndpoint+0x1da>
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a0:	837b      	strh	r3, [r7, #26]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	8b7b      	ldrh	r3, [r7, #26]
 80053ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053be:	b29b      	uxth	r3, r3
 80053c0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d8:	833b      	strh	r3, [r7, #24]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	441a      	add	r2, r3
 80053e4:	8b3b      	ldrh	r3, [r7, #24]
 80053e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800540c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005410:	82fb      	strh	r3, [r7, #22]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	441a      	add	r2, r3
 800541c:	8afb      	ldrh	r3, [r7, #22]
 800541e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542e:	b29b      	uxth	r3, r3
 8005430:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005448:	82bb      	strh	r3, [r7, #20]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	441a      	add	r2, r3
 8005454:	8abb      	ldrh	r3, [r7, #20]
 8005456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800545a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005466:	b29b      	uxth	r3, r3
 8005468:	8013      	strh	r3, [r2, #0]
 800546a:	e0a3      	b.n	80055b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800547a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800547c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01b      	beq.n	80054bc <USB_DeactivateEndpoint+0x2d4>
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	441a      	add	r2, r3
 80054a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01b      	beq.n	800550c <USB_DeactivateEndpoint+0x324>
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	853b      	strh	r3, [r7, #40]	; 0x28
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	441a      	add	r2, r3
 80054f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005504:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005508:	b29b      	uxth	r3, r3
 800550a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005522:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	441a      	add	r2, r3
 800552e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800553c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005540:	b29b      	uxth	r3, r3
 8005542:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	441a      	add	r2, r3
 8005566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005578:	b29b      	uxth	r3, r3
 800557a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800558e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005592:	847b      	strh	r3, [r7, #34]	; 0x22
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	441a      	add	r2, r3
 800559e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3734      	adds	r7, #52	; 0x34
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b0c4      	sub	sp, #272	; 0x110
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	1d3b      	adds	r3, r7, #4
 80055ca:	6018      	str	r0, [r3, #0]
 80055cc:	463b      	mov	r3, r7
 80055ce:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055d0:	463b      	mov	r3, r7
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	785b      	ldrb	r3, [r3, #1]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	f040 8566 	bne.w	80060a8 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055dc:	463b      	mov	r3, r7
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	463b      	mov	r3, r7
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d905      	bls.n	80055f8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80055ec:	463b      	mov	r3, r7
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80055f6:	e004      	b.n	8005602 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80055f8:	463b      	mov	r3, r7
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005602:	463b      	mov	r3, r7
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	7b1b      	ldrb	r3, [r3, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d12c      	bne.n	8005666 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800560c:	463b      	mov	r3, r7
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6959      	ldr	r1, [r3, #20]
 8005612:	463b      	mov	r3, r7
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	88da      	ldrh	r2, [r3, #6]
 8005618:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800561c:	b29b      	uxth	r3, r3
 800561e:	1d38      	adds	r0, r7, #4
 8005620:	6800      	ldr	r0, [r0, #0]
 8005622:	f001 fa58 	bl	8006ad6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005634:	b29b      	uxth	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	4413      	add	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	463b      	mov	r3, r7
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	00da      	lsls	r2, r3, #3
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	4413      	add	r3, r2
 800564a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800564e:	f107 0310 	add.w	r3, r7, #16
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005658:	b29a      	uxth	r2, r3
 800565a:	f107 0310 	add.w	r3, r7, #16
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	f000 bcec 	b.w	800603e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005666:	463b      	mov	r3, r7
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	78db      	ldrb	r3, [r3, #3]
 800566c:	2b02      	cmp	r3, #2
 800566e:	f040 8356 	bne.w	8005d1e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005672:	463b      	mov	r3, r7
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6a1a      	ldr	r2, [r3, #32]
 8005678:	463b      	mov	r3, r7
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	429a      	cmp	r2, r3
 8005680:	f240 82fa 	bls.w	8005c78 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005684:	1d3b      	adds	r3, r7, #4
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	463b      	mov	r3, r7
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80056a2:	1d3b      	adds	r3, r7, #4
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	463b      	mov	r3, r7
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	441a      	add	r2, r3
 80056b0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80056b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80056c8:	463b      	mov	r3, r7
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80056d2:	463b      	mov	r3, r7
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056dc:	1ad2      	subs	r2, r2, r3
 80056de:	463b      	mov	r3, r7
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056e4:	1d3b      	adds	r3, r7, #4
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	463b      	mov	r3, r7
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 815e 	beq.w	80059bc <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005700:	1d3b      	adds	r3, r7, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	637b      	str	r3, [r7, #52]	; 0x34
 8005706:	463b      	mov	r3, r7
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	785b      	ldrb	r3, [r3, #1]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d164      	bne.n	80057da <USB_EPStartXfer+0x218>
 8005710:	1d3b      	adds	r3, r7, #4
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005716:	1d3b      	adds	r3, r7, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800571e:	b29b      	uxth	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	4413      	add	r3, r2
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005728:	463b      	mov	r3, r7
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	00da      	lsls	r2, r3, #3
 8005730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005732:	4413      	add	r3, r2
 8005734:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005738:	62bb      	str	r3, [r7, #40]	; 0x28
 800573a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800573e:	2b00      	cmp	r3, #0
 8005740:	d112      	bne.n	8005768 <USB_EPStartXfer+0x1a6>
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800574c:	b29a      	uxth	r2, r3
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	801a      	strh	r2, [r3, #0]
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29b      	uxth	r3, r3
 8005758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800575c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005760:	b29a      	uxth	r2, r3
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	801a      	strh	r2, [r3, #0]
 8005766:	e054      	b.n	8005812 <USB_EPStartXfer+0x250>
 8005768:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800576c:	2b3e      	cmp	r3, #62	; 0x3e
 800576e:	d817      	bhi.n	80057a0 <USB_EPStartXfer+0x1de>
 8005770:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800577a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d004      	beq.n	8005790 <USB_EPStartXfer+0x1ce>
 8005786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800578a:	3301      	adds	r3, #1
 800578c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005794:	b29b      	uxth	r3, r3
 8005796:	029b      	lsls	r3, r3, #10
 8005798:	b29a      	uxth	r2, r3
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	e038      	b.n	8005812 <USB_EPStartXfer+0x250>
 80057a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d104      	bne.n	80057c0 <USB_EPStartXfer+0x1fe>
 80057b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ba:	3b01      	subs	r3, #1
 80057bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	029b      	lsls	r3, r3, #10
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	801a      	strh	r2, [r3, #0]
 80057d8:	e01b      	b.n	8005812 <USB_EPStartXfer+0x250>
 80057da:	463b      	mov	r3, r7
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	785b      	ldrb	r3, [r3, #1]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d116      	bne.n	8005812 <USB_EPStartXfer+0x250>
 80057e4:	1d3b      	adds	r3, r7, #4
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f2:	4413      	add	r3, r2
 80057f4:	637b      	str	r3, [r7, #52]	; 0x34
 80057f6:	463b      	mov	r3, r7
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	00da      	lsls	r2, r3, #3
 80057fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005800:	4413      	add	r3, r2
 8005802:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005806:	633b      	str	r3, [r7, #48]	; 0x30
 8005808:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800580c:	b29a      	uxth	r2, r3
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005812:	463b      	mov	r3, r7
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	895b      	ldrh	r3, [r3, #10]
 8005818:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800581c:	463b      	mov	r3, r7
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6959      	ldr	r1, [r3, #20]
 8005822:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005826:	b29b      	uxth	r3, r3
 8005828:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800582c:	1d38      	adds	r0, r7, #4
 800582e:	6800      	ldr	r0, [r0, #0]
 8005830:	f001 f951 	bl	8006ad6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005834:	463b      	mov	r3, r7
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800583e:	441a      	add	r2, r3
 8005840:	463b      	mov	r3, r7
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005846:	463b      	mov	r3, r7
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6a1a      	ldr	r2, [r3, #32]
 800584c:	463b      	mov	r3, r7
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	429a      	cmp	r2, r3
 8005854:	d90e      	bls.n	8005874 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8005856:	463b      	mov	r3, r7
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005860:	463b      	mov	r3, r7
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	463b      	mov	r3, r7
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	621a      	str	r2, [r3, #32]
 8005872:	e008      	b.n	8005886 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005874:	463b      	mov	r3, r7
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800587e:	463b      	mov	r3, r7
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2200      	movs	r2, #0
 8005884:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005886:	463b      	mov	r3, r7
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d164      	bne.n	800595a <USB_EPStartXfer+0x398>
 8005890:	1d3b      	adds	r3, r7, #4
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	1d3b      	adds	r3, r7, #4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589e:	b29b      	uxth	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	4413      	add	r3, r2
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	463b      	mov	r3, r7
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	00da      	lsls	r2, r3, #3
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	4413      	add	r3, r2
 80058b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d112      	bne.n	80058e8 <USB_EPStartXfer+0x326>
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	e057      	b.n	8005998 <USB_EPStartXfer+0x3d6>
 80058e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058ec:	2b3e      	cmp	r3, #62	; 0x3e
 80058ee:	d817      	bhi.n	8005920 <USB_EPStartXfer+0x35e>
 80058f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d004      	beq.n	8005910 <USB_EPStartXfer+0x34e>
 8005906:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800590a:	3301      	adds	r3, #1
 800590c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005910:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005914:	b29b      	uxth	r3, r3
 8005916:	029b      	lsls	r3, r3, #10
 8005918:	b29a      	uxth	r2, r3
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	801a      	strh	r2, [r3, #0]
 800591e:	e03b      	b.n	8005998 <USB_EPStartXfer+0x3d6>
 8005920:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800592a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	2b00      	cmp	r3, #0
 8005934:	d104      	bne.n	8005940 <USB_EPStartXfer+0x37e>
 8005936:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800593a:	3b01      	subs	r3, #1
 800593c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005940:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005944:	b29b      	uxth	r3, r3
 8005946:	029b      	lsls	r3, r3, #10
 8005948:	b29b      	uxth	r3, r3
 800594a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800594e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005952:	b29a      	uxth	r2, r3
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	801a      	strh	r2, [r3, #0]
 8005958:	e01e      	b.n	8005998 <USB_EPStartXfer+0x3d6>
 800595a:	463b      	mov	r3, r7
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	785b      	ldrb	r3, [r3, #1]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d119      	bne.n	8005998 <USB_EPStartXfer+0x3d6>
 8005964:	1d3b      	adds	r3, r7, #4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
 800596a:	1d3b      	adds	r3, r7, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005972:	b29b      	uxth	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	4413      	add	r3, r2
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
 800597c:	463b      	mov	r3, r7
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	00da      	lsls	r2, r3, #3
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	4413      	add	r3, r2
 8005988:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800598c:	623b      	str	r3, [r7, #32]
 800598e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005992:	b29a      	uxth	r2, r3
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005998:	463b      	mov	r3, r7
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	891b      	ldrh	r3, [r3, #8]
 800599e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059a2:	463b      	mov	r3, r7
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6959      	ldr	r1, [r3, #20]
 80059a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80059b2:	1d38      	adds	r0, r7, #4
 80059b4:	6800      	ldr	r0, [r0, #0]
 80059b6:	f001 f88e 	bl	8006ad6 <USB_WritePMA>
 80059ba:	e340      	b.n	800603e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059bc:	463b      	mov	r3, r7
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d164      	bne.n	8005a90 <USB_EPStartXfer+0x4ce>
 80059c6:	1d3b      	adds	r3, r7, #4
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059cc:	1d3b      	adds	r3, r7, #4
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	461a      	mov	r2, r3
 80059d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059da:	4413      	add	r3, r2
 80059dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059de:	463b      	mov	r3, r7
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	00da      	lsls	r2, r3, #3
 80059e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e8:	4413      	add	r3, r2
 80059ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80059f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d112      	bne.n	8005a1e <USB_EPStartXfer+0x45c>
 80059f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	e057      	b.n	8005ace <USB_EPStartXfer+0x50c>
 8005a1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a22:	2b3e      	cmp	r3, #62	; 0x3e
 8005a24:	d817      	bhi.n	8005a56 <USB_EPStartXfer+0x494>
 8005a26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a2a:	085b      	lsrs	r3, r3, #1
 8005a2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d004      	beq.n	8005a46 <USB_EPStartXfer+0x484>
 8005a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a40:	3301      	adds	r3, #1
 8005a42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	029b      	lsls	r3, r3, #10
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	e03b      	b.n	8005ace <USB_EPStartXfer+0x50c>
 8005a56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a5a:	095b      	lsrs	r3, r3, #5
 8005a5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d104      	bne.n	8005a76 <USB_EPStartXfer+0x4b4>
 8005a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a70:	3b01      	subs	r3, #1
 8005a72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	029b      	lsls	r3, r3, #10
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	e01e      	b.n	8005ace <USB_EPStartXfer+0x50c>
 8005a90:	463b      	mov	r3, r7
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	785b      	ldrb	r3, [r3, #1]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d119      	bne.n	8005ace <USB_EPStartXfer+0x50c>
 8005a9a:	1d3b      	adds	r3, r7, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	657b      	str	r3, [r7, #84]	; 0x54
 8005aa0:	1d3b      	adds	r3, r7, #4
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	461a      	mov	r2, r3
 8005aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aae:	4413      	add	r3, r2
 8005ab0:	657b      	str	r3, [r7, #84]	; 0x54
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	00da      	lsls	r2, r3, #3
 8005aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005abc:	4413      	add	r3, r2
 8005abe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ac2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ac4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005acc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ace:	463b      	mov	r3, r7
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	891b      	ldrh	r3, [r3, #8]
 8005ad4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6959      	ldr	r1, [r3, #20]
 8005ade:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005ae8:	1d38      	adds	r0, r7, #4
 8005aea:	6800      	ldr	r0, [r0, #0]
 8005aec:	f000 fff3 	bl	8006ad6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005af0:	463b      	mov	r3, r7
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695a      	ldr	r2, [r3, #20]
 8005af6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005afa:	441a      	add	r2, r3
 8005afc:	463b      	mov	r3, r7
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b02:	463b      	mov	r3, r7
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	463b      	mov	r3, r7
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d90e      	bls.n	8005b30 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005b12:	463b      	mov	r3, r7
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6a1a      	ldr	r2, [r3, #32]
 8005b22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b26:	1ad2      	subs	r2, r2, r3
 8005b28:	463b      	mov	r3, r7
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	621a      	str	r2, [r3, #32]
 8005b2e:	e008      	b.n	8005b42 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b30:	463b      	mov	r3, r7
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b42:	1d3b      	adds	r3, r7, #4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	647b      	str	r3, [r7, #68]	; 0x44
 8005b48:	463b      	mov	r3, r7
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d164      	bne.n	8005c1c <USB_EPStartXfer+0x65a>
 8005b52:	1d3b      	adds	r3, r7, #4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b58:	1d3b      	adds	r3, r7, #4
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b66:	4413      	add	r3, r2
 8005b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	00da      	lsls	r2, r3, #3
 8005b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b74:	4413      	add	r3, r2
 8005b76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d112      	bne.n	8005baa <USB_EPStartXfer+0x5e8>
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	e054      	b.n	8005c54 <USB_EPStartXfer+0x692>
 8005baa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bae:	2b3e      	cmp	r3, #62	; 0x3e
 8005bb0:	d817      	bhi.n	8005be2 <USB_EPStartXfer+0x620>
 8005bb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d004      	beq.n	8005bd2 <USB_EPStartXfer+0x610>
 8005bc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bcc:	3301      	adds	r3, #1
 8005bce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	029b      	lsls	r3, r3, #10
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	e038      	b.n	8005c54 <USB_EPStartXfer+0x692>
 8005be2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <USB_EPStartXfer+0x640>
 8005bf8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	029b      	lsls	r3, r3, #10
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	801a      	strh	r2, [r3, #0]
 8005c1a:	e01b      	b.n	8005c54 <USB_EPStartXfer+0x692>
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	785b      	ldrb	r3, [r3, #1]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d116      	bne.n	8005c54 <USB_EPStartXfer+0x692>
 8005c26:	1d3b      	adds	r3, r7, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c34:	4413      	add	r3, r2
 8005c36:	647b      	str	r3, [r7, #68]	; 0x44
 8005c38:	463b      	mov	r3, r7
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	00da      	lsls	r2, r3, #3
 8005c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c42:	4413      	add	r3, r2
 8005c44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c48:	643b      	str	r3, [r7, #64]	; 0x40
 8005c4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c54:	463b      	mov	r3, r7
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	895b      	ldrh	r3, [r3, #10]
 8005c5a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c5e:	463b      	mov	r3, r7
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6959      	ldr	r1, [r3, #20]
 8005c64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005c6e:	1d38      	adds	r0, r7, #4
 8005c70:	6800      	ldr	r0, [r0, #0]
 8005c72:	f000 ff30 	bl	8006ad6 <USB_WritePMA>
 8005c76:	e1e2      	b.n	800603e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005c78:	463b      	mov	r3, r7
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005c82:	1d3b      	adds	r3, r7, #4
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	463b      	mov	r3, r7
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005ca0:	1d3b      	adds	r3, r7, #4
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	463b      	mov	r3, r7
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005cc6:	1d3b      	adds	r3, r7, #4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	663b      	str	r3, [r7, #96]	; 0x60
 8005ccc:	1d3b      	adds	r3, r7, #4
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cda:	4413      	add	r3, r2
 8005cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8005cde:	463b      	mov	r3, r7
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	00da      	lsls	r2, r3, #3
 8005ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ce8:	4413      	add	r3, r2
 8005cea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cf0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	891b      	ldrh	r3, [r3, #8]
 8005d00:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d04:	463b      	mov	r3, r7
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6959      	ldr	r1, [r3, #20]
 8005d0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005d14:	1d38      	adds	r0, r7, #4
 8005d16:	6800      	ldr	r0, [r0, #0]
 8005d18:	f000 fedd 	bl	8006ad6 <USB_WritePMA>
 8005d1c:	e18f      	b.n	800603e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d1e:	1d3b      	adds	r3, r7, #4
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 808f 	beq.w	8005e58 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d3a:	1d3b      	adds	r3, r7, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d40:	463b      	mov	r3, r7
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	785b      	ldrb	r3, [r3, #1]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d164      	bne.n	8005e14 <USB_EPStartXfer+0x852>
 8005d4a:	1d3b      	adds	r3, r7, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	673b      	str	r3, [r7, #112]	; 0x70
 8005d50:	1d3b      	adds	r3, r7, #4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d5e:	4413      	add	r3, r2
 8005d60:	673b      	str	r3, [r7, #112]	; 0x70
 8005d62:	463b      	mov	r3, r7
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	00da      	lsls	r2, r3, #3
 8005d6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d112      	bne.n	8005da2 <USB_EPStartXfer+0x7e0>
 8005d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8a:	801a      	strh	r2, [r3, #0]
 8005d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	e054      	b.n	8005e4c <USB_EPStartXfer+0x88a>
 8005da2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005da6:	2b3e      	cmp	r3, #62	; 0x3e
 8005da8:	d817      	bhi.n	8005dda <USB_EPStartXfer+0x818>
 8005daa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005db4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <USB_EPStartXfer+0x808>
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	029b      	lsls	r3, r3, #10
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd6:	801a      	strh	r2, [r3, #0]
 8005dd8:	e038      	b.n	8005e4c <USB_EPStartXfer+0x88a>
 8005dda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005de4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d104      	bne.n	8005dfa <USB_EPStartXfer+0x838>
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df4:	3b01      	subs	r3, #1
 8005df6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	029b      	lsls	r3, r3, #10
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e01b      	b.n	8005e4c <USB_EPStartXfer+0x88a>
 8005e14:	463b      	mov	r3, r7
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d116      	bne.n	8005e4c <USB_EPStartXfer+0x88a>
 8005e1e:	1d3b      	adds	r3, r7, #4
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e2c:	4413      	add	r3, r2
 8005e2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e30:	463b      	mov	r3, r7
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	00da      	lsls	r2, r3, #3
 8005e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e40:	677b      	str	r3, [r7, #116]	; 0x74
 8005e42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	895b      	ldrh	r3, [r3, #10]
 8005e52:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005e56:	e097      	b.n	8005f88 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e58:	463b      	mov	r3, r7
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	785b      	ldrb	r3, [r3, #1]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d168      	bne.n	8005f34 <USB_EPStartXfer+0x972>
 8005e62:	1d3b      	adds	r3, r7, #4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e6a:	1d3b      	adds	r3, r7, #4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	461a      	mov	r2, r3
 8005e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e80:	463b      	mov	r3, r7
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	00da      	lsls	r2, r3, #3
 8005e88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d112      	bne.n	8005ec2 <USB_EPStartXfer+0x900>
 8005e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eaa:	801a      	strh	r2, [r3, #0]
 8005eac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ebe:	801a      	strh	r2, [r3, #0]
 8005ec0:	e05d      	b.n	8005f7e <USB_EPStartXfer+0x9bc>
 8005ec2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ec6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ec8:	d817      	bhi.n	8005efa <USB_EPStartXfer+0x938>
 8005eca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ece:	085b      	lsrs	r3, r3, #1
 8005ed0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ed4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d004      	beq.n	8005eea <USB_EPStartXfer+0x928>
 8005ee0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005eea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	029b      	lsls	r3, r3, #10
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	e041      	b.n	8005f7e <USB_EPStartXfer+0x9bc>
 8005efa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <USB_EPStartXfer+0x958>
 8005f10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f14:	3b01      	subs	r3, #1
 8005f16:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	029b      	lsls	r3, r3, #10
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	e024      	b.n	8005f7e <USB_EPStartXfer+0x9bc>
 8005f34:	463b      	mov	r3, r7
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d11f      	bne.n	8005f7e <USB_EPStartXfer+0x9bc>
 8005f3e:	1d3b      	adds	r3, r7, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f46:	1d3b      	adds	r3, r7, #4
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f56:	4413      	add	r3, r2
 8005f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	00da      	lsls	r2, r3, #3
 8005f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f68:	4413      	add	r3, r2
 8005f6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f7e:	463b      	mov	r3, r7
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	891b      	ldrh	r3, [r3, #8]
 8005f84:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f88:	463b      	mov	r3, r7
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6959      	ldr	r1, [r3, #20]
 8005f8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005f98:	1d38      	adds	r0, r7, #4
 8005f9a:	6800      	ldr	r0, [r0, #0]
 8005f9c:	f000 fd9b 	bl	8006ad6 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005fa0:	463b      	mov	r3, r7
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	785b      	ldrb	r3, [r3, #1]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d122      	bne.n	8005ff0 <USB_EPStartXfer+0xa2e>
 8005faa:	1d3b      	adds	r3, r7, #4
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	463b      	mov	r3, r7
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005fc8:	1d3b      	adds	r3, r7, #4
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	463b      	mov	r3, r7
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	441a      	add	r2, r3
 8005fd6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	8013      	strh	r3, [r2, #0]
 8005fee:	e026      	b.n	800603e <USB_EPStartXfer+0xa7c>
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d121      	bne.n	800603e <USB_EPStartXfer+0xa7c>
 8005ffa:	1d3b      	adds	r3, r7, #4
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	463b      	mov	r3, r7
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006014:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006018:	1d3b      	adds	r3, r7, #4
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	463b      	mov	r3, r7
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	441a      	add	r2, r3
 8006026:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800602a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800602e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006032:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603a:	b29b      	uxth	r3, r3
 800603c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800603e:	1d3b      	adds	r3, r7, #4
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	463b      	mov	r3, r7
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	b29b      	uxth	r3, r3
 8006050:	f107 020e 	add.w	r2, r7, #14
 8006054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800605c:	8013      	strh	r3, [r2, #0]
 800605e:	f107 030e 	add.w	r3, r7, #14
 8006062:	f107 020e 	add.w	r2, r7, #14
 8006066:	8812      	ldrh	r2, [r2, #0]
 8006068:	f082 0210 	eor.w	r2, r2, #16
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	f107 030e 	add.w	r3, r7, #14
 8006072:	f107 020e 	add.w	r2, r7, #14
 8006076:	8812      	ldrh	r2, [r2, #0]
 8006078:	f082 0220 	eor.w	r2, r2, #32
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	1d3b      	adds	r3, r7, #4
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	463b      	mov	r3, r7
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	f107 030e 	add.w	r3, r7, #14
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	8013      	strh	r3, [r2, #0]
 80060a6:	e3b5      	b.n	8006814 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80060a8:	463b      	mov	r3, r7
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	7b1b      	ldrb	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f040 8090 	bne.w	80061d4 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80060b4:	463b      	mov	r3, r7
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	463b      	mov	r3, r7
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d90e      	bls.n	80060e2 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80060c4:	463b      	mov	r3, r7
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80060ce:	463b      	mov	r3, r7
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	699a      	ldr	r2, [r3, #24]
 80060d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060d8:	1ad2      	subs	r2, r2, r3
 80060da:	463b      	mov	r3, r7
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	619a      	str	r2, [r3, #24]
 80060e0:	e008      	b.n	80060f4 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 80060e2:	463b      	mov	r3, r7
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 80060ec:	463b      	mov	r3, r7
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2200      	movs	r2, #0
 80060f2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80060f4:	1d3b      	adds	r3, r7, #4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060fc:	1d3b      	adds	r3, r7, #4
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006104:	b29b      	uxth	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800610c:	4413      	add	r3, r2
 800610e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006112:	463b      	mov	r3, r7
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	00da      	lsls	r2, r3, #3
 800611a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800611e:	4413      	add	r3, r2
 8006120:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006124:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006128:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800612c:	2b00      	cmp	r3, #0
 800612e:	d116      	bne.n	800615e <USB_EPStartXfer+0xb9c>
 8006130:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29b      	uxth	r3, r3
 8006138:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800613c:	b29a      	uxth	r2, r3
 800613e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006142:	801a      	strh	r2, [r3, #0]
 8006144:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29b      	uxth	r3, r3
 800614c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006154:	b29a      	uxth	r2, r3
 8006156:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	e32c      	b.n	80067b8 <USB_EPStartXfer+0x11f6>
 800615e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006162:	2b3e      	cmp	r3, #62	; 0x3e
 8006164:	d818      	bhi.n	8006198 <USB_EPStartXfer+0xbd6>
 8006166:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800616a:	085b      	lsrs	r3, r3, #1
 800616c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006170:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <USB_EPStartXfer+0xbc4>
 800617c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006180:	3301      	adds	r3, #1
 8006182:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006186:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800618a:	b29b      	uxth	r3, r3
 800618c:	029b      	lsls	r3, r3, #10
 800618e:	b29a      	uxth	r2, r3
 8006190:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	e30f      	b.n	80067b8 <USB_EPStartXfer+0x11f6>
 8006198:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061a6:	f003 031f 	and.w	r3, r3, #31
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d104      	bne.n	80061b8 <USB_EPStartXfer+0xbf6>
 80061ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061b2:	3b01      	subs	r3, #1
 80061b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061bc:	b29b      	uxth	r3, r3
 80061be:	029b      	lsls	r3, r3, #10
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	e2f1      	b.n	80067b8 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80061d4:	463b      	mov	r3, r7
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	78db      	ldrb	r3, [r3, #3]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	f040 818f 	bne.w	80064fe <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061e0:	463b      	mov	r3, r7
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d175      	bne.n	80062d6 <USB_EPStartXfer+0xd14>
 80061ea:	1d3b      	adds	r3, r7, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061f2:	1d3b      	adds	r3, r7, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006202:	4413      	add	r3, r2
 8006204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006208:	463b      	mov	r3, r7
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	00da      	lsls	r2, r3, #3
 8006210:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006214:	4413      	add	r3, r2
 8006216:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800621a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800621e:	463b      	mov	r3, r7
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d116      	bne.n	8006256 <USB_EPStartXfer+0xc94>
 8006228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006234:	b29a      	uxth	r2, r3
 8006236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624c:	b29a      	uxth	r2, r3
 800624e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006252:	801a      	strh	r2, [r3, #0]
 8006254:	e065      	b.n	8006322 <USB_EPStartXfer+0xd60>
 8006256:	463b      	mov	r3, r7
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	2b3e      	cmp	r3, #62	; 0x3e
 800625e:	d81a      	bhi.n	8006296 <USB_EPStartXfer+0xcd4>
 8006260:	463b      	mov	r3, r7
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800626c:	463b      	mov	r3, r7
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <USB_EPStartXfer+0xcc2>
 800627a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800627e:	3301      	adds	r3, #1
 8006280:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006284:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006288:	b29b      	uxth	r3, r3
 800628a:	029b      	lsls	r3, r3, #10
 800628c:	b29a      	uxth	r2, r3
 800628e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006292:	801a      	strh	r2, [r3, #0]
 8006294:	e045      	b.n	8006322 <USB_EPStartXfer+0xd60>
 8006296:	463b      	mov	r3, r7
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062a2:	463b      	mov	r3, r7
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d104      	bne.n	80062ba <USB_EPStartXfer+0xcf8>
 80062b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062b4:	3b01      	subs	r3, #1
 80062b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062be:	b29b      	uxth	r3, r3
 80062c0:	029b      	lsls	r3, r3, #10
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	e025      	b.n	8006322 <USB_EPStartXfer+0xd60>
 80062d6:	463b      	mov	r3, r7
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d120      	bne.n	8006322 <USB_EPStartXfer+0xd60>
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062e8:	1d3b      	adds	r3, r7, #4
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062f8:	4413      	add	r3, r2
 80062fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062fe:	463b      	mov	r3, r7
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	00da      	lsls	r2, r3, #3
 8006306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800630a:	4413      	add	r3, r2
 800630c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006314:	463b      	mov	r3, r7
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	b29a      	uxth	r2, r3
 800631c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	1d3b      	adds	r3, r7, #4
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800632a:	463b      	mov	r3, r7
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	785b      	ldrb	r3, [r3, #1]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d175      	bne.n	8006420 <USB_EPStartXfer+0xe5e>
 8006334:	1d3b      	adds	r3, r7, #4
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800633c:	1d3b      	adds	r3, r7, #4
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006344:	b29b      	uxth	r3, r3
 8006346:	461a      	mov	r2, r3
 8006348:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800634c:	4413      	add	r3, r2
 800634e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006352:	463b      	mov	r3, r7
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	00da      	lsls	r2, r3, #3
 800635a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800635e:	4413      	add	r3, r2
 8006360:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006368:	463b      	mov	r3, r7
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d116      	bne.n	80063a0 <USB_EPStartXfer+0xdde>
 8006372:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	b29b      	uxth	r3, r3
 800637a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800637e:	b29a      	uxth	r2, r3
 8006380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006384:	801a      	strh	r2, [r3, #0]
 8006386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006396:	b29a      	uxth	r2, r3
 8006398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800639c:	801a      	strh	r2, [r3, #0]
 800639e:	e061      	b.n	8006464 <USB_EPStartXfer+0xea2>
 80063a0:	463b      	mov	r3, r7
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	2b3e      	cmp	r3, #62	; 0x3e
 80063a8:	d81a      	bhi.n	80063e0 <USB_EPStartXfer+0xe1e>
 80063aa:	463b      	mov	r3, r7
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	085b      	lsrs	r3, r3, #1
 80063b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063b6:	463b      	mov	r3, r7
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d004      	beq.n	80063ce <USB_EPStartXfer+0xe0c>
 80063c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c8:	3301      	adds	r3, #1
 80063ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	029b      	lsls	r3, r3, #10
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	e041      	b.n	8006464 <USB_EPStartXfer+0xea2>
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063ec:	463b      	mov	r3, r7
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d104      	bne.n	8006404 <USB_EPStartXfer+0xe42>
 80063fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fe:	3b01      	subs	r3, #1
 8006400:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006408:	b29b      	uxth	r3, r3
 800640a:	029b      	lsls	r3, r3, #10
 800640c:	b29b      	uxth	r3, r3
 800640e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006416:	b29a      	uxth	r2, r3
 8006418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800641c:	801a      	strh	r2, [r3, #0]
 800641e:	e021      	b.n	8006464 <USB_EPStartXfer+0xea2>
 8006420:	463b      	mov	r3, r7
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	785b      	ldrb	r3, [r3, #1]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d11c      	bne.n	8006464 <USB_EPStartXfer+0xea2>
 800642a:	1d3b      	adds	r3, r7, #4
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006432:	b29b      	uxth	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800643a:	4413      	add	r3, r2
 800643c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006440:	463b      	mov	r3, r7
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	00da      	lsls	r2, r3, #3
 8006448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800644c:	4413      	add	r3, r2
 800644e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006456:	463b      	mov	r3, r7
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	b29a      	uxth	r2, r3
 800645e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006462:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8006464:	463b      	mov	r3, r7
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 81a4 	beq.w	80067b8 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006470:	1d3b      	adds	r3, r7, #4
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	463b      	mov	r3, r7
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006484:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <USB_EPStartXfer+0xeda>
 8006490:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10d      	bne.n	80064b8 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800649c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80064a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f040 8187 	bne.w	80067b8 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064aa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80064ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f040 8180 	bne.w	80067b8 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80064b8:	1d3b      	adds	r3, r7, #4
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	463b      	mov	r3, r7
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80064d6:	1d3b      	adds	r3, r7, #4
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	463b      	mov	r3, r7
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	441a      	add	r2, r3
 80064e4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80064e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	8013      	strh	r3, [r2, #0]
 80064fc:	e15c      	b.n	80067b8 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064fe:	463b      	mov	r3, r7
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	78db      	ldrb	r3, [r3, #3]
 8006504:	2b01      	cmp	r3, #1
 8006506:	f040 8155 	bne.w	80067b4 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800650a:	463b      	mov	r3, r7
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699a      	ldr	r2, [r3, #24]
 8006510:	463b      	mov	r3, r7
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	429a      	cmp	r2, r3
 8006518:	d90e      	bls.n	8006538 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800651a:	463b      	mov	r3, r7
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8006524:	463b      	mov	r3, r7
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	463b      	mov	r3, r7
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	619a      	str	r2, [r3, #24]
 8006536:	e008      	b.n	800654a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8006538:	463b      	mov	r3, r7
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8006542:	463b      	mov	r3, r7
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2200      	movs	r2, #0
 8006548:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800654a:	463b      	mov	r3, r7
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d16f      	bne.n	8006634 <USB_EPStartXfer+0x1072>
 8006554:	1d3b      	adds	r3, r7, #4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800655c:	1d3b      	adds	r3, r7, #4
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006564:	b29b      	uxth	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800656c:	4413      	add	r3, r2
 800656e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006572:	463b      	mov	r3, r7
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	00da      	lsls	r2, r3, #3
 800657a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800657e:	4413      	add	r3, r2
 8006580:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006584:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006588:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800658c:	2b00      	cmp	r3, #0
 800658e:	d116      	bne.n	80065be <USB_EPStartXfer+0xffc>
 8006590:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800659c:	b29a      	uxth	r2, r3
 800659e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065ba:	801a      	strh	r2, [r3, #0]
 80065bc:	e05f      	b.n	800667e <USB_EPStartXfer+0x10bc>
 80065be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c2:	2b3e      	cmp	r3, #62	; 0x3e
 80065c4:	d818      	bhi.n	80065f8 <USB_EPStartXfer+0x1036>
 80065c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ca:	085b      	lsrs	r3, r3, #1
 80065cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <USB_EPStartXfer+0x1024>
 80065dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e0:	3301      	adds	r3, #1
 80065e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	029b      	lsls	r3, r3, #10
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065f4:	801a      	strh	r2, [r3, #0]
 80065f6:	e042      	b.n	800667e <USB_EPStartXfer+0x10bc>
 80065f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006602:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <USB_EPStartXfer+0x1056>
 800660e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006612:	3b01      	subs	r3, #1
 8006614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800661c:	b29b      	uxth	r3, r3
 800661e:	029b      	lsls	r3, r3, #10
 8006620:	b29b      	uxth	r3, r3
 8006622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662a:	b29a      	uxth	r2, r3
 800662c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006630:	801a      	strh	r2, [r3, #0]
 8006632:	e024      	b.n	800667e <USB_EPStartXfer+0x10bc>
 8006634:	463b      	mov	r3, r7
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d11f      	bne.n	800667e <USB_EPStartXfer+0x10bc>
 800663e:	1d3b      	adds	r3, r7, #4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006646:	1d3b      	adds	r3, r7, #4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664e:	b29b      	uxth	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006656:	4413      	add	r3, r2
 8006658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800665c:	463b      	mov	r3, r7
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	00da      	lsls	r2, r3, #3
 8006664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006668:	4413      	add	r3, r2
 800666a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800666e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006672:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006676:	b29a      	uxth	r2, r3
 8006678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	1d3b      	adds	r3, r7, #4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006686:	463b      	mov	r3, r7
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d16f      	bne.n	8006770 <USB_EPStartXfer+0x11ae>
 8006690:	1d3b      	adds	r3, r7, #4
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006698:	1d3b      	adds	r3, r7, #4
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066a8:	4413      	add	r3, r2
 80066aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066ae:	463b      	mov	r3, r7
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	00da      	lsls	r2, r3, #3
 80066b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066ba:	4413      	add	r3, r2
 80066bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d116      	bne.n	80066fa <USB_EPStartXfer+0x1138>
 80066cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066d8:	b29a      	uxth	r2, r3
 80066da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066f6:	801a      	strh	r2, [r3, #0]
 80066f8:	e05e      	b.n	80067b8 <USB_EPStartXfer+0x11f6>
 80066fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006700:	d818      	bhi.n	8006734 <USB_EPStartXfer+0x1172>
 8006702:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800670c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <USB_EPStartXfer+0x1160>
 8006718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800671c:	3301      	adds	r3, #1
 800671e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006726:	b29b      	uxth	r3, r3
 8006728:	029b      	lsls	r3, r3, #10
 800672a:	b29a      	uxth	r2, r3
 800672c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006730:	801a      	strh	r2, [r3, #0]
 8006732:	e041      	b.n	80067b8 <USB_EPStartXfer+0x11f6>
 8006734:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800673e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <USB_EPStartXfer+0x1192>
 800674a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800674e:	3b01      	subs	r3, #1
 8006750:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006758:	b29b      	uxth	r3, r3
 800675a:	029b      	lsls	r3, r3, #10
 800675c:	b29b      	uxth	r3, r3
 800675e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006766:	b29a      	uxth	r2, r3
 8006768:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800676c:	801a      	strh	r2, [r3, #0]
 800676e:	e023      	b.n	80067b8 <USB_EPStartXfer+0x11f6>
 8006770:	463b      	mov	r3, r7
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d11e      	bne.n	80067b8 <USB_EPStartXfer+0x11f6>
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006782:	b29b      	uxth	r3, r3
 8006784:	461a      	mov	r2, r3
 8006786:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800678a:	4413      	add	r3, r2
 800678c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006790:	463b      	mov	r3, r7
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	00da      	lsls	r2, r3, #3
 8006798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800679c:	4413      	add	r3, r2
 800679e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067b0:	801a      	strh	r2, [r3, #0]
 80067b2:	e001      	b.n	80067b8 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e02e      	b.n	8006816 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067b8:	1d3b      	adds	r3, r7, #4
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	463b      	mov	r3, r7
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067d6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067de:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067ee:	1d3b      	adds	r3, r7, #4
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	463b      	mov	r3, r7
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	441a      	add	r2, r3
 80067fc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006810:	b29b      	uxth	r3, r3
 8006812:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	785b      	ldrb	r3, [r3, #1]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d020      	beq.n	8006874 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006848:	81bb      	strh	r3, [r7, #12]
 800684a:	89bb      	ldrh	r3, [r7, #12]
 800684c:	f083 0310 	eor.w	r3, r3, #16
 8006850:	81bb      	strh	r3, [r7, #12]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	441a      	add	r2, r3
 800685c:	89bb      	ldrh	r3, [r7, #12]
 800685e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686e:	b29b      	uxth	r3, r3
 8006870:	8013      	strh	r3, [r2, #0]
 8006872:	e01f      	b.n	80068b4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	81fb      	strh	r3, [r7, #14]
 800688c:	89fb      	ldrh	r3, [r7, #14]
 800688e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006892:	81fb      	strh	r3, [r7, #14]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	441a      	add	r2, r3
 800689e:	89fb      	ldrh	r3, [r7, #14]
 80068a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b087      	sub	sp, #28
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	7b1b      	ldrb	r3, [r3, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f040 809d 	bne.w	8006a10 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d04c      	beq.n	8006978 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	823b      	strh	r3, [r7, #16]
 80068ec:	8a3b      	ldrh	r3, [r7, #16]
 80068ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d01b      	beq.n	800692e <USB_EPClearStall+0x6c>
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690c:	81fb      	strh	r3, [r7, #14]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	441a      	add	r2, r3
 8006918:	89fb      	ldrh	r3, [r7, #14]
 800691a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006926:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800692a:	b29b      	uxth	r3, r3
 800692c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	78db      	ldrb	r3, [r3, #3]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d06c      	beq.n	8006a10 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800694c:	81bb      	strh	r3, [r7, #12]
 800694e:	89bb      	ldrh	r3, [r7, #12]
 8006950:	f083 0320 	eor.w	r3, r3, #32
 8006954:	81bb      	strh	r3, [r7, #12]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	441a      	add	r2, r3
 8006960:	89bb      	ldrh	r3, [r7, #12]
 8006962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800696a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006972:	b29b      	uxth	r3, r3
 8006974:	8013      	strh	r3, [r2, #0]
 8006976:	e04b      	b.n	8006a10 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	82fb      	strh	r3, [r7, #22]
 8006986:	8afb      	ldrh	r3, [r7, #22]
 8006988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01b      	beq.n	80069c8 <USB_EPClearStall+0x106>
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	82bb      	strh	r3, [r7, #20]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	8abb      	ldrh	r3, [r7, #20]
 80069b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069de:	827b      	strh	r3, [r7, #18]
 80069e0:	8a7b      	ldrh	r3, [r7, #18]
 80069e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069e6:	827b      	strh	r3, [r7, #18]
 80069e8:	8a7b      	ldrh	r3, [r7, #18]
 80069ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069ee:	827b      	strh	r3, [r7, #18]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	441a      	add	r2, r3
 80069fa:	8a7b      	ldrh	r3, [r7, #18]
 80069fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	460b      	mov	r3, r1
 8006a28:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d103      	bne.n	8006a38 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2280      	movs	r2, #128	; 0x80
 8006a34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b08d      	sub	sp, #52	; 0x34
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	80fb      	strh	r3, [r7, #6]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006aec:	88bb      	ldrh	r3, [r7, #4]
 8006aee:	3301      	adds	r3, #1
 8006af0:	085b      	lsrs	r3, r3, #1
 8006af2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b0c:	e01b      	b.n	8006b46 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	3301      	adds	r3, #1
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	3302      	adds	r3, #2
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b42:	3b01      	subs	r3, #1
 8006b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e0      	bne.n	8006b0e <USB_WritePMA+0x38>
  }
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	3734      	adds	r7, #52	; 0x34
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b08b      	sub	sp, #44	; 0x2c
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	4611      	mov	r1, r2
 8006b66:	461a      	mov	r2, r3
 8006b68:	460b      	mov	r3, r1
 8006b6a:	80fb      	strh	r3, [r7, #6]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b70:	88bb      	ldrh	r3, [r7, #4]
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b80:	88fa      	ldrh	r2, [r7, #6]
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b8a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b90:	e018      	b.n	8006bc4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	3302      	adds	r3, #2
 8006b9e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	3301      	adds	r3, #1
 8006bac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	0a1b      	lsrs	r3, r3, #8
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e3      	bne.n	8006b92 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006bca:	88bb      	ldrh	r3, [r7, #4]
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d007      	beq.n	8006be6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	701a      	strb	r2, [r3, #0]
  }
}
 8006be6:	bf00      	nop
 8006be8:	372c      	adds	r7, #44	; 0x2c
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bfe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c02:	f002 f9bf 	bl	8008f84 <malloc>
 8006c06:	4603      	mov	r3, r0
 8006c08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d105      	bne.n	8006c1c <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e066      	b.n	8006cea <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	7c1b      	ldrb	r3, [r3, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d119      	bne.n	8006c60 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c30:	2202      	movs	r2, #2
 8006c32:	2181      	movs	r1, #129	; 0x81
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 ff77 	bl	8008b28 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c44:	2202      	movs	r2, #2
 8006c46:	2101      	movs	r1, #1
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 ff6d 	bl	8008b28 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2210      	movs	r2, #16
 8006c5a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c5e:	e016      	b.n	8006c8e <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c60:	2340      	movs	r3, #64	; 0x40
 8006c62:	2202      	movs	r2, #2
 8006c64:	2181      	movs	r1, #129	; 0x81
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 ff5e 	bl	8008b28 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c72:	2340      	movs	r3, #64	; 0x40
 8006c74:	2202      	movs	r2, #2
 8006c76:	2101      	movs	r1, #1
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 ff55 	bl	8008b28 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2210      	movs	r2, #16
 8006c8a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c8e:	2308      	movs	r3, #8
 8006c90:	2203      	movs	r2, #3
 8006c92:	2182      	movs	r1, #130	; 0x82
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 ff47 	bl	8008b28 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	7c1b      	ldrb	r3, [r3, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d109      	bne.n	8006cd8 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cce:	2101      	movs	r1, #1
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f002 f8a5 	bl	8008e20 <USBD_LL_PrepareReceive>
 8006cd6:	e007      	b.n	8006ce8 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cde:	2340      	movs	r3, #64	; 0x40
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f002 f89c 	bl	8008e20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cfe:	2181      	movs	r1, #129	; 0x81
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 ff4f 	bl	8008ba4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 ff48 	bl	8008ba4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d1c:	2182      	movs	r1, #130	; 0x82
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 ff40 	bl	8008ba4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00e      	beq.n	8006d5c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f002 f920 	bl	8008f94 <free>
    pdev->pClassData = NULL;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d78:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d03a      	beq.n	8006e08 <USBD_CDC_Setup+0xa0>
 8006d92:	2b20      	cmp	r3, #32
 8006d94:	f040 8097 	bne.w	8006ec6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	88db      	ldrh	r3, [r3, #6]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d029      	beq.n	8006df4 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	b25b      	sxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	da11      	bge.n	8006dce <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006db6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	88d2      	ldrh	r2, [r2, #6]
 8006dbc:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006dbe:	6939      	ldr	r1, [r7, #16]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	88db      	ldrh	r3, [r3, #6]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 fa9c 	bl	8008304 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006dcc:	e082      	b.n	8006ed4 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	785a      	ldrb	r2, [r3, #1]
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	88db      	ldrh	r3, [r3, #6]
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006de4:	6939      	ldr	r1, [r7, #16]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	88db      	ldrh	r3, [r3, #6]
 8006dea:	461a      	mov	r2, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fab5 	bl	800835c <USBD_CtlPrepareRx>
      break;
 8006df2:	e06f      	b.n	8006ed4 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	7850      	ldrb	r0, [r2, #1]
 8006e00:	2200      	movs	r2, #0
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	4798      	blx	r3
      break;
 8006e06:	e065      	b.n	8006ed4 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	785b      	ldrb	r3, [r3, #1]
 8006e0c:	2b0b      	cmp	r3, #11
 8006e0e:	d84f      	bhi.n	8006eb0 <USBD_CDC_Setup+0x148>
 8006e10:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <USBD_CDC_Setup+0xb0>)
 8006e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e16:	bf00      	nop
 8006e18:	08006e49 	.word	0x08006e49
 8006e1c:	08006ebf 	.word	0x08006ebf
 8006e20:	08006eb1 	.word	0x08006eb1
 8006e24:	08006eb1 	.word	0x08006eb1
 8006e28:	08006eb1 	.word	0x08006eb1
 8006e2c:	08006eb1 	.word	0x08006eb1
 8006e30:	08006eb1 	.word	0x08006eb1
 8006e34:	08006eb1 	.word	0x08006eb1
 8006e38:	08006eb1 	.word	0x08006eb1
 8006e3c:	08006eb1 	.word	0x08006eb1
 8006e40:	08006e71 	.word	0x08006e71
 8006e44:	08006e99 	.word	0x08006e99
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d107      	bne.n	8006e62 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e52:	f107 030c 	add.w	r3, r7, #12
 8006e56:	2202      	movs	r2, #2
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fa52 	bl	8008304 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e60:	e030      	b.n	8006ec4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 f9dc 	bl	8008222 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e6e:	e029      	b.n	8006ec4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d107      	bne.n	8006e8a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e7a:	f107 030f 	add.w	r3, r7, #15
 8006e7e:	2201      	movs	r2, #1
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 fa3e 	bl	8008304 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e88:	e01c      	b.n	8006ec4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 f9c8 	bl	8008222 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e92:	2303      	movs	r3, #3
 8006e94:	75fb      	strb	r3, [r7, #23]
          break;
 8006e96:	e015      	b.n	8006ec4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d00f      	beq.n	8006ec2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 f9bc 	bl	8008222 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006eae:	e008      	b.n	8006ec2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 f9b5 	bl	8008222 <USBD_CtlError>
          ret = USBD_FAIL;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	75fb      	strb	r3, [r7, #23]
          break;
 8006ebc:	e002      	b.n	8006ec4 <USBD_CDC_Setup+0x15c>
          break;
 8006ebe:	bf00      	nop
 8006ec0:	e008      	b.n	8006ed4 <USBD_CDC_Setup+0x16c>
          break;
 8006ec2:	bf00      	nop
      }
      break;
 8006ec4:	e006      	b.n	8006ed4 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 f9aa 	bl	8008222 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed2:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop

08006ee0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ef2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e04f      	b.n	8006fa2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	440b      	add	r3, r1
 8006f18:	3318      	adds	r3, #24
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d029      	beq.n	8006f74 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f20:	78fa      	ldrb	r2, [r7, #3]
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	3318      	adds	r3, #24
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	78f9      	ldrb	r1, [r7, #3]
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	460b      	mov	r3, r1
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	4403      	add	r3, r0
 8006f40:	3338      	adds	r3, #56	; 0x38
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f48:	fb03 f301 	mul.w	r3, r3, r1
 8006f4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d110      	bne.n	8006f74 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f52:	78fa      	ldrb	r2, [r7, #3]
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	3318      	adds	r3, #24
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f66:	78f9      	ldrb	r1, [r7, #3]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 ff1f 	bl	8008db0 <USBD_LL_Transmit>
 8006f72:	e015      	b.n	8006fa0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00b      	beq.n	8006fa0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e015      	b.n	8006ff8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fcc:	78fb      	ldrb	r3, [r7, #3]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 ff5d 	bl	8008e90 <USBD_LL_GetRxDataSize>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800700e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d015      	beq.n	8007046 <USBD_CDC_EP0_RxReady+0x46>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007020:	2bff      	cmp	r3, #255	; 0xff
 8007022:	d010      	beq.n	8007046 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007032:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800703a:	b292      	uxth	r2, r2
 800703c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	22ff      	movs	r2, #255	; 0xff
 8007042:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2243      	movs	r2, #67	; 0x43
 800705c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800705e:	4b03      	ldr	r3, [pc, #12]	; (800706c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	200000a4 	.word	0x200000a4

08007070 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2243      	movs	r2, #67	; 0x43
 800707c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800707e:	4b03      	ldr	r3, [pc, #12]	; (800708c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007080:	4618      	mov	r0, r3
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	20000060 	.word	0x20000060

08007090 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2243      	movs	r2, #67	; 0x43
 800709c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800709e:	4b03      	ldr	r3, [pc, #12]	; (80070ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	200000e8 	.word	0x200000e8

080070b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	220a      	movs	r2, #10
 80070bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80070be:	4b03      	ldr	r3, [pc, #12]	; (80070cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	2000001c 	.word	0x2000001c

080070d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e004      	b.n	80070ee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b087      	sub	sp, #28
 80070fe:	af00      	add	r7, sp, #0
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800710c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	371c      	adds	r7, #28
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800713c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007162:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007164:	2301      	movs	r3, #1
 8007166:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007172:	2303      	movs	r3, #3
 8007174:	e01a      	b.n	80071ac <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800717c:	2b00      	cmp	r3, #0
 800717e:	d114      	bne.n	80071aa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2201      	movs	r2, #1
 8007184:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800719e:	2181      	movs	r1, #129	; 0x81
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 fe05 	bl	8008db0 <USBD_LL_Transmit>

    ret = USBD_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e016      	b.n	8007200 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	7c1b      	ldrb	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d109      	bne.n	80071ee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071e4:	2101      	movs	r1, #1
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 fe1a 	bl	8008e20 <USBD_LL_PrepareReceive>
 80071ec:	e007      	b.n	80071fe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071f4:	2340      	movs	r3, #64	; 0x40
 80071f6:	2101      	movs	r1, #1
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f001 fe11 	bl	8008e20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	e01f      	b.n	8007260 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	79fa      	ldrb	r2, [r7, #7]
 8007252:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f001 fbd3 	bl	8008a00 <USBD_LL_Init>
 800725a:	4603      	mov	r3, r0
 800725c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800725e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800727c:	2303      	movs	r3, #3
 800727e:	e016      	b.n	80072ae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	f107 020e 	add.w	r2, r7, #14
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
 80072a4:	4602      	mov	r2, r0
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 fc00 	bl	8008ac4 <USBD_LL_Start>
 80072c4:	4603      	mov	r3, r0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80072f0:	2303      	movs	r3, #3
 80072f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	78fa      	ldrb	r2, [r7, #3]
 8007308:	4611      	mov	r1, r2
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
 800730e:	4603      	mov	r3, r0
 8007310:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007312:	7bfb      	ldrb	r3, [r7, #15]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732e:	2b00      	cmp	r3, #0
 8007330:	d007      	beq.n	8007342 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	78fa      	ldrb	r2, [r7, #3]
 800733c:	4611      	mov	r1, r2
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	4798      	blx	r3
  }

  return USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f000 ff25 	bl	80081ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007372:	461a      	mov	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007380:	f003 031f 	and.w	r3, r3, #31
 8007384:	2b02      	cmp	r3, #2
 8007386:	d01a      	beq.n	80073be <USBD_LL_SetupStage+0x72>
 8007388:	2b02      	cmp	r3, #2
 800738a:	d822      	bhi.n	80073d2 <USBD_LL_SetupStage+0x86>
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <USBD_LL_SetupStage+0x4a>
 8007390:	2b01      	cmp	r3, #1
 8007392:	d00a      	beq.n	80073aa <USBD_LL_SetupStage+0x5e>
 8007394:	e01d      	b.n	80073d2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f9d6 	bl	8007750 <USBD_StdDevReq>
 80073a4:	4603      	mov	r3, r0
 80073a6:	73fb      	strb	r3, [r7, #15]
      break;
 80073a8:	e020      	b.n	80073ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fa3a 	bl	800782c <USBD_StdItfReq>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]
      break;
 80073bc:	e016      	b.n	80073ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fa78 	bl	80078bc <USBD_StdEPReq>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]
      break;
 80073d0:	e00c      	b.n	80073ec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 fc15 	bl	8008c10 <USBD_LL_StallEP>
 80073e6:	4603      	mov	r3, r0
 80073e8:	73fb      	strb	r3, [r7, #15]
      break;
 80073ea:	bf00      	nop
  }

  return ret;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b086      	sub	sp, #24
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	460b      	mov	r3, r1
 8007400:	607a      	str	r2, [r7, #4]
 8007402:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007404:	7afb      	ldrb	r3, [r7, #11]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d137      	bne.n	800747a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007410:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007418:	2b03      	cmp	r3, #3
 800741a:	d14a      	bne.n	80074b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	429a      	cmp	r2, r3
 8007426:	d913      	bls.n	8007450 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	1ad2      	subs	r2, r2, r3
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	4293      	cmp	r3, r2
 8007440:	bf28      	it	cs
 8007442:	4613      	movcs	r3, r2
 8007444:	461a      	mov	r2, r3
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 ffa4 	bl	8008396 <USBD_CtlContinueRx>
 800744e:	e030      	b.n	80074b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00a      	beq.n	8007472 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007462:	2b03      	cmp	r3, #3
 8007464:	d105      	bne.n	8007472 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 ffa0 	bl	80083b8 <USBD_CtlSendStatus>
 8007478:	e01b      	b.n	80074b2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d013      	beq.n	80074ae <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800748c:	2b03      	cmp	r3, #3
 800748e:	d10e      	bne.n	80074ae <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	7afa      	ldrb	r2, [r7, #11]
 800749a:	4611      	mov	r1, r2
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	4798      	blx	r3
 80074a0:	4603      	mov	r3, r0
 80074a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	e002      	b.n	80074b4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e000      	b.n	80074b4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3718      	adds	r7, #24
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	460b      	mov	r3, r1
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80074ca:	7afb      	ldrb	r3, [r7, #11]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d16a      	bne.n	80075a6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	3314      	adds	r3, #20
 80074d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d155      	bne.n	800758c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	689a      	ldr	r2, [r3, #8]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d914      	bls.n	8007516 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	1ad2      	subs	r2, r2, r3
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	461a      	mov	r2, r3
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 ff19 	bl	800833a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007508:	2300      	movs	r3, #0
 800750a:	2200      	movs	r2, #0
 800750c:	2100      	movs	r1, #0
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f001 fc86 	bl	8008e20 <USBD_LL_PrepareReceive>
 8007514:	e03a      	b.n	800758c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	429a      	cmp	r2, r3
 8007520:	d11c      	bne.n	800755c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800752a:	429a      	cmp	r2, r3
 800752c:	d316      	bcc.n	800755c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007538:	429a      	cmp	r2, r3
 800753a:	d20f      	bcs.n	800755c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800753c:	2200      	movs	r2, #0
 800753e:	2100      	movs	r1, #0
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 fefa 	bl	800833a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800754e:	2300      	movs	r3, #0
 8007550:	2200      	movs	r2, #0
 8007552:	2100      	movs	r1, #0
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f001 fc63 	bl	8008e20 <USBD_LL_PrepareReceive>
 800755a:	e017      	b.n	800758c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800756e:	2b03      	cmp	r3, #3
 8007570:	d105      	bne.n	800757e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800757e:	2180      	movs	r1, #128	; 0x80
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f001 fb45 	bl	8008c10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 ff29 	bl	80083de <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007592:	2b01      	cmp	r3, #1
 8007594:	d123      	bne.n	80075de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff fe99 	bl	80072ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075a4:	e01b      	b.n	80075de <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d013      	beq.n	80075da <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d10e      	bne.n	80075da <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	7afa      	ldrb	r2, [r7, #11]
 80075c6:	4611      	mov	r1, r2
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	4798      	blx	r3
 80075cc:	4603      	mov	r3, r0
 80075ce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	e002      	b.n	80075e0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075da:	2303      	movs	r3, #3
 80075dc:	e000      	b.n	80075e0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007614:	2b00      	cmp	r3, #0
 8007616:	d009      	beq.n	800762c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	6852      	ldr	r2, [r2, #4]
 8007624:	b2d2      	uxtb	r2, r2
 8007626:	4611      	mov	r1, r2
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800762c:	2340      	movs	r3, #64	; 0x40
 800762e:	2200      	movs	r2, #0
 8007630:	2100      	movs	r1, #0
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 fa78 	bl	8008b28 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2240      	movs	r2, #64	; 0x40
 8007644:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007648:	2340      	movs	r3, #64	; 0x40
 800764a:	2200      	movs	r2, #0
 800764c:	2180      	movs	r1, #128	; 0x80
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 fa6a 	bl	8008b28 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2240      	movs	r2, #64	; 0x40
 800765e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	460b      	mov	r3, r1
 8007674:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2204      	movs	r2, #4
 80076a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d105      	bne.n	80076d2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d10b      	bne.n	800770a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d005      	beq.n	800770a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	3301      	adds	r3, #1
 800772a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007732:	8a3b      	ldrh	r3, [r7, #16]
 8007734:	021b      	lsls	r3, r3, #8
 8007736:	b21a      	sxth	r2, r3
 8007738:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800773c:	4313      	orrs	r3, r2
 800773e:	b21b      	sxth	r3, r3
 8007740:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007742:	89fb      	ldrh	r3, [r7, #14]
}
 8007744:	4618      	mov	r0, r3
 8007746:	371c      	adds	r7, #28
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	d005      	beq.n	8007776 <USBD_StdDevReq+0x26>
 800776a:	2b40      	cmp	r3, #64	; 0x40
 800776c:	d853      	bhi.n	8007816 <USBD_StdDevReq+0xc6>
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00b      	beq.n	800778a <USBD_StdDevReq+0x3a>
 8007772:	2b20      	cmp	r3, #32
 8007774:	d14f      	bne.n	8007816 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	4798      	blx	r3
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]
    break;
 8007788:	e04a      	b.n	8007820 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	785b      	ldrb	r3, [r3, #1]
 800778e:	2b09      	cmp	r3, #9
 8007790:	d83b      	bhi.n	800780a <USBD_StdDevReq+0xba>
 8007792:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <USBD_StdDevReq+0x48>)
 8007794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007798:	080077ed 	.word	0x080077ed
 800779c:	08007801 	.word	0x08007801
 80077a0:	0800780b 	.word	0x0800780b
 80077a4:	080077f7 	.word	0x080077f7
 80077a8:	0800780b 	.word	0x0800780b
 80077ac:	080077cb 	.word	0x080077cb
 80077b0:	080077c1 	.word	0x080077c1
 80077b4:	0800780b 	.word	0x0800780b
 80077b8:	080077e3 	.word	0x080077e3
 80077bc:	080077d5 	.word	0x080077d5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9da 	bl	8007b7c <USBD_GetDescriptor>
      break;
 80077c8:	e024      	b.n	8007814 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fb69 	bl	8007ea4 <USBD_SetAddress>
      break;
 80077d2:	e01f      	b.n	8007814 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fba8 	bl	8007f2c <USBD_SetConfig>
 80077dc:	4603      	mov	r3, r0
 80077de:	73fb      	strb	r3, [r7, #15]
      break;
 80077e0:	e018      	b.n	8007814 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fc45 	bl	8008074 <USBD_GetConfig>
      break;
 80077ea:	e013      	b.n	8007814 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fc75 	bl	80080de <USBD_GetStatus>
      break;
 80077f4:	e00e      	b.n	8007814 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fca3 	bl	8008144 <USBD_SetFeature>
      break;
 80077fe:	e009      	b.n	8007814 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fcb2 	bl	800816c <USBD_ClrFeature>
      break;
 8007808:	e004      	b.n	8007814 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fd08 	bl	8008222 <USBD_CtlError>
      break;
 8007812:	bf00      	nop
    }
    break;
 8007814:	e004      	b.n	8007820 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fd02 	bl	8008222 <USBD_CtlError>
    break;
 800781e:	bf00      	nop
  }

  return ret;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop

0800782c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007842:	2b40      	cmp	r3, #64	; 0x40
 8007844:	d005      	beq.n	8007852 <USBD_StdItfReq+0x26>
 8007846:	2b40      	cmp	r3, #64	; 0x40
 8007848:	d82e      	bhi.n	80078a8 <USBD_StdItfReq+0x7c>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <USBD_StdItfReq+0x26>
 800784e:	2b20      	cmp	r3, #32
 8007850:	d12a      	bne.n	80078a8 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007858:	3b01      	subs	r3, #1
 800785a:	2b02      	cmp	r3, #2
 800785c:	d81d      	bhi.n	800789a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	889b      	ldrh	r3, [r3, #4]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b01      	cmp	r3, #1
 8007866:	d813      	bhi.n	8007890 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	4798      	blx	r3
 8007876:	4603      	mov	r3, r0
 8007878:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	88db      	ldrh	r3, [r3, #6]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d110      	bne.n	80078a4 <USBD_StdItfReq+0x78>
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10d      	bne.n	80078a4 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fd95 	bl	80083b8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800788e:	e009      	b.n	80078a4 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fcc5 	bl	8008222 <USBD_CtlError>
      break;
 8007898:	e004      	b.n	80078a4 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fcc0 	bl	8008222 <USBD_CtlError>
      break;
 80078a2:	e000      	b.n	80078a6 <USBD_StdItfReq+0x7a>
      break;
 80078a4:	bf00      	nop
    }
    break;
 80078a6:	e004      	b.n	80078b2 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fcb9 	bl	8008222 <USBD_CtlError>
    break;
 80078b0:	bf00      	nop
  }

  return ret;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	889b      	ldrh	r3, [r3, #4]
 80078ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078d8:	2b40      	cmp	r3, #64	; 0x40
 80078da:	d007      	beq.n	80078ec <USBD_StdEPReq+0x30>
 80078dc:	2b40      	cmp	r3, #64	; 0x40
 80078de:	f200 8142 	bhi.w	8007b66 <USBD_StdEPReq+0x2aa>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00c      	beq.n	8007900 <USBD_StdEPReq+0x44>
 80078e6:	2b20      	cmp	r3, #32
 80078e8:	f040 813d 	bne.w	8007b66 <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	4798      	blx	r3
 80078fa:	4603      	mov	r3, r0
 80078fc:	73fb      	strb	r3, [r7, #15]
    break;
 80078fe:	e137      	b.n	8007b70 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	785b      	ldrb	r3, [r3, #1]
 8007904:	2b03      	cmp	r3, #3
 8007906:	d007      	beq.n	8007918 <USBD_StdEPReq+0x5c>
 8007908:	2b03      	cmp	r3, #3
 800790a:	f300 8126 	bgt.w	8007b5a <USBD_StdEPReq+0x29e>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d07d      	beq.n	8007a0e <USBD_StdEPReq+0x152>
 8007912:	2b01      	cmp	r3, #1
 8007914:	d03b      	beq.n	800798e <USBD_StdEPReq+0xd2>
 8007916:	e120      	b.n	8007b5a <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791e:	2b02      	cmp	r3, #2
 8007920:	d002      	beq.n	8007928 <USBD_StdEPReq+0x6c>
 8007922:	2b03      	cmp	r3, #3
 8007924:	d016      	beq.n	8007954 <USBD_StdEPReq+0x98>
 8007926:	e02c      	b.n	8007982 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00d      	beq.n	800794a <USBD_StdEPReq+0x8e>
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	2b80      	cmp	r3, #128	; 0x80
 8007932:	d00a      	beq.n	800794a <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 f969 	bl	8008c10 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800793e:	2180      	movs	r1, #128	; 0x80
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f001 f965 	bl	8008c10 <USBD_LL_StallEP>
 8007946:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007948:	e020      	b.n	800798c <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fc68 	bl	8008222 <USBD_CtlError>
        break;
 8007952:	e01b      	b.n	800798c <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	885b      	ldrh	r3, [r3, #2]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10e      	bne.n	800797a <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00b      	beq.n	800797a <USBD_StdEPReq+0xbe>
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b80      	cmp	r3, #128	; 0x80
 8007966:	d008      	beq.n	800797a <USBD_StdEPReq+0xbe>
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	88db      	ldrh	r3, [r3, #6]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 f94b 	bl	8008c10 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fd1c 	bl	80083b8 <USBD_CtlSendStatus>

        break;
 8007980:	e004      	b.n	800798c <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fc4c 	bl	8008222 <USBD_CtlError>
        break;
 800798a:	bf00      	nop
      }
      break;
 800798c:	e0ea      	b.n	8007b64 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007994:	2b02      	cmp	r3, #2
 8007996:	d002      	beq.n	800799e <USBD_StdEPReq+0xe2>
 8007998:	2b03      	cmp	r3, #3
 800799a:	d016      	beq.n	80079ca <USBD_StdEPReq+0x10e>
 800799c:	e030      	b.n	8007a00 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00d      	beq.n	80079c0 <USBD_StdEPReq+0x104>
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	2b80      	cmp	r3, #128	; 0x80
 80079a8:	d00a      	beq.n	80079c0 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 f92e 	bl	8008c10 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079b4:	2180      	movs	r1, #128	; 0x80
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 f92a 	bl	8008c10 <USBD_LL_StallEP>
 80079bc:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80079be:	e025      	b.n	8007a0c <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fc2d 	bl	8008222 <USBD_CtlError>
        break;
 80079c8:	e020      	b.n	8007a0c <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	885b      	ldrh	r3, [r3, #2]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d11b      	bne.n	8007a0a <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d004      	beq.n	80079e6 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 f94b 	bl	8008c7c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fce6 	bl	80083b8 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	4798      	blx	r3
 80079fa:	4603      	mov	r3, r0
 80079fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079fe:	e004      	b.n	8007a0a <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fc0d 	bl	8008222 <USBD_CtlError>
        break;
 8007a08:	e000      	b.n	8007a0c <USBD_StdEPReq+0x150>
        break;
 8007a0a:	bf00      	nop
      }
      break;
 8007a0c:	e0aa      	b.n	8007b64 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d002      	beq.n	8007a1e <USBD_StdEPReq+0x162>
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d032      	beq.n	8007a82 <USBD_StdEPReq+0x1c6>
 8007a1c:	e097      	b.n	8007b4e <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d007      	beq.n	8007a34 <USBD_StdEPReq+0x178>
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2b80      	cmp	r3, #128	; 0x80
 8007a28:	d004      	beq.n	8007a34 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fbf8 	bl	8008222 <USBD_CtlError>
          break;
 8007a32:	e091      	b.n	8007b58 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	da0b      	bge.n	8007a54 <USBD_StdEPReq+0x198>
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a42:	4613      	mov	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	3310      	adds	r3, #16
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4413      	add	r3, r2
 8007a50:	3304      	adds	r3, #4
 8007a52:	e00b      	b.n	8007a6c <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	4413      	add	r3, r2
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2202      	movs	r2, #2
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fc42 	bl	8008304 <USBD_CtlSendData>
        break;
 8007a80:	e06a      	b.n	8007b58 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007a82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da11      	bge.n	8007aae <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	f003 020f 	and.w	r2, r3, #15
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	440b      	add	r3, r1
 8007a9c:	3324      	adds	r3, #36	; 0x24
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d117      	bne.n	8007ad4 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fbbb 	bl	8008222 <USBD_CtlError>
            break;
 8007aac:	e054      	b.n	8007b58 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	f003 020f 	and.w	r2, r3, #15
 8007ab4:	6879      	ldr	r1, [r7, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	440b      	add	r3, r1
 8007ac0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d104      	bne.n	8007ad4 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fba8 	bl	8008222 <USBD_CtlError>
            break;
 8007ad2:	e041      	b.n	8007b58 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	da0b      	bge.n	8007af4 <USBD_StdEPReq+0x238>
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	3310      	adds	r3, #16
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	4413      	add	r3, r2
 8007af0:	3304      	adds	r3, #4
 8007af2:	e00b      	b.n	8007b0c <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007afa:	4613      	mov	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	4413      	add	r3, r2
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <USBD_StdEPReq+0x25e>
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b80      	cmp	r3, #128	; 0x80
 8007b18:	d103      	bne.n	8007b22 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	e00e      	b.n	8007b40 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 f8de 	bl	8008ce8 <USBD_LL_IsStallEP>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2201      	movs	r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	e002      	b.n	8007b40 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2202      	movs	r2, #2
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fbdc 	bl	8008304 <USBD_CtlSendData>
          break;
 8007b4c:	e004      	b.n	8007b58 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fb66 	bl	8008222 <USBD_CtlError>
        break;
 8007b56:	bf00      	nop
      }
      break;
 8007b58:	e004      	b.n	8007b64 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fb60 	bl	8008222 <USBD_CtlError>
      break;
 8007b62:	bf00      	nop
    }
    break;
 8007b64:	e004      	b.n	8007b70 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fb5a 	bl	8008222 <USBD_CtlError>
    break;
 8007b6e:	bf00      	nop
  }

  return ret;
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	885b      	ldrh	r3, [r3, #2]
 8007b96:	0a1b      	lsrs	r3, r3, #8
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	2b0e      	cmp	r3, #14
 8007b9e:	f200 8152 	bhi.w	8007e46 <USBD_GetDescriptor+0x2ca>
 8007ba2:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <USBD_GetDescriptor+0x2c>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007c19 	.word	0x08007c19
 8007bac:	08007c31 	.word	0x08007c31
 8007bb0:	08007c71 	.word	0x08007c71
 8007bb4:	08007e47 	.word	0x08007e47
 8007bb8:	08007e47 	.word	0x08007e47
 8007bbc:	08007de7 	.word	0x08007de7
 8007bc0:	08007e13 	.word	0x08007e13
 8007bc4:	08007e47 	.word	0x08007e47
 8007bc8:	08007e47 	.word	0x08007e47
 8007bcc:	08007e47 	.word	0x08007e47
 8007bd0:	08007e47 	.word	0x08007e47
 8007bd4:	08007e47 	.word	0x08007e47
 8007bd8:	08007e47 	.word	0x08007e47
 8007bdc:	08007e47 	.word	0x08007e47
 8007be0:	08007be5 	.word	0x08007be5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bea:	69db      	ldr	r3, [r3, #28]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	7c12      	ldrb	r2, [r2, #16]
 8007bfc:	f107 0108 	add.w	r1, r7, #8
 8007c00:	4610      	mov	r0, r2
 8007c02:	4798      	blx	r3
 8007c04:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007c06:	e126      	b.n	8007e56 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fb09 	bl	8008222 <USBD_CtlError>
      err++;
 8007c10:	7afb      	ldrb	r3, [r7, #11]
 8007c12:	3301      	adds	r3, #1
 8007c14:	72fb      	strb	r3, [r7, #11]
    break;
 8007c16:	e11e      	b.n	8007e56 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	7c12      	ldrb	r2, [r2, #16]
 8007c24:	f107 0108 	add.w	r1, r7, #8
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4798      	blx	r3
 8007c2c:	60f8      	str	r0, [r7, #12]
    break;
 8007c2e:	e112      	b.n	8007e56 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	7c1b      	ldrb	r3, [r3, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10d      	bne.n	8007c54 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c40:	f107 0208 	add.w	r2, r7, #8
 8007c44:	4610      	mov	r0, r2
 8007c46:	4798      	blx	r3
 8007c48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	2202      	movs	r2, #2
 8007c50:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007c52:	e100      	b.n	8007e56 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	f107 0208 	add.w	r2, r7, #8
 8007c60:	4610      	mov	r0, r2
 8007c62:	4798      	blx	r3
 8007c64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	701a      	strb	r2, [r3, #0]
    break;
 8007c6e:	e0f2      	b.n	8007e56 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	885b      	ldrh	r3, [r3, #2]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b05      	cmp	r3, #5
 8007c78:	f200 80ac 	bhi.w	8007dd4 <USBD_GetDescriptor+0x258>
 8007c7c:	a201      	add	r2, pc, #4	; (adr r2, 8007c84 <USBD_GetDescriptor+0x108>)
 8007c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c82:	bf00      	nop
 8007c84:	08007c9d 	.word	0x08007c9d
 8007c88:	08007cd1 	.word	0x08007cd1
 8007c8c:	08007d05 	.word	0x08007d05
 8007c90:	08007d39 	.word	0x08007d39
 8007c94:	08007d6d 	.word	0x08007d6d
 8007c98:	08007da1 	.word	0x08007da1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	7c12      	ldrb	r2, [r2, #16]
 8007cb4:	f107 0108 	add.w	r1, r7, #8
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4798      	blx	r3
 8007cbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cbe:	e091      	b.n	8007de4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 faad 	bl	8008222 <USBD_CtlError>
        err++;
 8007cc8:	7afb      	ldrb	r3, [r7, #11]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	72fb      	strb	r3, [r7, #11]
      break;
 8007cce:	e089      	b.n	8007de4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00b      	beq.n	8007cf4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	7c12      	ldrb	r2, [r2, #16]
 8007ce8:	f107 0108 	add.w	r1, r7, #8
 8007cec:	4610      	mov	r0, r2
 8007cee:	4798      	blx	r3
 8007cf0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cf2:	e077      	b.n	8007de4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa93 	bl	8008222 <USBD_CtlError>
        err++;
 8007cfc:	7afb      	ldrb	r3, [r7, #11]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	72fb      	strb	r3, [r7, #11]
      break;
 8007d02:	e06f      	b.n	8007de4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00b      	beq.n	8007d28 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	7c12      	ldrb	r2, [r2, #16]
 8007d1c:	f107 0108 	add.w	r1, r7, #8
 8007d20:	4610      	mov	r0, r2
 8007d22:	4798      	blx	r3
 8007d24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d26:	e05d      	b.n	8007de4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa79 	bl	8008222 <USBD_CtlError>
        err++;
 8007d30:	7afb      	ldrb	r3, [r7, #11]
 8007d32:	3301      	adds	r3, #1
 8007d34:	72fb      	strb	r3, [r7, #11]
      break;
 8007d36:	e055      	b.n	8007de4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00b      	beq.n	8007d5c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	7c12      	ldrb	r2, [r2, #16]
 8007d50:	f107 0108 	add.w	r1, r7, #8
 8007d54:	4610      	mov	r0, r2
 8007d56:	4798      	blx	r3
 8007d58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d5a:	e043      	b.n	8007de4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa5f 	bl	8008222 <USBD_CtlError>
        err++;
 8007d64:	7afb      	ldrb	r3, [r7, #11]
 8007d66:	3301      	adds	r3, #1
 8007d68:	72fb      	strb	r3, [r7, #11]
      break;
 8007d6a:	e03b      	b.n	8007de4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00b      	beq.n	8007d90 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	7c12      	ldrb	r2, [r2, #16]
 8007d84:	f107 0108 	add.w	r1, r7, #8
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4798      	blx	r3
 8007d8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d8e:	e029      	b.n	8007de4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fa45 	bl	8008222 <USBD_CtlError>
        err++;
 8007d98:	7afb      	ldrb	r3, [r7, #11]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d9e:	e021      	b.n	8007de4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	7c12      	ldrb	r2, [r2, #16]
 8007db8:	f107 0108 	add.w	r1, r7, #8
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
 8007dc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dc2:	e00f      	b.n	8007de4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fa2b 	bl	8008222 <USBD_CtlError>
        err++;
 8007dcc:	7afb      	ldrb	r3, [r7, #11]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	72fb      	strb	r3, [r7, #11]
      break;
 8007dd2:	e007      	b.n	8007de4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fa23 	bl	8008222 <USBD_CtlError>
      err++;
 8007ddc:	7afb      	ldrb	r3, [r7, #11]
 8007dde:	3301      	adds	r3, #1
 8007de0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007de2:	bf00      	nop
    }
    break;
 8007de4:	e037      	b.n	8007e56 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	7c1b      	ldrb	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d109      	bne.n	8007e02 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df6:	f107 0208 	add.w	r2, r7, #8
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	4798      	blx	r3
 8007dfe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e00:	e029      	b.n	8007e56 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fa0c 	bl	8008222 <USBD_CtlError>
      err++;
 8007e0a:	7afb      	ldrb	r3, [r7, #11]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	72fb      	strb	r3, [r7, #11]
    break;
 8007e10:	e021      	b.n	8007e56 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	7c1b      	ldrb	r3, [r3, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10d      	bne.n	8007e36 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	f107 0208 	add.w	r2, r7, #8
 8007e26:	4610      	mov	r0, r2
 8007e28:	4798      	blx	r3
 8007e2a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	2207      	movs	r2, #7
 8007e32:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e34:	e00f      	b.n	8007e56 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f9f2 	bl	8008222 <USBD_CtlError>
      err++;
 8007e3e:	7afb      	ldrb	r3, [r7, #11]
 8007e40:	3301      	adds	r3, #1
 8007e42:	72fb      	strb	r3, [r7, #11]
    break;
 8007e44:	e007      	b.n	8007e56 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f9ea 	bl	8008222 <USBD_CtlError>
    err++;
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	3301      	adds	r3, #1
 8007e52:	72fb      	strb	r3, [r7, #11]
    break;
 8007e54:	bf00      	nop
  }

  if (err != 0U)
 8007e56:	7afb      	ldrb	r3, [r7, #11]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d11e      	bne.n	8007e9a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	88db      	ldrh	r3, [r3, #6]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d016      	beq.n	8007e92 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007e64:	893b      	ldrh	r3, [r7, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00e      	beq.n	8007e88 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	88da      	ldrh	r2, [r3, #6]
 8007e6e:	893b      	ldrh	r3, [r7, #8]
 8007e70:	4293      	cmp	r3, r2
 8007e72:	bf28      	it	cs
 8007e74:	4613      	movcs	r3, r2
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e7a:	893b      	ldrh	r3, [r7, #8]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	68f9      	ldr	r1, [r7, #12]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fa3f 	bl	8008304 <USBD_CtlSendData>
 8007e86:	e009      	b.n	8007e9c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f9c9 	bl	8008222 <USBD_CtlError>
 8007e90:	e004      	b.n	8007e9c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fa90 	bl	80083b8 <USBD_CtlSendStatus>
 8007e98:	e000      	b.n	8007e9c <USBD_GetDescriptor+0x320>
    return;
 8007e9a:	bf00      	nop
    }
  }
}
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop

08007ea4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	889b      	ldrh	r3, [r3, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d130      	bne.n	8007f18 <USBD_SetAddress+0x74>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	88db      	ldrh	r3, [r3, #6]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d12c      	bne.n	8007f18 <USBD_SetAddress+0x74>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	885b      	ldrh	r3, [r3, #2]
 8007ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ec4:	d828      	bhi.n	8007f18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	885b      	ldrh	r3, [r3, #2]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	d104      	bne.n	8007ee6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f99f 	bl	8008222 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee4:	e01d      	b.n	8007f22 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	7bfa      	ldrb	r2, [r7, #15]
 8007eea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 ff26 	bl	8008d44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fa5d 	bl	80083b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d004      	beq.n	8007f0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0c:	e009      	b.n	8007f22 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f16:	e004      	b.n	8007f22 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f981 	bl	8008222 <USBD_CtlError>
  }
}
 8007f20:	bf00      	nop
 8007f22:	bf00      	nop
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	885b      	ldrh	r3, [r3, #2]
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	4b4b      	ldr	r3, [pc, #300]	; (8008070 <USBD_SetConfig+0x144>)
 8007f42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f44:	4b4a      	ldr	r3, [pc, #296]	; (8008070 <USBD_SetConfig+0x144>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d905      	bls.n	8007f58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f967 	bl	8008222 <USBD_CtlError>
    return USBD_FAIL;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e087      	b.n	8008068 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d002      	beq.n	8007f68 <USBD_SetConfig+0x3c>
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d025      	beq.n	8007fb2 <USBD_SetConfig+0x86>
 8007f66:	e071      	b.n	800804c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007f68:	4b41      	ldr	r3, [pc, #260]	; (8008070 <USBD_SetConfig+0x144>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01c      	beq.n	8007faa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007f70:	4b3f      	ldr	r3, [pc, #252]	; (8008070 <USBD_SetConfig+0x144>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f7a:	4b3d      	ldr	r3, [pc, #244]	; (8008070 <USBD_SetConfig+0x144>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff f9af 	bl	80072e4 <USBD_SetClassConfig>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d004      	beq.n	8007f9a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f945 	bl	8008222 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f98:	e065      	b.n	8008066 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa0c 	bl	80083b8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2203      	movs	r2, #3
 8007fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007fa8:	e05d      	b.n	8008066 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fa04 	bl	80083b8 <USBD_CtlSendStatus>
    break;
 8007fb0:	e059      	b.n	8008066 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007fb2:	4b2f      	ldr	r3, [pc, #188]	; (8008070 <USBD_SetConfig+0x144>)
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d112      	bne.n	8007fe0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007fc2:	4b2b      	ldr	r3, [pc, #172]	; (8008070 <USBD_SetConfig+0x144>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fcc:	4b28      	ldr	r3, [pc, #160]	; (8008070 <USBD_SetConfig+0x144>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff f9a2 	bl	800731c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f9ed 	bl	80083b8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007fde:	e042      	b.n	8008066 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007fe0:	4b23      	ldr	r3, [pc, #140]	; (8008070 <USBD_SetConfig+0x144>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d02a      	beq.n	8008044 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff f990 	bl	800731c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007ffc:	4b1c      	ldr	r3, [pc, #112]	; (8008070 <USBD_SetConfig+0x144>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008006:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <USBD_SetConfig+0x144>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7ff f969 	bl	80072e4 <USBD_SetClassConfig>
 8008012:	4603      	mov	r3, r0
 8008014:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00f      	beq.n	800803c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f8ff 	bl	8008222 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	b2db      	uxtb	r3, r3
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7ff f975 	bl	800731c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800803a:	e014      	b.n	8008066 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f9bb 	bl	80083b8 <USBD_CtlSendStatus>
    break;
 8008042:	e010      	b.n	8008066 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f9b7 	bl	80083b8 <USBD_CtlSendStatus>
    break;
 800804a:	e00c      	b.n	8008066 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f8e7 	bl	8008222 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008054:	4b06      	ldr	r3, [pc, #24]	; (8008070 <USBD_SetConfig+0x144>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff f95e 	bl	800731c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008060:	2303      	movs	r3, #3
 8008062:	73fb      	strb	r3, [r7, #15]
    break;
 8008064:	bf00      	nop
  }

  return ret;
 8008066:	7bfb      	ldrb	r3, [r7, #15]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20000224 	.word	0x20000224

08008074 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	88db      	ldrh	r3, [r3, #6]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d004      	beq.n	8008090 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f8ca 	bl	8008222 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800808e:	e022      	b.n	80080d6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008096:	2b02      	cmp	r3, #2
 8008098:	dc02      	bgt.n	80080a0 <USBD_GetConfig+0x2c>
 800809a:	2b00      	cmp	r3, #0
 800809c:	dc03      	bgt.n	80080a6 <USBD_GetConfig+0x32>
 800809e:	e015      	b.n	80080cc <USBD_GetConfig+0x58>
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d00b      	beq.n	80080bc <USBD_GetConfig+0x48>
 80080a4:	e012      	b.n	80080cc <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3308      	adds	r3, #8
 80080b0:	2201      	movs	r2, #1
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f925 	bl	8008304 <USBD_CtlSendData>
      break;
 80080ba:	e00c      	b.n	80080d6 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3304      	adds	r3, #4
 80080c0:	2201      	movs	r2, #1
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f91d 	bl	8008304 <USBD_CtlSendData>
      break;
 80080ca:	e004      	b.n	80080d6 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f8a7 	bl	8008222 <USBD_CtlError>
      break;
 80080d4:	bf00      	nop
}
 80080d6:	bf00      	nop
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ee:	3b01      	subs	r3, #1
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d81e      	bhi.n	8008132 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	88db      	ldrh	r3, [r3, #6]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d004      	beq.n	8008106 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f88f 	bl	8008222 <USBD_CtlError>
      break;
 8008104:	e01a      	b.n	800813c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f043 0202 	orr.w	r2, r3, #2
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	330c      	adds	r3, #12
 8008126:	2202      	movs	r2, #2
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f8ea 	bl	8008304 <USBD_CtlSendData>
    break;
 8008130:	e004      	b.n	800813c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f874 	bl	8008222 <USBD_CtlError>
    break;
 800813a:	bf00      	nop
  }
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	885b      	ldrh	r3, [r3, #2]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d106      	bne.n	8008164 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f92a 	bl	80083b8 <USBD_CtlSendStatus>
  }
}
 8008164:	bf00      	nop
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817c:	3b01      	subs	r3, #1
 800817e:	2b02      	cmp	r3, #2
 8008180:	d80b      	bhi.n	800819a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	885b      	ldrh	r3, [r3, #2]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d10c      	bne.n	80081a4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f910 	bl	80083b8 <USBD_CtlSendStatus>
      }
      break;
 8008198:	e004      	b.n	80081a4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f840 	bl	8008222 <USBD_CtlError>
      break;
 80081a2:	e000      	b.n	80081a6 <USBD_ClrFeature+0x3a>
      break;
 80081a4:	bf00      	nop
  }
}
 80081a6:	bf00      	nop
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	781a      	ldrb	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3301      	adds	r3, #1
 80081c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	781a      	ldrb	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3301      	adds	r3, #1
 80081d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f7ff fa9b 	bl	8007714 <SWAPBYTE>
 80081de:	4603      	mov	r3, r0
 80081e0:	461a      	mov	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3301      	adds	r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f7ff fa8e 	bl	8007714 <SWAPBYTE>
 80081f8:	4603      	mov	r3, r0
 80081fa:	461a      	mov	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3301      	adds	r3, #1
 8008204:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff fa81 	bl	8007714 <SWAPBYTE>
 8008212:	4603      	mov	r3, r0
 8008214:	461a      	mov	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	80da      	strh	r2, [r3, #6]
}
 800821a:	bf00      	nop
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800822c:	2180      	movs	r1, #128	; 0x80
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fcee 	bl	8008c10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008234:	2100      	movs	r1, #0
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fcea 	bl	8008c10 <USBD_LL_StallEP>
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008250:	2300      	movs	r3, #0
 8008252:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d036      	beq.n	80082c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800825e:	6938      	ldr	r0, [r7, #16]
 8008260:	f000 f836 	bl	80082d0 <USBD_GetLen>
 8008264:	4603      	mov	r3, r0
 8008266:	3301      	adds	r3, #1
 8008268:	b29b      	uxth	r3, r3
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	b29a      	uxth	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	4413      	add	r3, r2
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	7812      	ldrb	r2, [r2, #0]
 800827c:	701a      	strb	r2, [r3, #0]
  idx++;
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	3301      	adds	r3, #1
 8008282:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	4413      	add	r3, r2
 800828a:	2203      	movs	r2, #3
 800828c:	701a      	strb	r2, [r3, #0]
  idx++;
 800828e:	7dfb      	ldrb	r3, [r7, #23]
 8008290:	3301      	adds	r3, #1
 8008292:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008294:	e013      	b.n	80082be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008296:	7dfb      	ldrb	r3, [r7, #23]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	4413      	add	r3, r2
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	3301      	adds	r3, #1
 80082a6:	613b      	str	r3, [r7, #16]
    idx++;
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
 80082aa:	3301      	adds	r3, #1
 80082ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	4413      	add	r3, r2
 80082b4:	2200      	movs	r2, #0
 80082b6:	701a      	strb	r2, [r3, #0]
    idx++;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	3301      	adds	r3, #1
 80082bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e7      	bne.n	8008296 <USBD_GetString+0x52>
 80082c6:	e000      	b.n	80082ca <USBD_GetString+0x86>
    return;
 80082c8:	bf00      	nop
  }
}
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80082e0:	e005      	b.n	80082ee <USBD_GetLen+0x1e>
  {
    len++;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	3301      	adds	r3, #1
 80082e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	3301      	adds	r3, #1
 80082ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1f5      	bne.n	80082e2 <USBD_GetLen+0x12>
  }

  return len;
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2202      	movs	r2, #2
 8008314:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	2100      	movs	r1, #0
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fd40 	bl	8008db0 <USBD_LL_Transmit>

  return USBD_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	60f8      	str	r0, [r7, #12]
 8008342:	60b9      	str	r1, [r7, #8]
 8008344:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	2100      	movs	r1, #0
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 fd2f 	bl	8008db0 <USBD_LL_Transmit>

  return USBD_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2203      	movs	r2, #3
 800836c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	2100      	movs	r1, #0
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fd4a 	bl	8008e20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	60f8      	str	r0, [r7, #12]
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	2100      	movs	r1, #0
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 fd39 	bl	8008e20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2204      	movs	r2, #4
 80083c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083c8:	2300      	movs	r3, #0
 80083ca:	2200      	movs	r2, #0
 80083cc:	2100      	movs	r1, #0
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fcee 	bl	8008db0 <USBD_LL_Transmit>

  return USBD_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b082      	sub	sp, #8
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2205      	movs	r2, #5
 80083ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083ee:	2300      	movs	r3, #0
 80083f0:	2200      	movs	r2, #0
 80083f2:	2100      	movs	r1, #0
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fd13 	bl	8008e20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008408:	2200      	movs	r2, #0
 800840a:	4912      	ldr	r1, [pc, #72]	; (8008454 <MX_USB_DEVICE_Init+0x50>)
 800840c:	4812      	ldr	r0, [pc, #72]	; (8008458 <MX_USB_DEVICE_Init+0x54>)
 800840e:	f7fe fefb 	bl	8007208 <USBD_Init>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008418:	f7f8 f836 	bl	8000488 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800841c:	490f      	ldr	r1, [pc, #60]	; (800845c <MX_USB_DEVICE_Init+0x58>)
 800841e:	480e      	ldr	r0, [pc, #56]	; (8008458 <MX_USB_DEVICE_Init+0x54>)
 8008420:	f7fe ff22 	bl	8007268 <USBD_RegisterClass>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800842a:	f7f8 f82d 	bl	8000488 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800842e:	490c      	ldr	r1, [pc, #48]	; (8008460 <MX_USB_DEVICE_Init+0x5c>)
 8008430:	4809      	ldr	r0, [pc, #36]	; (8008458 <MX_USB_DEVICE_Init+0x54>)
 8008432:	f7fe fe4d 	bl	80070d0 <USBD_CDC_RegisterInterface>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800843c:	f7f8 f824 	bl	8000488 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008440:	4805      	ldr	r0, [pc, #20]	; (8008458 <MX_USB_DEVICE_Init+0x54>)
 8008442:	f7fe ff38 	bl	80072b6 <USBD_Start>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800844c:	f7f8 f81c 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008450:	bf00      	nop
 8008452:	bd80      	pop	{r7, pc}
 8008454:	20000140 	.word	0x20000140
 8008458:	20000318 	.word	0x20000318
 800845c:	20000028 	.word	0x20000028
 8008460:	2000012c 	.word	0x2000012c

08008464 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008468:	2200      	movs	r2, #0
 800846a:	4905      	ldr	r1, [pc, #20]	; (8008480 <CDC_Init_FS+0x1c>)
 800846c:	4805      	ldr	r0, [pc, #20]	; (8008484 <CDC_Init_FS+0x20>)
 800846e:	f7fe fe44 	bl	80070fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008472:	4905      	ldr	r1, [pc, #20]	; (8008488 <CDC_Init_FS+0x24>)
 8008474:	4803      	ldr	r0, [pc, #12]	; (8008484 <CDC_Init_FS+0x20>)
 8008476:	f7fe fe59 	bl	800712c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800847a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800847c:	4618      	mov	r0, r3
 800847e:	bd80      	pop	{r7, pc}
 8008480:	200009d0 	.word	0x200009d0
 8008484:	20000318 	.word	0x20000318
 8008488:	200005e8 	.word	0x200005e8

0800848c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008490:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008492:	4618      	mov	r0, r3
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	4603      	mov	r3, r0
 80084a4:	6039      	str	r1, [r7, #0]
 80084a6:	71fb      	strb	r3, [r7, #7]
 80084a8:	4613      	mov	r3, r2
 80084aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	2b23      	cmp	r3, #35	; 0x23
 80084b0:	d84a      	bhi.n	8008548 <CDC_Control_FS+0xac>
 80084b2:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <CDC_Control_FS+0x1c>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	08008549 	.word	0x08008549
 80084bc:	08008549 	.word	0x08008549
 80084c0:	08008549 	.word	0x08008549
 80084c4:	08008549 	.word	0x08008549
 80084c8:	08008549 	.word	0x08008549
 80084cc:	08008549 	.word	0x08008549
 80084d0:	08008549 	.word	0x08008549
 80084d4:	08008549 	.word	0x08008549
 80084d8:	08008549 	.word	0x08008549
 80084dc:	08008549 	.word	0x08008549
 80084e0:	08008549 	.word	0x08008549
 80084e4:	08008549 	.word	0x08008549
 80084e8:	08008549 	.word	0x08008549
 80084ec:	08008549 	.word	0x08008549
 80084f0:	08008549 	.word	0x08008549
 80084f4:	08008549 	.word	0x08008549
 80084f8:	08008549 	.word	0x08008549
 80084fc:	08008549 	.word	0x08008549
 8008500:	08008549 	.word	0x08008549
 8008504:	08008549 	.word	0x08008549
 8008508:	08008549 	.word	0x08008549
 800850c:	08008549 	.word	0x08008549
 8008510:	08008549 	.word	0x08008549
 8008514:	08008549 	.word	0x08008549
 8008518:	08008549 	.word	0x08008549
 800851c:	08008549 	.word	0x08008549
 8008520:	08008549 	.word	0x08008549
 8008524:	08008549 	.word	0x08008549
 8008528:	08008549 	.word	0x08008549
 800852c:	08008549 	.word	0x08008549
 8008530:	08008549 	.word	0x08008549
 8008534:	08008549 	.word	0x08008549
 8008538:	08008549 	.word	0x08008549
 800853c:	08008549 	.word	0x08008549
 8008540:	08008549 	.word	0x08008549
 8008544:	08008549 	.word	0x08008549
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008548:	bf00      	nop
  }

  return (USBD_OK);
 800854a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	480f      	ldr	r0, [pc, #60]	; (80085a4 <CDC_Receive_FS+0x4c>)
 8008566:	f7fe fde1 	bl	800712c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800856a:	480e      	ldr	r0, [pc, #56]	; (80085a4 <CDC_Receive_FS+0x4c>)
 800856c:	f7fe fe22 	bl	80071b4 <USBD_CDC_ReceivePacket>


  for(i=0;i<*Len;i++){
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	e00b      	b.n	800858e <CDC_Receive_FS+0x36>
	  rxBuffer[i] = Buf[i];
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4413      	add	r3, r2
 800857c:	7819      	ldrb	r1, [r3, #0]
 800857e:	4a0a      	ldr	r2, [pc, #40]	; (80085a8 <CDC_Receive_FS+0x50>)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4413      	add	r3, r2
 8008584:	460a      	mov	r2, r1
 8008586:	701a      	strb	r2, [r3, #0]
  for(i=0;i<*Len;i++){
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	3301      	adds	r3, #1
 800858c:	60fb      	str	r3, [r7, #12]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	429a      	cmp	r2, r3
 8008596:	d3ee      	bcc.n	8008576 <CDC_Receive_FS+0x1e>
  }

  //CDC_Transmit_FS((uint8_t *) rxBuffer,strlen(rxBuffer));


  return (USBD_OK);
 8008598:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20000318 	.word	0x20000318
 80085a8:	20000294 	.word	0x20000294

080085ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085bc:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <CDC_Transmit_FS+0x48>)
 80085be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e00b      	b.n	80085ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085d2:	887b      	ldrh	r3, [r7, #2]
 80085d4:	461a      	mov	r2, r3
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4806      	ldr	r0, [pc, #24]	; (80085f4 <CDC_Transmit_FS+0x48>)
 80085da:	f7fe fd8e 	bl	80070fa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085de:	4805      	ldr	r0, [pc, #20]	; (80085f4 <CDC_Transmit_FS+0x48>)
 80085e0:	f7fe fdb8 	bl	8007154 <USBD_CDC_TransmitPacket>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20000318 	.word	0x20000318

080085f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	4613      	mov	r3, r2
 8008604:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800860a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800860e:	4618      	mov	r0, r3
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
	...

0800861c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	6039      	str	r1, [r7, #0]
 8008626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2212      	movs	r2, #18
 800862c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800862e:	4b03      	ldr	r3, [pc, #12]	; (800863c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	20000160 	.word	0x20000160

08008640 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	6039      	str	r1, [r7, #0]
 800864a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2204      	movs	r2, #4
 8008650:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008652:	4b03      	ldr	r3, [pc, #12]	; (8008660 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	20000180 	.word	0x20000180

08008664 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d105      	bne.n	8008682 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	4907      	ldr	r1, [pc, #28]	; (8008698 <USBD_FS_ProductStrDescriptor+0x34>)
 800867a:	4808      	ldr	r0, [pc, #32]	; (800869c <USBD_FS_ProductStrDescriptor+0x38>)
 800867c:	f7ff fde2 	bl	8008244 <USBD_GetString>
 8008680:	e004      	b.n	800868c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	4904      	ldr	r1, [pc, #16]	; (8008698 <USBD_FS_ProductStrDescriptor+0x34>)
 8008686:	4805      	ldr	r0, [pc, #20]	; (800869c <USBD_FS_ProductStrDescriptor+0x38>)
 8008688:	f7ff fddc 	bl	8008244 <USBD_GetString>
  }
  return USBD_StrDesc;
 800868c:	4b02      	ldr	r3, [pc, #8]	; (8008698 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000db8 	.word	0x20000db8
 800869c:	0800916c 	.word	0x0800916c

080086a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	4603      	mov	r3, r0
 80086a8:	6039      	str	r1, [r7, #0]
 80086aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	4904      	ldr	r1, [pc, #16]	; (80086c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086b0:	4804      	ldr	r0, [pc, #16]	; (80086c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086b2:	f7ff fdc7 	bl	8008244 <USBD_GetString>
  return USBD_StrDesc;
 80086b6:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	20000db8 	.word	0x20000db8
 80086c4:	08009184 	.word	0x08009184

080086c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	6039      	str	r1, [r7, #0]
 80086d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	221a      	movs	r2, #26
 80086d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086da:	f000 f855 	bl	8008788 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086de:	4b02      	ldr	r3, [pc, #8]	; (80086e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	20000184 	.word	0x20000184

080086ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	6039      	str	r1, [r7, #0]
 80086f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d105      	bne.n	800870a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	4907      	ldr	r1, [pc, #28]	; (8008720 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008702:	4808      	ldr	r0, [pc, #32]	; (8008724 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008704:	f7ff fd9e 	bl	8008244 <USBD_GetString>
 8008708:	e004      	b.n	8008714 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	4904      	ldr	r1, [pc, #16]	; (8008720 <USBD_FS_ConfigStrDescriptor+0x34>)
 800870e:	4805      	ldr	r0, [pc, #20]	; (8008724 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008710:	f7ff fd98 	bl	8008244 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008714:	4b02      	ldr	r3, [pc, #8]	; (8008720 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20000db8 	.word	0x20000db8
 8008724:	08009198 	.word	0x08009198

08008728 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	4603      	mov	r3, r0
 8008730:	6039      	str	r1, [r7, #0]
 8008732:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d105      	bne.n	8008746 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	4907      	ldr	r1, [pc, #28]	; (800875c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800873e:	4808      	ldr	r0, [pc, #32]	; (8008760 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008740:	f7ff fd80 	bl	8008244 <USBD_GetString>
 8008744:	e004      	b.n	8008750 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	4904      	ldr	r1, [pc, #16]	; (800875c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800874a:	4805      	ldr	r0, [pc, #20]	; (8008760 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800874c:	f7ff fd7a 	bl	8008244 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008750:	4b02      	ldr	r3, [pc, #8]	; (800875c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20000db8 	.word	0x20000db8
 8008760:	080091a4 	.word	0x080091a4

08008764 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	6039      	str	r1, [r7, #0]
 800876e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	220c      	movs	r2, #12
 8008774:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008776:	4b03      	ldr	r3, [pc, #12]	; (8008784 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	20000174 	.word	0x20000174

08008788 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800878e:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <Get_SerialNum+0x44>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008794:	4b0e      	ldr	r3, [pc, #56]	; (80087d0 <Get_SerialNum+0x48>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800879a:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <Get_SerialNum+0x4c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4413      	add	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d009      	beq.n	80087c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087ae:	2208      	movs	r2, #8
 80087b0:	4909      	ldr	r1, [pc, #36]	; (80087d8 <Get_SerialNum+0x50>)
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 f814 	bl	80087e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087b8:	2204      	movs	r2, #4
 80087ba:	4908      	ldr	r1, [pc, #32]	; (80087dc <Get_SerialNum+0x54>)
 80087bc:	68b8      	ldr	r0, [r7, #8]
 80087be:	f000 f80f 	bl	80087e0 <IntToUnicode>
  }
}
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	1fff7590 	.word	0x1fff7590
 80087d0:	1fff7594 	.word	0x1fff7594
 80087d4:	1fff7598 	.word	0x1fff7598
 80087d8:	20000186 	.word	0x20000186
 80087dc:	20000196 	.word	0x20000196

080087e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	4613      	mov	r3, r2
 80087ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087f2:	2300      	movs	r3, #0
 80087f4:	75fb      	strb	r3, [r7, #23]
 80087f6:	e027      	b.n	8008848 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	0f1b      	lsrs	r3, r3, #28
 80087fc:	2b09      	cmp	r3, #9
 80087fe:	d80b      	bhi.n	8008818 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	0f1b      	lsrs	r3, r3, #28
 8008804:	b2da      	uxtb	r2, r3
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	4619      	mov	r1, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	440b      	add	r3, r1
 8008810:	3230      	adds	r2, #48	; 0x30
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	701a      	strb	r2, [r3, #0]
 8008816:	e00a      	b.n	800882e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	0f1b      	lsrs	r3, r3, #28
 800881c:	b2da      	uxtb	r2, r3
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	005b      	lsls	r3, r3, #1
 8008822:	4619      	mov	r1, r3
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	440b      	add	r3, r1
 8008828:	3237      	adds	r2, #55	; 0x37
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	011b      	lsls	r3, r3, #4
 8008832:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	3301      	adds	r3, #1
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	4413      	add	r3, r2
 800883e:	2200      	movs	r2, #0
 8008840:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	3301      	adds	r3, #1
 8008846:	75fb      	strb	r3, [r7, #23]
 8008848:	7dfa      	ldrb	r2, [r7, #23]
 800884a:	79fb      	ldrb	r3, [r7, #7]
 800884c:	429a      	cmp	r2, r3
 800884e:	d3d3      	bcc.n	80087f8 <IntToUnicode+0x18>
  }
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	371c      	adds	r7, #28
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
	...

08008860 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a0d      	ldr	r2, [pc, #52]	; (80088a4 <HAL_PCD_MspInit+0x44>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d113      	bne.n	800889a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008872:	4b0d      	ldr	r3, [pc, #52]	; (80088a8 <HAL_PCD_MspInit+0x48>)
 8008874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008876:	4a0c      	ldr	r2, [pc, #48]	; (80088a8 <HAL_PCD_MspInit+0x48>)
 8008878:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800887c:	6593      	str	r3, [r2, #88]	; 0x58
 800887e:	4b0a      	ldr	r3, [pc, #40]	; (80088a8 <HAL_PCD_MspInit+0x48>)
 8008880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008882:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800888a:	2200      	movs	r2, #0
 800888c:	2100      	movs	r1, #0
 800888e:	2043      	movs	r0, #67	; 0x43
 8008890:	f7f8 fb03 	bl	8000e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008894:	2043      	movs	r0, #67	; 0x43
 8008896:	f7f8 fb1c 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	40006800 	.word	0x40006800
 80088a8:	40021000 	.word	0x40021000

080088ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80088c0:	4619      	mov	r1, r3
 80088c2:	4610      	mov	r0, r2
 80088c4:	f7fe fd42 	bl	800734c <USBD_LL_SetupStage>
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80088e2:	78fa      	ldrb	r2, [r7, #3]
 80088e4:	6879      	ldr	r1, [r7, #4]
 80088e6:	4613      	mov	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	00db      	lsls	r3, r3, #3
 80088ee:	440b      	add	r3, r1
 80088f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	4619      	mov	r1, r3
 80088fa:	f7fe fd7c 	bl	80073f6 <USBD_LL_DataOutStage>
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	460b      	mov	r3, r1
 8008910:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	440b      	add	r3, r1
 8008926:	333c      	adds	r3, #60	; 0x3c
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	4619      	mov	r1, r3
 800892e:	f7fe fdc5 	bl	80074bc <USBD_LL_DataInStage>
}
 8008932:	bf00      	nop
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008948:	4618      	mov	r0, r3
 800894a:	f7fe fec9 	bl	80076e0 <USBD_LL_SOF>
}
 800894e:	bf00      	nop
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800895e:	2301      	movs	r3, #1
 8008960:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	2b02      	cmp	r3, #2
 8008968:	d001      	beq.n	800896e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800896a:	f7f7 fd8d 	bl	8000488 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008974:	7bfa      	ldrb	r2, [r7, #15]
 8008976:	4611      	mov	r1, r2
 8008978:	4618      	mov	r0, r3
 800897a:	f7fe fe76 	bl	800766a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008984:	4618      	mov	r0, r3
 8008986:	f7fe fe2f 	bl	80075e8 <USBD_LL_Reset>
}
 800898a:	bf00      	nop
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
	...

08008994 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe fe71 	bl	800768a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089b0:	4b04      	ldr	r3, [pc, #16]	; (80089c4 <HAL_PCD_SuspendCallback+0x30>)
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	4a03      	ldr	r2, [pc, #12]	; (80089c4 <HAL_PCD_SuspendCallback+0x30>)
 80089b6:	f043 0306 	orr.w	r3, r3, #6
 80089ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	e000ed00 	.word	0xe000ed00

080089c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d007      	beq.n	80089e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089d8:	4b08      	ldr	r3, [pc, #32]	; (80089fc <HAL_PCD_ResumeCallback+0x34>)
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	4a07      	ldr	r2, [pc, #28]	; (80089fc <HAL_PCD_ResumeCallback+0x34>)
 80089de:	f023 0306 	bic.w	r3, r3, #6
 80089e2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80089e4:	f000 fa9e 	bl	8008f24 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe fe60 	bl	80076b4 <USBD_LL_Resume>
}
 80089f4:	bf00      	nop
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	e000ed00 	.word	0xe000ed00

08008a00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008a08:	f7fa f822 	bl	8002a50 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008a0c:	4a2b      	ldr	r2, [pc, #172]	; (8008abc <USBD_LL_Init+0xbc>)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a29      	ldr	r2, [pc, #164]	; (8008abc <USBD_LL_Init+0xbc>)
 8008a18:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008a1c:	4b27      	ldr	r3, [pc, #156]	; (8008abc <USBD_LL_Init+0xbc>)
 8008a1e:	4a28      	ldr	r2, [pc, #160]	; (8008ac0 <USBD_LL_Init+0xc0>)
 8008a20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008a22:	4b26      	ldr	r3, [pc, #152]	; (8008abc <USBD_LL_Init+0xbc>)
 8008a24:	2208      	movs	r2, #8
 8008a26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008a28:	4b24      	ldr	r3, [pc, #144]	; (8008abc <USBD_LL_Init+0xbc>)
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a2e:	4b23      	ldr	r3, [pc, #140]	; (8008abc <USBD_LL_Init+0xbc>)
 8008a30:	2202      	movs	r2, #2
 8008a32:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008a34:	4b21      	ldr	r3, [pc, #132]	; (8008abc <USBD_LL_Init+0xbc>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008a3a:	4b20      	ldr	r3, [pc, #128]	; (8008abc <USBD_LL_Init+0xbc>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008a40:	4b1e      	ldr	r3, [pc, #120]	; (8008abc <USBD_LL_Init+0xbc>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008a46:	4b1d      	ldr	r3, [pc, #116]	; (8008abc <USBD_LL_Init+0xbc>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008a4c:	481b      	ldr	r0, [pc, #108]	; (8008abc <USBD_LL_Init+0xbc>)
 8008a4e:	f7f8 fbf7 	bl	8001240 <HAL_PCD_Init>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008a58:	f7f7 fd16 	bl	8000488 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a62:	2318      	movs	r3, #24
 8008a64:	2200      	movs	r2, #0
 8008a66:	2100      	movs	r1, #0
 8008a68:	f7f9 ff20 	bl	80028ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a72:	2358      	movs	r3, #88	; 0x58
 8008a74:	2200      	movs	r2, #0
 8008a76:	2180      	movs	r1, #128	; 0x80
 8008a78:	f7f9 ff18 	bl	80028ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a82:	23c0      	movs	r3, #192	; 0xc0
 8008a84:	2200      	movs	r2, #0
 8008a86:	2181      	movs	r1, #129	; 0x81
 8008a88:	f7f9 ff10 	bl	80028ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a92:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008a96:	2200      	movs	r2, #0
 8008a98:	2101      	movs	r1, #1
 8008a9a:	f7f9 ff07 	bl	80028ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2182      	movs	r1, #130	; 0x82
 8008aac:	f7f9 fefe 	bl	80028ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000fb8 	.word	0x20000fb8
 8008ac0:	40006800 	.word	0x40006800

08008ac4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7f8 fcc2 	bl	8001464 <HAL_PCD_Start>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d816      	bhi.n	8008b18 <USBD_LL_Start+0x54>
 8008aea:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <USBD_LL_Start+0x2c>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b01 	.word	0x08008b01
 8008af4:	08008b07 	.word	0x08008b07
 8008af8:	08008b0d 	.word	0x08008b0d
 8008afc:	08008b13 	.word	0x08008b13
    case HAL_OK :
      usb_status = USBD_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	73fb      	strb	r3, [r7, #15]
    break;
 8008b04:	e00b      	b.n	8008b1e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b06:	2303      	movs	r3, #3
 8008b08:	73fb      	strb	r3, [r7, #15]
    break;
 8008b0a:	e008      	b.n	8008b1e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b10:	e005      	b.n	8008b1e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b12:	2303      	movs	r3, #3
 8008b14:	73fb      	strb	r3, [r7, #15]
    break;
 8008b16:	e002      	b.n	8008b1e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1c:	bf00      	nop
  }
  return usb_status;
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	4608      	mov	r0, r1
 8008b32:	4611      	mov	r1, r2
 8008b34:	461a      	mov	r2, r3
 8008b36:	4603      	mov	r3, r0
 8008b38:	70fb      	strb	r3, [r7, #3]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	70bb      	strb	r3, [r7, #2]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b50:	78bb      	ldrb	r3, [r7, #2]
 8008b52:	883a      	ldrh	r2, [r7, #0]
 8008b54:	78f9      	ldrb	r1, [r7, #3]
 8008b56:	f7f8 fe1a 	bl	800178e <HAL_PCD_EP_Open>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d817      	bhi.n	8008b94 <USBD_LL_OpenEP+0x6c>
 8008b64:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <USBD_LL_OpenEP+0x44>)
 8008b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6a:	bf00      	nop
 8008b6c:	08008b7d 	.word	0x08008b7d
 8008b70:	08008b83 	.word	0x08008b83
 8008b74:	08008b89 	.word	0x08008b89
 8008b78:	08008b8f 	.word	0x08008b8f
    case HAL_OK :
      usb_status = USBD_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b80:	e00b      	b.n	8008b9a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b82:	2303      	movs	r3, #3
 8008b84:	73fb      	strb	r3, [r7, #15]
    break;
 8008b86:	e008      	b.n	8008b9a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8c:	e005      	b.n	8008b9a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	73fb      	strb	r3, [r7, #15]
    break;
 8008b92:	e002      	b.n	8008b9a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008b94:	2303      	movs	r3, #3
 8008b96:	73fb      	strb	r3, [r7, #15]
    break;
 8008b98:	bf00      	nop
  }
  return usb_status;
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bbe:	78fa      	ldrb	r2, [r7, #3]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f8 fe49 	bl	800185a <HAL_PCD_EP_Close>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d816      	bhi.n	8008c00 <USBD_LL_CloseEP+0x5c>
 8008bd2:	a201      	add	r2, pc, #4	; (adr r2, 8008bd8 <USBD_LL_CloseEP+0x34>)
 8008bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd8:	08008be9 	.word	0x08008be9
 8008bdc:	08008bef 	.word	0x08008bef
 8008be0:	08008bf5 	.word	0x08008bf5
 8008be4:	08008bfb 	.word	0x08008bfb
    case HAL_OK :
      usb_status = USBD_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	73fb      	strb	r3, [r7, #15]
    break;
 8008bec:	e00b      	b.n	8008c06 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf2:	e008      	b.n	8008c06 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf8:	e005      	b.n	8008c06 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	73fb      	strb	r3, [r7, #15]
    break;
 8008bfe:	e002      	b.n	8008c06 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008c00:	2303      	movs	r3, #3
 8008c02:	73fb      	strb	r3, [r7, #15]
    break;
 8008c04:	bf00      	nop
  }
  return usb_status;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c2a:	78fa      	ldrb	r2, [r7, #3]
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7f8 fef3 	bl	8001a1a <HAL_PCD_EP_SetStall>
 8008c34:	4603      	mov	r3, r0
 8008c36:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d816      	bhi.n	8008c6c <USBD_LL_StallEP+0x5c>
 8008c3e:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <USBD_LL_StallEP+0x34>)
 8008c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c44:	08008c55 	.word	0x08008c55
 8008c48:	08008c5b 	.word	0x08008c5b
 8008c4c:	08008c61 	.word	0x08008c61
 8008c50:	08008c67 	.word	0x08008c67
    case HAL_OK :
      usb_status = USBD_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73fb      	strb	r3, [r7, #15]
    break;
 8008c58:	e00b      	b.n	8008c72 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5e:	e008      	b.n	8008c72 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c60:	2301      	movs	r3, #1
 8008c62:	73fb      	strb	r3, [r7, #15]
    break;
 8008c64:	e005      	b.n	8008c72 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c66:	2303      	movs	r3, #3
 8008c68:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6a:	e002      	b.n	8008c72 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c70:	bf00      	nop
  }
  return usb_status;
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7f8 ff1d 	bl	8001ada <HAL_PCD_EP_ClrStall>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d816      	bhi.n	8008cd8 <USBD_LL_ClearStallEP+0x5c>
 8008caa:	a201      	add	r2, pc, #4	; (adr r2, 8008cb0 <USBD_LL_ClearStallEP+0x34>)
 8008cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb0:	08008cc1 	.word	0x08008cc1
 8008cb4:	08008cc7 	.word	0x08008cc7
 8008cb8:	08008ccd 	.word	0x08008ccd
 8008cbc:	08008cd3 	.word	0x08008cd3
    case HAL_OK :
      usb_status = USBD_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc4:	e00b      	b.n	8008cde <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cca:	e008      	b.n	8008cde <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd0:	e005      	b.n	8008cde <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd6:	e002      	b.n	8008cde <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	73fb      	strb	r3, [r7, #15]
    break;
 8008cdc:	bf00      	nop
  }
  return usb_status;
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	da0c      	bge.n	8008d1e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d0a:	68f9      	ldr	r1, [r7, #12]
 8008d0c:	1c5a      	adds	r2, r3, #1
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	440b      	add	r3, r1
 8008d18:	3302      	adds	r3, #2
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	e00b      	b.n	8008d36 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d24:	68f9      	ldr	r1, [r7, #12]
 8008d26:	4613      	mov	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	440b      	add	r3, r1
 8008d30:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008d34:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
	...

08008d44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	4611      	mov	r1, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7f8 fcee 	bl	8001744 <HAL_PCD_SetAddress>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	d816      	bhi.n	8008da0 <USBD_LL_SetUSBAddress+0x5c>
 8008d72:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <USBD_LL_SetUSBAddress+0x34>)
 8008d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d78:	08008d89 	.word	0x08008d89
 8008d7c:	08008d8f 	.word	0x08008d8f
 8008d80:	08008d95 	.word	0x08008d95
 8008d84:	08008d9b 	.word	0x08008d9b
    case HAL_OK :
      usb_status = USBD_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8c:	e00b      	b.n	8008da6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	73fb      	strb	r3, [r7, #15]
    break;
 8008d92:	e008      	b.n	8008da6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d94:	2301      	movs	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	e005      	b.n	8008da6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9e:	e002      	b.n	8008da6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008da0:	2303      	movs	r3, #3
 8008da2:	73fb      	strb	r3, [r7, #15]
    break;
 8008da4:	bf00      	nop
  }
  return usb_status;
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	607a      	str	r2, [r7, #4]
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008dce:	7af9      	ldrb	r1, [r7, #11]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	f7f8 fdde 	bl	8001994 <HAL_PCD_EP_Transmit>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008ddc:	7dbb      	ldrb	r3, [r7, #22]
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d816      	bhi.n	8008e10 <USBD_LL_Transmit+0x60>
 8008de2:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <USBD_LL_Transmit+0x38>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008df9 	.word	0x08008df9
 8008dec:	08008dff 	.word	0x08008dff
 8008df0:	08008e05 	.word	0x08008e05
 8008df4:	08008e0b 	.word	0x08008e0b
    case HAL_OK :
      usb_status = USBD_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	75fb      	strb	r3, [r7, #23]
    break;
 8008dfc:	e00b      	b.n	8008e16 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	75fb      	strb	r3, [r7, #23]
    break;
 8008e02:	e008      	b.n	8008e16 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e04:	2301      	movs	r3, #1
 8008e06:	75fb      	strb	r3, [r7, #23]
    break;
 8008e08:	e005      	b.n	8008e16 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	75fb      	strb	r3, [r7, #23]
    break;
 8008e0e:	e002      	b.n	8008e16 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008e10:	2303      	movs	r3, #3
 8008e12:	75fb      	strb	r3, [r7, #23]
    break;
 8008e14:	bf00      	nop
  }
  return usb_status;
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	607a      	str	r2, [r7, #4]
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008e3e:	7af9      	ldrb	r1, [r7, #11]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	f7f8 fd51 	bl	80018ea <HAL_PCD_EP_Receive>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008e4c:	7dbb      	ldrb	r3, [r7, #22]
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d816      	bhi.n	8008e80 <USBD_LL_PrepareReceive+0x60>
 8008e52:	a201      	add	r2, pc, #4	; (adr r2, 8008e58 <USBD_LL_PrepareReceive+0x38>)
 8008e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e58:	08008e69 	.word	0x08008e69
 8008e5c:	08008e6f 	.word	0x08008e6f
 8008e60:	08008e75 	.word	0x08008e75
 8008e64:	08008e7b 	.word	0x08008e7b
    case HAL_OK :
      usb_status = USBD_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	75fb      	strb	r3, [r7, #23]
    break;
 8008e6c:	e00b      	b.n	8008e86 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	75fb      	strb	r3, [r7, #23]
    break;
 8008e72:	e008      	b.n	8008e86 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e74:	2301      	movs	r3, #1
 8008e76:	75fb      	strb	r3, [r7, #23]
    break;
 8008e78:	e005      	b.n	8008e86 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	75fb      	strb	r3, [r7, #23]
    break;
 8008e7e:	e002      	b.n	8008e86 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008e80:	2303      	movs	r3, #3
 8008e82:	75fb      	strb	r3, [r7, #23]
    break;
 8008e84:	bf00      	nop
  }
  return usb_status;
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7f8 fd5c 	bl	8001964 <HAL_PCD_EP_GetRxCount>
 8008eac:	4603      	mov	r3, r0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008ec4:	78fb      	ldrb	r3, [r7, #3]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <HAL_PCDEx_LPM_Callback+0x18>
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d013      	beq.n	8008ef6 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008ece:	e023      	b.n	8008f18 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008ed8:	f000 f824 	bl	8008f24 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008edc:	4b10      	ldr	r3, [pc, #64]	; (8008f20 <HAL_PCDEx_LPM_Callback+0x68>)
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	4a0f      	ldr	r2, [pc, #60]	; (8008f20 <HAL_PCDEx_LPM_Callback+0x68>)
 8008ee2:	f023 0306 	bic.w	r3, r3, #6
 8008ee6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fe fbe0 	bl	80076b4 <USBD_LL_Resume>
    break;
 8008ef4:	e010      	b.n	8008f18 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fe fbc4 	bl	800768a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d005      	beq.n	8008f16 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f0a:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <HAL_PCDEx_LPM_Callback+0x68>)
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	4a04      	ldr	r2, [pc, #16]	; (8008f20 <HAL_PCDEx_LPM_Callback+0x68>)
 8008f10:	f043 0306 	orr.w	r3, r3, #6
 8008f14:	6113      	str	r3, [r2, #16]
    break;
 8008f16:	bf00      	nop
}
 8008f18:	bf00      	nop
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	e000ed00 	.word	0xe000ed00

08008f24 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008f28:	f7f7 f9a2 	bl	8000270 <SystemClock_Config>
}
 8008f2c:	bf00      	nop
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <__errno>:
 8008f30:	4b01      	ldr	r3, [pc, #4]	; (8008f38 <__errno+0x8>)
 8008f32:	6818      	ldr	r0, [r3, #0]
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	200001a0 	.word	0x200001a0

08008f3c <__libc_init_array>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	4d0d      	ldr	r5, [pc, #52]	; (8008f74 <__libc_init_array+0x38>)
 8008f40:	4c0d      	ldr	r4, [pc, #52]	; (8008f78 <__libc_init_array+0x3c>)
 8008f42:	1b64      	subs	r4, r4, r5
 8008f44:	10a4      	asrs	r4, r4, #2
 8008f46:	2600      	movs	r6, #0
 8008f48:	42a6      	cmp	r6, r4
 8008f4a:	d109      	bne.n	8008f60 <__libc_init_array+0x24>
 8008f4c:	4d0b      	ldr	r5, [pc, #44]	; (8008f7c <__libc_init_array+0x40>)
 8008f4e:	4c0c      	ldr	r4, [pc, #48]	; (8008f80 <__libc_init_array+0x44>)
 8008f50:	f000 f8f8 	bl	8009144 <_init>
 8008f54:	1b64      	subs	r4, r4, r5
 8008f56:	10a4      	asrs	r4, r4, #2
 8008f58:	2600      	movs	r6, #0
 8008f5a:	42a6      	cmp	r6, r4
 8008f5c:	d105      	bne.n	8008f6a <__libc_init_array+0x2e>
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}
 8008f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f64:	4798      	blx	r3
 8008f66:	3601      	adds	r6, #1
 8008f68:	e7ee      	b.n	8008f48 <__libc_init_array+0xc>
 8008f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f6e:	4798      	blx	r3
 8008f70:	3601      	adds	r6, #1
 8008f72:	e7f2      	b.n	8008f5a <__libc_init_array+0x1e>
 8008f74:	080091f4 	.word	0x080091f4
 8008f78:	080091f4 	.word	0x080091f4
 8008f7c:	080091f4 	.word	0x080091f4
 8008f80:	080091f8 	.word	0x080091f8

08008f84 <malloc>:
 8008f84:	4b02      	ldr	r3, [pc, #8]	; (8008f90 <malloc+0xc>)
 8008f86:	4601      	mov	r1, r0
 8008f88:	6818      	ldr	r0, [r3, #0]
 8008f8a:	f000 b863 	b.w	8009054 <_malloc_r>
 8008f8e:	bf00      	nop
 8008f90:	200001a0 	.word	0x200001a0

08008f94 <free>:
 8008f94:	4b02      	ldr	r3, [pc, #8]	; (8008fa0 <free+0xc>)
 8008f96:	4601      	mov	r1, r0
 8008f98:	6818      	ldr	r0, [r3, #0]
 8008f9a:	f000 b80b 	b.w	8008fb4 <_free_r>
 8008f9e:	bf00      	nop
 8008fa0:	200001a0 	.word	0x200001a0

08008fa4 <memset>:
 8008fa4:	4402      	add	r2, r0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d100      	bne.n	8008fae <memset+0xa>
 8008fac:	4770      	bx	lr
 8008fae:	f803 1b01 	strb.w	r1, [r3], #1
 8008fb2:	e7f9      	b.n	8008fa8 <memset+0x4>

08008fb4 <_free_r>:
 8008fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fb6:	2900      	cmp	r1, #0
 8008fb8:	d048      	beq.n	800904c <_free_r+0x98>
 8008fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fbe:	9001      	str	r0, [sp, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8008fc6:	bfb8      	it	lt
 8008fc8:	18e4      	addlt	r4, r4, r3
 8008fca:	f000 f8ad 	bl	8009128 <__malloc_lock>
 8008fce:	4a20      	ldr	r2, [pc, #128]	; (8009050 <_free_r+0x9c>)
 8008fd0:	9801      	ldr	r0, [sp, #4]
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	4615      	mov	r5, r2
 8008fd6:	b933      	cbnz	r3, 8008fe6 <_free_r+0x32>
 8008fd8:	6063      	str	r3, [r4, #4]
 8008fda:	6014      	str	r4, [r2, #0]
 8008fdc:	b003      	add	sp, #12
 8008fde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fe2:	f000 b8a7 	b.w	8009134 <__malloc_unlock>
 8008fe6:	42a3      	cmp	r3, r4
 8008fe8:	d90b      	bls.n	8009002 <_free_r+0x4e>
 8008fea:	6821      	ldr	r1, [r4, #0]
 8008fec:	1862      	adds	r2, r4, r1
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	bf04      	itt	eq
 8008ff2:	681a      	ldreq	r2, [r3, #0]
 8008ff4:	685b      	ldreq	r3, [r3, #4]
 8008ff6:	6063      	str	r3, [r4, #4]
 8008ff8:	bf04      	itt	eq
 8008ffa:	1852      	addeq	r2, r2, r1
 8008ffc:	6022      	streq	r2, [r4, #0]
 8008ffe:	602c      	str	r4, [r5, #0]
 8009000:	e7ec      	b.n	8008fdc <_free_r+0x28>
 8009002:	461a      	mov	r2, r3
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	b10b      	cbz	r3, 800900c <_free_r+0x58>
 8009008:	42a3      	cmp	r3, r4
 800900a:	d9fa      	bls.n	8009002 <_free_r+0x4e>
 800900c:	6811      	ldr	r1, [r2, #0]
 800900e:	1855      	adds	r5, r2, r1
 8009010:	42a5      	cmp	r5, r4
 8009012:	d10b      	bne.n	800902c <_free_r+0x78>
 8009014:	6824      	ldr	r4, [r4, #0]
 8009016:	4421      	add	r1, r4
 8009018:	1854      	adds	r4, r2, r1
 800901a:	42a3      	cmp	r3, r4
 800901c:	6011      	str	r1, [r2, #0]
 800901e:	d1dd      	bne.n	8008fdc <_free_r+0x28>
 8009020:	681c      	ldr	r4, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	6053      	str	r3, [r2, #4]
 8009026:	4421      	add	r1, r4
 8009028:	6011      	str	r1, [r2, #0]
 800902a:	e7d7      	b.n	8008fdc <_free_r+0x28>
 800902c:	d902      	bls.n	8009034 <_free_r+0x80>
 800902e:	230c      	movs	r3, #12
 8009030:	6003      	str	r3, [r0, #0]
 8009032:	e7d3      	b.n	8008fdc <_free_r+0x28>
 8009034:	6825      	ldr	r5, [r4, #0]
 8009036:	1961      	adds	r1, r4, r5
 8009038:	428b      	cmp	r3, r1
 800903a:	bf04      	itt	eq
 800903c:	6819      	ldreq	r1, [r3, #0]
 800903e:	685b      	ldreq	r3, [r3, #4]
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	bf04      	itt	eq
 8009044:	1949      	addeq	r1, r1, r5
 8009046:	6021      	streq	r1, [r4, #0]
 8009048:	6054      	str	r4, [r2, #4]
 800904a:	e7c7      	b.n	8008fdc <_free_r+0x28>
 800904c:	b003      	add	sp, #12
 800904e:	bd30      	pop	{r4, r5, pc}
 8009050:	20000228 	.word	0x20000228

08009054 <_malloc_r>:
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009056:	1ccd      	adds	r5, r1, #3
 8009058:	f025 0503 	bic.w	r5, r5, #3
 800905c:	3508      	adds	r5, #8
 800905e:	2d0c      	cmp	r5, #12
 8009060:	bf38      	it	cc
 8009062:	250c      	movcc	r5, #12
 8009064:	2d00      	cmp	r5, #0
 8009066:	4606      	mov	r6, r0
 8009068:	db01      	blt.n	800906e <_malloc_r+0x1a>
 800906a:	42a9      	cmp	r1, r5
 800906c:	d903      	bls.n	8009076 <_malloc_r+0x22>
 800906e:	230c      	movs	r3, #12
 8009070:	6033      	str	r3, [r6, #0]
 8009072:	2000      	movs	r0, #0
 8009074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009076:	f000 f857 	bl	8009128 <__malloc_lock>
 800907a:	4921      	ldr	r1, [pc, #132]	; (8009100 <_malloc_r+0xac>)
 800907c:	680a      	ldr	r2, [r1, #0]
 800907e:	4614      	mov	r4, r2
 8009080:	b99c      	cbnz	r4, 80090aa <_malloc_r+0x56>
 8009082:	4f20      	ldr	r7, [pc, #128]	; (8009104 <_malloc_r+0xb0>)
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	b923      	cbnz	r3, 8009092 <_malloc_r+0x3e>
 8009088:	4621      	mov	r1, r4
 800908a:	4630      	mov	r0, r6
 800908c:	f000 f83c 	bl	8009108 <_sbrk_r>
 8009090:	6038      	str	r0, [r7, #0]
 8009092:	4629      	mov	r1, r5
 8009094:	4630      	mov	r0, r6
 8009096:	f000 f837 	bl	8009108 <_sbrk_r>
 800909a:	1c43      	adds	r3, r0, #1
 800909c:	d123      	bne.n	80090e6 <_malloc_r+0x92>
 800909e:	230c      	movs	r3, #12
 80090a0:	6033      	str	r3, [r6, #0]
 80090a2:	4630      	mov	r0, r6
 80090a4:	f000 f846 	bl	8009134 <__malloc_unlock>
 80090a8:	e7e3      	b.n	8009072 <_malloc_r+0x1e>
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	1b5b      	subs	r3, r3, r5
 80090ae:	d417      	bmi.n	80090e0 <_malloc_r+0x8c>
 80090b0:	2b0b      	cmp	r3, #11
 80090b2:	d903      	bls.n	80090bc <_malloc_r+0x68>
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	441c      	add	r4, r3
 80090b8:	6025      	str	r5, [r4, #0]
 80090ba:	e004      	b.n	80090c6 <_malloc_r+0x72>
 80090bc:	6863      	ldr	r3, [r4, #4]
 80090be:	42a2      	cmp	r2, r4
 80090c0:	bf0c      	ite	eq
 80090c2:	600b      	streq	r3, [r1, #0]
 80090c4:	6053      	strne	r3, [r2, #4]
 80090c6:	4630      	mov	r0, r6
 80090c8:	f000 f834 	bl	8009134 <__malloc_unlock>
 80090cc:	f104 000b 	add.w	r0, r4, #11
 80090d0:	1d23      	adds	r3, r4, #4
 80090d2:	f020 0007 	bic.w	r0, r0, #7
 80090d6:	1ac2      	subs	r2, r0, r3
 80090d8:	d0cc      	beq.n	8009074 <_malloc_r+0x20>
 80090da:	1a1b      	subs	r3, r3, r0
 80090dc:	50a3      	str	r3, [r4, r2]
 80090de:	e7c9      	b.n	8009074 <_malloc_r+0x20>
 80090e0:	4622      	mov	r2, r4
 80090e2:	6864      	ldr	r4, [r4, #4]
 80090e4:	e7cc      	b.n	8009080 <_malloc_r+0x2c>
 80090e6:	1cc4      	adds	r4, r0, #3
 80090e8:	f024 0403 	bic.w	r4, r4, #3
 80090ec:	42a0      	cmp	r0, r4
 80090ee:	d0e3      	beq.n	80090b8 <_malloc_r+0x64>
 80090f0:	1a21      	subs	r1, r4, r0
 80090f2:	4630      	mov	r0, r6
 80090f4:	f000 f808 	bl	8009108 <_sbrk_r>
 80090f8:	3001      	adds	r0, #1
 80090fa:	d1dd      	bne.n	80090b8 <_malloc_r+0x64>
 80090fc:	e7cf      	b.n	800909e <_malloc_r+0x4a>
 80090fe:	bf00      	nop
 8009100:	20000228 	.word	0x20000228
 8009104:	2000022c 	.word	0x2000022c

08009108 <_sbrk_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4d06      	ldr	r5, [pc, #24]	; (8009124 <_sbrk_r+0x1c>)
 800910c:	2300      	movs	r3, #0
 800910e:	4604      	mov	r4, r0
 8009110:	4608      	mov	r0, r1
 8009112:	602b      	str	r3, [r5, #0]
 8009114:	f7f7 fcb8 	bl	8000a88 <_sbrk>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d102      	bne.n	8009122 <_sbrk_r+0x1a>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b103      	cbz	r3, 8009122 <_sbrk_r+0x1a>
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	200012ac 	.word	0x200012ac

08009128 <__malloc_lock>:
 8009128:	4801      	ldr	r0, [pc, #4]	; (8009130 <__malloc_lock+0x8>)
 800912a:	f000 b809 	b.w	8009140 <__retarget_lock_acquire_recursive>
 800912e:	bf00      	nop
 8009130:	200012b4 	.word	0x200012b4

08009134 <__malloc_unlock>:
 8009134:	4801      	ldr	r0, [pc, #4]	; (800913c <__malloc_unlock+0x8>)
 8009136:	f000 b804 	b.w	8009142 <__retarget_lock_release_recursive>
 800913a:	bf00      	nop
 800913c:	200012b4 	.word	0x200012b4

08009140 <__retarget_lock_acquire_recursive>:
 8009140:	4770      	bx	lr

08009142 <__retarget_lock_release_recursive>:
 8009142:	4770      	bx	lr

08009144 <_init>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	bf00      	nop
 8009148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914a:	bc08      	pop	{r3}
 800914c:	469e      	mov	lr, r3
 800914e:	4770      	bx	lr

08009150 <_fini>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	bf00      	nop
 8009154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009156:	bc08      	pop	{r3}
 8009158:	469e      	mov	lr, r3
 800915a:	4770      	bx	lr
