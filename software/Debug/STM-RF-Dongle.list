
STM-RF-Dongle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eb0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800903c  0800903c  0001903c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090d4  080090d4  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  080090d4  080090d4  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090d4  080090d4  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090d4  080090d4  000190d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090d8  080090d8  000190d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080090dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001078  200001fc  080092d8  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20001274  080092d8  00021274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc1b  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b1  00000000  00000000  0003ce47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  000406f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00041670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023243  00000000  00000000  00042460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131a8  00000000  00000000  000656a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c388a  00000000  00000000  0007884b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c0d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f38  00000000  00000000  0013c128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001fc 	.word	0x200001fc
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009024 	.word	0x08009024

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000200 	.word	0x20000200
 80001c8:	08009024 	.word	0x08009024

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fccf 	bl	8000b72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f84a 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f908 	bl	80003ec <MX_GPIO_Init>
  MX_SPI3_Init();
 80001dc:	f000 f8c8 	bl	8000370 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80001e0:	f008 f8a6 	bl	8008330 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 80001e4:	f000 fab6 	bl	8000754 <NRF24_Init>
  NRF24_ReadAll(&rxBuffer);
 80001e8:	481d      	ldr	r0, [pc, #116]	; (8000260 <main+0x94>)
 80001ea:	f000 fb2a 	bl	8000842 <NRF24_ReadAll>


#if MODE == 0
  NRF24_TxMode(address,120);
#else if MODE == 1
  NRF24_RxMode(address, 120);
 80001ee:	2178      	movs	r1, #120	; 0x78
 80001f0:	481c      	ldr	r0, [pc, #112]	; (8000264 <main+0x98>)
 80001f2:	f000 fad6 	bl	80007a2 <NRF24_RxMode>
  //NRF24_ReadAll(data);
#endif
 // HAL_Delay(50);

  NRF24_ReadAll(&rxBuffer);
 80001f6:	481a      	ldr	r0, [pc, #104]	; (8000260 <main+0x94>)
 80001f8:	f000 fb23 	bl	8000842 <NRF24_ReadAll>
	   	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
	  }

#else if MODE == 1

	  if(isDataAvailable(0) == 1)
 80001fc:	2000      	movs	r0, #0
 80001fe:	f000 fb01 	bl	8000804 <isDataAvailable>
 8000202:	4603      	mov	r3, r0
 8000204:	2b01      	cmp	r3, #1
 8000206:	d109      	bne.n	800021c <main+0x50>
		 /* if(CDC_Transmit_FS((uint8_t *) rxBuffer,strlen(rxBuffer)) == 1)
		  {
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
		  }*/

		   	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000208:	2201      	movs	r2, #1
 800020a:	2101      	movs	r1, #1
 800020c:	4816      	ldr	r0, [pc, #88]	; (8000268 <main+0x9c>)
 800020e:	f000 ffc5 	bl	800119c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,1);
 8000212:	2201      	movs	r2, #1
 8000214:	2102      	movs	r1, #2
 8000216:	4814      	ldr	r0, [pc, #80]	; (8000268 <main+0x9c>)
 8000218:	f000 ffc0 	bl	800119c <HAL_GPIO_WritePin>
	  }

	  if(isDataAvailable(1) == 1)
 800021c:	2001      	movs	r0, #1
 800021e:	f000 faf1 	bl	8000804 <isDataAvailable>
 8000222:	4603      	mov	r3, r0
 8000224:	2b01      	cmp	r3, #1
 8000226:	d109      	bne.n	800023c <main+0x70>
		 /* if(CDC_Transmit_FS((uint8_t *) rxBuffer,strlen(rxBuffer)) == 1)
		  {
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
		  }*/

		   	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000228:	2201      	movs	r2, #1
 800022a:	2101      	movs	r1, #1
 800022c:	480e      	ldr	r0, [pc, #56]	; (8000268 <main+0x9c>)
 800022e:	f000 ffb5 	bl	800119c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,1);
 8000232:	2201      	movs	r2, #1
 8000234:	2102      	movs	r1, #2
 8000236:	480c      	ldr	r0, [pc, #48]	; (8000268 <main+0x9c>)
 8000238:	f000 ffb0 	bl	800119c <HAL_GPIO_WritePin>
	  }

	  if(isDataAvailable(2) == 1)
 800023c:	2002      	movs	r0, #2
 800023e:	f000 fae1 	bl	8000804 <isDataAvailable>
 8000242:	4603      	mov	r3, r0
 8000244:	2b01      	cmp	r3, #1
 8000246:	d1d9      	bne.n	80001fc <main+0x30>
		 /* if(CDC_Transmit_FS((uint8_t *) rxBuffer,strlen(rxBuffer)) == 1)
		  {
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
		  }*/

		   	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000248:	2201      	movs	r2, #1
 800024a:	2101      	movs	r1, #1
 800024c:	4806      	ldr	r0, [pc, #24]	; (8000268 <main+0x9c>)
 800024e:	f000 ffa5 	bl	800119c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,1);
 8000252:	2201      	movs	r2, #1
 8000254:	2102      	movs	r1, #2
 8000256:	4804      	ldr	r0, [pc, #16]	; (8000268 <main+0x9c>)
 8000258:	f000 ffa0 	bl	800119c <HAL_GPIO_WritePin>
	  if(isDataAvailable(0) == 1)
 800025c:	e7ce      	b.n	80001fc <main+0x30>
 800025e:	bf00      	nop
 8000260:	2000028c 	.word	0x2000028c
 8000264:	20000000 	.word	0x20000000
 8000268:	48000400 	.word	0x48000400

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b0ac      	sub	sp, #176	; 0xb0
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000276:	2244      	movs	r2, #68	; 0x44
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f008 fe02 	bl	8008e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2254      	movs	r2, #84	; 0x54
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f008 fdf4 	bl	8008e84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800029c:	2310      	movs	r3, #16
 800029e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002a0:	2301      	movs	r3, #1
 80002a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ac:	2360      	movs	r3, #96	; 0x60
 80002ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b2:	2302      	movs	r3, #2
 80002b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002b8:	2301      	movs	r3, #1
 80002ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002be:	2301      	movs	r3, #1
 80002c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002c4:	2328      	movs	r3, #40	; 0x28
 80002c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002ca:	2307      	movs	r3, #7
 80002cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002d0:	2302      	movs	r3, #2
 80002d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d6:	2302      	movs	r3, #2
 80002d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 fb8b 	bl	80029fc <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002ec:	f000 f8ca 	bl	8000484 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f4:	2303      	movs	r3, #3
 80002f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000304:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000308:	2104      	movs	r1, #4
 800030a:	4618      	mov	r0, r3
 800030c:	f002 ff96 	bl	800323c <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000316:	f000 f8b5 	bl	8000484 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800031a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000320:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000324:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000326:	2301      	movs	r3, #1
 8000328:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800032a:	2301      	movs	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800032e:	2318      	movs	r3, #24
 8000330:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000332:	2307      	movs	r3, #7
 8000334:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000336:	2302      	movs	r3, #2
 8000338:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800033a:	2302      	movs	r3, #2
 800033c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800033e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000342:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4618      	mov	r0, r3
 8000348:	f003 f946 	bl	80035d8 <HAL_RCCEx_PeriphCLKConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000352:	f000 f897 	bl	8000484 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000356:	f44f 7000 	mov.w	r0, #512	; 0x200
 800035a:	f002 fae9 	bl	8002930 <HAL_PWREx_ControlVoltageScaling>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000364:	f000 f88e 	bl	8000484 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	37b0      	adds	r7, #176	; 0xb0
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <MX_SPI3_Init+0x74>)
 8000376:	4a1c      	ldr	r2, [pc, #112]	; (80003e8 <MX_SPI3_Init+0x78>)
 8000378:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <MX_SPI3_Init+0x74>)
 800037c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000380:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_SPI3_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000388:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <MX_SPI3_Init+0x74>)
 800038a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800038e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_SPI3_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000396:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_SPI3_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_SPI3_Init+0x74>)
 800039e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_SPI3_Init+0x74>)
 80003a6:	2220      	movs	r2, #32
 80003a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_SPI3_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_SPI3_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_SPI3_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_SPI3_Init+0x74>)
 80003be:	2207      	movs	r2, #7
 80003c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_SPI3_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_SPI3_Init+0x74>)
 80003ca:	2208      	movs	r2, #8
 80003cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <MX_SPI3_Init+0x74>)
 80003d0:	f003 fbe8 	bl	8003ba4 <HAL_SPI_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80003da:	f000 f853 	bl	8000484 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000228 	.word	0x20000228
 80003e8:	40003c00 	.word	0x40003c00

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 030c 	add.w	r3, r7, #12
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000402:	4b1e      	ldr	r3, [pc, #120]	; (800047c <MX_GPIO_Init+0x90>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a1d      	ldr	r2, [pc, #116]	; (800047c <MX_GPIO_Init+0x90>)
 8000408:	f043 0302 	orr.w	r3, r3, #2
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_GPIO_Init+0x90>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0302 	and.w	r3, r3, #2
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_GPIO_Init+0x90>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	4a17      	ldr	r2, [pc, #92]	; (800047c <MX_GPIO_Init+0x90>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000426:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_GPIO_Init+0x90>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	21c3      	movs	r1, #195	; 0xc3
 8000436:	4812      	ldr	r0, [pc, #72]	; (8000480 <MX_GPIO_Init+0x94>)
 8000438:	f000 feb0 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin NRF_CS_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin;
 800043c:	23c3      	movs	r3, #195	; 0xc3
 800043e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000440:	2301      	movs	r3, #1
 8000442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	2300      	movs	r3, #0
 800044a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044c:	f107 030c 	add.w	r3, r7, #12
 8000450:	4619      	mov	r1, r3
 8000452:	480b      	ldr	r0, [pc, #44]	; (8000480 <MX_GPIO_Init+0x94>)
 8000454:	f000 fd38 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800045c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800045e:	2300      	movs	r3, #0
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	4619      	mov	r1, r3
 800046c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000470:	f000 fd2a 	bl	8000ec8 <HAL_GPIO_Init>

}
 8000474:	bf00      	nop
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	48000400 	.word	0x48000400

08000484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
}
 800048a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048c:	e7fe      	b.n	800048c <Error_Handler+0x8>
	...

08000490 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_6


void CS_Select (void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <CS_Select+0x14>)
 800049a:	f000 fe7f 	bl	800119c <HAL_GPIO_WritePin>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	48000400 	.word	0x48000400

080004a8 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2140      	movs	r1, #64	; 0x40
 80004b0:	4802      	ldr	r0, [pc, #8]	; (80004bc <CS_UnSelect+0x14>)
 80004b2:	f000 fe73 	bl	800119c <HAL_GPIO_WritePin>
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	48000400 	.word	0x48000400

080004c0 <CE_Enable>:


void CE_Enable (void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2180      	movs	r1, #128	; 0x80
 80004c8:	4802      	ldr	r0, [pc, #8]	; (80004d4 <CE_Enable+0x14>)
 80004ca:	f000 fe67 	bl	800119c <HAL_GPIO_WritePin>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	48000400 	.word	0x48000400

080004d8 <CE_Disable>:

void CE_Disable (void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <CE_Disable+0x14>)
 80004e2:	f000 fe5b 	bl	800119c <HAL_GPIO_WritePin>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	48000400 	.word	0x48000400

080004f0 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	460a      	mov	r2, r1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	4613      	mov	r3, r2
 80004fe:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	f043 0320 	orr.w	r3, r3, #32
 8000506:	b2db      	uxtb	r3, r3
 8000508:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800050e:	f7ff ffbf 	bl	8000490 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000512:	f107 010c 	add.w	r1, r7, #12
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	2202      	movs	r2, #2
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <nrf24_WriteReg+0x40>)
 800051e:	f003 fbe4 	bl	8003cea <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000522:	f7ff ffc1 	bl	80004a8 <CS_UnSelect>
}
 8000526:	bf00      	nop
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000228 	.word	0x20000228

08000534 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
 8000540:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	f043 0320 	orr.w	r3, r3, #32
 8000548:	b2db      	uxtb	r3, r3
 800054a:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800054c:	f7ff ffa0 	bl	8000490 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000550:	f107 0114 	add.w	r1, r7, #20
 8000554:	2364      	movs	r3, #100	; 0x64
 8000556:	2201      	movs	r2, #1
 8000558:	4808      	ldr	r0, [pc, #32]	; (800057c <nrf24_WriteRegMulti+0x48>)
 800055a:	f003 fbc6 	bl	8003cea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	b29a      	uxth	r2, r3
 8000562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000566:	68b9      	ldr	r1, [r7, #8]
 8000568:	4804      	ldr	r0, [pc, #16]	; (800057c <nrf24_WriteRegMulti+0x48>)
 800056a:	f003 fbbe 	bl	8003cea <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800056e:	f7ff ff9b 	bl	80004a8 <CS_UnSelect>
}
 8000572:	bf00      	nop
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000228 	.word	0x20000228

08000580 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800058a:	2300      	movs	r3, #0
 800058c:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800058e:	f7ff ff7f 	bl	8000490 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000592:	1df9      	adds	r1, r7, #7
 8000594:	2364      	movs	r3, #100	; 0x64
 8000596:	2201      	movs	r2, #1
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <nrf24_ReadReg+0x3c>)
 800059a:	f003 fba6 	bl	8003cea <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800059e:	f107 010f 	add.w	r1, r7, #15
 80005a2:	2364      	movs	r3, #100	; 0x64
 80005a4:	2201      	movs	r2, #1
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <nrf24_ReadReg+0x3c>)
 80005a8:	f003 fd0d 	bl	8003fc6 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005ac:	f7ff ff7c 	bl	80004a8 <CS_UnSelect>

	return data;
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000228 	.word	0x20000228

080005c0 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
 80005cc:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005ce:	f7ff ff5f 	bl	8000490 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80005d2:	f107 010f 	add.w	r1, r7, #15
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	2201      	movs	r2, #1
 80005da:	4808      	ldr	r0, [pc, #32]	; (80005fc <nrf24_ReadReg_Multi+0x3c>)
 80005dc:	f003 fb85 	bl	8003cea <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <nrf24_ReadReg_Multi+0x3c>)
 80005ec:	f003 fceb 	bl	8003fc6 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005f0:	f7ff ff5a 	bl	80004a8 <CS_UnSelect>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000228 	.word	0x20000228

08000600 <nrf24_reset>:
	// Pull the CS HIGH to release the device
	CS_UnSelect();
}

void nrf24_reset(uint8_t REG)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b07      	cmp	r3, #7
 800060e:	d107      	bne.n	8000620 <nrf24_reset+0x20>
	{
		HAL_Delay(5);
 8000610:	2005      	movs	r0, #5
 8000612:	f000 fb23 	bl	8000c5c <HAL_Delay>
		nrf24_WriteReg(STATUS, 0x00);
 8000616:	2100      	movs	r1, #0
 8000618:	2007      	movs	r0, #7
 800061a:	f7ff ff69 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 800061e:	e090      	b.n	8000742 <nrf24_reset+0x142>
	else if (REG == FIFO_STATUS)
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b17      	cmp	r3, #23
 8000624:	d104      	bne.n	8000630 <nrf24_reset+0x30>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000626:	2111      	movs	r1, #17
 8000628:	2017      	movs	r0, #23
 800062a:	f7ff ff61 	bl	80004f0 <nrf24_WriteReg>
}
 800062e:	e088      	b.n	8000742 <nrf24_reset+0x142>
	nrf24_WriteReg(CONFIG, 0x08);
 8000630:	2108      	movs	r1, #8
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff ff5c 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000638:	213f      	movs	r1, #63	; 0x3f
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff ff58 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000640:	2103      	movs	r1, #3
 8000642:	2002      	movs	r0, #2
 8000644:	f7ff ff54 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000648:	2103      	movs	r1, #3
 800064a:	2003      	movs	r0, #3
 800064c:	f7ff ff50 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000650:	2103      	movs	r1, #3
 8000652:	2004      	movs	r0, #4
 8000654:	f7ff ff4c 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000658:	2102      	movs	r1, #2
 800065a:	2005      	movs	r0, #5
 800065c:	f7ff ff48 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000660:	210e      	movs	r1, #14
 8000662:	2006      	movs	r0, #6
 8000664:	f7ff ff44 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000668:	2100      	movs	r1, #0
 800066a:	2007      	movs	r0, #7
 800066c:	f7ff ff40 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000670:	2100      	movs	r1, #0
 8000672:	2008      	movs	r0, #8
 8000674:	f7ff ff3c 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000678:	2100      	movs	r1, #0
 800067a:	2009      	movs	r0, #9
 800067c:	f7ff ff38 	bl	80004f0 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000680:	4a32      	ldr	r2, [pc, #200]	; (800074c <nrf24_reset+0x14c>)
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800068a:	6018      	str	r0, [r3, #0]
 800068c:	3304      	adds	r3, #4
 800068e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000690:	f107 0318 	add.w	r3, r7, #24
 8000694:	2205      	movs	r2, #5
 8000696:	4619      	mov	r1, r3
 8000698:	200a      	movs	r0, #10
 800069a:	f7ff ff4b 	bl	8000534 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800069e:	4a2c      	ldr	r2, [pc, #176]	; (8000750 <nrf24_reset+0x150>)
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a8:	6018      	str	r0, [r3, #0]
 80006aa:	3304      	adds	r3, #4
 80006ac:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	2205      	movs	r2, #5
 80006b4:	4619      	mov	r1, r3
 80006b6:	200b      	movs	r0, #11
 80006b8:	f7ff ff3c 	bl	8000534 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80006bc:	21c3      	movs	r1, #195	; 0xc3
 80006be:	200c      	movs	r0, #12
 80006c0:	f7ff ff16 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80006c4:	21c4      	movs	r1, #196	; 0xc4
 80006c6:	200d      	movs	r0, #13
 80006c8:	f7ff ff12 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80006cc:	21c5      	movs	r1, #197	; 0xc5
 80006ce:	200e      	movs	r0, #14
 80006d0:	f7ff ff0e 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80006d4:	21c6      	movs	r1, #198	; 0xc6
 80006d6:	200f      	movs	r0, #15
 80006d8:	f7ff ff0a 	bl	80004f0 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <nrf24_reset+0x14c>)
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e6:	6018      	str	r0, [r3, #0]
 80006e8:	3304      	adds	r3, #4
 80006ea:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2205      	movs	r2, #5
 80006f2:	4619      	mov	r1, r3
 80006f4:	2010      	movs	r0, #16
 80006f6:	f7ff ff1d 	bl	8000534 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	2011      	movs	r0, #17
 80006fe:	f7ff fef7 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000702:	2100      	movs	r1, #0
 8000704:	2012      	movs	r0, #18
 8000706:	f7ff fef3 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800070a:	2100      	movs	r1, #0
 800070c:	2013      	movs	r0, #19
 800070e:	f7ff feef 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000712:	2100      	movs	r1, #0
 8000714:	2014      	movs	r0, #20
 8000716:	f7ff feeb 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800071a:	2100      	movs	r1, #0
 800071c:	2015      	movs	r0, #21
 800071e:	f7ff fee7 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000722:	2100      	movs	r1, #0
 8000724:	2016      	movs	r0, #22
 8000726:	f7ff fee3 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800072a:	2111      	movs	r1, #17
 800072c:	2017      	movs	r0, #23
 800072e:	f7ff fedf 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000732:	2100      	movs	r1, #0
 8000734:	201c      	movs	r0, #28
 8000736:	f7ff fedb 	bl	80004f0 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800073a:	2100      	movs	r1, #0
 800073c:	201d      	movs	r0, #29
 800073e:	f7ff fed7 	bl	80004f0 <nrf24_WriteReg>
}
 8000742:	bf00      	nop
 8000744:	3720      	adds	r7, #32
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	0800903c 	.word	0x0800903c
 8000750:	08009044 	.word	0x08009044

08000754 <NRF24_Init>:




void NRF24_Init (void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000758:	f7ff febe 	bl	80004d8 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff ff4f 	bl	8000600 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff fec3 	bl	80004f0 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800076a:	2100      	movs	r1, #0
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff febf 	bl	80004f0 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000772:	2100      	movs	r1, #0
 8000774:	2002      	movs	r0, #2
 8000776:	f7ff febb 	bl	80004f0 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800077a:	2103      	movs	r1, #3
 800077c:	2003      	movs	r0, #3
 800077e:	f7ff feb7 	bl	80004f0 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000782:	2100      	movs	r1, #0
 8000784:	2004      	movs	r0, #4
 8000786:	f7ff feb3 	bl	80004f0 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800078a:	2100      	movs	r1, #0
 800078c:	2005      	movs	r0, #5
 800078e:	f7ff feaf 	bl	80004f0 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0F);   // Power= 0db, data rate = 2Mbps
 8000792:	210f      	movs	r1, #15
 8000794:	2006      	movs	r0, #6
 8000796:	f7ff feab 	bl	80004f0 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800079a:	f7ff fe91 	bl	80004c0 <CE_Enable>

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	460b      	mov	r3, r1
 80007ac:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80007ae:	f7ff fe93 	bl	80004d8 <CE_Disable>

	nrf24_reset (STATUS);
 80007b2:	2007      	movs	r0, #7
 80007b4:	f7ff ff24 	bl	8000600 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	4619      	mov	r1, r3
 80007bc:	2005      	movs	r0, #5
 80007be:	f7ff fe97 	bl	80004f0 <nrf24_WriteReg>

	// select data pipe 2
	//uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
	//en_rxaddr = en_rxaddr | (1<<2);
	uint8_t en_rxaddr = 0x03;
 80007c2:	2303      	movs	r3, #3
 80007c4:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	4619      	mov	r1, r3
 80007ca:	2002      	movs	r0, #2
 80007cc:	f7ff fe90 	bl	80004f0 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P0, Address, 5);  // Write the Pipe1 address
 80007d0:	2205      	movs	r2, #5
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	200a      	movs	r0, #10
 80007d6:	f7ff fead 	bl	8000534 <nrf24_WriteRegMulti>

	//nrf24_WriteReg(RX_ADDR_P1, 0xEF);  // Write the Pipe2 LSB address

	nrf24_WriteReg (RX_PW_P0, 32);   // 32 bit payload size for pipe 2
 80007da:	2120      	movs	r1, #32
 80007dc:	2011      	movs	r0, #17
 80007de:	f7ff fe87 	bl	80004f0 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P1, 32);   // 32 bit payload size for pipe 2
 80007e2:	2120      	movs	r1, #32
 80007e4:	2012      	movs	r0, #18
 80007e6:	f7ff fe83 	bl	80004f0 <nrf24_WriteReg>
	//nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2


	// power up the device in Rx mode
	//uint8_t config = nrf24_ReadReg(CONFIG);
	uint8_t config = (0x03);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 80007ea:	2303      	movs	r3, #3
 80007ec:	73bb      	strb	r3, [r7, #14]

	//config = config | (1<<1) | (1<<0);
	nrf24_WriteReg (CONFIG, config);
 80007ee:	7bbb      	ldrb	r3, [r7, #14]
 80007f0:	4619      	mov	r1, r3
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff fe7c 	bl	80004f0 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80007f8:	f7ff fe62 	bl	80004c0 <CE_Enable>
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 800080c:	2007      	movs	r0, #7
 800080e:	f7ff feb7 	bl	8000580 <nrf24_ReadReg>
 8000812:	4603      	mov	r3, r0
 8000814:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00b      	beq.n	8000838 <isDataAvailable+0x34>
 8000820:	7bfa      	ldrb	r2, [r7, #15]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4013      	ands	r3, r2
 8000828:	2b00      	cmp	r3, #0
 800082a:	d005      	beq.n	8000838 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	2007      	movs	r0, #7
 8000830:	f7ff fe5e 	bl	80004f0 <nrf24_WriteReg>

		return 1;
 8000834:	2301      	movs	r3, #1
 8000836:	e000      	b.n	800083a <isDataAvailable+0x36>
	}

	return 0;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000842:	b590      	push	{r4, r7, lr}
 8000844:	b085      	sub	sp, #20
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	e00c      	b.n	800086a <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	b2d9      	uxtb	r1, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	18d4      	adds	r4, r2, r3
 800085a:	4608      	mov	r0, r1
 800085c:	f7ff fe90 	bl	8000580 <nrf24_ReadReg>
 8000860:	4603      	mov	r3, r0
 8000862:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	3301      	adds	r3, #1
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2b09      	cmp	r3, #9
 800086e:	ddef      	ble.n	8000850 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	330a      	adds	r3, #10
 8000874:	2205      	movs	r2, #5
 8000876:	4619      	mov	r1, r3
 8000878:	200a      	movs	r0, #10
 800087a:	f7ff fea1 	bl	80005c0 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	330f      	adds	r3, #15
 8000882:	2205      	movs	r2, #5
 8000884:	4619      	mov	r1, r3
 8000886:	200b      	movs	r0, #11
 8000888:	f7ff fe9a 	bl	80005c0 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f103 0414 	add.w	r4, r3, #20
 8000892:	200c      	movs	r0, #12
 8000894:	f7ff fe74 	bl	8000580 <nrf24_ReadReg>
 8000898:	4603      	mov	r3, r0
 800089a:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f103 0415 	add.w	r4, r3, #21
 80008a2:	200d      	movs	r0, #13
 80008a4:	f7ff fe6c 	bl	8000580 <nrf24_ReadReg>
 80008a8:	4603      	mov	r3, r0
 80008aa:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f103 0416 	add.w	r4, r3, #22
 80008b2:	200e      	movs	r0, #14
 80008b4:	f7ff fe64 	bl	8000580 <nrf24_ReadReg>
 80008b8:	4603      	mov	r3, r0
 80008ba:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f103 0417 	add.w	r4, r3, #23
 80008c2:	200f      	movs	r0, #15
 80008c4:	f7ff fe5c 	bl	8000580 <nrf24_ReadReg>
 80008c8:	4603      	mov	r3, r0
 80008ca:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(TX_ADDR, (data+24), 5);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3318      	adds	r3, #24
 80008d0:	2205      	movs	r2, #5
 80008d2:	4619      	mov	r1, r3
 80008d4:	2010      	movs	r0, #16
 80008d6:	f7ff fe73 	bl	80005c0 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 80008da:	231d      	movs	r3, #29
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	e00e      	b.n	80008fe <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	3b0c      	subs	r3, #12
 80008e6:	b2d9      	uxtb	r1, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	18d4      	adds	r4, r2, r3
 80008ee:	4608      	mov	r0, r1
 80008f0:	f7ff fe46 	bl	8000580 <nrf24_ReadReg>
 80008f4:	4603      	mov	r3, r0
 80008f6:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b25      	cmp	r3, #37	; 0x25
 8000902:	dded      	ble.n	80008e0 <NRF24_ReadAll+0x9e>
	}

}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bd90      	pop	{r4, r7, pc}
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_MspInit+0x44>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <HAL_MspInit+0x44>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6613      	str	r3, [r2, #96]	; 0x60
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_MspInit+0x44>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_MspInit+0x44>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6593      	str	r3, [r2, #88]	; 0x58
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_SPI_MspInit+0x7c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d127      	bne.n	80009ca <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000984:	6593      	str	r3, [r2, #88]	; 0x58
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009aa:	2338      	movs	r3, #56	; 0x38
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ba:	2306      	movs	r3, #6
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <HAL_SPI_MspInit+0x84>)
 80009c6:	f000 fa7f 	bl	8000ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40003c00 	.word	0x40003c00
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler+0x4>

080009f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler+0x4>

080009fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f8f6 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <USB_IRQHandler+0x10>)
 8000a3a:	f000 fcfb 	bl	8001434 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000f70 	.word	0x20000f70

08000a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <_sbrk+0x5c>)
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <_sbrk+0x60>)
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <_sbrk+0x64>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <_sbrk+0x68>)
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d207      	bcs.n	8000a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a78:	f008 f9ca 	bl	8008e10 <__errno>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a86:	e009      	b.n	8000a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <_sbrk+0x64>)
 8000a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20010000 	.word	0x20010000
 8000aa8:	00000800 	.word	0x00000800
 8000aac:	20000218 	.word	0x20000218
 8000ab0:	20001278 	.word	0x20001278

08000ab4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <SystemInit+0x64>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <SystemInit+0x64>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <SystemInit+0x68>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <SystemInit+0x68>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <SystemInit+0x68>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <SystemInit+0x68>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <SystemInit+0x68>)
 8000ae0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ae4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ae8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <SystemInit+0x68>)
 8000aec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000af0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <SystemInit+0x68>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <SystemInit+0x68>)
 8000af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000afc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <SystemInit+0x68>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SystemInit+0x64>)
 8000b06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00
 8000b1c:	40021000 	.word	0x40021000

08000b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b24:	f7ff ffc6 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b2a:	e003      	b.n	8000b34 <LoopCopyDataInit>

08000b2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b32:	3104      	adds	r1, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b34:	480a      	ldr	r0, [pc, #40]	; (8000b60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b3c:	d3f6      	bcc.n	8000b2c <CopyDataInit>
	ldr	r2, =_sbss
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b40:	e002      	b.n	8000b48 <LoopFillZerobss>

08000b42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b44:	f842 3b04 	str.w	r3, [r2], #4

08000b48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <LoopForever+0x16>)
	cmp	r2, r3
 8000b4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b4c:	d3f9      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f008 f965 	bl	8008e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b52:	f7ff fb3b 	bl	80001cc <main>

08000b56 <LoopForever>:

LoopForever:
    b LoopForever
 8000b56:	e7fe      	b.n	8000b56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b58:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000b5c:	080090dc 	.word	0x080090dc
	ldr	r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b64:	200001fc 	.word	0x200001fc
	ldr	r2, =_sbss
 8000b68:	200001fc 	.word	0x200001fc
	ldr	r3, = _ebss
 8000b6c:	20001274 	.word	0x20001274

08000b70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC1_IRQHandler>

08000b72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f961 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 f80e 	bl	8000ba4 <HAL_InitTick>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	e001      	b.n	8000b98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b94:	f7ff febc 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b98:	79fb      	ldrb	r3, [r7, #7]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_InitTick+0x6c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d023      	beq.n	8000c00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_InitTick+0x70>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_InitTick+0x6c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f96d 	bl	8000eae <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10f      	bne.n	8000bfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d809      	bhi.n	8000bf4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be8:	f000 f937 	bl	8000e5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bec:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_InitTick+0x74>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e007      	b.n	8000c04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	e004      	b.n	8000c04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	e001      	b.n	8000c04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000010 	.word	0x20000010
 8000c14:	20000008 	.word	0x20000008
 8000c18:	2000000c 	.word	0x2000000c

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000010 	.word	0x20000010
 8000c40:	200002cc 	.word	0x200002cc

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	200002cc 	.word	0x200002cc

08000c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c64:	f7ff ffee 	bl	8000c44 <HAL_GetTick>
 8000c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c74:	d005      	beq.n	8000c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_Delay+0x44>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c82:	bf00      	nop
 8000c84:	f7ff ffde 	bl	8000c44 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d8f7      	bhi.n	8000c84 <HAL_Delay+0x28>
  {
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000010 	.word	0x20000010

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4907      	ldr	r1, [pc, #28]	; (8000d40 <__NVIC_EnableIRQ+0x38>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	; (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	; (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
         );
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	; 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e24:	f7ff ff8e 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff29 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6c:	f7ff ff3e 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff ff8e 	bl	8000d98 <NVIC_EncodePriority>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff5d 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff31 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffa2 	bl	8000e00 <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed6:	e148      	b.n	800116a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 813a 	beq.w	8001164 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d00b      	beq.n	8000f10 <HAL_GPIO_Init+0x48>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d007      	beq.n	8000f10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f04:	2b11      	cmp	r3, #17
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b12      	cmp	r3, #18
 8000f0e:	d130      	bne.n	8000f72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	f003 0201 	and.w	r2, r3, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0xea>
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b12      	cmp	r3, #18
 8000fb0:	d123      	bne.n	8000ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	220f      	movs	r2, #15
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	6939      	ldr	r1, [r7, #16]
 8000ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0203 	and.w	r2, r3, #3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8094 	beq.w	8001164 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103c:	4b52      	ldr	r3, [pc, #328]	; (8001188 <HAL_GPIO_Init+0x2c0>)
 800103e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001040:	4a51      	ldr	r2, [pc, #324]	; (8001188 <HAL_GPIO_Init+0x2c0>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6613      	str	r3, [r2, #96]	; 0x60
 8001048:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <HAL_GPIO_Init+0x2c0>)
 800104a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001054:	4a4d      	ldr	r2, [pc, #308]	; (800118c <HAL_GPIO_Init+0x2c4>)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800107e:	d00d      	beq.n	800109c <HAL_GPIO_Init+0x1d4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a43      	ldr	r2, [pc, #268]	; (8001190 <HAL_GPIO_Init+0x2c8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d007      	beq.n	8001098 <HAL_GPIO_Init+0x1d0>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a42      	ldr	r2, [pc, #264]	; (8001194 <HAL_GPIO_Init+0x2cc>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d101      	bne.n	8001094 <HAL_GPIO_Init+0x1cc>
 8001090:	2302      	movs	r3, #2
 8001092:	e004      	b.n	800109e <HAL_GPIO_Init+0x1d6>
 8001094:	2307      	movs	r3, #7
 8001096:	e002      	b.n	800109e <HAL_GPIO_Init+0x1d6>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <HAL_GPIO_Init+0x1d6>
 800109c:	2300      	movs	r3, #0
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	f002 0203 	and.w	r2, r2, #3
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	4093      	lsls	r3, r2
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ae:	4937      	ldr	r1, [pc, #220]	; (800118c <HAL_GPIO_Init+0x2c4>)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_GPIO_Init+0x2d0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010e0:	4a2d      	ldr	r2, [pc, #180]	; (8001198 <HAL_GPIO_Init+0x2d0>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <HAL_GPIO_Init+0x2d0>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800110a:	4a23      	ldr	r2, [pc, #140]	; (8001198 <HAL_GPIO_Init+0x2d0>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_GPIO_Init+0x2d0>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001134:	4a18      	ldr	r2, [pc, #96]	; (8001198 <HAL_GPIO_Init+0x2d0>)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_GPIO_Init+0x2d0>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <HAL_GPIO_Init+0x2d0>)
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	3301      	adds	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	fa22 f303 	lsr.w	r3, r2, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	f47f aeaf 	bne.w	8000ed8 <HAL_GPIO_Init+0x10>
  }
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	40021000 	.word	0x40021000
 800118c:	40010000 	.word	0x40010000
 8001190:	48000400 	.word	0x48000400
 8001194:	48000800 	.word	0x48000800
 8001198:	40010400 	.word	0x40010400

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	b08b      	sub	sp, #44	; 0x2c
 80011d0:	af06      	add	r7, sp, #24
 80011d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e104      	b.n	80013e8 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d106      	bne.n	80011f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f007 faa4 	bl	8008740 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2203      	movs	r2, #3
 80011fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fbfd 	bl	8004a04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	687e      	ldr	r6, [r7, #4]
 8001212:	466d      	mov	r5, sp
 8001214:	f106 0410 	add.w	r4, r6, #16
 8001218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	602b      	str	r3, [r5, #0]
 8001220:	1d33      	adds	r3, r6, #4
 8001222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f003 fbc5 	bl	80049b4 <USB_CoreInit>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2202      	movs	r2, #2
 8001234:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e0d5      	b.n	80013e8 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f003 fbf9 	bl	8004a3a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e04c      	b.n	80012e8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	3301      	adds	r3, #1
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	440b      	add	r3, r1
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	b298      	uxth	r0, r3
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	440b      	add	r3, r1
 800128a:	3336      	adds	r3, #54	; 0x36
 800128c:	4602      	mov	r2, r0
 800128e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	440b      	add	r3, r1
 80012a0:	3303      	adds	r3, #3
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	440b      	add	r3, r1
 80012b4:	3338      	adds	r3, #56	; 0x38
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	440b      	add	r3, r1
 80012c8:	333c      	adds	r3, #60	; 0x3c
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	3340      	adds	r3, #64	; 0x40
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	3301      	adds	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3ad      	bcc.n	800124e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	e044      	b.n	8001382 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	f203 1369 	addw	r3, r3, #361	; 0x169
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800130e:	7bfa      	ldrb	r2, [r7, #15]
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	440b      	add	r3, r1
 8001332:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	440b      	add	r3, r1
 8001374:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	3301      	adds	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3b5      	bcc.n	80012f8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	687e      	ldr	r6, [r7, #4]
 8001394:	466d      	mov	r5, sp
 8001396:	f106 0410 	add.w	r4, r6, #16
 800139a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139e:	6823      	ldr	r3, [r4, #0]
 80013a0:	602b      	str	r3, [r5, #0]
 80013a2:	1d33      	adds	r3, r6, #4
 80013a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a6:	6838      	ldr	r0, [r7, #0]
 80013a8:	f003 fb54 	bl	8004a54 <USB_DevInit>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d005      	beq.n	80013be <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2202      	movs	r2, #2
 80013b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e014      	b.n	80013e8 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d102      	bne.n	80013dc <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f001 fa71 	bl	80028be <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f005 fb0d 	bl	8006a00 <USB_DevDisconnect>

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_PCD_Start+0x16>
 8001402:	2302      	movs	r3, #2
 8001404:	e012      	b.n	800142c <HAL_PCD_Start+0x3c>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fadf 	bl	80049d6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f005 fad8 	bl	80069d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f005 faf2 	bl	8006a2a <USB_ReadInterrupts>
 8001446:	4603      	mov	r3, r0
 8001448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800144c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001450:	d102      	bne.n	8001458 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 fb5b 	bl	8001b0e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f005 fae4 	bl	8006a2a <USB_ReadInterrupts>
 8001462:	4603      	mov	r3, r0
 8001464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146c:	d112      	bne.n	8001494 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001476:	b29a      	uxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001480:	b292      	uxth	r2, r2
 8001482:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f007 f9d5 	bl	8008836 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800148c:	2100      	movs	r1, #0
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f91e 	bl	80016d0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f005 fac6 	bl	8006a2a <USB_ReadInterrupts>
 800149e:	4603      	mov	r3, r0
 80014a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014a8:	d10b      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014bc:	b292      	uxth	r2, r2
 80014be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 faaf 	bl	8006a2a <USB_ReadInterrupts>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014d6:	d10b      	bne.n	80014f0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014ea:	b292      	uxth	r2, r2
 80014ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f005 fa98 	bl	8006a2a <USB_ReadInterrupts>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001504:	d133      	bne.n	800156e <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800150e:	b29a      	uxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0204 	bic.w	r2, r2, #4
 8001518:	b292      	uxth	r2, r2
 800151a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001526:	b29a      	uxth	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0208 	bic.w	r2, r2, #8
 8001530:	b292      	uxth	r2, r2
 8001532:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800153c:	2b01      	cmp	r3, #1
 800153e:	d107      	bne.n	8001550 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001548:	2100      	movs	r1, #0
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f007 fc24 	bl	8008d98 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f007 f9a9 	bl	80088a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800155e:	b29a      	uxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001568:	b292      	uxth	r2, r2
 800156a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f005 fa59 	bl	8006a2a <USB_ReadInterrupts>
 8001578:	4603      	mov	r3, r0
 800157a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800157e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001582:	d126      	bne.n	80015d2 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800158c:	b29a      	uxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0208 	orr.w	r2, r2, #8
 8001596:	b292      	uxth	r2, r2
 8001598:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ae:	b292      	uxth	r2, r2
 80015b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015bc:	b29a      	uxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0204 	orr.w	r2, r2, #4
 80015c6:	b292      	uxth	r2, r2
 80015c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f007 f951 	bl	8008874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f005 fa27 	bl	8006a2a <USB_ReadInterrupts>
 80015dc:	4603      	mov	r3, r0
 80015de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e2:	2b80      	cmp	r3, #128	; 0x80
 80015e4:	d13f      	bne.n	8001666 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f8:	b292      	uxth	r2, r2
 80015fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d12b      	bne.n	8001660 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0204 	orr.w	r2, r2, #4
 800161a:	b292      	uxth	r2, r2
 800161c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001628:	b29a      	uxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0208 	orr.w	r2, r2, #8
 8001632:	b292      	uxth	r2, r2
 8001634:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001648:	b29b      	uxth	r3, r3
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001656:	2101      	movs	r1, #1
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f007 fb9d 	bl	8008d98 <HAL_PCDEx_LPM_Callback>
 800165e:	e002      	b.n	8001666 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f007 f907 	bl	8008874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f005 f9dd 	bl	8006a2a <USB_ReadInterrupts>
 8001670:	4603      	mov	r3, r0
 8001672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800167a:	d10e      	bne.n	800169a <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001684:	b29a      	uxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800168e:	b292      	uxth	r2, r2
 8001690:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f007 f8c0 	bl	800881a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f005 f9c3 	bl	8006a2a <USB_ReadInterrupts>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ae:	d10b      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016c2:	b292      	uxth	r2, r2
 80016c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_PCD_SetAddress+0x1a>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e013      	b.n	8001712 <HAL_PCD_SetAddress+0x42>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f005 f951 	bl	80069aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	4608      	mov	r0, r1
 8001724:	4611      	mov	r1, r2
 8001726:	461a      	mov	r2, r3
 8001728:	4603      	mov	r3, r0
 800172a:	70fb      	strb	r3, [r7, #3]
 800172c:	460b      	mov	r3, r1
 800172e:	803b      	strh	r3, [r7, #0]
 8001730:	4613      	mov	r3, r2
 8001732:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800173c:	2b00      	cmp	r3, #0
 800173e:	da0e      	bge.n	800175e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	705a      	strb	r2, [r3, #1]
 800175c:	e00e      	b.n	800177c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	f003 0207 	and.w	r2, r3, #7
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	b2da      	uxtb	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001788:	883a      	ldrh	r2, [r7, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	78ba      	ldrb	r2, [r7, #2]
 8001792:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d004      	beq.n	80017a6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017a6:	78bb      	ldrb	r3, [r7, #2]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d102      	bne.n	80017b2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_PCD_EP_Open+0xa6>
 80017bc:	2302      	movs	r3, #2
 80017be:	e00e      	b.n	80017de <HAL_PCD_EP_Open+0xc4>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68f9      	ldr	r1, [r7, #12]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 f962 	bl	8004a98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80017dc:	7afb      	ldrb	r3, [r7, #11]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	460b      	mov	r3, r1
 80017f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	da0e      	bge.n	8001818 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	705a      	strb	r2, [r3, #1]
 8001816:	e00e      	b.n	8001836 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	f003 0207 	and.w	r2, r3, #7
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	b2da      	uxtb	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_PCD_EP_Close+0x6a>
 800184c:	2302      	movs	r3, #2
 800184e:	e00e      	b.n	800186e <HAL_PCD_EP_Close+0x88>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68f9      	ldr	r1, [r7, #12]
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fc88 	bl	8005174 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	460b      	mov	r3, r1
 8001884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001886:	7afb      	ldrb	r3, [r7, #11]
 8001888:	f003 0207 	and.w	r2, r3, #7
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2200      	movs	r2, #0
 80018ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2200      	movs	r2, #0
 80018b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018b6:	7afb      	ldrb	r3, [r7, #11]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018c2:	7afb      	ldrb	r3, [r7, #11]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d106      	bne.n	80018da <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6979      	ldr	r1, [r7, #20]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 fe3b 	bl	800554e <USB_EPStartXfer>
 80018d8:	e005      	b.n	80018e6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6979      	ldr	r1, [r7, #20]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 fe34 	bl	800554e <USB_EPStartXfer>
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	f003 0207 	and.w	r2, r3, #7
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	460b      	mov	r3, r1
 800192e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001930:	7afb      	ldrb	r3, [r7, #11]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2201      	movs	r2, #1
 800196a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800196c:	7afb      	ldrb	r3, [r7, #11]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	b2da      	uxtb	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001978:	7afb      	ldrb	r3, [r7, #11]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6979      	ldr	r1, [r7, #20]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fde0 	bl	800554e <USB_EPStartXfer>
 800198e:	e005      	b.n	800199c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6979      	ldr	r1, [r7, #20]
 8001996:	4618      	mov	r0, r3
 8001998:	f003 fdd9 	bl	800554e <USB_EPStartXfer>
  }

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	f003 0207 	and.w	r2, r3, #7
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d901      	bls.n	80019c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e04c      	b.n	8001a5e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da0e      	bge.n	80019ea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2201      	movs	r2, #1
 80019e6:	705a      	strb	r2, [r3, #1]
 80019e8:	e00c      	b.n	8001a04 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2201      	movs	r2, #1
 8001a08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_PCD_EP_SetStall+0x7e>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e01c      	b.n	8001a5e <HAL_PCD_EP_SetStall+0xb8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 feba 	bl	80067ac <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d108      	bne.n	8001a54 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4610      	mov	r0, r2
 8001a50:	f004 fffb 	bl	8006a4a <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	f003 020f 	and.w	r2, r3, #15
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d901      	bls.n	8001a84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e040      	b.n	8001b06 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da0e      	bge.n	8001aaa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	705a      	strb	r2, [r3, #1]
 8001aa8:	e00e      	b.n	8001ac8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	f003 0207 	and.w	r2, r3, #7
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_PCD_EP_ClrStall+0x82>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e00e      	b.n	8001b06 <HAL_PCD_EP_ClrStall+0xa0>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f004 fea9 	bl	800684e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b08e      	sub	sp, #56	; 0x38
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b16:	e2d1      	b.n	80020bc <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b20:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f040 8152 	bne.w	8001ddc <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d150      	bne.n	8001be4 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b52:	81fb      	strh	r3, [r7, #14]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	89fb      	ldrh	r3, [r7, #14]
 8001b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3328      	adds	r3, #40	; 0x28
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	4413      	add	r3, r2
 8001b86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	441a      	add	r2, r3
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f006 fe1e 	bl	80087e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8282 	beq.w	80020bc <PCD_EP_ISR_Handler+0x5ae>
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 827d 	bne.w	80020bc <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	b292      	uxth	r2, r2
 8001bd6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001be2:	e26b      	b.n	80020bc <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bf4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d032      	beq.n	8001c64 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	f004 ff54 	bl	8006ae6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	823b      	strh	r3, [r7, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	8a3a      	ldrh	r2, [r7, #16]
 8001c54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c58:	b292      	uxth	r2, r2
 8001c5a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f006 fd95 	bl	800878c <HAL_PCD_SetupStageCallback>
 8001c62:	e22b      	b.n	80020bc <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c64:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f280 8227 	bge.w	80020bc <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	83bb      	strh	r3, [r7, #28]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	8bba      	ldrh	r2, [r7, #28]
 8001c84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d019      	beq.n	8001cf0 <PCD_EP_ISR_Handler+0x1e2>
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d015      	beq.n	8001cf0 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	6959      	ldr	r1, [r3, #20]
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f004 ff06 	bl	8006ae6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	441a      	add	r2, r3
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f006 fd60 	bl	80087b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4413      	add	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d112      	bne.n	8001d3e <PCD_EP_ISR_Handler+0x230>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	801a      	strh	r2, [r3, #0]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	801a      	strh	r2, [r3, #0]
 8001d3c:	e02f      	b.n	8001d9e <PCD_EP_ISR_Handler+0x290>
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	2b3e      	cmp	r3, #62	; 0x3e
 8001d44:	d813      	bhi.n	8001d6e <PCD_EP_ISR_Handler+0x260>
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <PCD_EP_ISR_Handler+0x252>
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	029b      	lsls	r3, r3, #10
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	801a      	strh	r2, [r3, #0]
 8001d6c:	e017      	b.n	8001d9e <PCD_EP_ISR_Handler+0x290>
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	633b      	str	r3, [r7, #48]	; 0x30
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <PCD_EP_ISR_Handler+0x27a>
 8001d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d84:	3b01      	subs	r3, #1
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	029b      	lsls	r3, r3, #10
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dae:	827b      	strh	r3, [r7, #18]
 8001db0:	8a7b      	ldrh	r3, [r7, #18]
 8001db2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001db6:	827b      	strh	r3, [r7, #18]
 8001db8:	8a7b      	ldrh	r3, [r7, #18]
 8001dba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001dbe:	827b      	strh	r3, [r7, #18]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	8a7b      	ldrh	r3, [r7, #18]
 8001dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	8013      	strh	r3, [r2, #0]
 8001dda:	e16f      	b.n	80020bc <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f280 80e4 	bge.w	8001fc0 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e0e:	4013      	ands	r3, r2
 8001e10:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e26:	b292      	uxth	r2, r2
 8001e28:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e2a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	7b1b      	ldrb	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d120      	bne.n	8001e8a <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	4413      	add	r3, r2
 8001e62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e6c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001e6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8083 	beq.w	8001f7c <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	6959      	ldr	r1, [r3, #20]
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	88da      	ldrh	r2, [r3, #6]
 8001e82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e84:	f004 fe2f 	bl	8006ae6 <USB_ReadPMA>
 8001e88:	e078      	b.n	8001f7c <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	78db      	ldrb	r3, [r3, #3]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d108      	bne.n	8001ea4 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e94:	461a      	mov	r2, r3
 8001e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f91d 	bl	80020d8 <HAL_PCD_EP_DB_Receive>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ea2:	e06b      	b.n	8001f7c <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebe:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	441a      	add	r2, r3
 8001ece:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001edc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01f      	beq.n	8001f3e <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f22:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d028      	beq.n	8001f7c <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	6959      	ldr	r1, [r3, #20]
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	891a      	ldrh	r2, [r3, #8]
 8001f36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f38:	f004 fdd5 	bl	8006ae6 <USB_ReadPMA>
 8001f3c:	e01e      	b.n	8001f7c <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f62:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d008      	beq.n	8001f7c <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	6959      	ldr	r1, [r3, #20]
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	895a      	ldrh	r2, [r3, #10]
 8001f76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f78:	f004 fdb5 	bl	8006ae6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	69da      	ldr	r2, [r3, #28]
 8001f80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f82:	441a      	add	r2, r3
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f8e:	441a      	add	r2, r3
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d004      	beq.n	8001fa6 <PCD_EP_ISR_Handler+0x498>
 8001f9c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d206      	bcs.n	8001fb4 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	4619      	mov	r1, r3
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f006 fbff 	bl	80087b0 <HAL_PCD_DataOutStageCallback>
 8001fb2:	e005      	b.n	8001fc0 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fac7 	bl	800554e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001fc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d078      	beq.n	80020bc <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8001fca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff8:	843b      	strh	r3, [r7, #32]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	441a      	add	r2, r3
 8002008:	8c3b      	ldrh	r3, [r7, #32]
 800200a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800200e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002012:	b29b      	uxth	r3, r3
 8002014:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	78db      	ldrb	r3, [r3, #3]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d108      	bne.n	8002030 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002022:	2b02      	cmp	r3, #2
 8002024:	d144      	bne.n	80020b0 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002026:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d13f      	bne.n	80020b0 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	4413      	add	r3, r2
 800204a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002054:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	8bfb      	ldrh	r3, [r7, #30]
 800205c:	429a      	cmp	r2, r3
 800205e:	d906      	bls.n	800206e <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	699a      	ldr	r2, [r3, #24]
 8002064:	8bfb      	ldrh	r3, [r7, #30]
 8002066:	1ad2      	subs	r2, r2, r3
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	619a      	str	r2, [r3, #24]
 800206c:	e002      	b.n	8002074 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d106      	bne.n	800208a <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4619      	mov	r1, r3
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f006 fbaf 	bl	80087e6 <HAL_PCD_DataInStageCallback>
 8002088:	e018      	b.n	80020bc <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	8bfb      	ldrh	r3, [r7, #30]
 8002090:	441a      	add	r2, r3
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	69da      	ldr	r2, [r3, #28]
 800209a:	8bfb      	ldrh	r3, [r7, #30]
 800209c:	441a      	add	r2, r3
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 fa50 	bl	800554e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80020ae:	e005      	b.n	80020bc <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020b2:	461a      	mov	r2, r3
 80020b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f917 	bl	80022ea <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f6ff ad25 	blt.w	8001b18 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3738      	adds	r7, #56	; 0x38
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	4613      	mov	r3, r2
 80020e4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d07c      	beq.n	80021ea <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	4413      	add	r3, r2
 800210a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002114:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	8b7b      	ldrh	r3, [r7, #26]
 800211c:	429a      	cmp	r2, r3
 800211e:	d306      	bcc.n	800212e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	699a      	ldr	r2, [r3, #24]
 8002124:	8b7b      	ldrh	r3, [r7, #26]
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	619a      	str	r2, [r3, #24]
 800212c:	e002      	b.n	8002134 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d123      	bne.n	8002184 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002156:	833b      	strh	r3, [r7, #24]
 8002158:	8b3b      	ldrh	r3, [r7, #24]
 800215a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800215e:	833b      	strh	r3, [r7, #24]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	441a      	add	r2, r3
 800216e:	8b3b      	ldrh	r3, [r7, #24]
 8002170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002180:	b29b      	uxth	r3, r3
 8002182:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d01f      	beq.n	80021ce <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a8:	82fb      	strh	r3, [r7, #22]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	441a      	add	r2, r3
 80021b8:	8afb      	ldrh	r3, [r7, #22]
 80021ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021ce:	8b7b      	ldrh	r3, [r7, #26]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8085 	beq.w	80022e0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	6959      	ldr	r1, [r3, #20]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	891a      	ldrh	r2, [r3, #8]
 80021e2:	8b7b      	ldrh	r3, [r7, #26]
 80021e4:	f004 fc7f 	bl	8006ae6 <USB_ReadPMA>
 80021e8:	e07a      	b.n	80022e0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	4413      	add	r3, r2
 8002204:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	8b7b      	ldrh	r3, [r7, #26]
 8002216:	429a      	cmp	r2, r3
 8002218:	d306      	bcc.n	8002228 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	8b7b      	ldrh	r3, [r7, #26]
 8002220:	1ad2      	subs	r2, r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	619a      	str	r2, [r3, #24]
 8002226:	e002      	b.n	800222e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d123      	bne.n	800227e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800224c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002250:	83fb      	strh	r3, [r7, #30]
 8002252:	8bfb      	ldrh	r3, [r7, #30]
 8002254:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002258:	83fb      	strh	r3, [r7, #30]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	441a      	add	r2, r3
 8002268:	8bfb      	ldrh	r3, [r7, #30]
 800226a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800226e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227a:	b29b      	uxth	r3, r3
 800227c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002284:	2b00      	cmp	r3, #0
 8002286:	d11f      	bne.n	80022c8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a2:	83bb      	strh	r3, [r7, #28]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	441a      	add	r2, r3
 80022b2:	8bbb      	ldrh	r3, [r7, #28]
 80022b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022c8:	8b7b      	ldrh	r3, [r7, #26]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	6959      	ldr	r1, [r3, #20]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	895a      	ldrh	r2, [r3, #10]
 80022da:	8b7b      	ldrh	r3, [r7, #26]
 80022dc:	f004 fc03 	bl	8006ae6 <USB_ReadPMA>
    }
  }

  return count;
 80022e0:	8b7b      	ldrh	r3, [r7, #26]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3720      	adds	r7, #32
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b094      	sub	sp, #80	; 0x50
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	4613      	mov	r3, r2
 80022f6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8136 	beq.w	8002570 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	4413      	add	r3, r2
 800231e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002328:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002334:	429a      	cmp	r2, r3
 8002336:	d907      	bls.n	8002348 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	699a      	ldr	r2, [r3, #24]
 800233c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002340:	1ad2      	subs	r2, r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	619a      	str	r2, [r3, #24]
 8002346:	e002      	b.n	800234e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d12c      	bne.n	80023b0 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f006 fa42 	bl	80087e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8238 	beq.w	80027de <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002388:	82fb      	strh	r3, [r7, #22]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	441a      	add	r2, r3
 8002398:	8afb      	ldrh	r3, [r7, #22]
 800239a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800239e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	8013      	strh	r3, [r2, #0]
 80023ae:	e216      	b.n	80027de <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01f      	beq.n	80023fa <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	441a      	add	r2, r3
 80023e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002400:	2b01      	cmp	r3, #1
 8002402:	f040 81ec 	bne.w	80027de <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800240e:	441a      	add	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800241c:	441a      	add	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	6a1a      	ldr	r2, [r3, #32]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	429a      	cmp	r2, r3
 800242c:	d309      	bcc.n	8002442 <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	6a1a      	ldr	r2, [r3, #32]
 8002438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243a:	1ad2      	subs	r2, r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	621a      	str	r2, [r3, #32]
 8002440:	e015      	b.n	800246e <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d107      	bne.n	800245a <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 800244a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800244e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002458:	e009      	b.n	800246e <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2200      	movs	r2, #0
 800246c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d155      	bne.n	8002522 <HAL_PCD_EP_DB_Transmit+0x238>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002484:	b29b      	uxth	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	00da      	lsls	r2, r3, #3
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d112      	bne.n	80024ca <HAL_PCD_EP_DB_Transmit+0x1e0>
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	801a      	strh	r2, [r3, #0]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	801a      	strh	r2, [r3, #0]
 80024c8:	e047      	b.n	800255a <HAL_PCD_EP_DB_Transmit+0x270>
 80024ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024cc:	2b3e      	cmp	r3, #62	; 0x3e
 80024ce:	d811      	bhi.n	80024f4 <HAL_PCD_EP_DB_Transmit+0x20a>
 80024d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x1fc>
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	3301      	adds	r3, #1
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	029b      	lsls	r3, r3, #10
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	801a      	strh	r2, [r3, #0]
 80024f2:	e032      	b.n	800255a <HAL_PCD_EP_DB_Transmit+0x270>
 80024f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <HAL_PCD_EP_DB_Transmit+0x220>
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	3b01      	subs	r3, #1
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	b29b      	uxth	r3, r3
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	b29b      	uxth	r3, r3
 8002512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800251a:	b29a      	uxth	r2, r3
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	801a      	strh	r2, [r3, #0]
 8002520:	e01b      	b.n	800255a <HAL_PCD_EP_DB_Transmit+0x270>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	785b      	ldrb	r3, [r3, #1]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d117      	bne.n	800255a <HAL_PCD_EP_DB_Transmit+0x270>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002538:	b29b      	uxth	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	4413      	add	r3, r2
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	00da      	lsls	r2, r3, #3
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	4413      	add	r3, r2
 800254c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002550:	623b      	str	r3, [r7, #32]
 8002552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002554:	b29a      	uxth	r2, r3
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6959      	ldr	r1, [r3, #20]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	891a      	ldrh	r2, [r3, #8]
 8002566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002568:	b29b      	uxth	r3, r3
 800256a:	f004 fa7a 	bl	8006a62 <USB_WritePMA>
 800256e:	e136      	b.n	80027de <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002578:	b29b      	uxth	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	4413      	add	r3, r2
 800258a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002594:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d307      	bcc.n	80025b4 <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	699a      	ldr	r2, [r3, #24]
 80025a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025ac:	1ad2      	subs	r2, r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	619a      	str	r2, [r3, #24]
 80025b2:	e002      	b.n	80025ba <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d12e      	bne.n	8002620 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	4619      	mov	r1, r3
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f006 f90c 	bl	80087e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 8102 	bne.w	80027de <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	441a      	add	r2, r3
 8002606:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800260a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800260e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261a:	b29b      	uxth	r3, r3
 800261c:	8013      	strh	r3, [r2, #0]
 800261e:	e0de      	b.n	80027de <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d11f      	bne.n	800266a <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002644:	867b      	strh	r3, [r7, #50]	; 0x32
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	441a      	add	r2, r3
 8002654:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800265a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800265e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002666:	b29b      	uxth	r3, r3
 8002668:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002670:	2b01      	cmp	r3, #1
 8002672:	f040 80b4 	bne.w	80027de <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800267e:	441a      	add	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800268c:	441a      	add	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	6a1a      	ldr	r2, [r3, #32]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	429a      	cmp	r2, r3
 800269c:	d309      	bcc.n	80026b2 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	6a1a      	ldr	r2, [r3, #32]
 80026a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026aa:	1ad2      	subs	r2, r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	621a      	str	r2, [r3, #32]
 80026b0:	e015      	b.n	80026de <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d107      	bne.n	80026ca <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 80026ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026be:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026c8:	e009      	b.n	80026de <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2200      	movs	r2, #0
 80026d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	643b      	str	r3, [r7, #64]	; 0x40
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	785b      	ldrb	r3, [r3, #1]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d155      	bne.n	8002798 <HAL_PCD_EP_DB_Transmit+0x4ae>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	4413      	add	r3, r2
 8002702:	63bb      	str	r3, [r7, #56]	; 0x38
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	00da      	lsls	r2, r3, #3
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	4413      	add	r3, r2
 800270e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
 8002714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002716:	2b00      	cmp	r3, #0
 8002718:	d112      	bne.n	8002740 <HAL_PCD_EP_DB_Transmit+0x456>
 800271a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002724:	b29a      	uxth	r2, r3
 8002726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002728:	801a      	strh	r2, [r3, #0]
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002738:	b29a      	uxth	r2, r3
 800273a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	e044      	b.n	80027ca <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002742:	2b3e      	cmp	r3, #62	; 0x3e
 8002744:	d811      	bhi.n	800276a <HAL_PCD_EP_DB_Transmit+0x480>
 8002746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002748:	085b      	lsrs	r3, r3, #1
 800274a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800274c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_PCD_EP_DB_Transmit+0x472>
 8002756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002758:	3301      	adds	r3, #1
 800275a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800275c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275e:	b29b      	uxth	r3, r3
 8002760:	029b      	lsls	r3, r3, #10
 8002762:	b29a      	uxth	r2, r3
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	801a      	strh	r2, [r3, #0]
 8002768:	e02f      	b.n	80027ca <HAL_PCD_EP_DB_Transmit+0x4e0>
 800276a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <HAL_PCD_EP_DB_Transmit+0x496>
 800277a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800277c:	3b01      	subs	r3, #1
 800277e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002782:	b29b      	uxth	r3, r3
 8002784:	029b      	lsls	r3, r3, #10
 8002786:	b29b      	uxth	r3, r3
 8002788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002790:	b29a      	uxth	r2, r3
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002794:	801a      	strh	r2, [r3, #0]
 8002796:	e018      	b.n	80027ca <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d114      	bne.n	80027ca <HAL_PCD_EP_DB_Transmit+0x4e0>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ae:	4413      	add	r3, r2
 80027b0:	643b      	str	r3, [r7, #64]	; 0x40
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	00da      	lsls	r2, r3, #3
 80027b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ba:	4413      	add	r3, r2
 80027bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	6959      	ldr	r1, [r3, #20]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	895a      	ldrh	r2, [r3, #10]
 80027d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f004 f942 	bl	8006a62 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027f8:	82bb      	strh	r3, [r7, #20]
 80027fa:	8abb      	ldrh	r3, [r7, #20]
 80027fc:	f083 0310 	eor.w	r3, r3, #16
 8002800:	82bb      	strh	r3, [r7, #20]
 8002802:	8abb      	ldrh	r3, [r7, #20]
 8002804:	f083 0320 	eor.w	r3, r3, #32
 8002808:	82bb      	strh	r3, [r7, #20]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	441a      	add	r2, r3
 8002818:	8abb      	ldrh	r3, [r7, #20]
 800281a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800281e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282a:	b29b      	uxth	r3, r3
 800282c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3750      	adds	r7, #80	; 0x50
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	460b      	mov	r3, r1
 8002844:	817b      	strh	r3, [r7, #10]
 8002846:	4613      	mov	r3, r2
 8002848:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800284a:	897b      	ldrh	r3, [r7, #10]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002856:	897b      	ldrh	r3, [r7, #10]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4413      	add	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	e009      	b.n	8002882 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800286e:	897a      	ldrh	r2, [r7, #10]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002882:	893b      	ldrh	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d107      	bne.n	8002898 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2200      	movs	r2, #0
 800288c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	b29a      	uxth	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	80da      	strh	r2, [r3, #6]
 8002896:	e00b      	b.n	80028b0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2201      	movs	r2, #1
 800289c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f043 0302 	orr.w	r3, r3, #2
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <HAL_PWREx_GetVoltageRange+0x18>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40007000 	.word	0x40007000

08002930 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293e:	d130      	bne.n	80029a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002940:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294c:	d038      	beq.n	80029c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002958:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800295c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800295e:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2232      	movs	r2, #50	; 0x32
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0c9b      	lsrs	r3, r3, #18
 8002970:	3301      	adds	r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002974:	e002      	b.n	800297c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3b01      	subs	r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002988:	d102      	bne.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x60>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f2      	bne.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299c:	d110      	bne.n	80029c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e00f      	b.n	80029c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ae:	d007      	beq.n	80029c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029b8:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40007000 	.word	0x40007000
 80029d4:	20000008 	.word	0x20000008
 80029d8:	431bde83 	.word	0x431bde83

080029dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ea:	6053      	str	r3, [r2, #4]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40007000 	.word	0x40007000

080029fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d102      	bne.n	8002a10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f000 bc11 	b.w	8003232 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a10:	4ba0      	ldr	r3, [pc, #640]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a1a:	4b9e      	ldr	r3, [pc, #632]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80e4 	beq.w	8002bfa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <HAL_RCC_OscConfig+0x4c>
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b0c      	cmp	r3, #12
 8002a3c:	f040 808b 	bne.w	8002b56 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	f040 8087 	bne.w	8002b56 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a48:	4b92      	ldr	r3, [pc, #584]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_OscConfig+0x64>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e3e8      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1a      	ldr	r2, [r3, #32]
 8002a64:	4b8b      	ldr	r3, [pc, #556]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d004      	beq.n	8002a7a <HAL_RCC_OscConfig+0x7e>
 8002a70:	4b88      	ldr	r3, [pc, #544]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a78:	e005      	b.n	8002a86 <HAL_RCC_OscConfig+0x8a>
 8002a7a:	4b86      	ldr	r3, [pc, #536]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d223      	bcs.n	8002ad2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fd42 	bl	8003518 <RCC_SetFlashLatencyFromMSIRange>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e3c9      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a9e:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7c      	ldr	r2, [pc, #496]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002aa4:	f043 0308 	orr.w	r3, r3, #8
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b7a      	ldr	r3, [pc, #488]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4977      	ldr	r1, [pc, #476]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002abc:	4b75      	ldr	r3, [pc, #468]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	4972      	ldr	r1, [pc, #456]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
 8002ad0:	e025      	b.n	8002b1e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad2:	4b70      	ldr	r3, [pc, #448]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6f      	ldr	r2, [pc, #444]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002ad8:	f043 0308 	orr.w	r3, r3, #8
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b6d      	ldr	r3, [pc, #436]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	496a      	ldr	r1, [pc, #424]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af0:	4b68      	ldr	r3, [pc, #416]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	4965      	ldr	r1, [pc, #404]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fd02 	bl	8003518 <RCC_SetFlashLatencyFromMSIRange>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e389      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b1e:	f000 fc6f 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b5b      	ldr	r3, [pc, #364]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	495a      	ldr	r1, [pc, #360]	; (8002c98 <HAL_RCC_OscConfig+0x29c>)
 8002b30:	5ccb      	ldrb	r3, [r1, r3]
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3a:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_OscConfig+0x2a0>)
 8002b3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b3e:	4b58      	ldr	r3, [pc, #352]	; (8002ca0 <HAL_RCC_OscConfig+0x2a4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe f82e 	bl	8000ba4 <HAL_InitTick>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d052      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	e36d      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d032      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b5e:	4b4d      	ldr	r3, [pc, #308]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a4c      	ldr	r2, [pc, #304]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b6a:	f7fe f86b 	bl	8000c44 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b72:	f7fe f867 	bl	8000c44 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e356      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b84:	4b43      	ldr	r3, [pc, #268]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b90:	4b40      	ldr	r3, [pc, #256]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a3f      	ldr	r2, [pc, #252]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b96:	f043 0308 	orr.w	r3, r3, #8
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b3d      	ldr	r3, [pc, #244]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	493a      	ldr	r1, [pc, #232]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bae:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	4935      	ldr	r1, [pc, #212]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
 8002bc2:	e01a      	b.n	8002bfa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bc4:	4b33      	ldr	r3, [pc, #204]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a32      	ldr	r2, [pc, #200]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe f838 	bl	8000c44 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd8:	f7fe f834 	bl	8000c44 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e323      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bea:	4b2a      	ldr	r3, [pc, #168]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x1dc>
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bf8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d073      	beq.n	8002cee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_OscConfig+0x21c>
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d10e      	bne.n	8002c30 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d10b      	bne.n	8002c30 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d063      	beq.n	8002cec <HAL_RCC_OscConfig+0x2f0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d15f      	bne.n	8002cec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e300      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c38:	d106      	bne.n	8002c48 <HAL_RCC_OscConfig+0x24c>
 8002c3a:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e01d      	b.n	8002c84 <HAL_RCC_OscConfig+0x288>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x270>
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a0c      	ldr	r2, [pc, #48]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0x288>
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <HAL_RCC_OscConfig+0x298>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01b      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fd ffda 	bl	8000c44 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c92:	e010      	b.n	8002cb6 <HAL_RCC_OscConfig+0x2ba>
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08009094 	.word	0x08009094
 8002c9c:	20000008 	.word	0x20000008
 8002ca0:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fd ffce 	bl	8000c44 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e2bd      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb6:	4baf      	ldr	r3, [pc, #700]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x2a8>
 8002cc2:	e014      	b.n	8002cee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fd ffbe 	bl	8000c44 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7fd ffba 	bl	8000c44 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	; 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e2a9      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cde:	4ba5      	ldr	r3, [pc, #660]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x2d0>
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d060      	beq.n	8002dbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_OscConfig+0x310>
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d119      	bne.n	8002d3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d116      	bne.n	8002d3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d0c:	4b99      	ldr	r3, [pc, #612]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_OscConfig+0x328>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e286      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b93      	ldr	r3, [pc, #588]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	4990      	ldr	r1, [pc, #576]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d38:	e040      	b.n	8002dbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d023      	beq.n	8002d8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d42:	4b8c      	ldr	r3, [pc, #560]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a8b      	ldr	r2, [pc, #556]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7fd ff79 	bl	8000c44 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d56:	f7fd ff75 	bl	8000c44 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e264      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d68:	4b82      	ldr	r3, [pc, #520]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	4b7f      	ldr	r3, [pc, #508]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	061b      	lsls	r3, r3, #24
 8002d82:	497c      	ldr	r1, [pc, #496]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
 8002d88:	e018      	b.n	8002dbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8a:	4b7a      	ldr	r3, [pc, #488]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a79      	ldr	r2, [pc, #484]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7fd ff55 	bl	8000c44 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7fd ff51 	bl	8000c44 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e240      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db0:	4b70      	ldr	r3, [pc, #448]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d03c      	beq.n	8002e42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd0:	4b68      	ldr	r3, [pc, #416]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd6:	4a67      	ldr	r2, [pc, #412]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fd ff30 	bl	8000c44 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fd ff2c 	bl	8000c44 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e21b      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dfa:	4b5e      	ldr	r3, [pc, #376]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ef      	beq.n	8002de8 <HAL_RCC_OscConfig+0x3ec>
 8002e08:	e01b      	b.n	8002e42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0a:	4b5a      	ldr	r3, [pc, #360]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e10:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1a:	f7fd ff13 	bl	8000c44 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e22:	f7fd ff0f 	bl	8000c44 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1fe      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e34:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1ef      	bne.n	8002e22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80a6 	beq.w	8002f9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e50:	2300      	movs	r3, #0
 8002e52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e54:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e60:	4b44      	ldr	r3, [pc, #272]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	4a43      	ldr	r2, [pc, #268]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e6c:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7c:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <HAL_RCC_OscConfig+0x57c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d118      	bne.n	8002eba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e88:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <HAL_RCC_OscConfig+0x57c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a3a      	ldr	r2, [pc, #232]	; (8002f78 <HAL_RCC_OscConfig+0x57c>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e94:	f7fd fed6 	bl	8000c44 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9c:	f7fd fed2 	bl	8000c44 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e1c1      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eae:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <HAL_RCC_OscConfig+0x57c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d108      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4d8>
 8002ec2:	4b2c      	ldr	r3, [pc, #176]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed2:	e024      	b.n	8002f1e <HAL_RCC_OscConfig+0x522>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d110      	bne.n	8002efe <HAL_RCC_OscConfig+0x502>
 8002edc:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eec:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002efc:	e00f      	b.n	8002f1e <HAL_RCC_OscConfig+0x522>
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f04:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f0e:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f14:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002f16:	f023 0304 	bic.w	r3, r3, #4
 8002f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f26:	f7fd fe8d 	bl	8000c44 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fd fe89 	bl	8000c44 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e176      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_OscConfig+0x578>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0ed      	beq.n	8002f2e <HAL_RCC_OscConfig+0x532>
 8002f52:	e01a      	b.n	8002f8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fd fe76 	bl	8000c44 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f5a:	e00f      	b.n	8002f7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7fd fe72 	bl	8000c44 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d906      	bls.n	8002f7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e15f      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f7c:	4baa      	ldr	r3, [pc, #680]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e8      	bne.n	8002f5c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f8a:	7ffb      	ldrb	r3, [r7, #31]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f90:	4ba5      	ldr	r3, [pc, #660]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	4aa4      	ldr	r2, [pc, #656]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8002f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d03c      	beq.n	8003022 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01c      	beq.n	8002fea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fb0:	4b9d      	ldr	r3, [pc, #628]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8002fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fb6:	4a9c      	ldr	r2, [pc, #624]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7fd fe40 	bl	8000c44 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc8:	f7fd fe3c 	bl	8000c44 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e12b      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fda:	4b93      	ldr	r3, [pc, #588]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8002fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ef      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x5cc>
 8002fe8:	e01b      	b.n	8003022 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fea:	4b8f      	ldr	r3, [pc, #572]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8002fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ff0:	4a8d      	ldr	r2, [pc, #564]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffa:	f7fd fe23 	bl	8000c44 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003002:	f7fd fe1f 	bl	8000c44 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e10e      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003014:	4b84      	ldr	r3, [pc, #528]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8003016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ef      	bne.n	8003002 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8102 	beq.w	8003230 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	2b02      	cmp	r3, #2
 8003032:	f040 80c5 	bne.w	80031c0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003036:	4b7c      	ldr	r3, [pc, #496]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f003 0203 	and.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	429a      	cmp	r2, r3
 8003048:	d12c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	3b01      	subs	r3, #1
 8003056:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d123      	bne.n	80030a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003066:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d11b      	bne.n	80030a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d113      	bne.n	80030a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	3b01      	subs	r3, #1
 800308a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d109      	bne.n	80030a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	085b      	lsrs	r3, r3, #1
 800309c:	3b01      	subs	r3, #1
 800309e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d067      	beq.n	8003174 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d062      	beq.n	8003170 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030aa:	4b5f      	ldr	r3, [pc, #380]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0bb      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030ba:	4b5b      	ldr	r3, [pc, #364]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a5a      	ldr	r2, [pc, #360]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 80030c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030c6:	f7fd fdbd 	bl	8000c44 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fd fdb9 	bl	8000c44 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e0a8      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e0:	4b51      	ldr	r3, [pc, #324]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f0      	bne.n	80030ce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ec:	4b4e      	ldr	r3, [pc, #312]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	4b4e      	ldr	r3, [pc, #312]	; (800322c <HAL_RCC_OscConfig+0x830>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030fc:	3a01      	subs	r2, #1
 80030fe:	0112      	lsls	r2, r2, #4
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003106:	0212      	lsls	r2, r2, #8
 8003108:	4311      	orrs	r1, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800310e:	0852      	lsrs	r2, r2, #1
 8003110:	3a01      	subs	r2, #1
 8003112:	0552      	lsls	r2, r2, #21
 8003114:	4311      	orrs	r1, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800311a:	0852      	lsrs	r2, r2, #1
 800311c:	3a01      	subs	r2, #1
 800311e:	0652      	lsls	r2, r2, #25
 8003120:	4311      	orrs	r1, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003126:	06d2      	lsls	r2, r2, #27
 8003128:	430a      	orrs	r2, r1
 800312a:	493f      	ldr	r1, [pc, #252]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 800312c:	4313      	orrs	r3, r2
 800312e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003130:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a3c      	ldr	r2, [pc, #240]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8003136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800313c:	4b3a      	ldr	r3, [pc, #232]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4a39      	ldr	r2, [pc, #228]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8003142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003146:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003148:	f7fd fd7c 	bl	8000c44 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003150:	f7fd fd78 	bl	8000c44 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e067      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003162:	4b31      	ldr	r3, [pc, #196]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800316e:	e05f      	b.n	8003230 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e05e      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003174:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d157      	bne.n	8003230 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003180:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a28      	ldr	r2, [pc, #160]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8003186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800318a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800318c:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a25      	ldr	r2, [pc, #148]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8003192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003196:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003198:	f7fd fd54 	bl	8000c44 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fd fd50 	bl	8000c44 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e03f      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x7a4>
 80031be:	e037      	b.n	8003230 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	d02d      	beq.n	8003222 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c6:	4b18      	ldr	r3, [pc, #96]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a17      	ldr	r2, [pc, #92]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 80031cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031d0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d105      	bne.n	80031ea <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	4a11      	ldr	r2, [pc, #68]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 80031e4:	f023 0303 	bic.w	r3, r3, #3
 80031e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031ea:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 80031f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fa:	f7fd fd23 	bl	8000c44 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003202:	f7fd fd1f 	bl	8000c44 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e00e      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <HAL_RCC_OscConfig+0x82c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f0      	bne.n	8003202 <HAL_RCC_OscConfig+0x806>
 8003220:	e006      	b.n	8003230 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e005      	b.n	8003232 <HAL_RCC_OscConfig+0x836>
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop

0800323c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0c8      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003250:	4b66      	ldr	r3, [pc, #408]	; (80033ec <HAL_RCC_ClockConfig+0x1b0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d910      	bls.n	8003280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b63      	ldr	r3, [pc, #396]	; (80033ec <HAL_RCC_ClockConfig+0x1b0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 0207 	bic.w	r2, r3, #7
 8003266:	4961      	ldr	r1, [pc, #388]	; (80033ec <HAL_RCC_ClockConfig+0x1b0>)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b5f      	ldr	r3, [pc, #380]	; (80033ec <HAL_RCC_ClockConfig+0x1b0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0b0      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d04c      	beq.n	8003326 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003294:	4b56      	ldr	r3, [pc, #344]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d121      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e09e      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ac:	4b50      	ldr	r3, [pc, #320]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d115      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e092      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032c4:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e086      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d4:	4b46      	ldr	r3, [pc, #280]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e07e      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032e4:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f023 0203 	bic.w	r2, r3, #3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	493f      	ldr	r1, [pc, #252]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f6:	f7fd fca5 	bl	8000c44 <HAL_GetTick>
 80032fa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fc:	e00a      	b.n	8003314 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fe:	f7fd fca1 	bl	8000c44 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f241 3288 	movw	r2, #5000	; 0x1388
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e066      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003314:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 020c 	and.w	r2, r3, #12
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	429a      	cmp	r2, r3
 8003324:	d1eb      	bne.n	80032fe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003332:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	492c      	ldr	r1, [pc, #176]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003344:	4b29      	ldr	r3, [pc, #164]	; (80033ec <HAL_RCC_ClockConfig+0x1b0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d210      	bcs.n	8003374 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b26      	ldr	r3, [pc, #152]	; (80033ec <HAL_RCC_ClockConfig+0x1b0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0207 	bic.w	r2, r3, #7
 800335a:	4924      	ldr	r1, [pc, #144]	; (80033ec <HAL_RCC_ClockConfig+0x1b0>)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b22      	ldr	r3, [pc, #136]	; (80033ec <HAL_RCC_ClockConfig+0x1b0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e036      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003380:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4918      	ldr	r1, [pc, #96]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800339e:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4910      	ldr	r1, [pc, #64]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033b2:	f000 f825 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80033b6:	4602      	mov	r2, r0
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <HAL_RCC_ClockConfig+0x1b4>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	490c      	ldr	r1, [pc, #48]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	5ccb      	ldrb	r3, [r1, r3]
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	fa22 f303 	lsr.w	r3, r2, r3
 80033ce:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd fbe4 	bl	8000ba4 <HAL_InitTick>
 80033dc:	4603      	mov	r3, r0
 80033de:	72fb      	strb	r3, [r7, #11]

  return status;
 80033e0:	7afb      	ldrb	r3, [r7, #11]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40022000 	.word	0x40022000
 80033f0:	40021000 	.word	0x40021000
 80033f4:	08009094 	.word	0x08009094
 80033f8:	20000008 	.word	0x20000008
 80033fc:	2000000c 	.word	0x2000000c

08003400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800340e:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003418:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x34>
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d121      	bne.n	8003472 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d11e      	bne.n	8003472 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003434:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003440:	4b31      	ldr	r3, [pc, #196]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	e005      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003450:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800345c:	4a2b      	ldr	r2, [pc, #172]	; (800350c <HAL_RCC_GetSysClockFreq+0x10c>)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003464:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10d      	bne.n	8003488 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d102      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003478:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_RCC_GetSysClockFreq+0x110>)
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	e004      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d101      	bne.n	8003488 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003484:	4b23      	ldr	r3, [pc, #140]	; (8003514 <HAL_RCC_GetSysClockFreq+0x114>)
 8003486:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d134      	bne.n	80034f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800348e:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d003      	beq.n	80034a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d003      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0xac>
 80034a4:	e005      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_RCC_GetSysClockFreq+0x110>)
 80034a8:	617b      	str	r3, [r7, #20]
      break;
 80034aa:	e005      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034ac:	4b19      	ldr	r3, [pc, #100]	; (8003514 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ae:	617b      	str	r3, [r7, #20]
      break;
 80034b0:	e002      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	617b      	str	r3, [r7, #20]
      break;
 80034b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034b8:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	3301      	adds	r3, #1
 80034c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	fb02 f203 	mul.w	r2, r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	0e5b      	lsrs	r3, r3, #25
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	3301      	adds	r3, #1
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034f8:	69bb      	ldr	r3, [r7, #24]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3724      	adds	r7, #36	; 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	080090a4 	.word	0x080090a4
 8003510:	00f42400 	.word	0x00f42400
 8003514:	007a1200 	.word	0x007a1200

08003518 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003524:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003530:	f7ff f9f0 	bl	8002914 <HAL_PWREx_GetVoltageRange>
 8003534:	6178      	str	r0, [r7, #20]
 8003536:	e014      	b.n	8003562 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003538:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	4a24      	ldr	r2, [pc, #144]	; (80035d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003542:	6593      	str	r3, [r2, #88]	; 0x58
 8003544:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003550:	f7ff f9e0 	bl	8002914 <HAL_PWREx_GetVoltageRange>
 8003554:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003556:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	4a1d      	ldr	r2, [pc, #116]	; (80035d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003560:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003568:	d10b      	bne.n	8003582 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d919      	bls.n	80035a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2ba0      	cmp	r3, #160	; 0xa0
 8003574:	d902      	bls.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003576:	2302      	movs	r3, #2
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	e013      	b.n	80035a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800357c:	2301      	movs	r3, #1
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	e010      	b.n	80035a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b80      	cmp	r3, #128	; 0x80
 8003586:	d902      	bls.n	800358e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003588:	2303      	movs	r3, #3
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	e00a      	b.n	80035a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b80      	cmp	r3, #128	; 0x80
 8003592:	d102      	bne.n	800359a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003594:	2302      	movs	r3, #2
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	e004      	b.n	80035a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b70      	cmp	r3, #112	; 0x70
 800359e:	d101      	bne.n	80035a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035a0:	2301      	movs	r3, #1
 80035a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f023 0207 	bic.w	r2, r3, #7
 80035ac:	4909      	ldr	r1, [pc, #36]	; (80035d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035b4:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d001      	beq.n	80035c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40022000 	.word	0x40022000

080035d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035e0:	2300      	movs	r3, #0
 80035e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035e4:	2300      	movs	r3, #0
 80035e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d031      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035fc:	d01a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80035fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003602:	d814      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d009      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003608:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800360c:	d10f      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800360e:	4bac      	ldr	r3, [pc, #688]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4aab      	ldr	r2, [pc, #684]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800361a:	e00c      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f9cc 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800362c:	e003      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	74fb      	strb	r3, [r7, #19]
      break;
 8003632:	e000      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800363c:	4ba0      	ldr	r3, [pc, #640]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	499d      	ldr	r1, [pc, #628]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003652:	e001      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8099 	beq.w	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800366a:	4b95      	ldr	r3, [pc, #596]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800366c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800367a:	2300      	movs	r3, #0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00d      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003680:	4b8f      	ldr	r3, [pc, #572]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003684:	4a8e      	ldr	r2, [pc, #568]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368a:	6593      	str	r3, [r2, #88]	; 0x58
 800368c:	4b8c      	ldr	r3, [pc, #560]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003698:	2301      	movs	r3, #1
 800369a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800369c:	4b89      	ldr	r3, [pc, #548]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a88      	ldr	r2, [pc, #544]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036a8:	f7fd facc 	bl	8000c44 <HAL_GetTick>
 80036ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ae:	e009      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b0:	f7fd fac8 	bl	8000c44 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d902      	bls.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	74fb      	strb	r3, [r7, #19]
        break;
 80036c2:	e005      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036c4:	4b7f      	ldr	r3, [pc, #508]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ef      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d155      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036d6:	4b7a      	ldr	r3, [pc, #488]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01e      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d019      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036f2:	4b73      	ldr	r3, [pc, #460]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036fe:	4b70      	ldr	r3, [pc, #448]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	4a6e      	ldr	r2, [pc, #440]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800370e:	4b6c      	ldr	r3, [pc, #432]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	4a6a      	ldr	r2, [pc, #424]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800371e:	4a68      	ldr	r2, [pc, #416]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d016      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fd fa88 	bl	8000c44 <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003736:	e00b      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003738:	f7fd fa84 	bl	8000c44 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d902      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	74fb      	strb	r3, [r7, #19]
            break;
 800374e:	e006      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003750:	4b5b      	ldr	r3, [pc, #364]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0ec      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10b      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003764:	4b56      	ldr	r3, [pc, #344]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003772:	4953      	ldr	r1, [pc, #332]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800377a:	e004      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	74bb      	strb	r3, [r7, #18]
 8003780:	e001      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003782:	7cfb      	ldrb	r3, [r7, #19]
 8003784:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003786:	7c7b      	ldrb	r3, [r7, #17]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d105      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378c:	4b4c      	ldr	r3, [pc, #304]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	4a4b      	ldr	r2, [pc, #300]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003796:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037a4:	4b46      	ldr	r3, [pc, #280]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	f023 0203 	bic.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	4943      	ldr	r1, [pc, #268]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037c6:	4b3e      	ldr	r3, [pc, #248]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f023 020c 	bic.w	r2, r3, #12
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	493a      	ldr	r1, [pc, #232]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037e8:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	4932      	ldr	r1, [pc, #200]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003818:	4929      	ldr	r1, [pc, #164]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800382c:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	4921      	ldr	r1, [pc, #132]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800384e:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	4918      	ldr	r1, [pc, #96]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003870:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	4910      	ldr	r1, [pc, #64]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d02c      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003892:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	4907      	ldr	r1, [pc, #28]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038b0:	d10a      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b2:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	4a02      	ldr	r2, [pc, #8]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038bc:	60d3      	str	r3, [r2, #12]
 80038be:	e015      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x314>
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	2101      	movs	r1, #1
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f871 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d028      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038f8:	4b30      	ldr	r3, [pc, #192]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	492d      	ldr	r1, [pc, #180]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003916:	d106      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003918:	4b28      	ldr	r3, [pc, #160]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a27      	ldr	r2, [pc, #156]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800391e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003922:	60d3      	str	r3, [r2, #12]
 8003924:	e011      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800392e:	d10c      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	2101      	movs	r1, #1
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f842 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01c      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003956:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003964:	4915      	ldr	r1, [pc, #84]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003974:	d10c      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	2102      	movs	r1, #2
 800397c:	4618      	mov	r0, r3
 800397e:	f000 f81f 	bl	80039c0 <RCCEx_PLLSAI1_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003986:	7cfb      	ldrb	r3, [r7, #19]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800398c:	7cfb      	ldrb	r3, [r7, #19]
 800398e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800399c:	4b07      	ldr	r3, [pc, #28]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039aa:	4904      	ldr	r1, [pc, #16]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000

080039c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ce:	4b74      	ldr	r3, [pc, #464]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d018      	beq.n	8003a0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039da:	4b71      	ldr	r3, [pc, #452]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0203 	and.w	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d10d      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
       ||
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039f2:	4b6b      	ldr	r3, [pc, #428]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	091b      	lsrs	r3, r3, #4
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
       ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d047      	beq.n	8003a96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
 8003a0a:	e044      	b.n	8003a96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d018      	beq.n	8003a46 <RCCEx_PLLSAI1_Config+0x86>
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d825      	bhi.n	8003a64 <RCCEx_PLLSAI1_Config+0xa4>
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d002      	beq.n	8003a22 <RCCEx_PLLSAI1_Config+0x62>
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d009      	beq.n	8003a34 <RCCEx_PLLSAI1_Config+0x74>
 8003a20:	e020      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a22:	4b5f      	ldr	r3, [pc, #380]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11d      	bne.n	8003a6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a32:	e01a      	b.n	8003a6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a34:	4b5a      	ldr	r3, [pc, #360]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d116      	bne.n	8003a6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a44:	e013      	b.n	8003a6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a46:	4b56      	ldr	r3, [pc, #344]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10f      	bne.n	8003a72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a52:	4b53      	ldr	r3, [pc, #332]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a62:	e006      	b.n	8003a72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
      break;
 8003a68:	e004      	b.n	8003a74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a6a:	bf00      	nop
 8003a6c:	e002      	b.n	8003a74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e000      	b.n	8003a74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a72:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10d      	bne.n	8003a96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a7a:	4b49      	ldr	r3, [pc, #292]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6819      	ldr	r1, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	4943      	ldr	r1, [pc, #268]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d17c      	bne.n	8003b96 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a9c:	4b40      	ldr	r3, [pc, #256]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a3f      	ldr	r2, [pc, #252]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa8:	f7fd f8cc 	bl	8000c44 <HAL_GetTick>
 8003aac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aae:	e009      	b.n	8003ac4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ab0:	f7fd f8c8 	bl	8000c44 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d902      	bls.n	8003ac4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ac2:	e005      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ac4:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ef      	bne.n	8003ab0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d15f      	bne.n	8003b96 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d110      	bne.n	8003afe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003adc:	4b30      	ldr	r3, [pc, #192]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6892      	ldr	r2, [r2, #8]
 8003aec:	0211      	lsls	r1, r2, #8
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68d2      	ldr	r2, [r2, #12]
 8003af2:	06d2      	lsls	r2, r2, #27
 8003af4:	430a      	orrs	r2, r1
 8003af6:	492a      	ldr	r1, [pc, #168]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	610b      	str	r3, [r1, #16]
 8003afc:	e027      	b.n	8003b4e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d112      	bne.n	8003b2a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b04:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6892      	ldr	r2, [r2, #8]
 8003b14:	0211      	lsls	r1, r2, #8
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6912      	ldr	r2, [r2, #16]
 8003b1a:	0852      	lsrs	r2, r2, #1
 8003b1c:	3a01      	subs	r2, #1
 8003b1e:	0552      	lsls	r2, r2, #21
 8003b20:	430a      	orrs	r2, r1
 8003b22:	491f      	ldr	r1, [pc, #124]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	610b      	str	r3, [r1, #16]
 8003b28:	e011      	b.n	8003b4e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6892      	ldr	r2, [r2, #8]
 8003b3a:	0211      	lsls	r1, r2, #8
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6952      	ldr	r2, [r2, #20]
 8003b40:	0852      	lsrs	r2, r2, #1
 8003b42:	3a01      	subs	r2, #1
 8003b44:	0652      	lsls	r2, r2, #25
 8003b46:	430a      	orrs	r2, r1
 8003b48:	4915      	ldr	r1, [pc, #84]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fd f873 	bl	8000c44 <HAL_GetTick>
 8003b5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b60:	e009      	b.n	8003b76 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b62:	f7fd f86f 	bl	8000c44 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d902      	bls.n	8003b76 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	73fb      	strb	r3, [r7, #15]
          break;
 8003b74:	e005      	b.n	8003b82 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0ef      	beq.n	8003b62 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	4903      	ldr	r1, [pc, #12]	; (8003ba0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000

08003ba4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e095      	b.n	8003ce2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d108      	bne.n	8003bd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc6:	d009      	beq.n	8003bdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	61da      	str	r2, [r3, #28]
 8003bce:	e005      	b.n	8003bdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fc feae 	bl	8000958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c1c:	d902      	bls.n	8003c24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	e002      	b.n	8003c2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c32:	d007      	beq.n	8003c44 <HAL_SPI_Init+0xa0>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c3c:	d002      	beq.n	8003c44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	ea42 0103 	orr.w	r1, r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	f003 0204 	and.w	r2, r3, #4
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003cc0:	ea42 0103 	orr.w	r1, r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b088      	sub	sp, #32
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_SPI_Transmit+0x22>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e158      	b.n	8003fbe <HAL_SPI_Transmit+0x2d4>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d14:	f7fc ff96 	bl	8000c44 <HAL_GetTick>
 8003d18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d002      	beq.n	8003d30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d2e:	e13d      	b.n	8003fac <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_SPI_Transmit+0x52>
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d102      	bne.n	8003d42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d40:	e134      	b.n	8003fac <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2203      	movs	r2, #3
 8003d46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	88fa      	ldrh	r2, [r7, #6]
 8003d5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	88fa      	ldrh	r2, [r7, #6]
 8003d60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d8c:	d10f      	bne.n	8003dae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d007      	beq.n	8003dcc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dd4:	d94b      	bls.n	8003e6e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_SPI_Transmit+0xfa>
 8003dde:	8afb      	ldrh	r3, [r7, #22]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d13e      	bne.n	8003e62 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	881a      	ldrh	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	1c9a      	adds	r2, r3, #2
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e08:	e02b      	b.n	8003e62 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d112      	bne.n	8003e3e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	881a      	ldrh	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e3c:	e011      	b.n	8003e62 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e3e:	f7fc ff01 	bl	8000c44 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d803      	bhi.n	8003e56 <HAL_SPI_Transmit+0x16c>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e54:	d102      	bne.n	8003e5c <HAL_SPI_Transmit+0x172>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e60:	e0a4      	b.n	8003fac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ce      	bne.n	8003e0a <HAL_SPI_Transmit+0x120>
 8003e6c:	e07c      	b.n	8003f68 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_SPI_Transmit+0x192>
 8003e76:	8afb      	ldrh	r3, [r7, #22]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d170      	bne.n	8003f5e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d912      	bls.n	8003eac <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	881a      	ldrh	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	1c9a      	adds	r2, r3, #2
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b02      	subs	r3, #2
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eaa:	e058      	b.n	8003f5e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	7812      	ldrb	r2, [r2, #0]
 8003eb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ed2:	e044      	b.n	8003f5e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d12b      	bne.n	8003f3a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d912      	bls.n	8003f12 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	881a      	ldrh	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	1c9a      	adds	r2, r3, #2
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b02      	subs	r3, #2
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f10:	e025      	b.n	8003f5e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	7812      	ldrb	r2, [r2, #0]
 8003f1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f38:	e011      	b.n	8003f5e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f3a:	f7fc fe83 	bl	8000c44 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d803      	bhi.n	8003f52 <HAL_SPI_Transmit+0x268>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f50:	d102      	bne.n	8003f58 <HAL_SPI_Transmit+0x26e>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f5c:	e026      	b.n	8003fac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1b5      	bne.n	8003ed4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	6839      	ldr	r1, [r7, #0]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 fcdb 	bl	8004928 <SPI_EndRxTxTransaction>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	77fb      	strb	r3, [r7, #31]
 8003fa8:	e000      	b.n	8003fac <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003faa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3720      	adds	r7, #32
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b088      	sub	sp, #32
 8003fca:	af02      	add	r7, sp, #8
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe2:	d112      	bne.n	800400a <HAL_SPI_Receive+0x44>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10e      	bne.n	800400a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2204      	movs	r2, #4
 8003ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ff4:	88fa      	ldrh	r2, [r7, #6]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f910 	bl	8004226 <HAL_SPI_TransmitReceive>
 8004006:	4603      	mov	r3, r0
 8004008:	e109      	b.n	800421e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_SPI_Receive+0x52>
 8004014:	2302      	movs	r3, #2
 8004016:	e102      	b.n	800421e <HAL_SPI_Receive+0x258>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004020:	f7fc fe10 	bl	8000c44 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b01      	cmp	r3, #1
 8004030:	d002      	beq.n	8004038 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004032:	2302      	movs	r3, #2
 8004034:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004036:	e0e9      	b.n	800420c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_SPI_Receive+0x7e>
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004048:	e0e0      	b.n	800420c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2204      	movs	r2, #4
 800404e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	88fa      	ldrh	r2, [r7, #6]
 8004062:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	88fa      	ldrh	r2, [r7, #6]
 800406a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004094:	d908      	bls.n	80040a8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	e007      	b.n	80040b8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040b6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c0:	d10f      	bne.n	80040e2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d007      	beq.n	8004100 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004108:	d867      	bhi.n	80041da <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800410a:	e030      	b.n	800416e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b01      	cmp	r3, #1
 8004118:	d117      	bne.n	800414a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f103 020c 	add.w	r2, r3, #12
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	7812      	ldrb	r2, [r2, #0]
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004148:	e011      	b.n	800416e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800414a:	f7fc fd7b 	bl	8000c44 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d803      	bhi.n	8004162 <HAL_SPI_Receive+0x19c>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004160:	d102      	bne.n	8004168 <HAL_SPI_Receive+0x1a2>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800416c:	e04e      	b.n	800420c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1c8      	bne.n	800410c <HAL_SPI_Receive+0x146>
 800417a:	e034      	b.n	80041e6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d115      	bne.n	80041b6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	b292      	uxth	r2, r2
 8004196:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	1c9a      	adds	r2, r3, #2
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80041b4:	e011      	b.n	80041da <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041b6:	f7fc fd45 	bl	8000c44 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d803      	bhi.n	80041ce <HAL_SPI_Receive+0x208>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041cc:	d102      	bne.n	80041d4 <HAL_SPI_Receive+0x20e>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d102      	bne.n	80041da <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041d8:	e018      	b.n	800420c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ca      	bne.n	800417c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	6839      	ldr	r1, [r7, #0]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fb44 	bl	8004878 <SPI_EndRxTransaction>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]
 8004208:	e000      	b.n	800420c <HAL_SPI_Receive+0x246>
  }

error :
 800420a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800421c:	7dfb      	ldrb	r3, [r7, #23]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b08a      	sub	sp, #40	; 0x28
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004234:	2301      	movs	r3, #1
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_SPI_TransmitReceive+0x26>
 8004248:	2302      	movs	r3, #2
 800424a:	e1fb      	b.n	8004644 <HAL_SPI_TransmitReceive+0x41e>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004254:	f7fc fcf6 	bl	8000c44 <HAL_GetTick>
 8004258:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004260:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004268:	887b      	ldrh	r3, [r7, #2]
 800426a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800426c:	887b      	ldrh	r3, [r7, #2]
 800426e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004270:	7efb      	ldrb	r3, [r7, #27]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d00e      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x6e>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800427c:	d106      	bne.n	800428c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <HAL_SPI_TransmitReceive+0x66>
 8004286:	7efb      	ldrb	r3, [r7, #27]
 8004288:	2b04      	cmp	r3, #4
 800428a:	d003      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800428c:	2302      	movs	r3, #2
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004292:	e1cd      	b.n	8004630 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_SPI_TransmitReceive+0x80>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_SPI_TransmitReceive+0x80>
 80042a0:	887b      	ldrh	r3, [r7, #2]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042ac:	e1c0      	b.n	8004630 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d003      	beq.n	80042c2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2205      	movs	r2, #5
 80042be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	887a      	ldrh	r2, [r7, #2]
 80042d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	887a      	ldrh	r2, [r7, #2]
 80042da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	887a      	ldrh	r2, [r7, #2]
 80042e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	887a      	ldrh	r2, [r7, #2]
 80042ee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004304:	d802      	bhi.n	800430c <HAL_SPI_TransmitReceive+0xe6>
 8004306:	8a3b      	ldrh	r3, [r7, #16]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d908      	bls.n	800431e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	e007      	b.n	800432e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800432c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d007      	beq.n	800434c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004354:	d97c      	bls.n	8004450 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_SPI_TransmitReceive+0x13e>
 800435e:	8a7b      	ldrh	r3, [r7, #18]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d169      	bne.n	8004438 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004388:	e056      	b.n	8004438 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d11b      	bne.n	80043d0 <HAL_SPI_TransmitReceive+0x1aa>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d016      	beq.n	80043d0 <HAL_SPI_TransmitReceive+0x1aa>
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d113      	bne.n	80043d0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	881a      	ldrh	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	1c9a      	adds	r2, r3, #2
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d11c      	bne.n	8004418 <HAL_SPI_TransmitReceive+0x1f2>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d016      	beq.n	8004418 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	b292      	uxth	r2, r2
 80043f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	1c9a      	adds	r2, r3, #2
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004414:	2301      	movs	r3, #1
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004418:	f7fc fc14 	bl	8000c44 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004424:	429a      	cmp	r2, r3
 8004426:	d807      	bhi.n	8004438 <HAL_SPI_TransmitReceive+0x212>
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800442e:	d003      	beq.n	8004438 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004436:	e0fb      	b.n	8004630 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1a3      	bne.n	800438a <HAL_SPI_TransmitReceive+0x164>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d19d      	bne.n	800438a <HAL_SPI_TransmitReceive+0x164>
 800444e:	e0df      	b.n	8004610 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_SPI_TransmitReceive+0x23a>
 8004458:	8a7b      	ldrh	r3, [r7, #18]
 800445a:	2b01      	cmp	r3, #1
 800445c:	f040 80cb 	bne.w	80045f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d912      	bls.n	8004490 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	881a      	ldrh	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	1c9a      	adds	r2, r3, #2
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b02      	subs	r3, #2
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800448e:	e0b2      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044b6:	e09e      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d134      	bne.n	8004530 <HAL_SPI_TransmitReceive+0x30a>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d02f      	beq.n	8004530 <HAL_SPI_TransmitReceive+0x30a>
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d12c      	bne.n	8004530 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d912      	bls.n	8004506 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	881a      	ldrh	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	1c9a      	adds	r2, r3, #2
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b02      	subs	r3, #2
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004504:	e012      	b.n	800452c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	330c      	adds	r3, #12
 8004510:	7812      	ldrb	r2, [r2, #0]
 8004512:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b01      	cmp	r3, #1
 800453c:	d148      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x3aa>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d042      	beq.n	80045d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b01      	cmp	r3, #1
 8004554:	d923      	bls.n	800459e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	b292      	uxth	r2, r2
 8004562:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	1c9a      	adds	r2, r3, #2
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b02      	subs	r3, #2
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d81f      	bhi.n	80045cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800459a:	605a      	str	r2, [r3, #4]
 800459c:	e016      	b.n	80045cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f103 020c 	add.w	r2, r3, #12
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	7812      	ldrb	r2, [r2, #0]
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045cc:	2301      	movs	r3, #1
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045d0:	f7fc fb38 	bl	8000c44 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045dc:	429a      	cmp	r2, r3
 80045de:	d803      	bhi.n	80045e8 <HAL_SPI_TransmitReceive+0x3c2>
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e6:	d102      	bne.n	80045ee <HAL_SPI_TransmitReceive+0x3c8>
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80045f4:	e01c      	b.n	8004630 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f47f af5b 	bne.w	80044b8 <HAL_SPI_TransmitReceive+0x292>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	f47f af54 	bne.w	80044b8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f987 	bl	8004928 <SPI_EndRxTxTransaction>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d006      	beq.n	800462e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2220      	movs	r2, #32
 800462a:	661a      	str	r2, [r3, #96]	; 0x60
 800462c:	e000      	b.n	8004630 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800462e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004640:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004644:	4618      	mov	r0, r3
 8004646:	3728      	adds	r7, #40	; 0x28
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800465c:	f7fc faf2 	bl	8000c44 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	4413      	add	r3, r2
 800466a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800466c:	f7fc faea 	bl	8000c44 <HAL_GetTick>
 8004670:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004672:	4b39      	ldr	r3, [pc, #228]	; (8004758 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	015b      	lsls	r3, r3, #5
 8004678:	0d1b      	lsrs	r3, r3, #20
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	fb02 f303 	mul.w	r3, r2, r3
 8004680:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004682:	e054      	b.n	800472e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800468a:	d050      	beq.n	800472e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800468c:	f7fc fada 	bl	8000c44 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	429a      	cmp	r2, r3
 800469a:	d902      	bls.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d13d      	bne.n	800471e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ba:	d111      	bne.n	80046e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c4:	d004      	beq.n	80046d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ce:	d107      	bne.n	80046e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e8:	d10f      	bne.n	800470a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004708:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e017      	b.n	800474e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	3b01      	subs	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4013      	ands	r3, r2
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	429a      	cmp	r2, r3
 800473c:	bf0c      	ite	eq
 800473e:	2301      	moveq	r3, #1
 8004740:	2300      	movne	r3, #0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	429a      	cmp	r2, r3
 800474a:	d19b      	bne.n	8004684 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000008 	.word	0x20000008

0800475c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800476a:	f7fc fa6b 	bl	8000c44 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	4413      	add	r3, r2
 8004778:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800477a:	f7fc fa63 	bl	8000c44 <HAL_GetTick>
 800477e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004780:	4b3c      	ldr	r3, [pc, #240]	; (8004874 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	00da      	lsls	r2, r3, #3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	0d1b      	lsrs	r3, r3, #20
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004798:	e05f      	b.n	800485a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047a0:	d106      	bne.n	80047b0 <SPI_WaitFifoStateUntilTimeout+0x54>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d103      	bne.n	80047b0 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	330c      	adds	r3, #12
 80047ae:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b6:	d050      	beq.n	800485a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047b8:	f7fc fa44 	bl	8000c44 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d902      	bls.n	80047ce <SPI_WaitFifoStateUntilTimeout+0x72>
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d13d      	bne.n	800484a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e6:	d111      	bne.n	800480c <SPI_WaitFifoStateUntilTimeout+0xb0>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f0:	d004      	beq.n	80047fc <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fa:	d107      	bne.n	800480c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004814:	d10f      	bne.n	8004836 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e010      	b.n	800486c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	3b01      	subs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	429a      	cmp	r2, r3
 8004868:	d197      	bne.n	800479a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000008 	.word	0x20000008

08004878 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800488c:	d111      	bne.n	80048b2 <SPI_EndRxTransaction+0x3a>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004896:	d004      	beq.n	80048a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a0:	d107      	bne.n	80048b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2200      	movs	r2, #0
 80048ba:	2180      	movs	r1, #128	; 0x80
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff fec5 	bl	800464c <SPI_WaitFlagStateUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e023      	b.n	8004920 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e0:	d11d      	bne.n	800491e <SPI_EndRxTransaction+0xa6>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ea:	d004      	beq.n	80048f6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f4:	d113      	bne.n	800491e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7ff ff2a 	bl	800475c <SPI_WaitFifoStateUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004912:	f043 0220 	orr.w	r2, r3, #32
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e000      	b.n	8004920 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2200      	movs	r2, #0
 800493c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f7ff ff0b 	bl	800475c <SPI_WaitFifoStateUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004950:	f043 0220 	orr.w	r2, r3, #32
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e027      	b.n	80049ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2200      	movs	r2, #0
 8004964:	2180      	movs	r1, #128	; 0x80
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff fe70 	bl	800464c <SPI_WaitFlagStateUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d007      	beq.n	8004982 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004976:	f043 0220 	orr.w	r2, r3, #32
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e014      	b.n	80049ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2200      	movs	r2, #0
 800498a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7ff fee4 	bl	800475c <SPI_WaitFifoStateUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499e:	f043 0220 	orr.w	r2, r3, #32
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e000      	b.n	80049ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049b4:	b084      	sub	sp, #16
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	f107 0014 	add.w	r0, r7, #20
 80049c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	b004      	add	sp, #16
 80049d4:	4770      	bx	lr

080049d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049e6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80049ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a0c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	4013      	ands	r3, r2
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	460b      	mov	r3, r1
 8004a44:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a54:	b084      	sub	sp, #16
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	f107 0014 	add.w	r0, r7, #20
 8004a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	b004      	add	sp, #16
 8004a94:	4770      	bx	lr
	...

08004a98 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b09b      	sub	sp, #108	; 0x6c
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	78db      	ldrb	r3, [r3, #3]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d81f      	bhi.n	8004b0a <USB_ActivateEndpoint+0x72>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <USB_ActivateEndpoint+0x38>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004afd 	.word	0x08004afd
 8004ad8:	08004b13 	.word	0x08004b13
 8004adc:	08004aef 	.word	0x08004aef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ae0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ae4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ae8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004aec:	e012      	b.n	8004b14 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004aee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004af2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004af6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004afa:	e00b      	b.n	8004b14 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004afc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b04:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b08:	e004      	b.n	8004b14 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b10:	e000      	b.n	8004b14 <USB_ActivateEndpoint+0x7c>
      break;
 8004b12:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	b21b      	sxth	r3, r3
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4e:	b21a      	sxth	r2, r3
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	b21b      	sxth	r3, r3
 8004b56:	4313      	orrs	r3, r2
 8004b58:	b21b      	sxth	r3, r3
 8004b5a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	441a      	add	r2, r3
 8004b68:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	7b1b      	ldrb	r3, [r3, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f040 8149 	bne.w	8004e1c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8084 	beq.w	8004c9c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	00da      	lsls	r2, r3, #3
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	88db      	ldrh	r3, [r3, #6]
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	81fb      	strh	r3, [r7, #14]
 8004bd6:	89fb      	ldrh	r3, [r7, #14]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <USB_ActivateEndpoint+0x180>
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	81bb      	strh	r3, [r7, #12]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	89bb      	ldrh	r3, [r7, #12]
 8004c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	78db      	ldrb	r3, [r3, #3]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d020      	beq.n	8004c62 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c36:	813b      	strh	r3, [r7, #8]
 8004c38:	893b      	ldrh	r3, [r7, #8]
 8004c3a:	f083 0320 	eor.w	r3, r3, #32
 8004c3e:	813b      	strh	r3, [r7, #8]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	441a      	add	r2, r3
 8004c4a:	893b      	ldrh	r3, [r7, #8]
 8004c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	8013      	strh	r3, [r2, #0]
 8004c60:	e27f      	b.n	8005162 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c78:	817b      	strh	r3, [r7, #10]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	441a      	add	r2, r3
 8004c84:	897b      	ldrh	r3, [r7, #10]
 8004c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	8013      	strh	r3, [r2, #0]
 8004c9a:	e262      	b.n	8005162 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	4413      	add	r3, r2
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	00da      	lsls	r2, r3, #3
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	4413      	add	r3, r2
 8004cba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	88db      	ldrh	r3, [r3, #6]
 8004cc4:	085b      	lsrs	r3, r3, #1
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	4413      	add	r3, r2
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	00da      	lsls	r2, r3, #3
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	4413      	add	r3, r2
 8004cee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004cf2:	623b      	str	r3, [r7, #32]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d112      	bne.n	8004d22 <USB_ActivateEndpoint+0x28a>
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	801a      	strh	r2, [r3, #0]
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	801a      	strh	r2, [r3, #0]
 8004d20:	e02f      	b.n	8004d82 <USB_ActivateEndpoint+0x2ea>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	2b3e      	cmp	r3, #62	; 0x3e
 8004d28:	d813      	bhi.n	8004d52 <USB_ActivateEndpoint+0x2ba>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	085b      	lsrs	r3, r3, #1
 8004d30:	663b      	str	r3, [r7, #96]	; 0x60
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <USB_ActivateEndpoint+0x2ac>
 8004d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d40:	3301      	adds	r3, #1
 8004d42:	663b      	str	r3, [r7, #96]	; 0x60
 8004d44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	029b      	lsls	r3, r3, #10
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	801a      	strh	r2, [r3, #0]
 8004d50:	e017      	b.n	8004d82 <USB_ActivateEndpoint+0x2ea>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	663b      	str	r3, [r7, #96]	; 0x60
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <USB_ActivateEndpoint+0x2d4>
 8004d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	029b      	lsls	r3, r3, #10
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	83fb      	strh	r3, [r7, #30]
 8004d90:	8bfb      	ldrh	r3, [r7, #30]
 8004d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d01b      	beq.n	8004dd2 <USB_ActivateEndpoint+0x33a>
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db0:	83bb      	strh	r3, [r7, #28]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	441a      	add	r2, r3
 8004dbc:	8bbb      	ldrh	r3, [r7, #28]
 8004dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de8:	837b      	strh	r3, [r7, #26]
 8004dea:	8b7b      	ldrh	r3, [r7, #26]
 8004dec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004df0:	837b      	strh	r3, [r7, #26]
 8004df2:	8b7b      	ldrh	r3, [r7, #26]
 8004df4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004df8:	837b      	strh	r3, [r7, #26]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	8b7b      	ldrh	r3, [r7, #26]
 8004e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]
 8004e1a:	e1a2      	b.n	8005162 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e32:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	441a      	add	r2, r3
 8004e40:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e68:	4413      	add	r3, r2
 8004e6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	00da      	lsls	r2, r3, #3
 8004e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	891b      	ldrh	r3, [r3, #8]
 8004e80:	085b      	lsrs	r3, r3, #1
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e8a:	801a      	strh	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9c:	4413      	add	r3, r2
 8004e9e:	653b      	str	r3, [r7, #80]	; 0x50
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	00da      	lsls	r2, r3, #3
 8004ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	895b      	ldrh	r3, [r3, #10]
 8004eb4:	085b      	lsrs	r3, r3, #1
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ebe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f040 8091 	bne.w	8004fec <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004ed8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01b      	beq.n	8004f1a <USB_ActivateEndpoint+0x482>
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	441a      	add	r2, r3
 8004f04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01b      	beq.n	8004f6a <USB_ActivateEndpoint+0x4d2>
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f48:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f80:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f88:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f90:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc8:	867b      	strh	r3, [r7, #50]	; 0x32
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	441a      	add	r2, r3
 8004fd4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8013      	strh	r3, [r2, #0]
 8004fea:	e0ba      	b.n	8005162 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ffc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01d      	beq.n	8005044 <USB_ActivateEndpoint+0x5ac>
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b29b      	uxth	r3, r3
 8005016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800503c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005040:	b29b      	uxth	r3, r3
 8005042:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005054:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01d      	beq.n	800509c <USB_ActivateEndpoint+0x604>
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005076:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	441a      	add	r2, r3
 8005084:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005094:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005098:	b29b      	uxth	r3, r3
 800509a:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	78db      	ldrb	r3, [r3, #3]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d024      	beq.n	80050ee <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80050be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80050c2:	f083 0320 	eor.w	r3, r3, #32
 80050c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	441a      	add	r2, r3
 80050d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80050d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	8013      	strh	r3, [r2, #0]
 80050ec:	e01d      	b.n	800512a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005104:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	441a      	add	r2, r3
 8005112:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005126:	b29b      	uxth	r3, r3
 8005128:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800513c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005140:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	441a      	add	r2, r3
 800514c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800514e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515e:	b29b      	uxth	r3, r3
 8005160:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005162:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005166:	4618      	mov	r0, r3
 8005168:	376c      	adds	r7, #108	; 0x6c
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop

08005174 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005174:	b480      	push	{r7}
 8005176:	b08d      	sub	sp, #52	; 0x34
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	7b1b      	ldrb	r3, [r3, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 808e 	bne.w	80052a4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	785b      	ldrb	r3, [r3, #1]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d044      	beq.n	800521a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	81bb      	strh	r3, [r7, #12]
 800519e:	89bb      	ldrh	r3, [r7, #12]
 80051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01b      	beq.n	80051e0 <USB_DeactivateEndpoint+0x6c>
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051be:	817b      	strh	r3, [r7, #10]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	441a      	add	r2, r3
 80051ca:	897b      	ldrh	r3, [r7, #10]
 80051cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051dc:	b29b      	uxth	r3, r3
 80051de:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f6:	813b      	strh	r3, [r7, #8]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	441a      	add	r2, r3
 8005202:	893b      	ldrh	r3, [r7, #8]
 8005204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005214:	b29b      	uxth	r3, r3
 8005216:	8013      	strh	r3, [r2, #0]
 8005218:	e192      	b.n	8005540 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	827b      	strh	r3, [r7, #18]
 8005228:	8a7b      	ldrh	r3, [r7, #18]
 800522a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d01b      	beq.n	800526a <USB_DeactivateEndpoint+0xf6>
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29b      	uxth	r3, r3
 8005240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005248:	823b      	strh	r3, [r7, #16]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	441a      	add	r2, r3
 8005254:	8a3b      	ldrh	r3, [r7, #16]
 8005256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800525e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005266:	b29b      	uxth	r3, r3
 8005268:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29b      	uxth	r3, r3
 8005278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800527c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005280:	81fb      	strh	r3, [r7, #14]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	441a      	add	r2, r3
 800528c:	89fb      	ldrh	r3, [r7, #14]
 800528e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529e:	b29b      	uxth	r3, r3
 80052a0:	8013      	strh	r3, [r2, #0]
 80052a2:	e14d      	b.n	8005540 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f040 80a5 	bne.w	80053f8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	843b      	strh	r3, [r7, #32]
 80052bc:	8c3b      	ldrh	r3, [r7, #32]
 80052be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01b      	beq.n	80052fe <USB_DeactivateEndpoint+0x18a>
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052dc:	83fb      	strh	r3, [r7, #30]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	8bfb      	ldrh	r3, [r7, #30]
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	83bb      	strh	r3, [r7, #28]
 800530c:	8bbb      	ldrh	r3, [r7, #28]
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01b      	beq.n	800534e <USB_DeactivateEndpoint+0x1da>
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532c:	837b      	strh	r3, [r7, #26]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	441a      	add	r2, r3
 8005338:	8b7b      	ldrh	r3, [r7, #26]
 800533a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005346:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800534a:	b29b      	uxth	r3, r3
 800534c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005364:	833b      	strh	r3, [r7, #24]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	441a      	add	r2, r3
 8005370:	8b3b      	ldrh	r3, [r7, #24]
 8005372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005382:	b29b      	uxth	r3, r3
 8005384:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539c:	82fb      	strh	r3, [r7, #22]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	441a      	add	r2, r3
 80053a8:	8afb      	ldrh	r3, [r7, #22]
 80053aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d4:	82bb      	strh	r3, [r7, #20]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	8abb      	ldrh	r3, [r7, #20]
 80053e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	8013      	strh	r3, [r2, #0]
 80053f6:	e0a3      	b.n	8005540 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005406:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01b      	beq.n	8005448 <USB_DeactivateEndpoint+0x2d4>
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	441a      	add	r2, r3
 8005432:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005444:	b29b      	uxth	r3, r3
 8005446:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005456:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01b      	beq.n	8005498 <USB_DeactivateEndpoint+0x324>
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	853b      	strh	r3, [r7, #40]	; 0x28
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	441a      	add	r2, r3
 8005482:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005490:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005494:	b29b      	uxth	r3, r3
 8005496:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	441a      	add	r2, r3
 80054ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	441a      	add	r2, r3
 80054f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005504:	b29b      	uxth	r3, r3
 8005506:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800551a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	441a      	add	r2, r3
 800552a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800552c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553c:	b29b      	uxth	r3, r3
 800553e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3734      	adds	r7, #52	; 0x34
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b0c4      	sub	sp, #272	; 0x110
 8005552:	af00      	add	r7, sp, #0
 8005554:	1d3b      	adds	r3, r7, #4
 8005556:	6018      	str	r0, [r3, #0]
 8005558:	463b      	mov	r3, r7
 800555a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b01      	cmp	r3, #1
 8005564:	f040 8566 	bne.w	8006034 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005568:	463b      	mov	r3, r7
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	463b      	mov	r3, r7
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	429a      	cmp	r2, r3
 8005576:	d905      	bls.n	8005584 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005578:	463b      	mov	r3, r7
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005582:	e004      	b.n	800558e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005584:	463b      	mov	r3, r7
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800558e:	463b      	mov	r3, r7
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	7b1b      	ldrb	r3, [r3, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d12c      	bne.n	80055f2 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005598:	463b      	mov	r3, r7
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6959      	ldr	r1, [r3, #20]
 800559e:	463b      	mov	r3, r7
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	88da      	ldrh	r2, [r3, #6]
 80055a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	1d38      	adds	r0, r7, #4
 80055ac:	6800      	ldr	r0, [r0, #0]
 80055ae:	f001 fa58 	bl	8006a62 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055b2:	1d3b      	adds	r3, r7, #4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	1d3b      	adds	r3, r7, #4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4413      	add	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	463b      	mov	r3, r7
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	00da      	lsls	r2, r3, #3
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	4413      	add	r3, r2
 80055d6:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80055da:	f107 0310 	add.w	r3, r7, #16
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	f107 0310 	add.w	r3, r7, #16
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	f000 bcec 	b.w	8005fca <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80055f2:	463b      	mov	r3, r7
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	78db      	ldrb	r3, [r3, #3]
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	f040 8356 	bne.w	8005caa <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80055fe:	463b      	mov	r3, r7
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6a1a      	ldr	r2, [r3, #32]
 8005604:	463b      	mov	r3, r7
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	429a      	cmp	r2, r3
 800560c:	f240 82fa 	bls.w	8005c04 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005610:	1d3b      	adds	r3, r7, #4
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	463b      	mov	r3, r7
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800562e:	1d3b      	adds	r3, r7, #4
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	463b      	mov	r3, r7
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	441a      	add	r2, r3
 800563c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005648:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800564c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005650:	b29b      	uxth	r3, r3
 8005652:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8005654:	463b      	mov	r3, r7
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800565e:	463b      	mov	r3, r7
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6a1a      	ldr	r2, [r3, #32]
 8005664:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005668:	1ad2      	subs	r2, r2, r3
 800566a:	463b      	mov	r3, r7
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005670:	1d3b      	adds	r3, r7, #4
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	463b      	mov	r3, r7
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 815e 	beq.w	8005948 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	637b      	str	r3, [r7, #52]	; 0x34
 8005692:	463b      	mov	r3, r7
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d164      	bne.n	8005766 <USB_EPStartXfer+0x218>
 800569c:	1d3b      	adds	r3, r7, #4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a2:	1d3b      	adds	r3, r7, #4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	4413      	add	r3, r2
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b4:	463b      	mov	r3, r7
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	00da      	lsls	r2, r3, #3
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056be:	4413      	add	r3, r2
 80056c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d112      	bne.n	80056f4 <USB_EPStartXfer+0x1a6>
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056d8:	b29a      	uxth	r2, r3
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	e054      	b.n	800579e <USB_EPStartXfer+0x250>
 80056f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056f8:	2b3e      	cmp	r3, #62	; 0x3e
 80056fa:	d817      	bhi.n	800572c <USB_EPStartXfer+0x1de>
 80056fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005700:	085b      	lsrs	r3, r3, #1
 8005702:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005706:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d004      	beq.n	800571c <USB_EPStartXfer+0x1ce>
 8005712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005716:	3301      	adds	r3, #1
 8005718:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800571c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005720:	b29b      	uxth	r3, r3
 8005722:	029b      	lsls	r3, r3, #10
 8005724:	b29a      	uxth	r2, r3
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	801a      	strh	r2, [r3, #0]
 800572a:	e038      	b.n	800579e <USB_EPStartXfer+0x250>
 800572c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005730:	095b      	lsrs	r3, r3, #5
 8005732:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005736:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <USB_EPStartXfer+0x1fe>
 8005742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005746:	3b01      	subs	r3, #1
 8005748:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800574c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005750:	b29b      	uxth	r3, r3
 8005752:	029b      	lsls	r3, r3, #10
 8005754:	b29b      	uxth	r3, r3
 8005756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800575a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800575e:	b29a      	uxth	r2, r3
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	801a      	strh	r2, [r3, #0]
 8005764:	e01b      	b.n	800579e <USB_EPStartXfer+0x250>
 8005766:	463b      	mov	r3, r7
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d116      	bne.n	800579e <USB_EPStartXfer+0x250>
 8005770:	1d3b      	adds	r3, r7, #4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005778:	b29b      	uxth	r3, r3
 800577a:	461a      	mov	r2, r3
 800577c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577e:	4413      	add	r3, r2
 8005780:	637b      	str	r3, [r7, #52]	; 0x34
 8005782:	463b      	mov	r3, r7
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	00da      	lsls	r2, r3, #3
 800578a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578c:	4413      	add	r3, r2
 800578e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005792:	633b      	str	r3, [r7, #48]	; 0x30
 8005794:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005798:	b29a      	uxth	r2, r3
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800579e:	463b      	mov	r3, r7
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	895b      	ldrh	r3, [r3, #10]
 80057a4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057a8:	463b      	mov	r3, r7
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6959      	ldr	r1, [r3, #20]
 80057ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80057b8:	1d38      	adds	r0, r7, #4
 80057ba:	6800      	ldr	r0, [r0, #0]
 80057bc:	f001 f951 	bl	8006a62 <USB_WritePMA>
            ep->xfer_buff += len;
 80057c0:	463b      	mov	r3, r7
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695a      	ldr	r2, [r3, #20]
 80057c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057ca:	441a      	add	r2, r3
 80057cc:	463b      	mov	r3, r7
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057d2:	463b      	mov	r3, r7
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6a1a      	ldr	r2, [r3, #32]
 80057d8:	463b      	mov	r3, r7
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d90e      	bls.n	8005800 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80057e2:	463b      	mov	r3, r7
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80057ec:	463b      	mov	r3, r7
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a1a      	ldr	r2, [r3, #32]
 80057f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057f6:	1ad2      	subs	r2, r2, r3
 80057f8:	463b      	mov	r3, r7
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	621a      	str	r2, [r3, #32]
 80057fe:	e008      	b.n	8005812 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005800:	463b      	mov	r3, r7
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800580a:	463b      	mov	r3, r7
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2200      	movs	r2, #0
 8005810:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005812:	463b      	mov	r3, r7
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d164      	bne.n	80058e6 <USB_EPStartXfer+0x398>
 800581c:	1d3b      	adds	r3, r7, #4
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	1d3b      	adds	r3, r7, #4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800582a:	b29b      	uxth	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	4413      	add	r3, r2
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	463b      	mov	r3, r7
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	00da      	lsls	r2, r3, #3
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	4413      	add	r3, r2
 8005840:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800584a:	2b00      	cmp	r3, #0
 800584c:	d112      	bne.n	8005874 <USB_EPStartXfer+0x326>
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005858:	b29a      	uxth	r2, r3
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586c:	b29a      	uxth	r2, r3
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	e057      	b.n	8005924 <USB_EPStartXfer+0x3d6>
 8005874:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005878:	2b3e      	cmp	r3, #62	; 0x3e
 800587a:	d817      	bhi.n	80058ac <USB_EPStartXfer+0x35e>
 800587c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005886:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <USB_EPStartXfer+0x34e>
 8005892:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005896:	3301      	adds	r3, #1
 8005898:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800589c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	029b      	lsls	r3, r3, #10
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	e03b      	b.n	8005924 <USB_EPStartXfer+0x3d6>
 80058ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d104      	bne.n	80058cc <USB_EPStartXfer+0x37e>
 80058c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058c6:	3b01      	subs	r3, #1
 80058c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	029b      	lsls	r3, r3, #10
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058de:	b29a      	uxth	r2, r3
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	e01e      	b.n	8005924 <USB_EPStartXfer+0x3d6>
 80058e6:	463b      	mov	r3, r7
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	785b      	ldrb	r3, [r3, #1]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d119      	bne.n	8005924 <USB_EPStartXfer+0x3d6>
 80058f0:	1d3b      	adds	r3, r7, #4
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
 80058f6:	1d3b      	adds	r3, r7, #4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058fe:	b29b      	uxth	r3, r3
 8005900:	461a      	mov	r2, r3
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	4413      	add	r3, r2
 8005906:	627b      	str	r3, [r7, #36]	; 0x24
 8005908:	463b      	mov	r3, r7
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	00da      	lsls	r2, r3, #3
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	4413      	add	r3, r2
 8005914:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005918:	623b      	str	r3, [r7, #32]
 800591a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800591e:	b29a      	uxth	r2, r3
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005924:	463b      	mov	r3, r7
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	891b      	ldrh	r3, [r3, #8]
 800592a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800592e:	463b      	mov	r3, r7
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6959      	ldr	r1, [r3, #20]
 8005934:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005938:	b29b      	uxth	r3, r3
 800593a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800593e:	1d38      	adds	r0, r7, #4
 8005940:	6800      	ldr	r0, [r0, #0]
 8005942:	f001 f88e 	bl	8006a62 <USB_WritePMA>
 8005946:	e340      	b.n	8005fca <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005948:	463b      	mov	r3, r7
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d164      	bne.n	8005a1c <USB_EPStartXfer+0x4ce>
 8005952:	1d3b      	adds	r3, r7, #4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005958:	1d3b      	adds	r3, r7, #4
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005960:	b29b      	uxth	r3, r3
 8005962:	461a      	mov	r2, r3
 8005964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005966:	4413      	add	r3, r2
 8005968:	64fb      	str	r3, [r7, #76]	; 0x4c
 800596a:	463b      	mov	r3, r7
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	00da      	lsls	r2, r3, #3
 8005972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005974:	4413      	add	r3, r2
 8005976:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800597a:	64bb      	str	r3, [r7, #72]	; 0x48
 800597c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005980:	2b00      	cmp	r3, #0
 8005982:	d112      	bne.n	80059aa <USB_EPStartXfer+0x45c>
 8005984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800598e:	b29a      	uxth	r2, r3
 8005990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800599e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a6:	801a      	strh	r2, [r3, #0]
 80059a8:	e057      	b.n	8005a5a <USB_EPStartXfer+0x50c>
 80059aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059ae:	2b3e      	cmp	r3, #62	; 0x3e
 80059b0:	d817      	bhi.n	80059e2 <USB_EPStartXfer+0x494>
 80059b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d004      	beq.n	80059d2 <USB_EPStartXfer+0x484>
 80059c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059cc:	3301      	adds	r3, #1
 80059ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	029b      	lsls	r3, r3, #10
 80059da:	b29a      	uxth	r2, r3
 80059dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	e03b      	b.n	8005a5a <USB_EPStartXfer+0x50c>
 80059e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d104      	bne.n	8005a02 <USB_EPStartXfer+0x4b4>
 80059f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059fc:	3b01      	subs	r3, #1
 80059fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	029b      	lsls	r3, r3, #10
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	e01e      	b.n	8005a5a <USB_EPStartXfer+0x50c>
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d119      	bne.n	8005a5a <USB_EPStartXfer+0x50c>
 8005a26:	1d3b      	adds	r3, r7, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a2c:	1d3b      	adds	r3, r7, #4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a3a:	4413      	add	r3, r2
 8005a3c:	657b      	str	r3, [r7, #84]	; 0x54
 8005a3e:	463b      	mov	r3, r7
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	00da      	lsls	r2, r3, #3
 8005a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a48:	4413      	add	r3, r2
 8005a4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	891b      	ldrh	r3, [r3, #8]
 8005a60:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a64:	463b      	mov	r3, r7
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6959      	ldr	r1, [r3, #20]
 8005a6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005a74:	1d38      	adds	r0, r7, #4
 8005a76:	6800      	ldr	r0, [r0, #0]
 8005a78:	f000 fff3 	bl	8006a62 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a86:	441a      	add	r2, r3
 8005a88:	463b      	mov	r3, r7
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a8e:	463b      	mov	r3, r7
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6a1a      	ldr	r2, [r3, #32]
 8005a94:	463b      	mov	r3, r7
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d90e      	bls.n	8005abc <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005a9e:	463b      	mov	r3, r7
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6a1a      	ldr	r2, [r3, #32]
 8005aae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ab2:	1ad2      	subs	r2, r2, r3
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	621a      	str	r2, [r3, #32]
 8005aba:	e008      	b.n	8005ace <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005abc:	463b      	mov	r3, r7
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ace:	1d3b      	adds	r3, r7, #4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d164      	bne.n	8005ba8 <USB_EPStartXfer+0x65a>
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae4:	1d3b      	adds	r3, r7, #4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af2:	4413      	add	r3, r2
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af6:	463b      	mov	r3, r7
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	00da      	lsls	r2, r3, #3
 8005afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b00:	4413      	add	r3, r2
 8005b02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d112      	bne.n	8005b36 <USB_EPStartXfer+0x5e8>
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	801a      	strh	r2, [r3, #0]
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	801a      	strh	r2, [r3, #0]
 8005b34:	e054      	b.n	8005be0 <USB_EPStartXfer+0x692>
 8005b36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b3c:	d817      	bhi.n	8005b6e <USB_EPStartXfer+0x620>
 8005b3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <USB_EPStartXfer+0x610>
 8005b54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b58:	3301      	adds	r3, #1
 8005b5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	029b      	lsls	r3, r3, #10
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	801a      	strh	r2, [r3, #0]
 8005b6c:	e038      	b.n	8005be0 <USB_EPStartXfer+0x692>
 8005b6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b7c:	f003 031f 	and.w	r3, r3, #31
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <USB_EPStartXfer+0x640>
 8005b84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	029b      	lsls	r3, r3, #10
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e01b      	b.n	8005be0 <USB_EPStartXfer+0x692>
 8005ba8:	463b      	mov	r3, r7
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d116      	bne.n	8005be0 <USB_EPStartXfer+0x692>
 8005bb2:	1d3b      	adds	r3, r7, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc0:	4413      	add	r3, r2
 8005bc2:	647b      	str	r3, [r7, #68]	; 0x44
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	00da      	lsls	r2, r3, #3
 8005bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bce:	4413      	add	r3, r2
 8005bd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bd4:	643b      	str	r3, [r7, #64]	; 0x40
 8005bd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bde:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005be0:	463b      	mov	r3, r7
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	895b      	ldrh	r3, [r3, #10]
 8005be6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bea:	463b      	mov	r3, r7
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6959      	ldr	r1, [r3, #20]
 8005bf0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005bfa:	1d38      	adds	r0, r7, #4
 8005bfc:	6800      	ldr	r0, [r0, #0]
 8005bfe:	f000 ff30 	bl	8006a62 <USB_WritePMA>
 8005c02:	e1e2      	b.n	8005fca <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005c04:	463b      	mov	r3, r7
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005c0e:	1d3b      	adds	r3, r7, #4
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	463b      	mov	r3, r7
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c28:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005c2c:	1d3b      	adds	r3, r7, #4
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	463b      	mov	r3, r7
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	441a      	add	r2, r3
 8005c3a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c52:	1d3b      	adds	r3, r7, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	663b      	str	r3, [r7, #96]	; 0x60
 8005c58:	1d3b      	adds	r3, r7, #4
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c66:	4413      	add	r3, r2
 8005c68:	663b      	str	r3, [r7, #96]	; 0x60
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	00da      	lsls	r2, r3, #3
 8005c72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c74:	4413      	add	r3, r2
 8005c76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c84:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c86:	463b      	mov	r3, r7
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	891b      	ldrh	r3, [r3, #8]
 8005c8c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c90:	463b      	mov	r3, r7
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6959      	ldr	r1, [r3, #20]
 8005c96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005ca0:	1d38      	adds	r0, r7, #4
 8005ca2:	6800      	ldr	r0, [r0, #0]
 8005ca4:	f000 fedd 	bl	8006a62 <USB_WritePMA>
 8005ca8:	e18f      	b.n	8005fca <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005caa:	1d3b      	adds	r3, r7, #4
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	463b      	mov	r3, r7
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 808f 	beq.w	8005de4 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cc6:	1d3b      	adds	r3, r7, #4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ccc:	463b      	mov	r3, r7
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d164      	bne.n	8005da0 <USB_EPStartXfer+0x852>
 8005cd6:	1d3b      	adds	r3, r7, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	673b      	str	r3, [r7, #112]	; 0x70
 8005cdc:	1d3b      	adds	r3, r7, #4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cea:	4413      	add	r3, r2
 8005cec:	673b      	str	r3, [r7, #112]	; 0x70
 8005cee:	463b      	mov	r3, r7
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	00da      	lsls	r2, r3, #3
 8005cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d112      	bne.n	8005d2e <USB_EPStartXfer+0x7e0>
 8005d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d16:	801a      	strh	r2, [r3, #0]
 8005d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2a:	801a      	strh	r2, [r3, #0]
 8005d2c:	e054      	b.n	8005dd8 <USB_EPStartXfer+0x88a>
 8005d2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d32:	2b3e      	cmp	r3, #62	; 0x3e
 8005d34:	d817      	bhi.n	8005d66 <USB_EPStartXfer+0x818>
 8005d36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d3a:	085b      	lsrs	r3, r3, #1
 8005d3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d004      	beq.n	8005d56 <USB_EPStartXfer+0x808>
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d50:	3301      	adds	r3, #1
 8005d52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	029b      	lsls	r3, r3, #10
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	e038      	b.n	8005dd8 <USB_EPStartXfer+0x88a>
 8005d66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <USB_EPStartXfer+0x838>
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d80:	3b01      	subs	r3, #1
 8005d82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	029b      	lsls	r3, r3, #10
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9c:	801a      	strh	r2, [r3, #0]
 8005d9e:	e01b      	b.n	8005dd8 <USB_EPStartXfer+0x88a>
 8005da0:	463b      	mov	r3, r7
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d116      	bne.n	8005dd8 <USB_EPStartXfer+0x88a>
 8005daa:	1d3b      	adds	r3, r7, #4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005db8:	4413      	add	r3, r2
 8005dba:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	00da      	lsls	r2, r3, #3
 8005dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dcc:	677b      	str	r3, [r7, #116]	; 0x74
 8005dce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005dd8:	463b      	mov	r3, r7
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	895b      	ldrh	r3, [r3, #10]
 8005dde:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005de2:	e097      	b.n	8005f14 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005de4:	463b      	mov	r3, r7
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	785b      	ldrb	r3, [r3, #1]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d168      	bne.n	8005ec0 <USB_EPStartXfer+0x972>
 8005dee:	1d3b      	adds	r3, r7, #4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005df6:	1d3b      	adds	r3, r7, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e06:	4413      	add	r3, r2
 8005e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	00da      	lsls	r2, r3, #3
 8005e14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e18:	4413      	add	r3, r2
 8005e1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d112      	bne.n	8005e4e <USB_EPStartXfer+0x900>
 8005e28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e4a:	801a      	strh	r2, [r3, #0]
 8005e4c:	e05d      	b.n	8005f0a <USB_EPStartXfer+0x9bc>
 8005e4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e52:	2b3e      	cmp	r3, #62	; 0x3e
 8005e54:	d817      	bhi.n	8005e86 <USB_EPStartXfer+0x938>
 8005e56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d004      	beq.n	8005e76 <USB_EPStartXfer+0x928>
 8005e6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e70:	3301      	adds	r3, #1
 8005e72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	029b      	lsls	r3, r3, #10
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e82:	801a      	strh	r2, [r3, #0]
 8005e84:	e041      	b.n	8005f0a <USB_EPStartXfer+0x9bc>
 8005e86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d104      	bne.n	8005ea6 <USB_EPStartXfer+0x958>
 8005e9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ea6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	029b      	lsls	r3, r3, #10
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ebc:	801a      	strh	r2, [r3, #0]
 8005ebe:	e024      	b.n	8005f0a <USB_EPStartXfer+0x9bc>
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d11f      	bne.n	8005f0a <USB_EPStartXfer+0x9bc>
 8005eca:	1d3b      	adds	r3, r7, #4
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ed2:	1d3b      	adds	r3, r7, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ee8:	463b      	mov	r3, r7
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	00da      	lsls	r2, r3, #3
 8005ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005efa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005efe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	891b      	ldrh	r3, [r3, #8]
 8005f10:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f14:	463b      	mov	r3, r7
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6959      	ldr	r1, [r3, #20]
 8005f1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005f24:	1d38      	adds	r0, r7, #4
 8005f26:	6800      	ldr	r0, [r0, #0]
 8005f28:	f000 fd9b 	bl	8006a62 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d122      	bne.n	8005f7c <USB_EPStartXfer+0xa2e>
 8005f36:	1d3b      	adds	r3, r7, #4
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f50:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005f54:	1d3b      	adds	r3, r7, #4
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	463b      	mov	r3, r7
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	441a      	add	r2, r3
 8005f62:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	8013      	strh	r3, [r2, #0]
 8005f7a:	e026      	b.n	8005fca <USB_EPStartXfer+0xa7c>
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	785b      	ldrb	r3, [r3, #1]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d121      	bne.n	8005fca <USB_EPStartXfer+0xa7c>
 8005f86:	1d3b      	adds	r3, r7, #4
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005fa4:	1d3b      	adds	r3, r7, #4
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	463b      	mov	r3, r7
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005fca:	1d3b      	adds	r3, r7, #4
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	463b      	mov	r3, r7
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	f107 020e 	add.w	r2, r7, #14
 8005fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe8:	8013      	strh	r3, [r2, #0]
 8005fea:	f107 030e 	add.w	r3, r7, #14
 8005fee:	f107 020e 	add.w	r2, r7, #14
 8005ff2:	8812      	ldrh	r2, [r2, #0]
 8005ff4:	f082 0210 	eor.w	r2, r2, #16
 8005ff8:	801a      	strh	r2, [r3, #0]
 8005ffa:	f107 030e 	add.w	r3, r7, #14
 8005ffe:	f107 020e 	add.w	r2, r7, #14
 8006002:	8812      	ldrh	r2, [r2, #0]
 8006004:	f082 0220 	eor.w	r2, r2, #32
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	1d3b      	adds	r3, r7, #4
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	463b      	mov	r3, r7
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	441a      	add	r2, r3
 8006018:	f107 030e 	add.w	r3, r7, #14
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602e:	b29b      	uxth	r3, r3
 8006030:	8013      	strh	r3, [r2, #0]
 8006032:	e3b5      	b.n	80067a0 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006034:	463b      	mov	r3, r7
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	7b1b      	ldrb	r3, [r3, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f040 8090 	bne.w	8006160 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006040:	463b      	mov	r3, r7
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	463b      	mov	r3, r7
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	429a      	cmp	r2, r3
 800604e:	d90e      	bls.n	800606e <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006050:	463b      	mov	r3, r7
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800605a:	463b      	mov	r3, r7
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006064:	1ad2      	subs	r2, r2, r3
 8006066:	463b      	mov	r3, r7
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	619a      	str	r2, [r3, #24]
 800606c:	e008      	b.n	8006080 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800606e:	463b      	mov	r3, r7
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006078:	463b      	mov	r3, r7
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2200      	movs	r2, #0
 800607e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006080:	1d3b      	adds	r3, r7, #4
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006088:	1d3b      	adds	r3, r7, #4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006090:	b29b      	uxth	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006098:	4413      	add	r3, r2
 800609a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800609e:	463b      	mov	r3, r7
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	00da      	lsls	r2, r3, #3
 80060a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060aa:	4413      	add	r3, r2
 80060ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d116      	bne.n	80060ea <USB_EPStartXfer+0xb9c>
 80060bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060ce:	801a      	strh	r2, [r3, #0]
 80060d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060e6:	801a      	strh	r2, [r3, #0]
 80060e8:	e32c      	b.n	8006744 <USB_EPStartXfer+0x11f6>
 80060ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060ee:	2b3e      	cmp	r3, #62	; 0x3e
 80060f0:	d818      	bhi.n	8006124 <USB_EPStartXfer+0xbd6>
 80060f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060f6:	085b      	lsrs	r3, r3, #1
 80060f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d004      	beq.n	8006112 <USB_EPStartXfer+0xbc4>
 8006108:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800610c:	3301      	adds	r3, #1
 800610e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006112:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006116:	b29b      	uxth	r3, r3
 8006118:	029b      	lsls	r3, r3, #10
 800611a:	b29a      	uxth	r2, r3
 800611c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	e30f      	b.n	8006744 <USB_EPStartXfer+0x11f6>
 8006124:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800612e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	2b00      	cmp	r3, #0
 8006138:	d104      	bne.n	8006144 <USB_EPStartXfer+0xbf6>
 800613a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800613e:	3b01      	subs	r3, #1
 8006140:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006144:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006148:	b29b      	uxth	r3, r3
 800614a:	029b      	lsls	r3, r3, #10
 800614c:	b29b      	uxth	r3, r3
 800614e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006156:	b29a      	uxth	r2, r3
 8006158:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	e2f1      	b.n	8006744 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006160:	463b      	mov	r3, r7
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	78db      	ldrb	r3, [r3, #3]
 8006166:	2b02      	cmp	r3, #2
 8006168:	f040 818f 	bne.w	800648a <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800616c:	463b      	mov	r3, r7
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	785b      	ldrb	r3, [r3, #1]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d175      	bne.n	8006262 <USB_EPStartXfer+0xd14>
 8006176:	1d3b      	adds	r3, r7, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800617e:	1d3b      	adds	r3, r7, #4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006186:	b29b      	uxth	r3, r3
 8006188:	461a      	mov	r2, r3
 800618a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800618e:	4413      	add	r3, r2
 8006190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006194:	463b      	mov	r3, r7
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	00da      	lsls	r2, r3, #3
 800619c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061a0:	4413      	add	r3, r2
 80061a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061aa:	463b      	mov	r3, r7
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d116      	bne.n	80061e2 <USB_EPStartXfer+0xc94>
 80061b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d8:	b29a      	uxth	r2, r3
 80061da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	e065      	b.n	80062ae <USB_EPStartXfer+0xd60>
 80061e2:	463b      	mov	r3, r7
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b3e      	cmp	r3, #62	; 0x3e
 80061ea:	d81a      	bhi.n	8006222 <USB_EPStartXfer+0xcd4>
 80061ec:	463b      	mov	r3, r7
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061f8:	463b      	mov	r3, r7
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d004      	beq.n	8006210 <USB_EPStartXfer+0xcc2>
 8006206:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800620a:	3301      	adds	r3, #1
 800620c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006210:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006214:	b29b      	uxth	r3, r3
 8006216:	029b      	lsls	r3, r3, #10
 8006218:	b29a      	uxth	r2, r3
 800621a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800621e:	801a      	strh	r2, [r3, #0]
 8006220:	e045      	b.n	80062ae <USB_EPStartXfer+0xd60>
 8006222:	463b      	mov	r3, r7
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800622e:	463b      	mov	r3, r7
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f003 031f 	and.w	r3, r3, #31
 8006238:	2b00      	cmp	r3, #0
 800623a:	d104      	bne.n	8006246 <USB_EPStartXfer+0xcf8>
 800623c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006240:	3b01      	subs	r3, #1
 8006242:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006246:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800624a:	b29b      	uxth	r3, r3
 800624c:	029b      	lsls	r3, r3, #10
 800624e:	b29b      	uxth	r3, r3
 8006250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006258:	b29a      	uxth	r2, r3
 800625a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800625e:	801a      	strh	r2, [r3, #0]
 8006260:	e025      	b.n	80062ae <USB_EPStartXfer+0xd60>
 8006262:	463b      	mov	r3, r7
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d120      	bne.n	80062ae <USB_EPStartXfer+0xd60>
 800626c:	1d3b      	adds	r3, r7, #4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800627c:	b29b      	uxth	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006284:	4413      	add	r3, r2
 8006286:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800628a:	463b      	mov	r3, r7
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	00da      	lsls	r2, r3, #3
 8006292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006296:	4413      	add	r3, r2
 8006298:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800629c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062a0:	463b      	mov	r3, r7
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	1d3b      	adds	r3, r7, #4
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062b6:	463b      	mov	r3, r7
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d175      	bne.n	80063ac <USB_EPStartXfer+0xe5e>
 80062c0:	1d3b      	adds	r3, r7, #4
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062c8:	1d3b      	adds	r3, r7, #4
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062d8:	4413      	add	r3, r2
 80062da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062de:	463b      	mov	r3, r7
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	00da      	lsls	r2, r3, #3
 80062e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062ea:	4413      	add	r3, r2
 80062ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062f4:	463b      	mov	r3, r7
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d116      	bne.n	800632c <USB_EPStartXfer+0xdde>
 80062fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800630a:	b29a      	uxth	r2, r3
 800630c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006310:	801a      	strh	r2, [r3, #0]
 8006312:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b29b      	uxth	r3, r3
 800631a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006322:	b29a      	uxth	r2, r3
 8006324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006328:	801a      	strh	r2, [r3, #0]
 800632a:	e061      	b.n	80063f0 <USB_EPStartXfer+0xea2>
 800632c:	463b      	mov	r3, r7
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b3e      	cmp	r3, #62	; 0x3e
 8006334:	d81a      	bhi.n	800636c <USB_EPStartXfer+0xe1e>
 8006336:	463b      	mov	r3, r7
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006342:	463b      	mov	r3, r7
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <USB_EPStartXfer+0xe0c>
 8006350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006354:	3301      	adds	r3, #1
 8006356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800635a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635e:	b29b      	uxth	r3, r3
 8006360:	029b      	lsls	r3, r3, #10
 8006362:	b29a      	uxth	r2, r3
 8006364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006368:	801a      	strh	r2, [r3, #0]
 800636a:	e041      	b.n	80063f0 <USB_EPStartXfer+0xea2>
 800636c:	463b      	mov	r3, r7
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006378:	463b      	mov	r3, r7
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	2b00      	cmp	r3, #0
 8006384:	d104      	bne.n	8006390 <USB_EPStartXfer+0xe42>
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638a:	3b01      	subs	r3, #1
 800638c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006394:	b29b      	uxth	r3, r3
 8006396:	029b      	lsls	r3, r3, #10
 8006398:	b29b      	uxth	r3, r3
 800639a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800639e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063a8:	801a      	strh	r2, [r3, #0]
 80063aa:	e021      	b.n	80063f0 <USB_EPStartXfer+0xea2>
 80063ac:	463b      	mov	r3, r7
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d11c      	bne.n	80063f0 <USB_EPStartXfer+0xea2>
 80063b6:	1d3b      	adds	r3, r7, #4
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063be:	b29b      	uxth	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063c6:	4413      	add	r3, r2
 80063c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063cc:	463b      	mov	r3, r7
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	00da      	lsls	r2, r3, #3
 80063d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063d8:	4413      	add	r3, r2
 80063da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063e2:	463b      	mov	r3, r7
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063ee:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80063f0:	463b      	mov	r3, r7
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 81a4 	beq.w	8006744 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063fc:	1d3b      	adds	r3, r7, #4
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	463b      	mov	r3, r7
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006410:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <USB_EPStartXfer+0xeda>
 800641c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10d      	bne.n	8006444 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006428:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800642c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006430:	2b00      	cmp	r3, #0
 8006432:	f040 8187 	bne.w	8006744 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006436:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	f040 8180 	bne.w	8006744 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006444:	1d3b      	adds	r3, r7, #4
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	463b      	mov	r3, r7
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006462:	1d3b      	adds	r3, r7, #4
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	463b      	mov	r3, r7
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	441a      	add	r2, r3
 8006470:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006480:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006484:	b29b      	uxth	r3, r3
 8006486:	8013      	strh	r3, [r2, #0]
 8006488:	e15c      	b.n	8006744 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800648a:	463b      	mov	r3, r7
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	78db      	ldrb	r3, [r3, #3]
 8006490:	2b01      	cmp	r3, #1
 8006492:	f040 8155 	bne.w	8006740 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8006496:	463b      	mov	r3, r7
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	699a      	ldr	r2, [r3, #24]
 800649c:	463b      	mov	r3, r7
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d90e      	bls.n	80064c4 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80064a6:	463b      	mov	r3, r7
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80064b0:	463b      	mov	r3, r7
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ba:	1ad2      	subs	r2, r2, r3
 80064bc:	463b      	mov	r3, r7
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	619a      	str	r2, [r3, #24]
 80064c2:	e008      	b.n	80064d6 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80064c4:	463b      	mov	r3, r7
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80064ce:	463b      	mov	r3, r7
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2200      	movs	r2, #0
 80064d4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064d6:	463b      	mov	r3, r7
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	785b      	ldrb	r3, [r3, #1]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d16f      	bne.n	80065c0 <USB_EPStartXfer+0x1072>
 80064e0:	1d3b      	adds	r3, r7, #4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064e8:	1d3b      	adds	r3, r7, #4
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	461a      	mov	r2, r3
 80064f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80064f8:	4413      	add	r3, r2
 80064fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064fe:	463b      	mov	r3, r7
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	00da      	lsls	r2, r3, #3
 8006506:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800650a:	4413      	add	r3, r2
 800650c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006514:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006518:	2b00      	cmp	r3, #0
 800651a:	d116      	bne.n	800654a <USB_EPStartXfer+0xffc>
 800651c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006528:	b29a      	uxth	r2, r3
 800652a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006540:	b29a      	uxth	r2, r3
 8006542:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006546:	801a      	strh	r2, [r3, #0]
 8006548:	e05f      	b.n	800660a <USB_EPStartXfer+0x10bc>
 800654a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800654e:	2b3e      	cmp	r3, #62	; 0x3e
 8006550:	d818      	bhi.n	8006584 <USB_EPStartXfer+0x1036>
 8006552:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006556:	085b      	lsrs	r3, r3, #1
 8006558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800655c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <USB_EPStartXfer+0x1024>
 8006568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656c:	3301      	adds	r3, #1
 800656e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006576:	b29b      	uxth	r3, r3
 8006578:	029b      	lsls	r3, r3, #10
 800657a:	b29a      	uxth	r2, r3
 800657c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006580:	801a      	strh	r2, [r3, #0]
 8006582:	e042      	b.n	800660a <USB_EPStartXfer+0x10bc>
 8006584:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006588:	095b      	lsrs	r3, r3, #5
 800658a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800658e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <USB_EPStartXfer+0x1056>
 800659a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659e:	3b01      	subs	r3, #1
 80065a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	029b      	lsls	r3, r3, #10
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	e024      	b.n	800660a <USB_EPStartXfer+0x10bc>
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d11f      	bne.n	800660a <USB_EPStartXfer+0x10bc>
 80065ca:	1d3b      	adds	r3, r7, #4
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065d2:	1d3b      	adds	r3, r7, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065e2:	4413      	add	r3, r2
 80065e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065e8:	463b      	mov	r3, r7
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	00da      	lsls	r2, r3, #3
 80065f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065f4:	4413      	add	r3, r2
 80065f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006602:	b29a      	uxth	r2, r3
 8006604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	1d3b      	adds	r3, r7, #4
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006612:	463b      	mov	r3, r7
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	785b      	ldrb	r3, [r3, #1]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d16f      	bne.n	80066fc <USB_EPStartXfer+0x11ae>
 800661c:	1d3b      	adds	r3, r7, #4
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006624:	1d3b      	adds	r3, r7, #4
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662c:	b29b      	uxth	r3, r3
 800662e:	461a      	mov	r2, r3
 8006630:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006634:	4413      	add	r3, r2
 8006636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800663a:	463b      	mov	r3, r7
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	00da      	lsls	r2, r3, #3
 8006642:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006646:	4413      	add	r3, r2
 8006648:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800664c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006650:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006654:	2b00      	cmp	r3, #0
 8006656:	d116      	bne.n	8006686 <USB_EPStartXfer+0x1138>
 8006658:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006664:	b29a      	uxth	r2, r3
 8006666:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800666a:	801a      	strh	r2, [r3, #0]
 800666c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667c:	b29a      	uxth	r2, r3
 800667e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	e05e      	b.n	8006744 <USB_EPStartXfer+0x11f6>
 8006686:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800668a:	2b3e      	cmp	r3, #62	; 0x3e
 800668c:	d818      	bhi.n	80066c0 <USB_EPStartXfer+0x1172>
 800668e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006698:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <USB_EPStartXfer+0x1160>
 80066a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066a8:	3301      	adds	r3, #1
 80066aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	029b      	lsls	r3, r3, #10
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066bc:	801a      	strh	r2, [r3, #0]
 80066be:	e041      	b.n	8006744 <USB_EPStartXfer+0x11f6>
 80066c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <USB_EPStartXfer+0x1192>
 80066d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066da:	3b01      	subs	r3, #1
 80066dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	029b      	lsls	r3, r3, #10
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066f8:	801a      	strh	r2, [r3, #0]
 80066fa:	e023      	b.n	8006744 <USB_EPStartXfer+0x11f6>
 80066fc:	463b      	mov	r3, r7
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	785b      	ldrb	r3, [r3, #1]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d11e      	bne.n	8006744 <USB_EPStartXfer+0x11f6>
 8006706:	1d3b      	adds	r3, r7, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670e:	b29b      	uxth	r3, r3
 8006710:	461a      	mov	r2, r3
 8006712:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006716:	4413      	add	r3, r2
 8006718:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800671c:	463b      	mov	r3, r7
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	00da      	lsls	r2, r3, #3
 8006724:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006728:	4413      	add	r3, r2
 800672a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800672e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006732:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006736:	b29a      	uxth	r2, r3
 8006738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800673c:	801a      	strh	r2, [r3, #0]
 800673e:	e001      	b.n	8006744 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e02e      	b.n	80067a2 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006744:	1d3b      	adds	r3, r7, #4
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	463b      	mov	r3, r7
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800675a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006762:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006766:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800676a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800676e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006772:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006776:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	463b      	mov	r3, r7
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	441a      	add	r2, r3
 8006788:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800678c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679c:	b29b      	uxth	r3, r3
 800679e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d020      	beq.n	8006800 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d4:	81bb      	strh	r3, [r7, #12]
 80067d6:	89bb      	ldrh	r3, [r7, #12]
 80067d8:	f083 0310 	eor.w	r3, r3, #16
 80067dc:	81bb      	strh	r3, [r7, #12]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	441a      	add	r2, r3
 80067e8:	89bb      	ldrh	r3, [r7, #12]
 80067ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	8013      	strh	r3, [r2, #0]
 80067fe:	e01f      	b.n	8006840 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006816:	81fb      	strh	r3, [r7, #14]
 8006818:	89fb      	ldrh	r3, [r7, #14]
 800681a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800681e:	81fb      	strh	r3, [r7, #14]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	441a      	add	r2, r3
 800682a:	89fb      	ldrh	r3, [r7, #14]
 800682c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683c:	b29b      	uxth	r3, r3
 800683e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800684e:	b480      	push	{r7}
 8006850:	b087      	sub	sp, #28
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	7b1b      	ldrb	r3, [r3, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	f040 809d 	bne.w	800699c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	785b      	ldrb	r3, [r3, #1]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d04c      	beq.n	8006904 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	823b      	strh	r3, [r7, #16]
 8006878:	8a3b      	ldrh	r3, [r7, #16]
 800687a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01b      	beq.n	80068ba <USB_EPClearStall+0x6c>
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006898:	81fb      	strh	r3, [r7, #14]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	441a      	add	r2, r3
 80068a4:	89fb      	ldrh	r3, [r7, #14]
 80068a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	78db      	ldrb	r3, [r3, #3]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d06c      	beq.n	800699c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d8:	81bb      	strh	r3, [r7, #12]
 80068da:	89bb      	ldrh	r3, [r7, #12]
 80068dc:	f083 0320 	eor.w	r3, r3, #32
 80068e0:	81bb      	strh	r3, [r7, #12]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	441a      	add	r2, r3
 80068ec:	89bb      	ldrh	r3, [r7, #12]
 80068ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fe:	b29b      	uxth	r3, r3
 8006900:	8013      	strh	r3, [r2, #0]
 8006902:	e04b      	b.n	800699c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	82fb      	strh	r3, [r7, #22]
 8006912:	8afb      	ldrh	r3, [r7, #22]
 8006914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01b      	beq.n	8006954 <USB_EPClearStall+0x106>
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006932:	82bb      	strh	r3, [r7, #20]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	441a      	add	r2, r3
 800693e:	8abb      	ldrh	r3, [r7, #20]
 8006940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800694c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006950:	b29b      	uxth	r3, r3
 8006952:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	b29b      	uxth	r3, r3
 8006962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696a:	827b      	strh	r3, [r7, #18]
 800696c:	8a7b      	ldrh	r3, [r7, #18]
 800696e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006972:	827b      	strh	r3, [r7, #18]
 8006974:	8a7b      	ldrh	r3, [r7, #18]
 8006976:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800697a:	827b      	strh	r3, [r7, #18]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	441a      	add	r2, r3
 8006986:	8a7b      	ldrh	r3, [r7, #18]
 8006988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006998:	b29b      	uxth	r3, r3
 800699a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80069b6:	78fb      	ldrb	r3, [r7, #3]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d103      	bne.n	80069c4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2280      	movs	r2, #128	; 0x80
 80069c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b085      	sub	sp, #20
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b08d      	sub	sp, #52	; 0x34
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	461a      	mov	r2, r3
 8006a70:	460b      	mov	r3, r1
 8006a72:	80fb      	strh	r3, [r7, #6]
 8006a74:	4613      	mov	r3, r2
 8006a76:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a78:	88bb      	ldrh	r3, [r7, #4]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	085b      	lsrs	r3, r3, #1
 8006a7e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a88:	88fa      	ldrh	r2, [r7, #6]
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a92:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a98:	e01b      	b.n	8006ad2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	021b      	lsls	r3, r3, #8
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	3302      	adds	r3, #2
 8006ac4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	3301      	adds	r3, #1
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e0      	bne.n	8006a9a <USB_WritePMA+0x38>
  }
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	3734      	adds	r7, #52	; 0x34
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b08b      	sub	sp, #44	; 0x2c
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	4611      	mov	r1, r2
 8006af2:	461a      	mov	r2, r3
 8006af4:	460b      	mov	r3, r1
 8006af6:	80fb      	strh	r3, [r7, #6]
 8006af8:	4613      	mov	r3, r2
 8006afa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006afc:	88bb      	ldrh	r3, [r7, #4]
 8006afe:	085b      	lsrs	r3, r3, #1
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b0c:	88fa      	ldrh	r2, [r7, #6]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b16:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1c:	e018      	b.n	8006b50 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	3302      	adds	r3, #2
 8006b2a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	3301      	adds	r3, #1
 8006b38:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	0a1b      	lsrs	r3, r3, #8
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e3      	bne.n	8006b1e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006b56:	88bb      	ldrh	r3, [r7, #4]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d007      	beq.n	8006b72 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	701a      	strb	r2, [r3, #0]
  }
}
 8006b72:	bf00      	nop
 8006b74:	372c      	adds	r7, #44	; 0x2c
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b8a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b8e:	f002 f969 	bl	8008e64 <malloc>
 8006b92:	4603      	mov	r3, r0
 8006b94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e066      	b.n	8006c76 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	7c1b      	ldrb	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d119      	bne.n	8006bec <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	2181      	movs	r1, #129	; 0x81
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 ff21 	bl	8008a08 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 ff17 	bl	8008a08 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2210      	movs	r2, #16
 8006be6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006bea:	e016      	b.n	8006c1a <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bec:	2340      	movs	r3, #64	; 0x40
 8006bee:	2202      	movs	r2, #2
 8006bf0:	2181      	movs	r1, #129	; 0x81
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f001 ff08 	bl	8008a08 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bfe:	2340      	movs	r3, #64	; 0x40
 8006c00:	2202      	movs	r2, #2
 8006c02:	2101      	movs	r1, #1
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 feff 	bl	8008a08 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2210      	movs	r2, #16
 8006c16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c1a:	2308      	movs	r3, #8
 8006c1c:	2203      	movs	r2, #3
 8006c1e:	2182      	movs	r1, #130	; 0x82
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 fef1 	bl	8008a08 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	7c1b      	ldrb	r3, [r3, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d109      	bne.n	8006c64 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f002 f84f 	bl	8008d00 <USBD_LL_PrepareReceive>
 8006c62:	e007      	b.n	8006c74 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c6a:	2340      	movs	r3, #64	; 0x40
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f002 f846 	bl	8008d00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	460b      	mov	r3, r1
 8006c88:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c8a:	2181      	movs	r1, #129	; 0x81
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 fef9 	bl	8008a84 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c98:	2101      	movs	r1, #1
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 fef2 	bl	8008a84 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006ca8:	2182      	movs	r1, #130	; 0x82
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 feea 	bl	8008a84 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00e      	beq.n	8006ce8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f002 f8ca 	bl	8008e74 <free>
    pdev->pClassData = NULL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d04:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d03a      	beq.n	8006d94 <USBD_CDC_Setup+0xa0>
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	f040 8097 	bne.w	8006e52 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	88db      	ldrh	r3, [r3, #6]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d029      	beq.n	8006d80 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	da11      	bge.n	8006d5a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006d42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	88d2      	ldrh	r2, [r2, #6]
 8006d48:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006d4a:	6939      	ldr	r1, [r7, #16]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	88db      	ldrh	r3, [r3, #6]
 8006d50:	461a      	mov	r2, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fa6c 	bl	8008230 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006d58:	e082      	b.n	8006e60 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	785a      	ldrb	r2, [r3, #1]
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	88db      	ldrh	r3, [r3, #6]
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006d70:	6939      	ldr	r1, [r7, #16]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	88db      	ldrh	r3, [r3, #6]
 8006d76:	461a      	mov	r2, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 fa85 	bl	8008288 <USBD_CtlPrepareRx>
      break;
 8006d7e:	e06f      	b.n	8006e60 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	7850      	ldrb	r0, [r2, #1]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	4798      	blx	r3
      break;
 8006d92:	e065      	b.n	8006e60 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b0b      	cmp	r3, #11
 8006d9a:	d84f      	bhi.n	8006e3c <USBD_CDC_Setup+0x148>
 8006d9c:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <USBD_CDC_Setup+0xb0>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006dd5 	.word	0x08006dd5
 8006da8:	08006e4b 	.word	0x08006e4b
 8006dac:	08006e3d 	.word	0x08006e3d
 8006db0:	08006e3d 	.word	0x08006e3d
 8006db4:	08006e3d 	.word	0x08006e3d
 8006db8:	08006e3d 	.word	0x08006e3d
 8006dbc:	08006e3d 	.word	0x08006e3d
 8006dc0:	08006e3d 	.word	0x08006e3d
 8006dc4:	08006e3d 	.word	0x08006e3d
 8006dc8:	08006e3d 	.word	0x08006e3d
 8006dcc:	08006dfd 	.word	0x08006dfd
 8006dd0:	08006e25 	.word	0x08006e25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d107      	bne.n	8006dee <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006dde:	f107 030c 	add.w	r3, r7, #12
 8006de2:	2202      	movs	r2, #2
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 fa22 	bl	8008230 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dec:	e030      	b.n	8006e50 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 f9ac 	bl	800814e <USBD_CtlError>
            ret = USBD_FAIL;
 8006df6:	2303      	movs	r3, #3
 8006df8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dfa:	e029      	b.n	8006e50 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d107      	bne.n	8006e16 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e06:	f107 030f 	add.w	r3, r7, #15
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f001 fa0e 	bl	8008230 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e14:	e01c      	b.n	8006e50 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 f998 	bl	800814e <USBD_CtlError>
            ret = USBD_FAIL;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	75fb      	strb	r3, [r7, #23]
          break;
 8006e22:	e015      	b.n	8006e50 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d00f      	beq.n	8006e4e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 f98c 	bl	800814e <USBD_CtlError>
            ret = USBD_FAIL;
 8006e36:	2303      	movs	r3, #3
 8006e38:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e3a:	e008      	b.n	8006e4e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 f985 	bl	800814e <USBD_CtlError>
          ret = USBD_FAIL;
 8006e44:	2303      	movs	r3, #3
 8006e46:	75fb      	strb	r3, [r7, #23]
          break;
 8006e48:	e002      	b.n	8006e50 <USBD_CDC_Setup+0x15c>
          break;
 8006e4a:	bf00      	nop
 8006e4c:	e008      	b.n	8006e60 <USBD_CDC_Setup+0x16c>
          break;
 8006e4e:	bf00      	nop
      }
      break;
 8006e50:	e006      	b.n	8006e60 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 f97a 	bl	800814e <USBD_CtlError>
      ret = USBD_FAIL;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop

08006e6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e04f      	b.n	8006f2e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006e96:	78fa      	ldrb	r2, [r7, #3]
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	3318      	adds	r3, #24
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d029      	beq.n	8006f00 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006eac:	78fa      	ldrb	r2, [r7, #3]
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	440b      	add	r3, r1
 8006eba:	3318      	adds	r3, #24
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	78f9      	ldrb	r1, [r7, #3]
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	00db      	lsls	r3, r3, #3
 8006eca:	4403      	add	r3, r0
 8006ecc:	3338      	adds	r3, #56	; 0x38
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ed4:	fb03 f301 	mul.w	r3, r3, r1
 8006ed8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d110      	bne.n	8006f00 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	440b      	add	r3, r1
 8006eec:	3318      	adds	r3, #24
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ef2:	78f9      	ldrb	r1, [r7, #3]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 fec9 	bl	8008c90 <USBD_LL_Transmit>
 8006efe:	e015      	b.n	8006f2c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f28:	78fa      	ldrb	r2, [r7, #3]
 8006f2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e015      	b.n	8006f84 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 ff07 	bl	8008d70 <USBD_LL_GetRxDataSize>
 8006f62:	4602      	mov	r2, r0
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f7e:	4611      	mov	r1, r2
 8006f80:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f9a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d015      	beq.n	8006fd2 <USBD_CDC_EP0_RxReady+0x46>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fac:	2bff      	cmp	r3, #255	; 0xff
 8006fae:	d010      	beq.n	8006fd2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006fbe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fc6:	b292      	uxth	r2, r2
 8006fc8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	22ff      	movs	r2, #255	; 0xff
 8006fce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2243      	movs	r2, #67	; 0x43
 8006fe8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006fea:	4b03      	ldr	r3, [pc, #12]	; (8006ff8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	2000009c 	.word	0x2000009c

08006ffc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2243      	movs	r2, #67	; 0x43
 8007008:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800700a:	4b03      	ldr	r3, [pc, #12]	; (8007018 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	20000058 	.word	0x20000058

0800701c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2243      	movs	r2, #67	; 0x43
 8007028:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800702a:	4b03      	ldr	r3, [pc, #12]	; (8007038 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800702c:	4618      	mov	r0, r3
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	200000e0 	.word	0x200000e0

0800703c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	220a      	movs	r2, #10
 8007048:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800704a:	4b03      	ldr	r3, [pc, #12]	; (8007058 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	20000014 	.word	0x20000014

0800705c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800706c:	2303      	movs	r3, #3
 800706e:	e004      	b.n	800707a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007086:	b480      	push	{r7}
 8007088:	b087      	sub	sp, #28
 800708a:	af00      	add	r7, sp, #0
 800708c:	60f8      	str	r0, [r7, #12]
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007098:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	371c      	adds	r7, #28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070c8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e016      	b.n	800712c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	7c1b      	ldrb	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800710c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007110:	2101      	movs	r1, #1
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fdf4 	bl	8008d00 <USBD_LL_PrepareReceive>
 8007118:	e007      	b.n	800712a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007120:	2340      	movs	r3, #64	; 0x40
 8007122:	2101      	movs	r1, #1
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 fdeb 	bl	8008d00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	4613      	mov	r3, r2
 8007140:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007148:	2303      	movs	r3, #3
 800714a:	e01f      	b.n	800718c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	79fa      	ldrb	r2, [r7, #7]
 800717e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f001 fbad 	bl	80088e0 <USBD_LL_Init>
 8007186:	4603      	mov	r3, r0
 8007188:	75fb      	strb	r3, [r7, #23]

  return ret;
 800718a:	7dfb      	ldrb	r3, [r7, #23]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e016      	b.n	80071da <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	f107 020e 	add.w	r2, r7, #14
 80071cc:	4610      	mov	r0, r2
 80071ce:	4798      	blx	r3
 80071d0:	4602      	mov	r2, r0
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b082      	sub	sp, #8
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fbda 	bl	80089a4 <USBD_LL_Start>
 80071f0:	4603      	mov	r3, r0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007226:	2b00      	cmp	r3, #0
 8007228:	d009      	beq.n	800723e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	78fa      	ldrb	r2, [r7, #3]
 8007234:	4611      	mov	r1, r2
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	4798      	blx	r3
 800723a:	4603      	mov	r3, r0
 800723c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d007      	beq.n	800726e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	78fa      	ldrb	r2, [r7, #3]
 8007268:	4611      	mov	r1, r2
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	4798      	blx	r3
  }

  return USBD_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 ff25 	bl	80080da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d01a      	beq.n	80072ea <USBD_LL_SetupStage+0x72>
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d822      	bhi.n	80072fe <USBD_LL_SetupStage+0x86>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <USBD_LL_SetupStage+0x4a>
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d00a      	beq.n	80072d6 <USBD_LL_SetupStage+0x5e>
 80072c0:	e01d      	b.n	80072fe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f9d6 	bl	800767c <USBD_StdDevReq>
 80072d0:	4603      	mov	r3, r0
 80072d2:	73fb      	strb	r3, [r7, #15]
      break;
 80072d4:	e020      	b.n	8007318 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa3a 	bl	8007758 <USBD_StdItfReq>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]
      break;
 80072e8:	e016      	b.n	8007318 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fa78 	bl	80077e8 <USBD_StdEPReq>
 80072f8:	4603      	mov	r3, r0
 80072fa:	73fb      	strb	r3, [r7, #15]
      break;
 80072fc:	e00c      	b.n	8007318 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007304:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007308:	b2db      	uxtb	r3, r3
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 fbef 	bl	8008af0 <USBD_LL_StallEP>
 8007312:	4603      	mov	r3, r0
 8007314:	73fb      	strb	r3, [r7, #15]
      break;
 8007316:	bf00      	nop
  }

  return ret;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b086      	sub	sp, #24
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	460b      	mov	r3, r1
 800732c:	607a      	str	r2, [r7, #4]
 800732e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007330:	7afb      	ldrb	r3, [r7, #11]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d137      	bne.n	80073a6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800733c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007344:	2b03      	cmp	r3, #3
 8007346:	d14a      	bne.n	80073de <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	429a      	cmp	r2, r3
 8007352:	d913      	bls.n	800737c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	1ad2      	subs	r2, r2, r3
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	4293      	cmp	r3, r2
 800736c:	bf28      	it	cs
 800736e:	4613      	movcs	r3, r2
 8007370:	461a      	mov	r2, r3
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 ffa4 	bl	80082c2 <USBD_CtlContinueRx>
 800737a:	e030      	b.n	80073de <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00a      	beq.n	800739e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800738e:	2b03      	cmp	r3, #3
 8007390:	d105      	bne.n	800739e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 ffa0 	bl	80082e4 <USBD_CtlSendStatus>
 80073a4:	e01b      	b.n	80073de <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d013      	beq.n	80073da <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d10e      	bne.n	80073da <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	7afa      	ldrb	r2, [r7, #11]
 80073c6:	4611      	mov	r1, r2
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	4798      	blx	r3
 80073cc:	4603      	mov	r3, r0
 80073ce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80073d0:	7dfb      	ldrb	r3, [r7, #23]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	e002      	b.n	80073e0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073da:	2303      	movs	r3, #3
 80073dc:	e000      	b.n	80073e0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	460b      	mov	r3, r1
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80073f6:	7afb      	ldrb	r3, [r7, #11]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d16a      	bne.n	80074d2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3314      	adds	r3, #20
 8007400:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007408:	2b02      	cmp	r3, #2
 800740a:	d155      	bne.n	80074b8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	429a      	cmp	r2, r3
 8007416:	d914      	bls.n	8007442 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	1ad2      	subs	r2, r2, r3
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	461a      	mov	r2, r3
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 ff19 	bl	8008266 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007434:	2300      	movs	r3, #0
 8007436:	2200      	movs	r2, #0
 8007438:	2100      	movs	r1, #0
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f001 fc60 	bl	8008d00 <USBD_LL_PrepareReceive>
 8007440:	e03a      	b.n	80074b8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	429a      	cmp	r2, r3
 800744c:	d11c      	bne.n	8007488 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007456:	429a      	cmp	r2, r3
 8007458:	d316      	bcc.n	8007488 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007464:	429a      	cmp	r2, r3
 8007466:	d20f      	bcs.n	8007488 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007468:	2200      	movs	r2, #0
 800746a:	2100      	movs	r1, #0
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fefa 	bl	8008266 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800747a:	2300      	movs	r3, #0
 800747c:	2200      	movs	r2, #0
 800747e:	2100      	movs	r1, #0
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f001 fc3d 	bl	8008d00 <USBD_LL_PrepareReceive>
 8007486:	e017      	b.n	80074b8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800749a:	2b03      	cmp	r3, #3
 800749c:	d105      	bne.n	80074aa <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074aa:	2180      	movs	r1, #128	; 0x80
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f001 fb1f 	bl	8008af0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 ff29 	bl	800830a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d123      	bne.n	800750a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f7ff fe99 	bl	80071fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074d0:	e01b      	b.n	800750a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d013      	beq.n	8007506 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d10e      	bne.n	8007506 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	7afa      	ldrb	r2, [r7, #11]
 80074f2:	4611      	mov	r1, r2
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	4798      	blx	r3
 80074f8:	4603      	mov	r3, r0
 80074fa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007502:	7dfb      	ldrb	r3, [r7, #23]
 8007504:	e002      	b.n	800750c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007506:	2303      	movs	r3, #3
 8007508:	e000      	b.n	800750c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007540:	2b00      	cmp	r3, #0
 8007542:	d009      	beq.n	8007558 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6852      	ldr	r2, [r2, #4]
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	4611      	mov	r1, r2
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007558:	2340      	movs	r3, #64	; 0x40
 800755a:	2200      	movs	r2, #0
 800755c:	2100      	movs	r1, #0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fa52 	bl	8008a08 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2240      	movs	r2, #64	; 0x40
 8007570:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007574:	2340      	movs	r3, #64	; 0x40
 8007576:	2200      	movs	r2, #0
 8007578:	2180      	movs	r1, #128	; 0x80
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 fa44 	bl	8008a08 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2240      	movs	r2, #64	; 0x40
 800758a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2204      	movs	r2, #4
 80075ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d105      	bne.n	80075fe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800761a:	2b03      	cmp	r3, #3
 800761c:	d10b      	bne.n	8007636 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d005      	beq.n	8007636 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	3301      	adds	r3, #1
 8007656:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800765e:	8a3b      	ldrh	r3, [r7, #16]
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	b21a      	sxth	r2, r3
 8007664:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007668:	4313      	orrs	r3, r2
 800766a:	b21b      	sxth	r3, r3
 800766c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800766e:	89fb      	ldrh	r3, [r7, #14]
}
 8007670:	4618      	mov	r0, r3
 8007672:	371c      	adds	r7, #28
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007692:	2b40      	cmp	r3, #64	; 0x40
 8007694:	d005      	beq.n	80076a2 <USBD_StdDevReq+0x26>
 8007696:	2b40      	cmp	r3, #64	; 0x40
 8007698:	d853      	bhi.n	8007742 <USBD_StdDevReq+0xc6>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <USBD_StdDevReq+0x3a>
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d14f      	bne.n	8007742 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4798      	blx	r3
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]
    break;
 80076b4:	e04a      	b.n	800774c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	785b      	ldrb	r3, [r3, #1]
 80076ba:	2b09      	cmp	r3, #9
 80076bc:	d83b      	bhi.n	8007736 <USBD_StdDevReq+0xba>
 80076be:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <USBD_StdDevReq+0x48>)
 80076c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c4:	08007719 	.word	0x08007719
 80076c8:	0800772d 	.word	0x0800772d
 80076cc:	08007737 	.word	0x08007737
 80076d0:	08007723 	.word	0x08007723
 80076d4:	08007737 	.word	0x08007737
 80076d8:	080076f7 	.word	0x080076f7
 80076dc:	080076ed 	.word	0x080076ed
 80076e0:	08007737 	.word	0x08007737
 80076e4:	0800770f 	.word	0x0800770f
 80076e8:	08007701 	.word	0x08007701
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f9da 	bl	8007aa8 <USBD_GetDescriptor>
      break;
 80076f4:	e024      	b.n	8007740 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fb69 	bl	8007dd0 <USBD_SetAddress>
      break;
 80076fe:	e01f      	b.n	8007740 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fba8 	bl	8007e58 <USBD_SetConfig>
 8007708:	4603      	mov	r3, r0
 800770a:	73fb      	strb	r3, [r7, #15]
      break;
 800770c:	e018      	b.n	8007740 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fc45 	bl	8007fa0 <USBD_GetConfig>
      break;
 8007716:	e013      	b.n	8007740 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fc75 	bl	800800a <USBD_GetStatus>
      break;
 8007720:	e00e      	b.n	8007740 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fca3 	bl	8008070 <USBD_SetFeature>
      break;
 800772a:	e009      	b.n	8007740 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fcb2 	bl	8008098 <USBD_ClrFeature>
      break;
 8007734:	e004      	b.n	8007740 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fd08 	bl	800814e <USBD_CtlError>
      break;
 800773e:	bf00      	nop
    }
    break;
 8007740:	e004      	b.n	800774c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fd02 	bl	800814e <USBD_CtlError>
    break;
 800774a:	bf00      	nop
  }

  return ret;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop

08007758 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	d005      	beq.n	800777e <USBD_StdItfReq+0x26>
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	d82e      	bhi.n	80077d4 <USBD_StdItfReq+0x7c>
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <USBD_StdItfReq+0x26>
 800777a:	2b20      	cmp	r3, #32
 800777c:	d12a      	bne.n	80077d4 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007784:	3b01      	subs	r3, #1
 8007786:	2b02      	cmp	r3, #2
 8007788:	d81d      	bhi.n	80077c6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	889b      	ldrh	r3, [r3, #4]
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	d813      	bhi.n	80077bc <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
 80077a2:	4603      	mov	r3, r0
 80077a4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	88db      	ldrh	r3, [r3, #6]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d110      	bne.n	80077d0 <USBD_StdItfReq+0x78>
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10d      	bne.n	80077d0 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fd95 	bl	80082e4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80077ba:	e009      	b.n	80077d0 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fcc5 	bl	800814e <USBD_CtlError>
      break;
 80077c4:	e004      	b.n	80077d0 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fcc0 	bl	800814e <USBD_CtlError>
      break;
 80077ce:	e000      	b.n	80077d2 <USBD_StdItfReq+0x7a>
      break;
 80077d0:	bf00      	nop
    }
    break;
 80077d2:	e004      	b.n	80077de <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fcb9 	bl	800814e <USBD_CtlError>
    break;
 80077dc:	bf00      	nop
  }

  return ret;
 80077de:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	889b      	ldrh	r3, [r3, #4]
 80077fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	d007      	beq.n	8007818 <USBD_StdEPReq+0x30>
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	f200 8142 	bhi.w	8007a92 <USBD_StdEPReq+0x2aa>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00c      	beq.n	800782c <USBD_StdEPReq+0x44>
 8007812:	2b20      	cmp	r3, #32
 8007814:	f040 813d 	bne.w	8007a92 <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4798      	blx	r3
 8007826:	4603      	mov	r3, r0
 8007828:	73fb      	strb	r3, [r7, #15]
    break;
 800782a:	e137      	b.n	8007a9c <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	785b      	ldrb	r3, [r3, #1]
 8007830:	2b03      	cmp	r3, #3
 8007832:	d007      	beq.n	8007844 <USBD_StdEPReq+0x5c>
 8007834:	2b03      	cmp	r3, #3
 8007836:	f300 8126 	bgt.w	8007a86 <USBD_StdEPReq+0x29e>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d07d      	beq.n	800793a <USBD_StdEPReq+0x152>
 800783e:	2b01      	cmp	r3, #1
 8007840:	d03b      	beq.n	80078ba <USBD_StdEPReq+0xd2>
 8007842:	e120      	b.n	8007a86 <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800784a:	2b02      	cmp	r3, #2
 800784c:	d002      	beq.n	8007854 <USBD_StdEPReq+0x6c>
 800784e:	2b03      	cmp	r3, #3
 8007850:	d016      	beq.n	8007880 <USBD_StdEPReq+0x98>
 8007852:	e02c      	b.n	80078ae <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00d      	beq.n	8007876 <USBD_StdEPReq+0x8e>
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	2b80      	cmp	r3, #128	; 0x80
 800785e:	d00a      	beq.n	8007876 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 f943 	bl	8008af0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800786a:	2180      	movs	r1, #128	; 0x80
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 f93f 	bl	8008af0 <USBD_LL_StallEP>
 8007872:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007874:	e020      	b.n	80078b8 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fc68 	bl	800814e <USBD_CtlError>
        break;
 800787e:	e01b      	b.n	80078b8 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	885b      	ldrh	r3, [r3, #2]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10e      	bne.n	80078a6 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00b      	beq.n	80078a6 <USBD_StdEPReq+0xbe>
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	2b80      	cmp	r3, #128	; 0x80
 8007892:	d008      	beq.n	80078a6 <USBD_StdEPReq+0xbe>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	88db      	ldrh	r3, [r3, #6]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d104      	bne.n	80078a6 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 f925 	bl	8008af0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fd1c 	bl	80082e4 <USBD_CtlSendStatus>

        break;
 80078ac:	e004      	b.n	80078b8 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fc4c 	bl	800814e <USBD_CtlError>
        break;
 80078b6:	bf00      	nop
      }
      break;
 80078b8:	e0ea      	b.n	8007a90 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d002      	beq.n	80078ca <USBD_StdEPReq+0xe2>
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d016      	beq.n	80078f6 <USBD_StdEPReq+0x10e>
 80078c8:	e030      	b.n	800792c <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00d      	beq.n	80078ec <USBD_StdEPReq+0x104>
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b80      	cmp	r3, #128	; 0x80
 80078d4:	d00a      	beq.n	80078ec <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f001 f908 	bl	8008af0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078e0:	2180      	movs	r1, #128	; 0x80
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 f904 	bl	8008af0 <USBD_LL_StallEP>
 80078e8:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078ea:	e025      	b.n	8007938 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fc2d 	bl	800814e <USBD_CtlError>
        break;
 80078f4:	e020      	b.n	8007938 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	885b      	ldrh	r3, [r3, #2]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d11b      	bne.n	8007936 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007904:	2b00      	cmp	r3, #0
 8007906:	d004      	beq.n	8007912 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 f925 	bl	8008b5c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fce6 	bl	80082e4 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	4798      	blx	r3
 8007926:	4603      	mov	r3, r0
 8007928:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800792a:	e004      	b.n	8007936 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fc0d 	bl	800814e <USBD_CtlError>
        break;
 8007934:	e000      	b.n	8007938 <USBD_StdEPReq+0x150>
        break;
 8007936:	bf00      	nop
      }
      break;
 8007938:	e0aa      	b.n	8007a90 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007940:	2b02      	cmp	r3, #2
 8007942:	d002      	beq.n	800794a <USBD_StdEPReq+0x162>
 8007944:	2b03      	cmp	r3, #3
 8007946:	d032      	beq.n	80079ae <USBD_StdEPReq+0x1c6>
 8007948:	e097      	b.n	8007a7a <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d007      	beq.n	8007960 <USBD_StdEPReq+0x178>
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2b80      	cmp	r3, #128	; 0x80
 8007954:	d004      	beq.n	8007960 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fbf8 	bl	800814e <USBD_CtlError>
          break;
 800795e:	e091      	b.n	8007a84 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007960:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007964:	2b00      	cmp	r3, #0
 8007966:	da0b      	bge.n	8007980 <USBD_StdEPReq+0x198>
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800796e:	4613      	mov	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	3310      	adds	r3, #16
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	4413      	add	r3, r2
 800797c:	3304      	adds	r3, #4
 800797e:	e00b      	b.n	8007998 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	4413      	add	r3, r2
 8007996:	3304      	adds	r3, #4
 8007998:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2202      	movs	r2, #2
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fc42 	bl	8008230 <USBD_CtlSendData>
        break;
 80079ac:	e06a      	b.n	8007a84 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80079ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	da11      	bge.n	80079da <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	f003 020f 	and.w	r2, r3, #15
 80079bc:	6879      	ldr	r1, [r7, #4]
 80079be:	4613      	mov	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	440b      	add	r3, r1
 80079c8:	3324      	adds	r3, #36	; 0x24
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d117      	bne.n	8007a00 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fbbb 	bl	800814e <USBD_CtlError>
            break;
 80079d8:	e054      	b.n	8007a84 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	f003 020f 	and.w	r2, r3, #15
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d104      	bne.n	8007a00 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fba8 	bl	800814e <USBD_CtlError>
            break;
 80079fe:	e041      	b.n	8007a84 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	da0b      	bge.n	8007a20 <USBD_StdEPReq+0x238>
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	3310      	adds	r3, #16
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	e00b      	b.n	8007a38 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	4413      	add	r3, r2
 8007a36:	3304      	adds	r3, #4
 8007a38:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <USBD_StdEPReq+0x25e>
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	2b80      	cmp	r3, #128	; 0x80
 8007a44:	d103      	bne.n	8007a4e <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	e00e      	b.n	8007a6c <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 f8b8 	bl	8008bc8 <USBD_LL_IsStallEP>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2201      	movs	r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	e002      	b.n	8007a6c <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fbdc 	bl	8008230 <USBD_CtlSendData>
          break;
 8007a78:	e004      	b.n	8007a84 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fb66 	bl	800814e <USBD_CtlError>
        break;
 8007a82:	bf00      	nop
      }
      break;
 8007a84:	e004      	b.n	8007a90 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fb60 	bl	800814e <USBD_CtlError>
      break;
 8007a8e:	bf00      	nop
    }
    break;
 8007a90:	e004      	b.n	8007a9c <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fb5a 	bl	800814e <USBD_CtlError>
    break;
 8007a9a:	bf00      	nop
  }

  return ret;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	885b      	ldrh	r3, [r3, #2]
 8007ac2:	0a1b      	lsrs	r3, r3, #8
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	2b0e      	cmp	r3, #14
 8007aca:	f200 8152 	bhi.w	8007d72 <USBD_GetDescriptor+0x2ca>
 8007ace:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <USBD_GetDescriptor+0x2c>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007b45 	.word	0x08007b45
 8007ad8:	08007b5d 	.word	0x08007b5d
 8007adc:	08007b9d 	.word	0x08007b9d
 8007ae0:	08007d73 	.word	0x08007d73
 8007ae4:	08007d73 	.word	0x08007d73
 8007ae8:	08007d13 	.word	0x08007d13
 8007aec:	08007d3f 	.word	0x08007d3f
 8007af0:	08007d73 	.word	0x08007d73
 8007af4:	08007d73 	.word	0x08007d73
 8007af8:	08007d73 	.word	0x08007d73
 8007afc:	08007d73 	.word	0x08007d73
 8007b00:	08007d73 	.word	0x08007d73
 8007b04:	08007d73 	.word	0x08007d73
 8007b08:	08007d73 	.word	0x08007d73
 8007b0c:	08007b11 	.word	0x08007b11
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	7c12      	ldrb	r2, [r2, #16]
 8007b28:	f107 0108 	add.w	r1, r7, #8
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
 8007b30:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007b32:	e126      	b.n	8007d82 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fb09 	bl	800814e <USBD_CtlError>
      err++;
 8007b3c:	7afb      	ldrb	r3, [r7, #11]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	72fb      	strb	r3, [r7, #11]
    break;
 8007b42:	e11e      	b.n	8007d82 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	7c12      	ldrb	r2, [r2, #16]
 8007b50:	f107 0108 	add.w	r1, r7, #8
 8007b54:	4610      	mov	r0, r2
 8007b56:	4798      	blx	r3
 8007b58:	60f8      	str	r0, [r7, #12]
    break;
 8007b5a:	e112      	b.n	8007d82 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	7c1b      	ldrb	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10d      	bne.n	8007b80 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6c:	f107 0208 	add.w	r2, r7, #8
 8007b70:	4610      	mov	r0, r2
 8007b72:	4798      	blx	r3
 8007b74:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007b7e:	e100      	b.n	8007d82 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	f107 0208 	add.w	r2, r7, #8
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4798      	blx	r3
 8007b90:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3301      	adds	r3, #1
 8007b96:	2202      	movs	r2, #2
 8007b98:	701a      	strb	r2, [r3, #0]
    break;
 8007b9a:	e0f2      	b.n	8007d82 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	885b      	ldrh	r3, [r3, #2]
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b05      	cmp	r3, #5
 8007ba4:	f200 80ac 	bhi.w	8007d00 <USBD_GetDescriptor+0x258>
 8007ba8:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <USBD_GetDescriptor+0x108>)
 8007baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bae:	bf00      	nop
 8007bb0:	08007bc9 	.word	0x08007bc9
 8007bb4:	08007bfd 	.word	0x08007bfd
 8007bb8:	08007c31 	.word	0x08007c31
 8007bbc:	08007c65 	.word	0x08007c65
 8007bc0:	08007c99 	.word	0x08007c99
 8007bc4:	08007ccd 	.word	0x08007ccd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	7c12      	ldrb	r2, [r2, #16]
 8007be0:	f107 0108 	add.w	r1, r7, #8
 8007be4:	4610      	mov	r0, r2
 8007be6:	4798      	blx	r3
 8007be8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bea:	e091      	b.n	8007d10 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 faad 	bl	800814e <USBD_CtlError>
        err++;
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	72fb      	strb	r3, [r7, #11]
      break;
 8007bfa:	e089      	b.n	8007d10 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	7c12      	ldrb	r2, [r2, #16]
 8007c14:	f107 0108 	add.w	r1, r7, #8
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4798      	blx	r3
 8007c1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c1e:	e077      	b.n	8007d10 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fa93 	bl	800814e <USBD_CtlError>
        err++;
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c2e:	e06f      	b.n	8007d10 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00b      	beq.n	8007c54 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	7c12      	ldrb	r2, [r2, #16]
 8007c48:	f107 0108 	add.w	r1, r7, #8
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
 8007c50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c52:	e05d      	b.n	8007d10 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fa79 	bl	800814e <USBD_CtlError>
        err++;
 8007c5c:	7afb      	ldrb	r3, [r7, #11]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	72fb      	strb	r3, [r7, #11]
      break;
 8007c62:	e055      	b.n	8007d10 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00b      	beq.n	8007c88 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	7c12      	ldrb	r2, [r2, #16]
 8007c7c:	f107 0108 	add.w	r1, r7, #8
 8007c80:	4610      	mov	r0, r2
 8007c82:	4798      	blx	r3
 8007c84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c86:	e043      	b.n	8007d10 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa5f 	bl	800814e <USBD_CtlError>
        err++;
 8007c90:	7afb      	ldrb	r3, [r7, #11]
 8007c92:	3301      	adds	r3, #1
 8007c94:	72fb      	strb	r3, [r7, #11]
      break;
 8007c96:	e03b      	b.n	8007d10 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00b      	beq.n	8007cbc <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	7c12      	ldrb	r2, [r2, #16]
 8007cb0:	f107 0108 	add.w	r1, r7, #8
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4798      	blx	r3
 8007cb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cba:	e029      	b.n	8007d10 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa45 	bl	800814e <USBD_CtlError>
        err++;
 8007cc4:	7afb      	ldrb	r3, [r7, #11]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	72fb      	strb	r3, [r7, #11]
      break;
 8007cca:	e021      	b.n	8007d10 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00b      	beq.n	8007cf0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	7c12      	ldrb	r2, [r2, #16]
 8007ce4:	f107 0108 	add.w	r1, r7, #8
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4798      	blx	r3
 8007cec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cee:	e00f      	b.n	8007d10 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fa2b 	bl	800814e <USBD_CtlError>
        err++;
 8007cf8:	7afb      	ldrb	r3, [r7, #11]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	72fb      	strb	r3, [r7, #11]
      break;
 8007cfe:	e007      	b.n	8007d10 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa23 	bl	800814e <USBD_CtlError>
      err++;
 8007d08:	7afb      	ldrb	r3, [r7, #11]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007d0e:	bf00      	nop
    }
    break;
 8007d10:	e037      	b.n	8007d82 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7c1b      	ldrb	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d22:	f107 0208 	add.w	r2, r7, #8
 8007d26:	4610      	mov	r0, r2
 8007d28:	4798      	blx	r3
 8007d2a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d2c:	e029      	b.n	8007d82 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fa0c 	bl	800814e <USBD_CtlError>
      err++;
 8007d36:	7afb      	ldrb	r3, [r7, #11]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	72fb      	strb	r3, [r7, #11]
    break;
 8007d3c:	e021      	b.n	8007d82 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	7c1b      	ldrb	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10d      	bne.n	8007d62 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4e:	f107 0208 	add.w	r2, r7, #8
 8007d52:	4610      	mov	r0, r2
 8007d54:	4798      	blx	r3
 8007d56:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	2207      	movs	r2, #7
 8007d5e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d60:	e00f      	b.n	8007d82 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f9f2 	bl	800814e <USBD_CtlError>
      err++;
 8007d6a:	7afb      	ldrb	r3, [r7, #11]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	72fb      	strb	r3, [r7, #11]
    break;
 8007d70:	e007      	b.n	8007d82 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f9ea 	bl	800814e <USBD_CtlError>
    err++;
 8007d7a:	7afb      	ldrb	r3, [r7, #11]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	72fb      	strb	r3, [r7, #11]
    break;
 8007d80:	bf00      	nop
  }

  if (err != 0U)
 8007d82:	7afb      	ldrb	r3, [r7, #11]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11e      	bne.n	8007dc6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	88db      	ldrh	r3, [r3, #6]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d016      	beq.n	8007dbe <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007d90:	893b      	ldrh	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00e      	beq.n	8007db4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	88da      	ldrh	r2, [r3, #6]
 8007d9a:	893b      	ldrh	r3, [r7, #8]
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	bf28      	it	cs
 8007da0:	4613      	movcs	r3, r2
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007da6:	893b      	ldrh	r3, [r7, #8]
 8007da8:	461a      	mov	r2, r3
 8007daa:	68f9      	ldr	r1, [r7, #12]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fa3f 	bl	8008230 <USBD_CtlSendData>
 8007db2:	e009      	b.n	8007dc8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f9c9 	bl	800814e <USBD_CtlError>
 8007dbc:	e004      	b.n	8007dc8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fa90 	bl	80082e4 <USBD_CtlSendStatus>
 8007dc4:	e000      	b.n	8007dc8 <USBD_GetDescriptor+0x320>
    return;
 8007dc6:	bf00      	nop
    }
  }
}
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop

08007dd0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	889b      	ldrh	r3, [r3, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d130      	bne.n	8007e44 <USBD_SetAddress+0x74>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	88db      	ldrh	r3, [r3, #6]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d12c      	bne.n	8007e44 <USBD_SetAddress+0x74>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	885b      	ldrh	r3, [r3, #2]
 8007dee:	2b7f      	cmp	r3, #127	; 0x7f
 8007df0:	d828      	bhi.n	8007e44 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	885b      	ldrh	r3, [r3, #2]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d104      	bne.n	8007e12 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f99f 	bl	800814e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e10:	e01d      	b.n	8007e4e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	7bfa      	ldrb	r2, [r7, #15]
 8007e16:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 ff00 	bl	8008c24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fa5d 	bl	80082e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e38:	e009      	b.n	8007e4e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e42:	e004      	b.n	8007e4e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f981 	bl	800814e <USBD_CtlError>
  }
}
 8007e4c:	bf00      	nop
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	885b      	ldrh	r3, [r3, #2]
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	4b4b      	ldr	r3, [pc, #300]	; (8007f9c <USBD_SetConfig+0x144>)
 8007e6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e70:	4b4a      	ldr	r3, [pc, #296]	; (8007f9c <USBD_SetConfig+0x144>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d905      	bls.n	8007e84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f967 	bl	800814e <USBD_CtlError>
    return USBD_FAIL;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e087      	b.n	8007f94 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d002      	beq.n	8007e94 <USBD_SetConfig+0x3c>
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d025      	beq.n	8007ede <USBD_SetConfig+0x86>
 8007e92:	e071      	b.n	8007f78 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007e94:	4b41      	ldr	r3, [pc, #260]	; (8007f9c <USBD_SetConfig+0x144>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d01c      	beq.n	8007ed6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007e9c:	4b3f      	ldr	r3, [pc, #252]	; (8007f9c <USBD_SetConfig+0x144>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ea6:	4b3d      	ldr	r3, [pc, #244]	; (8007f9c <USBD_SetConfig+0x144>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff f9af 	bl	8007210 <USBD_SetClassConfig>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d004      	beq.n	8007ec6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f945 	bl	800814e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007ec4:	e065      	b.n	8007f92 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fa0c 	bl	80082e4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2203      	movs	r2, #3
 8007ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007ed4:	e05d      	b.n	8007f92 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fa04 	bl	80082e4 <USBD_CtlSendStatus>
    break;
 8007edc:	e059      	b.n	8007f92 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007ede:	4b2f      	ldr	r3, [pc, #188]	; (8007f9c <USBD_SetConfig+0x144>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d112      	bne.n	8007f0c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007eee:	4b2b      	ldr	r3, [pc, #172]	; (8007f9c <USBD_SetConfig+0x144>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ef8:	4b28      	ldr	r3, [pc, #160]	; (8007f9c <USBD_SetConfig+0x144>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff f9a2 	bl	8007248 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f9ed 	bl	80082e4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f0a:	e042      	b.n	8007f92 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007f0c:	4b23      	ldr	r3, [pc, #140]	; (8007f9c <USBD_SetConfig+0x144>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d02a      	beq.n	8007f70 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff f990 	bl	8007248 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007f28:	4b1c      	ldr	r3, [pc, #112]	; (8007f9c <USBD_SetConfig+0x144>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f32:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <USBD_SetConfig+0x144>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff f969 	bl	8007210 <USBD_SetClassConfig>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00f      	beq.n	8007f68 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f8ff 	bl	800814e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7ff f975 	bl	8007248 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2202      	movs	r2, #2
 8007f62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f66:	e014      	b.n	8007f92 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f9bb 	bl	80082e4 <USBD_CtlSendStatus>
    break;
 8007f6e:	e010      	b.n	8007f92 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f9b7 	bl	80082e4 <USBD_CtlSendStatus>
    break;
 8007f76:	e00c      	b.n	8007f92 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f8e7 	bl	800814e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f80:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <USBD_SetConfig+0x144>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff f95e 	bl	8007248 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f90:	bf00      	nop
  }

  return ret;
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	2000021c 	.word	0x2000021c

08007fa0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	88db      	ldrh	r3, [r3, #6]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d004      	beq.n	8007fbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f8ca 	bl	800814e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007fba:	e022      	b.n	8008002 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	dc02      	bgt.n	8007fcc <USBD_GetConfig+0x2c>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	dc03      	bgt.n	8007fd2 <USBD_GetConfig+0x32>
 8007fca:	e015      	b.n	8007ff8 <USBD_GetConfig+0x58>
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d00b      	beq.n	8007fe8 <USBD_GetConfig+0x48>
 8007fd0:	e012      	b.n	8007ff8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3308      	adds	r3, #8
 8007fdc:	2201      	movs	r2, #1
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f925 	bl	8008230 <USBD_CtlSendData>
      break;
 8007fe6:	e00c      	b.n	8008002 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	3304      	adds	r3, #4
 8007fec:	2201      	movs	r2, #1
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f91d 	bl	8008230 <USBD_CtlSendData>
      break;
 8007ff6:	e004      	b.n	8008002 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f8a7 	bl	800814e <USBD_CtlError>
      break;
 8008000:	bf00      	nop
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801a:	3b01      	subs	r3, #1
 800801c:	2b02      	cmp	r3, #2
 800801e:	d81e      	bhi.n	800805e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	88db      	ldrh	r3, [r3, #6]
 8008024:	2b02      	cmp	r3, #2
 8008026:	d004      	beq.n	8008032 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f88f 	bl	800814e <USBD_CtlError>
      break;
 8008030:	e01a      	b.n	8008068 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f043 0202 	orr.w	r2, r3, #2
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	330c      	adds	r3, #12
 8008052:	2202      	movs	r2, #2
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f8ea 	bl	8008230 <USBD_CtlSendData>
    break;
 800805c:	e004      	b.n	8008068 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f874 	bl	800814e <USBD_CtlError>
    break;
 8008066:	bf00      	nop
  }
}
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	885b      	ldrh	r3, [r3, #2]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d106      	bne.n	8008090 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f92a 	bl	80082e4 <USBD_CtlSendStatus>
  }
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a8:	3b01      	subs	r3, #1
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d80b      	bhi.n	80080c6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	885b      	ldrh	r3, [r3, #2]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d10c      	bne.n	80080d0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f910 	bl	80082e4 <USBD_CtlSendStatus>
      }
      break;
 80080c4:	e004      	b.n	80080d0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f840 	bl	800814e <USBD_CtlError>
      break;
 80080ce:	e000      	b.n	80080d2 <USBD_ClrFeature+0x3a>
      break;
 80080d0:	bf00      	nop
  }
}
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	781a      	ldrb	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3301      	adds	r3, #1
 80080f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	781a      	ldrb	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f7ff fa9b 	bl	8007640 <SWAPBYTE>
 800810a:	4603      	mov	r3, r0
 800810c:	461a      	mov	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3301      	adds	r3, #1
 8008116:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3301      	adds	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f7ff fa8e 	bl	8007640 <SWAPBYTE>
 8008124:	4603      	mov	r3, r0
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3301      	adds	r3, #1
 8008130:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3301      	adds	r3, #1
 8008136:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f7ff fa81 	bl	8007640 <SWAPBYTE>
 800813e:	4603      	mov	r3, r0
 8008140:	461a      	mov	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	80da      	strh	r2, [r3, #6]
}
 8008146:	bf00      	nop
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008158:	2180      	movs	r1, #128	; 0x80
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fcc8 	bl	8008af0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008160:	2100      	movs	r1, #0
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fcc4 	bl	8008af0 <USBD_LL_StallEP>
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d036      	beq.n	80081f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800818a:	6938      	ldr	r0, [r7, #16]
 800818c:	f000 f836 	bl	80081fc <USBD_GetLen>
 8008190:	4603      	mov	r3, r0
 8008192:	3301      	adds	r3, #1
 8008194:	b29b      	uxth	r3, r3
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	b29a      	uxth	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	4413      	add	r3, r2
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	7812      	ldrb	r2, [r2, #0]
 80081a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	3301      	adds	r3, #1
 80081ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	4413      	add	r3, r2
 80081b6:	2203      	movs	r2, #3
 80081b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	3301      	adds	r3, #1
 80081be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081c0:	e013      	b.n	80081ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	4413      	add	r3, r2
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	7812      	ldrb	r2, [r2, #0]
 80081cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	3301      	adds	r3, #1
 80081d2:	613b      	str	r3, [r7, #16]
    idx++;
 80081d4:	7dfb      	ldrb	r3, [r7, #23]
 80081d6:	3301      	adds	r3, #1
 80081d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	4413      	add	r3, r2
 80081e0:	2200      	movs	r2, #0
 80081e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	3301      	adds	r3, #1
 80081e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e7      	bne.n	80081c2 <USBD_GetString+0x52>
 80081f2:	e000      	b.n	80081f6 <USBD_GetString+0x86>
    return;
 80081f4:	bf00      	nop
  }
}
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800820c:	e005      	b.n	800821a <USBD_GetLen+0x1e>
  {
    len++;
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	3301      	adds	r3, #1
 8008212:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	3301      	adds	r3, #1
 8008218:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1f5      	bne.n	800820e <USBD_GetLen+0x12>
  }

  return len;
 8008222:	7bfb      	ldrb	r3, [r7, #15]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2202      	movs	r2, #2
 8008240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	2100      	movs	r1, #0
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 fd1a 	bl	8008c90 <USBD_LL_Transmit>

  return USBD_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	2100      	movs	r1, #0
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 fd09 	bl	8008c90 <USBD_LL_Transmit>

  return USBD_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2203      	movs	r2, #3
 8008298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	2100      	movs	r1, #0
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 fd24 	bl	8008d00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	60f8      	str	r0, [r7, #12]
 80082ca:	60b9      	str	r1, [r7, #8]
 80082cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	2100      	movs	r1, #0
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 fd13 	bl	8008d00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2204      	movs	r2, #4
 80082f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082f4:	2300      	movs	r3, #0
 80082f6:	2200      	movs	r2, #0
 80082f8:	2100      	movs	r1, #0
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fcc8 	bl	8008c90 <USBD_LL_Transmit>

  return USBD_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b082      	sub	sp, #8
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2205      	movs	r2, #5
 8008316:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800831a:	2300      	movs	r3, #0
 800831c:	2200      	movs	r2, #0
 800831e:	2100      	movs	r1, #0
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fced 	bl	8008d00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008334:	2200      	movs	r2, #0
 8008336:	4912      	ldr	r1, [pc, #72]	; (8008380 <MX_USB_DEVICE_Init+0x50>)
 8008338:	4812      	ldr	r0, [pc, #72]	; (8008384 <MX_USB_DEVICE_Init+0x54>)
 800833a:	f7fe fefb 	bl	8007134 <USBD_Init>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008344:	f7f8 f89e 	bl	8000484 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008348:	490f      	ldr	r1, [pc, #60]	; (8008388 <MX_USB_DEVICE_Init+0x58>)
 800834a:	480e      	ldr	r0, [pc, #56]	; (8008384 <MX_USB_DEVICE_Init+0x54>)
 800834c:	f7fe ff22 	bl	8007194 <USBD_RegisterClass>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008356:	f7f8 f895 	bl	8000484 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800835a:	490c      	ldr	r1, [pc, #48]	; (800838c <MX_USB_DEVICE_Init+0x5c>)
 800835c:	4809      	ldr	r0, [pc, #36]	; (8008384 <MX_USB_DEVICE_Init+0x54>)
 800835e:	f7fe fe7d 	bl	800705c <USBD_CDC_RegisterInterface>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008368:	f7f8 f88c 	bl	8000484 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800836c:	4805      	ldr	r0, [pc, #20]	; (8008384 <MX_USB_DEVICE_Init+0x54>)
 800836e:	f7fe ff38 	bl	80071e2 <USBD_Start>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008378:	f7f8 f884 	bl	8000484 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800837c:	bf00      	nop
 800837e:	bd80      	pop	{r7, pc}
 8008380:	20000138 	.word	0x20000138
 8008384:	200002d0 	.word	0x200002d0
 8008388:	20000020 	.word	0x20000020
 800838c:	20000124 	.word	0x20000124

08008390 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008394:	2200      	movs	r2, #0
 8008396:	4905      	ldr	r1, [pc, #20]	; (80083ac <CDC_Init_FS+0x1c>)
 8008398:	4805      	ldr	r0, [pc, #20]	; (80083b0 <CDC_Init_FS+0x20>)
 800839a:	f7fe fe74 	bl	8007086 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800839e:	4905      	ldr	r1, [pc, #20]	; (80083b4 <CDC_Init_FS+0x24>)
 80083a0:	4803      	ldr	r0, [pc, #12]	; (80083b0 <CDC_Init_FS+0x20>)
 80083a2:	f7fe fe89 	bl	80070b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20000988 	.word	0x20000988
 80083b0:	200002d0 	.word	0x200002d0
 80083b4:	200005a0 	.word	0x200005a0

080083b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083be:	4618      	mov	r0, r3
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	6039      	str	r1, [r7, #0]
 80083d2:	71fb      	strb	r3, [r7, #7]
 80083d4:	4613      	mov	r3, r2
 80083d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	2b23      	cmp	r3, #35	; 0x23
 80083dc:	d84a      	bhi.n	8008474 <CDC_Control_FS+0xac>
 80083de:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <CDC_Control_FS+0x1c>)
 80083e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e4:	08008475 	.word	0x08008475
 80083e8:	08008475 	.word	0x08008475
 80083ec:	08008475 	.word	0x08008475
 80083f0:	08008475 	.word	0x08008475
 80083f4:	08008475 	.word	0x08008475
 80083f8:	08008475 	.word	0x08008475
 80083fc:	08008475 	.word	0x08008475
 8008400:	08008475 	.word	0x08008475
 8008404:	08008475 	.word	0x08008475
 8008408:	08008475 	.word	0x08008475
 800840c:	08008475 	.word	0x08008475
 8008410:	08008475 	.word	0x08008475
 8008414:	08008475 	.word	0x08008475
 8008418:	08008475 	.word	0x08008475
 800841c:	08008475 	.word	0x08008475
 8008420:	08008475 	.word	0x08008475
 8008424:	08008475 	.word	0x08008475
 8008428:	08008475 	.word	0x08008475
 800842c:	08008475 	.word	0x08008475
 8008430:	08008475 	.word	0x08008475
 8008434:	08008475 	.word	0x08008475
 8008438:	08008475 	.word	0x08008475
 800843c:	08008475 	.word	0x08008475
 8008440:	08008475 	.word	0x08008475
 8008444:	08008475 	.word	0x08008475
 8008448:	08008475 	.word	0x08008475
 800844c:	08008475 	.word	0x08008475
 8008450:	08008475 	.word	0x08008475
 8008454:	08008475 	.word	0x08008475
 8008458:	08008475 	.word	0x08008475
 800845c:	08008475 	.word	0x08008475
 8008460:	08008475 	.word	0x08008475
 8008464:	08008475 	.word	0x08008475
 8008468:	08008475 	.word	0x08008475
 800846c:	08008475 	.word	0x08008475
 8008470:	08008475 	.word	0x08008475
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008474:	bf00      	nop
  }

  return (USBD_OK);
 8008476:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008478:	4618      	mov	r0, r3
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	480f      	ldr	r0, [pc, #60]	; (80084d0 <CDC_Receive_FS+0x4c>)
 8008492:	f7fe fe11 	bl	80070b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008496:	480e      	ldr	r0, [pc, #56]	; (80084d0 <CDC_Receive_FS+0x4c>)
 8008498:	f7fe fe22 	bl	80070e0 <USBD_CDC_ReceivePacket>


  for(i=0;i<*Len;i++){
 800849c:	2300      	movs	r3, #0
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	e00b      	b.n	80084ba <CDC_Receive_FS+0x36>
	  rxBuffer[i] = Buf[i];
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	7819      	ldrb	r1, [r3, #0]
 80084aa:	4a0a      	ldr	r2, [pc, #40]	; (80084d4 <CDC_Receive_FS+0x50>)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	460a      	mov	r2, r1
 80084b2:	701a      	strb	r2, [r3, #0]
  for(i=0;i<*Len;i++){
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3301      	adds	r3, #1
 80084b8:	60fb      	str	r3, [r7, #12]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d3ee      	bcc.n	80084a2 <CDC_Receive_FS+0x1e>


  //CDC_Transmit_FS((uint8_t *) rxBuffer,strlen(rxBuffer));


  return (USBD_OK);
 80084c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	200002d0 	.word	0x200002d0
 80084d4:	2000028c 	.word	0x2000028c

080084d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80084d8:	b480      	push	{r7}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80084ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	371c      	adds	r7, #28
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
	...

080084fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	6039      	str	r1, [r7, #0]
 8008506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2212      	movs	r2, #18
 800850c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800850e:	4b03      	ldr	r3, [pc, #12]	; (800851c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	20000158 	.word	0x20000158

08008520 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	6039      	str	r1, [r7, #0]
 800852a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2204      	movs	r2, #4
 8008530:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008532:	4b03      	ldr	r3, [pc, #12]	; (8008540 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	20000178 	.word	0x20000178

08008544 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	6039      	str	r1, [r7, #0]
 800854e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d105      	bne.n	8008562 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	4907      	ldr	r1, [pc, #28]	; (8008578 <USBD_FS_ProductStrDescriptor+0x34>)
 800855a:	4808      	ldr	r0, [pc, #32]	; (800857c <USBD_FS_ProductStrDescriptor+0x38>)
 800855c:	f7ff fe08 	bl	8008170 <USBD_GetString>
 8008560:	e004      	b.n	800856c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	4904      	ldr	r1, [pc, #16]	; (8008578 <USBD_FS_ProductStrDescriptor+0x34>)
 8008566:	4805      	ldr	r0, [pc, #20]	; (800857c <USBD_FS_ProductStrDescriptor+0x38>)
 8008568:	f7ff fe02 	bl	8008170 <USBD_GetString>
  }
  return USBD_StrDesc;
 800856c:	4b02      	ldr	r3, [pc, #8]	; (8008578 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	20000d70 	.word	0x20000d70
 800857c:	0800904c 	.word	0x0800904c

08008580 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	4904      	ldr	r1, [pc, #16]	; (80085a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008590:	4804      	ldr	r0, [pc, #16]	; (80085a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008592:	f7ff fded 	bl	8008170 <USBD_GetString>
  return USBD_StrDesc;
 8008596:	4b02      	ldr	r3, [pc, #8]	; (80085a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	20000d70 	.word	0x20000d70
 80085a4:	08009064 	.word	0x08009064

080085a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	6039      	str	r1, [r7, #0]
 80085b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	221a      	movs	r2, #26
 80085b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085ba:	f000 f855 	bl	8008668 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085be:	4b02      	ldr	r3, [pc, #8]	; (80085c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	2000017c 	.word	0x2000017c

080085cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	6039      	str	r1, [r7, #0]
 80085d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d105      	bne.n	80085ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	4907      	ldr	r1, [pc, #28]	; (8008600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085e2:	4808      	ldr	r0, [pc, #32]	; (8008604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085e4:	f7ff fdc4 	bl	8008170 <USBD_GetString>
 80085e8:	e004      	b.n	80085f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	4904      	ldr	r1, [pc, #16]	; (8008600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085ee:	4805      	ldr	r0, [pc, #20]	; (8008604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085f0:	f7ff fdbe 	bl	8008170 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085f4:	4b02      	ldr	r3, [pc, #8]	; (8008600 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	20000d70 	.word	0x20000d70
 8008604:	08009078 	.word	0x08009078

08008608 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	6039      	str	r1, [r7, #0]
 8008612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d105      	bne.n	8008626 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	4907      	ldr	r1, [pc, #28]	; (800863c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800861e:	4808      	ldr	r0, [pc, #32]	; (8008640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008620:	f7ff fda6 	bl	8008170 <USBD_GetString>
 8008624:	e004      	b.n	8008630 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	4904      	ldr	r1, [pc, #16]	; (800863c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800862a:	4805      	ldr	r0, [pc, #20]	; (8008640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800862c:	f7ff fda0 	bl	8008170 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008630:	4b02      	ldr	r3, [pc, #8]	; (800863c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20000d70 	.word	0x20000d70
 8008640:	08009084 	.word	0x08009084

08008644 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	6039      	str	r1, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	220c      	movs	r2, #12
 8008654:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008656:	4b03      	ldr	r3, [pc, #12]	; (8008664 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	2000016c 	.word	0x2000016c

08008668 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800866e:	4b0f      	ldr	r3, [pc, #60]	; (80086ac <Get_SerialNum+0x44>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008674:	4b0e      	ldr	r3, [pc, #56]	; (80086b0 <Get_SerialNum+0x48>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800867a:	4b0e      	ldr	r3, [pc, #56]	; (80086b4 <Get_SerialNum+0x4c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4413      	add	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800868e:	2208      	movs	r2, #8
 8008690:	4909      	ldr	r1, [pc, #36]	; (80086b8 <Get_SerialNum+0x50>)
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f000 f814 	bl	80086c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008698:	2204      	movs	r2, #4
 800869a:	4908      	ldr	r1, [pc, #32]	; (80086bc <Get_SerialNum+0x54>)
 800869c:	68b8      	ldr	r0, [r7, #8]
 800869e:	f000 f80f 	bl	80086c0 <IntToUnicode>
  }
}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	1fff7590 	.word	0x1fff7590
 80086b0:	1fff7594 	.word	0x1fff7594
 80086b4:	1fff7598 	.word	0x1fff7598
 80086b8:	2000017e 	.word	0x2000017e
 80086bc:	2000018e 	.word	0x2000018e

080086c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	4613      	mov	r3, r2
 80086cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086d2:	2300      	movs	r3, #0
 80086d4:	75fb      	strb	r3, [r7, #23]
 80086d6:	e027      	b.n	8008728 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	0f1b      	lsrs	r3, r3, #28
 80086dc:	2b09      	cmp	r3, #9
 80086de:	d80b      	bhi.n	80086f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	0f1b      	lsrs	r3, r3, #28
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	4619      	mov	r1, r3
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	440b      	add	r3, r1
 80086f0:	3230      	adds	r2, #48	; 0x30
 80086f2:	b2d2      	uxtb	r2, r2
 80086f4:	701a      	strb	r2, [r3, #0]
 80086f6:	e00a      	b.n	800870e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	0f1b      	lsrs	r3, r3, #28
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	005b      	lsls	r3, r3, #1
 8008702:	4619      	mov	r1, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	440b      	add	r3, r1
 8008708:	3237      	adds	r2, #55	; 0x37
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	011b      	lsls	r3, r3, #4
 8008712:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	3301      	adds	r3, #1
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	4413      	add	r3, r2
 800871e:	2200      	movs	r2, #0
 8008720:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	3301      	adds	r3, #1
 8008726:	75fb      	strb	r3, [r7, #23]
 8008728:	7dfa      	ldrb	r2, [r7, #23]
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	429a      	cmp	r2, r3
 800872e:	d3d3      	bcc.n	80086d8 <IntToUnicode+0x18>
  }
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
	...

08008740 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a0d      	ldr	r2, [pc, #52]	; (8008784 <HAL_PCD_MspInit+0x44>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d113      	bne.n	800877a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008752:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <HAL_PCD_MspInit+0x48>)
 8008754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008756:	4a0c      	ldr	r2, [pc, #48]	; (8008788 <HAL_PCD_MspInit+0x48>)
 8008758:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800875c:	6593      	str	r3, [r2, #88]	; 0x58
 800875e:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <HAL_PCD_MspInit+0x48>)
 8008760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008762:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800876a:	2200      	movs	r2, #0
 800876c:	2100      	movs	r1, #0
 800876e:	2043      	movs	r0, #67	; 0x43
 8008770:	f7f8 fb73 	bl	8000e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008774:	2043      	movs	r0, #67	; 0x43
 8008776:	f7f8 fb8c 	bl	8000e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800877a:	bf00      	nop
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	40006800 	.word	0x40006800
 8008788:	40021000 	.word	0x40021000

0800878c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80087a0:	4619      	mov	r1, r3
 80087a2:	4610      	mov	r0, r2
 80087a4:	f7fe fd68 	bl	8007278 <USBD_LL_SetupStage>
}
 80087a8:	bf00      	nop
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80087c2:	78fa      	ldrb	r2, [r7, #3]
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	4613      	mov	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	440b      	add	r3, r1
 80087d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	78fb      	ldrb	r3, [r7, #3]
 80087d8:	4619      	mov	r1, r3
 80087da:	f7fe fda2 	bl	8007322 <USBD_LL_DataOutStage>
}
 80087de:	bf00      	nop
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	460b      	mov	r3, r1
 80087f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80087f8:	78fa      	ldrb	r2, [r7, #3]
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	4613      	mov	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	440b      	add	r3, r1
 8008806:	333c      	adds	r3, #60	; 0x3c
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	78fb      	ldrb	r3, [r7, #3]
 800880c:	4619      	mov	r1, r3
 800880e:	f7fe fdeb 	bl	80073e8 <USBD_LL_DataInStage>
}
 8008812:	bf00      	nop
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b082      	sub	sp, #8
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008828:	4618      	mov	r0, r3
 800882a:	f7fe feef 	bl	800760c <USBD_LL_SOF>
}
 800882e:	bf00      	nop
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800883e:	2301      	movs	r3, #1
 8008840:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	2b02      	cmp	r3, #2
 8008848:	d001      	beq.n	800884e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800884a:	f7f7 fe1b 	bl	8000484 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008854:	7bfa      	ldrb	r2, [r7, #15]
 8008856:	4611      	mov	r1, r2
 8008858:	4618      	mov	r0, r3
 800885a:	f7fe fe9c 	bl	8007596 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe fe55 	bl	8007514 <USBD_LL_Reset>
}
 800886a:	bf00      	nop
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe fe97 	bl	80075b6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d005      	beq.n	800889c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008890:	4b04      	ldr	r3, [pc, #16]	; (80088a4 <HAL_PCD_SuspendCallback+0x30>)
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	4a03      	ldr	r2, [pc, #12]	; (80088a4 <HAL_PCD_SuspendCallback+0x30>)
 8008896:	f043 0306 	orr.w	r3, r3, #6
 800889a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	e000ed00 	.word	0xe000ed00

080088a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d007      	beq.n	80088c8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088b8:	4b08      	ldr	r3, [pc, #32]	; (80088dc <HAL_PCD_ResumeCallback+0x34>)
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	4a07      	ldr	r2, [pc, #28]	; (80088dc <HAL_PCD_ResumeCallback+0x34>)
 80088be:	f023 0306 	bic.w	r3, r3, #6
 80088c2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80088c4:	f000 fa9e 	bl	8008e04 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fe86 	bl	80075e0 <USBD_LL_Resume>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	e000ed00 	.word	0xe000ed00

080088e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80088e8:	f7fa f878 	bl	80029dc <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80088ec:	4a2b      	ldr	r2, [pc, #172]	; (800899c <USBD_LL_Init+0xbc>)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a29      	ldr	r2, [pc, #164]	; (800899c <USBD_LL_Init+0xbc>)
 80088f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80088fc:	4b27      	ldr	r3, [pc, #156]	; (800899c <USBD_LL_Init+0xbc>)
 80088fe:	4a28      	ldr	r2, [pc, #160]	; (80089a0 <USBD_LL_Init+0xc0>)
 8008900:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008902:	4b26      	ldr	r3, [pc, #152]	; (800899c <USBD_LL_Init+0xbc>)
 8008904:	2208      	movs	r2, #8
 8008906:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008908:	4b24      	ldr	r3, [pc, #144]	; (800899c <USBD_LL_Init+0xbc>)
 800890a:	2202      	movs	r2, #2
 800890c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800890e:	4b23      	ldr	r3, [pc, #140]	; (800899c <USBD_LL_Init+0xbc>)
 8008910:	2202      	movs	r2, #2
 8008912:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008914:	4b21      	ldr	r3, [pc, #132]	; (800899c <USBD_LL_Init+0xbc>)
 8008916:	2200      	movs	r2, #0
 8008918:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800891a:	4b20      	ldr	r3, [pc, #128]	; (800899c <USBD_LL_Init+0xbc>)
 800891c:	2200      	movs	r2, #0
 800891e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008920:	4b1e      	ldr	r3, [pc, #120]	; (800899c <USBD_LL_Init+0xbc>)
 8008922:	2200      	movs	r2, #0
 8008924:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008926:	4b1d      	ldr	r3, [pc, #116]	; (800899c <USBD_LL_Init+0xbc>)
 8008928:	2200      	movs	r2, #0
 800892a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800892c:	481b      	ldr	r0, [pc, #108]	; (800899c <USBD_LL_Init+0xbc>)
 800892e:	f7f8 fc4d 	bl	80011cc <HAL_PCD_Init>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008938:	f7f7 fda4 	bl	8000484 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008942:	2318      	movs	r3, #24
 8008944:	2200      	movs	r2, #0
 8008946:	2100      	movs	r1, #0
 8008948:	f7f9 ff76 	bl	8002838 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008952:	2358      	movs	r3, #88	; 0x58
 8008954:	2200      	movs	r2, #0
 8008956:	2180      	movs	r1, #128	; 0x80
 8008958:	f7f9 ff6e 	bl	8002838 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008962:	23c0      	movs	r3, #192	; 0xc0
 8008964:	2200      	movs	r2, #0
 8008966:	2181      	movs	r1, #129	; 0x81
 8008968:	f7f9 ff66 	bl	8002838 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008972:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008976:	2200      	movs	r2, #0
 8008978:	2101      	movs	r1, #1
 800897a:	f7f9 ff5d 	bl	8002838 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008988:	2200      	movs	r2, #0
 800898a:	2182      	movs	r1, #130	; 0x82
 800898c:	f7f9 ff54 	bl	8002838 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	20000f70 	.word	0x20000f70
 80089a0:	40006800 	.word	0x40006800

080089a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7f8 fd18 	bl	80013f0 <HAL_PCD_Start>
 80089c0:	4603      	mov	r3, r0
 80089c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80089c4:	7bbb      	ldrb	r3, [r7, #14]
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d816      	bhi.n	80089f8 <USBD_LL_Start+0x54>
 80089ca:	a201      	add	r2, pc, #4	; (adr r2, 80089d0 <USBD_LL_Start+0x2c>)
 80089cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d0:	080089e1 	.word	0x080089e1
 80089d4:	080089e7 	.word	0x080089e7
 80089d8:	080089ed 	.word	0x080089ed
 80089dc:	080089f3 	.word	0x080089f3
    case HAL_OK :
      usb_status = USBD_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]
    break;
 80089e4:	e00b      	b.n	80089fe <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089e6:	2303      	movs	r3, #3
 80089e8:	73fb      	strb	r3, [r7, #15]
    break;
 80089ea:	e008      	b.n	80089fe <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089ec:	2301      	movs	r3, #1
 80089ee:	73fb      	strb	r3, [r7, #15]
    break;
 80089f0:	e005      	b.n	80089fe <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089f2:	2303      	movs	r3, #3
 80089f4:	73fb      	strb	r3, [r7, #15]
    break;
 80089f6:	e002      	b.n	80089fe <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80089f8:	2303      	movs	r3, #3
 80089fa:	73fb      	strb	r3, [r7, #15]
    break;
 80089fc:	bf00      	nop
  }
  return usb_status;
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	4608      	mov	r0, r1
 8008a12:	4611      	mov	r1, r2
 8008a14:	461a      	mov	r2, r3
 8008a16:	4603      	mov	r3, r0
 8008a18:	70fb      	strb	r3, [r7, #3]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	70bb      	strb	r3, [r7, #2]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a30:	78bb      	ldrb	r3, [r7, #2]
 8008a32:	883a      	ldrh	r2, [r7, #0]
 8008a34:	78f9      	ldrb	r1, [r7, #3]
 8008a36:	f7f8 fe70 	bl	800171a <HAL_PCD_EP_Open>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d817      	bhi.n	8008a74 <USBD_LL_OpenEP+0x6c>
 8008a44:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <USBD_LL_OpenEP+0x44>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008a5d 	.word	0x08008a5d
 8008a50:	08008a63 	.word	0x08008a63
 8008a54:	08008a69 	.word	0x08008a69
 8008a58:	08008a6f 	.word	0x08008a6f
    case HAL_OK :
      usb_status = USBD_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a60:	e00b      	b.n	8008a7a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a62:	2303      	movs	r3, #3
 8008a64:	73fb      	strb	r3, [r7, #15]
    break;
 8008a66:	e008      	b.n	8008a7a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a6c:	e005      	b.n	8008a7a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	73fb      	strb	r3, [r7, #15]
    break;
 8008a72:	e002      	b.n	8008a7a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008a74:	2303      	movs	r3, #3
 8008a76:	73fb      	strb	r3, [r7, #15]
    break;
 8008a78:	bf00      	nop
  }
  return usb_status;
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a9e:	78fa      	ldrb	r2, [r7, #3]
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f8 fe9f 	bl	80017e6 <HAL_PCD_EP_Close>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d816      	bhi.n	8008ae0 <USBD_LL_CloseEP+0x5c>
 8008ab2:	a201      	add	r2, pc, #4	; (adr r2, 8008ab8 <USBD_LL_CloseEP+0x34>)
 8008ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab8:	08008ac9 	.word	0x08008ac9
 8008abc:	08008acf 	.word	0x08008acf
 8008ac0:	08008ad5 	.word	0x08008ad5
 8008ac4:	08008adb 	.word	0x08008adb
    case HAL_OK :
      usb_status = USBD_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
    break;
 8008acc:	e00b      	b.n	8008ae6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad2:	e008      	b.n	8008ae6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad8:	e005      	b.n	8008ae6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ada:	2303      	movs	r3, #3
 8008adc:	73fb      	strb	r3, [r7, #15]
    break;
 8008ade:	e002      	b.n	8008ae6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae4:	bf00      	nop
  }
  return usb_status;
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b0a:	78fa      	ldrb	r2, [r7, #3]
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7f8 ff49 	bl	80019a6 <HAL_PCD_EP_SetStall>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d816      	bhi.n	8008b4c <USBD_LL_StallEP+0x5c>
 8008b1e:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <USBD_LL_StallEP+0x34>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008b35 	.word	0x08008b35
 8008b28:	08008b3b 	.word	0x08008b3b
 8008b2c:	08008b41 	.word	0x08008b41
 8008b30:	08008b47 	.word	0x08008b47
    case HAL_OK :
      usb_status = USBD_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73fb      	strb	r3, [r7, #15]
    break;
 8008b38:	e00b      	b.n	8008b52 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3e:	e008      	b.n	8008b52 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b40:	2301      	movs	r3, #1
 8008b42:	73fb      	strb	r3, [r7, #15]
    break;
 8008b44:	e005      	b.n	8008b52 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b46:	2303      	movs	r3, #3
 8008b48:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4a:	e002      	b.n	8008b52 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b50:	bf00      	nop
  }
  return usb_status;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b76:	78fa      	ldrb	r2, [r7, #3]
 8008b78:	4611      	mov	r1, r2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7f8 ff73 	bl	8001a66 <HAL_PCD_EP_ClrStall>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d816      	bhi.n	8008bb8 <USBD_LL_ClearStallEP+0x5c>
 8008b8a:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <USBD_LL_ClearStallEP+0x34>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008ba1 	.word	0x08008ba1
 8008b94:	08008ba7 	.word	0x08008ba7
 8008b98:	08008bad 	.word	0x08008bad
 8008b9c:	08008bb3 	.word	0x08008bb3
    case HAL_OK :
      usb_status = USBD_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba4:	e00b      	b.n	8008bbe <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8008baa:	e008      	b.n	8008bbe <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bac:	2301      	movs	r3, #1
 8008bae:	73fb      	strb	r3, [r7, #15]
    break;
 8008bb0:	e005      	b.n	8008bbe <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008bb6:	e002      	b.n	8008bbe <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	73fb      	strb	r3, [r7, #15]
    break;
 8008bbc:	bf00      	nop
  }
  return usb_status;
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da0c      	bge.n	8008bfe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bea:	68f9      	ldr	r1, [r7, #12]
 8008bec:	1c5a      	adds	r2, r3, #1
 8008bee:	4613      	mov	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	440b      	add	r3, r1
 8008bf8:	3302      	adds	r3, #2
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	e00b      	b.n	8008c16 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bfe:	78fb      	ldrb	r3, [r7, #3]
 8008c00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c04:	68f9      	ldr	r1, [r7, #12]
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	440b      	add	r3, r1
 8008c10:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008c14:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
	...

08008c24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c3e:	78fa      	ldrb	r2, [r7, #3]
 8008c40:	4611      	mov	r1, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7f8 fd44 	bl	80016d0 <HAL_PCD_SetAddress>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d816      	bhi.n	8008c80 <USBD_LL_SetUSBAddress+0x5c>
 8008c52:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <USBD_LL_SetUSBAddress+0x34>)
 8008c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c58:	08008c69 	.word	0x08008c69
 8008c5c:	08008c6f 	.word	0x08008c6f
 8008c60:	08008c75 	.word	0x08008c75
 8008c64:	08008c7b 	.word	0x08008c7b
    case HAL_OK :
      usb_status = USBD_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6c:	e00b      	b.n	8008c86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	73fb      	strb	r3, [r7, #15]
    break;
 8008c72:	e008      	b.n	8008c86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c74:	2301      	movs	r3, #1
 8008c76:	73fb      	strb	r3, [r7, #15]
    break;
 8008c78:	e005      	b.n	8008c86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c7e:	e002      	b.n	8008c86 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008c80:	2303      	movs	r3, #3
 8008c82:	73fb      	strb	r3, [r7, #15]
    break;
 8008c84:	bf00      	nop
  }
  return usb_status;
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	607a      	str	r2, [r7, #4]
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008cae:	7af9      	ldrb	r1, [r7, #11]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	f7f8 fe34 	bl	8001920 <HAL_PCD_EP_Transmit>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008cbc:	7dbb      	ldrb	r3, [r7, #22]
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d816      	bhi.n	8008cf0 <USBD_LL_Transmit+0x60>
 8008cc2:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <USBD_LL_Transmit+0x38>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008cd9 	.word	0x08008cd9
 8008ccc:	08008cdf 	.word	0x08008cdf
 8008cd0:	08008ce5 	.word	0x08008ce5
 8008cd4:	08008ceb 	.word	0x08008ceb
    case HAL_OK :
      usb_status = USBD_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	75fb      	strb	r3, [r7, #23]
    break;
 8008cdc:	e00b      	b.n	8008cf6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	75fb      	strb	r3, [r7, #23]
    break;
 8008ce2:	e008      	b.n	8008cf6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	75fb      	strb	r3, [r7, #23]
    break;
 8008ce8:	e005      	b.n	8008cf6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cea:	2303      	movs	r3, #3
 8008cec:	75fb      	strb	r3, [r7, #23]
    break;
 8008cee:	e002      	b.n	8008cf6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	75fb      	strb	r3, [r7, #23]
    break;
 8008cf4:	bf00      	nop
  }
  return usb_status;
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	607a      	str	r2, [r7, #4]
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d1e:	7af9      	ldrb	r1, [r7, #11]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	f7f8 fda7 	bl	8001876 <HAL_PCD_EP_Receive>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008d2c:	7dbb      	ldrb	r3, [r7, #22]
 8008d2e:	2b03      	cmp	r3, #3
 8008d30:	d816      	bhi.n	8008d60 <USBD_LL_PrepareReceive+0x60>
 8008d32:	a201      	add	r2, pc, #4	; (adr r2, 8008d38 <USBD_LL_PrepareReceive+0x38>)
 8008d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d38:	08008d49 	.word	0x08008d49
 8008d3c:	08008d4f 	.word	0x08008d4f
 8008d40:	08008d55 	.word	0x08008d55
 8008d44:	08008d5b 	.word	0x08008d5b
    case HAL_OK :
      usb_status = USBD_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d4c:	e00b      	b.n	8008d66 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	75fb      	strb	r3, [r7, #23]
    break;
 8008d52:	e008      	b.n	8008d66 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d54:	2301      	movs	r3, #1
 8008d56:	75fb      	strb	r3, [r7, #23]
    break;
 8008d58:	e005      	b.n	8008d66 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	75fb      	strb	r3, [r7, #23]
    break;
 8008d5e:	e002      	b.n	8008d66 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008d60:	2303      	movs	r3, #3
 8008d62:	75fb      	strb	r3, [r7, #23]
    break;
 8008d64:	bf00      	nop
  }
  return usb_status;
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d82:	78fa      	ldrb	r2, [r7, #3]
 8008d84:	4611      	mov	r1, r2
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7f8 fdb2 	bl	80018f0 <HAL_PCD_EP_GetRxCount>
 8008d8c:	4603      	mov	r3, r0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
	...

08008d98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <HAL_PCDEx_LPM_Callback+0x18>
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d013      	beq.n	8008dd6 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008dae:	e023      	b.n	8008df8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d007      	beq.n	8008dc8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008db8:	f000 f824 	bl	8008e04 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008dbc:	4b10      	ldr	r3, [pc, #64]	; (8008e00 <HAL_PCDEx_LPM_Callback+0x68>)
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	4a0f      	ldr	r2, [pc, #60]	; (8008e00 <HAL_PCDEx_LPM_Callback+0x68>)
 8008dc2:	f023 0306 	bic.w	r3, r3, #6
 8008dc6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fc06 	bl	80075e0 <USBD_LL_Resume>
    break;
 8008dd4:	e010      	b.n	8008df8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fe fbea 	bl	80075b6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d005      	beq.n	8008df6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008dea:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <HAL_PCDEx_LPM_Callback+0x68>)
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	4a04      	ldr	r2, [pc, #16]	; (8008e00 <HAL_PCDEx_LPM_Callback+0x68>)
 8008df0:	f043 0306 	orr.w	r3, r3, #6
 8008df4:	6113      	str	r3, [r2, #16]
    break;
 8008df6:	bf00      	nop
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	e000ed00 	.word	0xe000ed00

08008e04 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008e08:	f7f7 fa30 	bl	800026c <SystemClock_Config>
}
 8008e0c:	bf00      	nop
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <__errno>:
 8008e10:	4b01      	ldr	r3, [pc, #4]	; (8008e18 <__errno+0x8>)
 8008e12:	6818      	ldr	r0, [r3, #0]
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	20000198 	.word	0x20000198

08008e1c <__libc_init_array>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	4d0d      	ldr	r5, [pc, #52]	; (8008e54 <__libc_init_array+0x38>)
 8008e20:	4c0d      	ldr	r4, [pc, #52]	; (8008e58 <__libc_init_array+0x3c>)
 8008e22:	1b64      	subs	r4, r4, r5
 8008e24:	10a4      	asrs	r4, r4, #2
 8008e26:	2600      	movs	r6, #0
 8008e28:	42a6      	cmp	r6, r4
 8008e2a:	d109      	bne.n	8008e40 <__libc_init_array+0x24>
 8008e2c:	4d0b      	ldr	r5, [pc, #44]	; (8008e5c <__libc_init_array+0x40>)
 8008e2e:	4c0c      	ldr	r4, [pc, #48]	; (8008e60 <__libc_init_array+0x44>)
 8008e30:	f000 f8f8 	bl	8009024 <_init>
 8008e34:	1b64      	subs	r4, r4, r5
 8008e36:	10a4      	asrs	r4, r4, #2
 8008e38:	2600      	movs	r6, #0
 8008e3a:	42a6      	cmp	r6, r4
 8008e3c:	d105      	bne.n	8008e4a <__libc_init_array+0x2e>
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}
 8008e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e44:	4798      	blx	r3
 8008e46:	3601      	adds	r6, #1
 8008e48:	e7ee      	b.n	8008e28 <__libc_init_array+0xc>
 8008e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4e:	4798      	blx	r3
 8008e50:	3601      	adds	r6, #1
 8008e52:	e7f2      	b.n	8008e3a <__libc_init_array+0x1e>
 8008e54:	080090d4 	.word	0x080090d4
 8008e58:	080090d4 	.word	0x080090d4
 8008e5c:	080090d4 	.word	0x080090d4
 8008e60:	080090d8 	.word	0x080090d8

08008e64 <malloc>:
 8008e64:	4b02      	ldr	r3, [pc, #8]	; (8008e70 <malloc+0xc>)
 8008e66:	4601      	mov	r1, r0
 8008e68:	6818      	ldr	r0, [r3, #0]
 8008e6a:	f000 b863 	b.w	8008f34 <_malloc_r>
 8008e6e:	bf00      	nop
 8008e70:	20000198 	.word	0x20000198

08008e74 <free>:
 8008e74:	4b02      	ldr	r3, [pc, #8]	; (8008e80 <free+0xc>)
 8008e76:	4601      	mov	r1, r0
 8008e78:	6818      	ldr	r0, [r3, #0]
 8008e7a:	f000 b80b 	b.w	8008e94 <_free_r>
 8008e7e:	bf00      	nop
 8008e80:	20000198 	.word	0x20000198

08008e84 <memset>:
 8008e84:	4402      	add	r2, r0
 8008e86:	4603      	mov	r3, r0
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d100      	bne.n	8008e8e <memset+0xa>
 8008e8c:	4770      	bx	lr
 8008e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e92:	e7f9      	b.n	8008e88 <memset+0x4>

08008e94 <_free_r>:
 8008e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e96:	2900      	cmp	r1, #0
 8008e98:	d048      	beq.n	8008f2c <_free_r+0x98>
 8008e9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e9e:	9001      	str	r0, [sp, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ea6:	bfb8      	it	lt
 8008ea8:	18e4      	addlt	r4, r4, r3
 8008eaa:	f000 f8ad 	bl	8009008 <__malloc_lock>
 8008eae:	4a20      	ldr	r2, [pc, #128]	; (8008f30 <_free_r+0x9c>)
 8008eb0:	9801      	ldr	r0, [sp, #4]
 8008eb2:	6813      	ldr	r3, [r2, #0]
 8008eb4:	4615      	mov	r5, r2
 8008eb6:	b933      	cbnz	r3, 8008ec6 <_free_r+0x32>
 8008eb8:	6063      	str	r3, [r4, #4]
 8008eba:	6014      	str	r4, [r2, #0]
 8008ebc:	b003      	add	sp, #12
 8008ebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ec2:	f000 b8a7 	b.w	8009014 <__malloc_unlock>
 8008ec6:	42a3      	cmp	r3, r4
 8008ec8:	d90b      	bls.n	8008ee2 <_free_r+0x4e>
 8008eca:	6821      	ldr	r1, [r4, #0]
 8008ecc:	1862      	adds	r2, r4, r1
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	bf04      	itt	eq
 8008ed2:	681a      	ldreq	r2, [r3, #0]
 8008ed4:	685b      	ldreq	r3, [r3, #4]
 8008ed6:	6063      	str	r3, [r4, #4]
 8008ed8:	bf04      	itt	eq
 8008eda:	1852      	addeq	r2, r2, r1
 8008edc:	6022      	streq	r2, [r4, #0]
 8008ede:	602c      	str	r4, [r5, #0]
 8008ee0:	e7ec      	b.n	8008ebc <_free_r+0x28>
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	b10b      	cbz	r3, 8008eec <_free_r+0x58>
 8008ee8:	42a3      	cmp	r3, r4
 8008eea:	d9fa      	bls.n	8008ee2 <_free_r+0x4e>
 8008eec:	6811      	ldr	r1, [r2, #0]
 8008eee:	1855      	adds	r5, r2, r1
 8008ef0:	42a5      	cmp	r5, r4
 8008ef2:	d10b      	bne.n	8008f0c <_free_r+0x78>
 8008ef4:	6824      	ldr	r4, [r4, #0]
 8008ef6:	4421      	add	r1, r4
 8008ef8:	1854      	adds	r4, r2, r1
 8008efa:	42a3      	cmp	r3, r4
 8008efc:	6011      	str	r1, [r2, #0]
 8008efe:	d1dd      	bne.n	8008ebc <_free_r+0x28>
 8008f00:	681c      	ldr	r4, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	6053      	str	r3, [r2, #4]
 8008f06:	4421      	add	r1, r4
 8008f08:	6011      	str	r1, [r2, #0]
 8008f0a:	e7d7      	b.n	8008ebc <_free_r+0x28>
 8008f0c:	d902      	bls.n	8008f14 <_free_r+0x80>
 8008f0e:	230c      	movs	r3, #12
 8008f10:	6003      	str	r3, [r0, #0]
 8008f12:	e7d3      	b.n	8008ebc <_free_r+0x28>
 8008f14:	6825      	ldr	r5, [r4, #0]
 8008f16:	1961      	adds	r1, r4, r5
 8008f18:	428b      	cmp	r3, r1
 8008f1a:	bf04      	itt	eq
 8008f1c:	6819      	ldreq	r1, [r3, #0]
 8008f1e:	685b      	ldreq	r3, [r3, #4]
 8008f20:	6063      	str	r3, [r4, #4]
 8008f22:	bf04      	itt	eq
 8008f24:	1949      	addeq	r1, r1, r5
 8008f26:	6021      	streq	r1, [r4, #0]
 8008f28:	6054      	str	r4, [r2, #4]
 8008f2a:	e7c7      	b.n	8008ebc <_free_r+0x28>
 8008f2c:	b003      	add	sp, #12
 8008f2e:	bd30      	pop	{r4, r5, pc}
 8008f30:	20000220 	.word	0x20000220

08008f34 <_malloc_r>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	1ccd      	adds	r5, r1, #3
 8008f38:	f025 0503 	bic.w	r5, r5, #3
 8008f3c:	3508      	adds	r5, #8
 8008f3e:	2d0c      	cmp	r5, #12
 8008f40:	bf38      	it	cc
 8008f42:	250c      	movcc	r5, #12
 8008f44:	2d00      	cmp	r5, #0
 8008f46:	4606      	mov	r6, r0
 8008f48:	db01      	blt.n	8008f4e <_malloc_r+0x1a>
 8008f4a:	42a9      	cmp	r1, r5
 8008f4c:	d903      	bls.n	8008f56 <_malloc_r+0x22>
 8008f4e:	230c      	movs	r3, #12
 8008f50:	6033      	str	r3, [r6, #0]
 8008f52:	2000      	movs	r0, #0
 8008f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f56:	f000 f857 	bl	8009008 <__malloc_lock>
 8008f5a:	4921      	ldr	r1, [pc, #132]	; (8008fe0 <_malloc_r+0xac>)
 8008f5c:	680a      	ldr	r2, [r1, #0]
 8008f5e:	4614      	mov	r4, r2
 8008f60:	b99c      	cbnz	r4, 8008f8a <_malloc_r+0x56>
 8008f62:	4f20      	ldr	r7, [pc, #128]	; (8008fe4 <_malloc_r+0xb0>)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	b923      	cbnz	r3, 8008f72 <_malloc_r+0x3e>
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f000 f83c 	bl	8008fe8 <_sbrk_r>
 8008f70:	6038      	str	r0, [r7, #0]
 8008f72:	4629      	mov	r1, r5
 8008f74:	4630      	mov	r0, r6
 8008f76:	f000 f837 	bl	8008fe8 <_sbrk_r>
 8008f7a:	1c43      	adds	r3, r0, #1
 8008f7c:	d123      	bne.n	8008fc6 <_malloc_r+0x92>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	6033      	str	r3, [r6, #0]
 8008f82:	4630      	mov	r0, r6
 8008f84:	f000 f846 	bl	8009014 <__malloc_unlock>
 8008f88:	e7e3      	b.n	8008f52 <_malloc_r+0x1e>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	1b5b      	subs	r3, r3, r5
 8008f8e:	d417      	bmi.n	8008fc0 <_malloc_r+0x8c>
 8008f90:	2b0b      	cmp	r3, #11
 8008f92:	d903      	bls.n	8008f9c <_malloc_r+0x68>
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	441c      	add	r4, r3
 8008f98:	6025      	str	r5, [r4, #0]
 8008f9a:	e004      	b.n	8008fa6 <_malloc_r+0x72>
 8008f9c:	6863      	ldr	r3, [r4, #4]
 8008f9e:	42a2      	cmp	r2, r4
 8008fa0:	bf0c      	ite	eq
 8008fa2:	600b      	streq	r3, [r1, #0]
 8008fa4:	6053      	strne	r3, [r2, #4]
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f000 f834 	bl	8009014 <__malloc_unlock>
 8008fac:	f104 000b 	add.w	r0, r4, #11
 8008fb0:	1d23      	adds	r3, r4, #4
 8008fb2:	f020 0007 	bic.w	r0, r0, #7
 8008fb6:	1ac2      	subs	r2, r0, r3
 8008fb8:	d0cc      	beq.n	8008f54 <_malloc_r+0x20>
 8008fba:	1a1b      	subs	r3, r3, r0
 8008fbc:	50a3      	str	r3, [r4, r2]
 8008fbe:	e7c9      	b.n	8008f54 <_malloc_r+0x20>
 8008fc0:	4622      	mov	r2, r4
 8008fc2:	6864      	ldr	r4, [r4, #4]
 8008fc4:	e7cc      	b.n	8008f60 <_malloc_r+0x2c>
 8008fc6:	1cc4      	adds	r4, r0, #3
 8008fc8:	f024 0403 	bic.w	r4, r4, #3
 8008fcc:	42a0      	cmp	r0, r4
 8008fce:	d0e3      	beq.n	8008f98 <_malloc_r+0x64>
 8008fd0:	1a21      	subs	r1, r4, r0
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f000 f808 	bl	8008fe8 <_sbrk_r>
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d1dd      	bne.n	8008f98 <_malloc_r+0x64>
 8008fdc:	e7cf      	b.n	8008f7e <_malloc_r+0x4a>
 8008fde:	bf00      	nop
 8008fe0:	20000220 	.word	0x20000220
 8008fe4:	20000224 	.word	0x20000224

08008fe8 <_sbrk_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4d06      	ldr	r5, [pc, #24]	; (8009004 <_sbrk_r+0x1c>)
 8008fec:	2300      	movs	r3, #0
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	602b      	str	r3, [r5, #0]
 8008ff4:	f7f7 fd28 	bl	8000a48 <_sbrk>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_sbrk_r+0x1a>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_sbrk_r+0x1a>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	20001264 	.word	0x20001264

08009008 <__malloc_lock>:
 8009008:	4801      	ldr	r0, [pc, #4]	; (8009010 <__malloc_lock+0x8>)
 800900a:	f000 b809 	b.w	8009020 <__retarget_lock_acquire_recursive>
 800900e:	bf00      	nop
 8009010:	2000126c 	.word	0x2000126c

08009014 <__malloc_unlock>:
 8009014:	4801      	ldr	r0, [pc, #4]	; (800901c <__malloc_unlock+0x8>)
 8009016:	f000 b804 	b.w	8009022 <__retarget_lock_release_recursive>
 800901a:	bf00      	nop
 800901c:	2000126c 	.word	0x2000126c

08009020 <__retarget_lock_acquire_recursive>:
 8009020:	4770      	bx	lr

08009022 <__retarget_lock_release_recursive>:
 8009022:	4770      	bx	lr

08009024 <_init>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	bf00      	nop
 8009028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902a:	bc08      	pop	{r3}
 800902c:	469e      	mov	lr, r3
 800902e:	4770      	bx	lr

08009030 <_fini>:
 8009030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009032:	bf00      	nop
 8009034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009036:	bc08      	pop	{r3}
 8009038:	469e      	mov	lr, r3
 800903a:	4770      	bx	lr
