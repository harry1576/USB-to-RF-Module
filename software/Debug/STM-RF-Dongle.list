
STM-RF-Dongle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009634  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080097c4  080097c4  000197c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009898  08009898  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  08009898  08009898  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009898  08009898  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009898  08009898  00019898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800989c  0800989c  0001989c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  080098a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b8  2000020c  08009aac  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200012c4  08009aac  000212c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc3b  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b3  00000000  00000000  0003ce77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00040730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  000416a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002322e  00000000  00000000  00042498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001319c  00000000  00000000  000656c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3896  00000000  00000000  00078862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c0f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004144  00000000  00000000  0013c14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097ac 	.word	0x080097ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	080097ac 	.word	0x080097ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fc7c 	bl	8000b82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f857 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f915 	bl	80004bc <MX_GPIO_Init>
  MX_SPI3_Init();
 8000292:	f000 f8d5 	bl	8000440 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 8000296:	f008 f883 	bl	80083a0 <MX_USB_DEVICE_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 800029a:	2201      	movs	r2, #1
 800029c:	2101      	movs	r1, #1
 800029e:	4822      	ldr	r0, [pc, #136]	; (8000328 <main+0xa8>)
 80002a0:	f000 ff84 	bl	80011ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,1);
 80002a4:	2201      	movs	r2, #1
 80002a6:	2102      	movs	r1, #2
 80002a8:	481f      	ldr	r0, [pc, #124]	; (8000328 <main+0xa8>)
 80002aa:	f000 ff7f 	bl	80011ac <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 80002ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80002b2:	f000 fcdb 	bl	8000c6c <HAL_Delay>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 80002b6:	f000 faa7 	bl	8000808 <NRF24_Init>
  NRF24_TxMode(TxAddress,10);
 80002ba:	210a      	movs	r1, #10
 80002bc:	481b      	ldr	r0, [pc, #108]	; (800032c <main+0xac>)
 80002be:	f000 faca 	bl	8000856 <NRF24_TxMode>

  uint8_t count = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(NRF24_Transmit(TxData) == 1)
 80002c6:	481a      	ldr	r0, [pc, #104]	; (8000330 <main+0xb0>)
 80002c8:	f000 faec 	bl	80008a4 <NRF24_Transmit>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d119      	bne.n	8000306 <main+0x86>
	  {
		sprintf(txBuffer,"%u\r\n",count);
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	461a      	mov	r2, r3
 80002d6:	4917      	ldr	r1, [pc, #92]	; (8000334 <main+0xb4>)
 80002d8:	4817      	ldr	r0, [pc, #92]	; (8000338 <main+0xb8>)
 80002da:	f008 fef3 	bl	80090c4 <siprintf>
		CDC_Transmit_FS((uint8_t *) txBuffer,strlen(txBuffer));
 80002de:	4816      	ldr	r0, [pc, #88]	; (8000338 <main+0xb8>)
 80002e0:	f7ff ff76 	bl	80001d0 <strlen>
 80002e4:	4603      	mov	r3, r0
 80002e6:	b29b      	uxth	r3, r3
 80002e8:	4619      	mov	r1, r3
 80002ea:	4813      	ldr	r0, [pc, #76]	; (8000338 <main+0xb8>)
 80002ec:	f008 f92c 	bl	8008548 <CDC_Transmit_FS>
	   	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2101      	movs	r1, #1
 80002f4:	480c      	ldr	r0, [pc, #48]	; (8000328 <main+0xa8>)
 80002f6:	f000 ff59 	bl	80011ac <HAL_GPIO_WritePin>
	   	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2102      	movs	r1, #2
 80002fe:	480a      	ldr	r0, [pc, #40]	; (8000328 <main+0xa8>)
 8000300:	f000 ff54 	bl	80011ac <HAL_GPIO_WritePin>
 8000304:	e009      	b.n	800031a <main+0x9a>
	  }
	  else
	  {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000306:	2201      	movs	r2, #1
 8000308:	2101      	movs	r1, #1
 800030a:	4807      	ldr	r0, [pc, #28]	; (8000328 <main+0xa8>)
 800030c:	f000 ff4e 	bl	80011ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,1);
 8000310:	2201      	movs	r2, #1
 8000312:	2102      	movs	r1, #2
 8000314:	4804      	ldr	r0, [pc, #16]	; (8000328 <main+0xa8>)
 8000316:	f000 ff49 	bl	80011ac <HAL_GPIO_WritePin>
	  }


	count = 2;
 800031a:	2302      	movs	r3, #2
 800031c:	71fb      	strb	r3, [r7, #7]

	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);

    //HAL_Delay(20);
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
    HAL_Delay(5000);
 800031e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000322:	f000 fca3 	bl	8000c6c <HAL_Delay>
	  if(NRF24_Transmit(TxData) == 1)
 8000326:	e7ce      	b.n	80002c6 <main+0x46>
 8000328:	48000400 	.word	0x48000400
 800032c:	20000000 	.word	0x20000000
 8000330:	20000008 	.word	0x20000008
 8000334:	080097c4 	.word	0x080097c4
 8000338:	200002dc 	.word	0x200002dc

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b0ac      	sub	sp, #176	; 0xb0
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000346:	2244      	movs	r2, #68	; 0x44
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f008 fdf8 	bl	8008f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2254      	movs	r2, #84	; 0x54
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f008 fdea 	bl	8008f40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800036c:	2310      	movs	r3, #16
 800036e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000370:	2301      	movs	r3, #1
 8000372:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800037c:	2360      	movs	r3, #96	; 0x60
 800037e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000382:	2302      	movs	r3, #2
 8000384:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000388:	2301      	movs	r3, #1
 800038a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800038e:	2301      	movs	r3, #1
 8000390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000394:	2328      	movs	r3, #40	; 0x28
 8000396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800039a:	2307      	movs	r3, #7
 800039c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003a0:	2302      	movs	r3, #2
 80003a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003a6:	2302      	movs	r3, #2
 80003a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003b0:	4618      	mov	r0, r3
 80003b2:	f002 fb2b 	bl	8002a0c <HAL_RCC_OscConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003bc:	f000 f8ca 	bl	8000554 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	230f      	movs	r3, #15
 80003c2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c4:	2303      	movs	r3, #3
 80003c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003d8:	2104      	movs	r1, #4
 80003da:	4618      	mov	r0, r3
 80003dc:	f002 ff36 	bl	800324c <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003e6:	f000 f8b5 	bl	8000554 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80003f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80003f4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80003f6:	2301      	movs	r3, #1
 80003f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80003fe:	2318      	movs	r3, #24
 8000400:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000402:	2307      	movs	r3, #7
 8000404:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000406:	2302      	movs	r3, #2
 8000408:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800040a:	2302      	movs	r3, #2
 800040c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800040e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000412:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	4618      	mov	r0, r3
 8000418:	f003 f8e6 	bl	80035e8 <HAL_RCCEx_PeriphCLKConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000422:	f000 f897 	bl	8000554 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000426:	f44f 7000 	mov.w	r0, #512	; 0x200
 800042a:	f002 fa89 	bl	8002940 <HAL_PWREx_ControlVoltageScaling>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000434:	f000 f88e 	bl	8000554 <Error_Handler>
  }
}
 8000438:	bf00      	nop
 800043a:	37b0      	adds	r7, #176	; 0xb0
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_SPI3_Init+0x74>)
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <MX_SPI3_Init+0x78>)
 8000448:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800044a:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_SPI3_Init+0x74>)
 800044c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000450:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_SPI3_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_5BIT;
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_SPI3_Init+0x74>)
 800045a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800045e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_SPI3_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MX_SPI3_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_SPI3_Init+0x74>)
 800046e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000472:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_SPI3_Init+0x74>)
 8000476:	2228      	movs	r2, #40	; 0x28
 8000478:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_SPI3_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_SPI3_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_SPI3_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_SPI3_Init+0x74>)
 800048e:	2207      	movs	r2, #7
 8000490:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_SPI3_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_SPI3_Init+0x74>)
 800049a:	2208      	movs	r2, #8
 800049c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_SPI3_Init+0x74>)
 80004a0:	f003 fb88 	bl	8003bb4 <HAL_SPI_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80004aa:	f000 f853 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000238 	.word	0x20000238
 80004b8:	40003c00 	.word	0x40003c00

080004bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	f107 030c 	add.w	r3, r7, #12
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	4b1e      	ldr	r3, [pc, #120]	; (800054c <MX_GPIO_Init+0x90>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	4a1d      	ldr	r2, [pc, #116]	; (800054c <MX_GPIO_Init+0x90>)
 80004d8:	f043 0302 	orr.w	r3, r3, #2
 80004dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004de:	4b1b      	ldr	r3, [pc, #108]	; (800054c <MX_GPIO_Init+0x90>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f003 0302 	and.w	r3, r3, #2
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b18      	ldr	r3, [pc, #96]	; (800054c <MX_GPIO_Init+0x90>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	4a17      	ldr	r2, [pc, #92]	; (800054c <MX_GPIO_Init+0x90>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <MX_GPIO_Init+0x90>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	21c3      	movs	r1, #195	; 0xc3
 8000506:	4812      	ldr	r0, [pc, #72]	; (8000550 <MX_GPIO_Init+0x94>)
 8000508:	f000 fe50 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin NRF_CS_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin;
 800050c:	23c3      	movs	r3, #195	; 0xc3
 800050e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2300      	movs	r3, #0
 800051a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	4619      	mov	r1, r3
 8000522:	480b      	ldr	r0, [pc, #44]	; (8000550 <MX_GPIO_Init+0x94>)
 8000524:	f000 fcd8 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000528:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800052c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000536:	f107 030c 	add.w	r3, r7, #12
 800053a:	4619      	mov	r1, r3
 800053c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000540:	f000 fcca 	bl	8000ed8 <HAL_GPIO_Init>

}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40021000 	.word	0x40021000
 8000550:	48000400 	.word	0x48000400

08000554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055c:	e7fe      	b.n	800055c <Error_Handler+0x8>
	...

08000560 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_6


void CS_Select (void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <CS_Select+0x14>)
 800056a:	f000 fe1f 	bl	80011ac <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	48000400 	.word	0x48000400

08000578 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <CS_UnSelect+0x14>)
 8000582:	f000 fe13 	bl	80011ac <HAL_GPIO_WritePin>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	48000400 	.word	0x48000400

08000590 <CE_Enable>:


void CE_Enable (void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2180      	movs	r1, #128	; 0x80
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <CE_Enable+0x14>)
 800059a:	f000 fe07 	bl	80011ac <HAL_GPIO_WritePin>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	48000400 	.word	0x48000400

080005a8 <CE_Disable>:

void CE_Disable (void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <CE_Disable+0x14>)
 80005b2:	f000 fdfb 	bl	80011ac <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	48000400 	.word	0x48000400

080005c0 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	460a      	mov	r2, r1
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	f043 0320 	orr.w	r3, r3, #32
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80005da:	79bb      	ldrb	r3, [r7, #6]
 80005dc:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005de:	f7ff ffbf 	bl	8000560 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80005e2:	f107 010c 	add.w	r1, r7, #12
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	2202      	movs	r2, #2
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <nrf24_WriteReg+0x40>)
 80005ee:	f003 fb84 	bl	8003cfa <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005f2:	f7ff ffc1 	bl	8000578 <CS_UnSelect>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000238 	.word	0x20000238

08000604 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	f043 0320 	orr.w	r3, r3, #32
 8000618:	b2db      	uxtb	r3, r3
 800061a:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800061c:	f7ff ffa0 	bl	8000560 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000620:	f107 0114 	add.w	r1, r7, #20
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	2201      	movs	r2, #1
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <nrf24_WriteRegMulti+0x48>)
 800062a:	f003 fb66 	bl	8003cfa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	b29a      	uxth	r2, r3
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	68b9      	ldr	r1, [r7, #8]
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <nrf24_WriteRegMulti+0x48>)
 800063a:	f003 fb5e 	bl	8003cfa <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800063e:	f7ff ff9b 	bl	8000578 <CS_UnSelect>
}
 8000642:	bf00      	nop
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000238 	.word	0x20000238

08000650 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800065a:	2300      	movs	r3, #0
 800065c:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800065e:	f7ff ff7f 	bl	8000560 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000662:	1df9      	adds	r1, r7, #7
 8000664:	2364      	movs	r3, #100	; 0x64
 8000666:	2201      	movs	r2, #1
 8000668:	4808      	ldr	r0, [pc, #32]	; (800068c <nrf24_ReadReg+0x3c>)
 800066a:	f003 fb46 	bl	8003cfa <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800066e:	f107 010f 	add.w	r1, r7, #15
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	2201      	movs	r2, #1
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <nrf24_ReadReg+0x3c>)
 8000678:	f003 fcad 	bl	8003fd6 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800067c:	f7ff ff7c 	bl	8000578 <CS_UnSelect>

	return data;
 8000680:	7bfb      	ldrb	r3, [r7, #15]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000238 	.word	0x20000238

08000690 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800069a:	f7ff ff61 	bl	8000560 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800069e:	1df9      	adds	r1, r7, #7
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	2201      	movs	r2, #1
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <nrfsendCmd+0x28>)
 80006a6:	f003 fb28 	bl	8003cfa <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006aa:	f7ff ff65 	bl	8000578 <CS_UnSelect>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000238 	.word	0x20000238

080006bc <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b07      	cmp	r3, #7
 80006ca:	d104      	bne.n	80006d6 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2007      	movs	r0, #7
 80006d0:	f7ff ff76 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80006d4:	e090      	b.n	80007f8 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b17      	cmp	r3, #23
 80006da:	d104      	bne.n	80006e6 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80006dc:	2111      	movs	r1, #17
 80006de:	2017      	movs	r0, #23
 80006e0:	f7ff ff6e 	bl	80005c0 <nrf24_WriteReg>
}
 80006e4:	e088      	b.n	80007f8 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80006e6:	2108      	movs	r1, #8
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ff69 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80006ee:	213f      	movs	r1, #63	; 0x3f
 80006f0:	2001      	movs	r0, #1
 80006f2:	f7ff ff65 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80006f6:	2103      	movs	r1, #3
 80006f8:	2002      	movs	r0, #2
 80006fa:	f7ff ff61 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80006fe:	2103      	movs	r1, #3
 8000700:	2003      	movs	r0, #3
 8000702:	f7ff ff5d 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000706:	2103      	movs	r1, #3
 8000708:	2004      	movs	r0, #4
 800070a:	f7ff ff59 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800070e:	2102      	movs	r1, #2
 8000710:	2005      	movs	r0, #5
 8000712:	f7ff ff55 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000716:	210e      	movs	r1, #14
 8000718:	2006      	movs	r0, #6
 800071a:	f7ff ff51 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800071e:	2100      	movs	r1, #0
 8000720:	2007      	movs	r0, #7
 8000722:	f7ff ff4d 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000726:	2100      	movs	r1, #0
 8000728:	2008      	movs	r0, #8
 800072a:	f7ff ff49 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800072e:	2100      	movs	r1, #0
 8000730:	2009      	movs	r0, #9
 8000732:	f7ff ff45 	bl	80005c0 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000736:	4a32      	ldr	r2, [pc, #200]	; (8000800 <nrf24_reset+0x144>)
 8000738:	f107 0318 	add.w	r3, r7, #24
 800073c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000740:	6018      	str	r0, [r3, #0]
 8000742:	3304      	adds	r3, #4
 8000744:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000746:	f107 0318 	add.w	r3, r7, #24
 800074a:	2205      	movs	r2, #5
 800074c:	4619      	mov	r1, r3
 800074e:	200a      	movs	r0, #10
 8000750:	f7ff ff58 	bl	8000604 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000754:	4a2b      	ldr	r2, [pc, #172]	; (8000804 <nrf24_reset+0x148>)
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075e:	6018      	str	r0, [r3, #0]
 8000760:	3304      	adds	r3, #4
 8000762:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	2205      	movs	r2, #5
 800076a:	4619      	mov	r1, r3
 800076c:	200b      	movs	r0, #11
 800076e:	f7ff ff49 	bl	8000604 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000772:	21c3      	movs	r1, #195	; 0xc3
 8000774:	200c      	movs	r0, #12
 8000776:	f7ff ff23 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800077a:	21c4      	movs	r1, #196	; 0xc4
 800077c:	200d      	movs	r0, #13
 800077e:	f7ff ff1f 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000782:	21c5      	movs	r1, #197	; 0xc5
 8000784:	200e      	movs	r0, #14
 8000786:	f7ff ff1b 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800078a:	21c6      	movs	r1, #198	; 0xc6
 800078c:	200f      	movs	r0, #15
 800078e:	f7ff ff17 	bl	80005c0 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000792:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <nrf24_reset+0x144>)
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800079c:	6018      	str	r0, [r3, #0]
 800079e:	3304      	adds	r3, #4
 80007a0:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	2205      	movs	r2, #5
 80007a8:	4619      	mov	r1, r3
 80007aa:	2010      	movs	r0, #16
 80007ac:	f7ff ff2a 	bl	8000604 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2011      	movs	r0, #17
 80007b4:	f7ff ff04 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80007b8:	2100      	movs	r1, #0
 80007ba:	2012      	movs	r0, #18
 80007bc:	f7ff ff00 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80007c0:	2100      	movs	r1, #0
 80007c2:	2013      	movs	r0, #19
 80007c4:	f7ff fefc 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80007c8:	2100      	movs	r1, #0
 80007ca:	2014      	movs	r0, #20
 80007cc:	f7ff fef8 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80007d0:	2100      	movs	r1, #0
 80007d2:	2015      	movs	r0, #21
 80007d4:	f7ff fef4 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80007d8:	2100      	movs	r1, #0
 80007da:	2016      	movs	r0, #22
 80007dc:	f7ff fef0 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80007e0:	2111      	movs	r1, #17
 80007e2:	2017      	movs	r0, #23
 80007e4:	f7ff feec 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80007e8:	2100      	movs	r1, #0
 80007ea:	201c      	movs	r0, #28
 80007ec:	f7ff fee8 	bl	80005c0 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80007f0:	2100      	movs	r1, #0
 80007f2:	201d      	movs	r0, #29
 80007f4:	f7ff fee4 	bl	80005c0 <nrf24_WriteReg>
}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	080097cc 	.word	0x080097cc
 8000804:	080097d4 	.word	0x080097d4

08000808 <NRF24_Init>:




void NRF24_Init (void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 800080c:	f7ff fecc 	bl	80005a8 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff ff53 	bl	80006bc <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000816:	2100      	movs	r1, #0
 8000818:	2000      	movs	r0, #0
 800081a:	f7ff fed1 	bl	80005c0 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800081e:	2100      	movs	r1, #0
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff fecd 	bl	80005c0 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000826:	2100      	movs	r1, #0
 8000828:	2002      	movs	r0, #2
 800082a:	f7ff fec9 	bl	80005c0 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800082e:	2103      	movs	r1, #3
 8000830:	2003      	movs	r0, #3
 8000832:	f7ff fec5 	bl	80005c0 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000836:	2100      	movs	r1, #0
 8000838:	2004      	movs	r0, #4
 800083a:	f7ff fec1 	bl	80005c0 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800083e:	2100      	movs	r1, #0
 8000840:	2005      	movs	r0, #5
 8000842:	f7ff febd 	bl	80005c0 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000846:	210e      	movs	r1, #14
 8000848:	2006      	movs	r0, #6
 800084a:	f7ff feb9 	bl	80005c0 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800084e:	f7ff fe9f 	bl	8000590 <CE_Enable>

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}

08000856 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	460b      	mov	r3, r1
 8000860:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000862:	f7ff fea1 	bl	80005a8 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000866:	78fb      	ldrb	r3, [r7, #3]
 8000868:	4619      	mov	r1, r3
 800086a:	2005      	movs	r0, #5
 800086c:	f7ff fea8 	bl	80005c0 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 8000870:	2205      	movs	r2, #5
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	2010      	movs	r0, #16
 8000876:	f7ff fec5 	bl	8000604 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fee8 	bl	8000650 <nrf24_ReadReg>
 8000880:	4603      	mov	r3, r0
 8000882:	73fb      	strb	r3, [r7, #15]
//	config = config | (1<<1);   // write 1 in the PWR_UP bit
	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	f023 030d 	bic.w	r3, r3, #13
 800088a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (CONFIG, config);
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	4619      	mov	r1, r3
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff fe95 	bl	80005c0 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000896:	f7ff fe7b 	bl	8000590 <CE_Enable>
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 80008b0:	f7ff fe56 	bl	8000560 <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80008b4:	23a0      	movs	r3, #160	; 0xa0
 80008b6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80008b8:	f107 010e 	add.w	r1, r7, #14
 80008bc:	2364      	movs	r3, #100	; 0x64
 80008be:	2201      	movs	r2, #1
 80008c0:	4816      	ldr	r0, [pc, #88]	; (800091c <NRF24_Transmit+0x78>)
 80008c2:	f003 fa1a 	bl	8003cfa <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	2220      	movs	r2, #32
 80008cc:	6879      	ldr	r1, [r7, #4]
 80008ce:	4813      	ldr	r0, [pc, #76]	; (800091c <NRF24_Transmit+0x78>)
 80008d0:	f003 fa13 	bl	8003cfa <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 80008d4:	f7ff fe50 	bl	8000578 <CS_UnSelect>

	HAL_Delay(1);
 80008d8:	2001      	movs	r0, #1
 80008da:	f000 f9c7 	bl	8000c6c <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80008de:	2017      	movs	r0, #23
 80008e0:	f7ff feb6 	bl	8000650 <nrf24_ReadReg>
 80008e4:	4603      	mov	r3, r0
 80008e6:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d00f      	beq.n	8000912 <NRF24_Transmit+0x6e>
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	f003 0308 	and.w	r3, r3, #8
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d10a      	bne.n	8000912 <NRF24_Transmit+0x6e>
	{
		cmdtosend = FLUSH_TX;
 80008fc:	23e1      	movs	r3, #225	; 0xe1
 80008fe:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 8000900:	7bbb      	ldrb	r3, [r7, #14]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fec4 	bl	8000690 <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 8000908:	2017      	movs	r0, #23
 800090a:	f7ff fed7 	bl	80006bc <nrf24_reset>

		return 1;
 800090e:	2301      	movs	r3, #1
 8000910:	e000      	b.n	8000914 <NRF24_Transmit+0x70>
	}

	return 0;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000238 	.word	0x20000238

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_MspInit+0x44>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6613      	str	r3, [r2, #96]	; 0x60
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_MspInit+0x44>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_MspInit+0x44>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_MspInit+0x44>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <HAL_SPI_MspInit+0x7c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d127      	bne.n	80009da <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_SPI_MspInit+0x80>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <HAL_SPI_MspInit+0x80>)
 8000990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000994:	6593      	str	r3, [r2, #88]	; 0x58
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_SPI_MspInit+0x80>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_SPI_MspInit+0x80>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <HAL_SPI_MspInit+0x80>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_SPI_MspInit+0x80>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009ba:	2338      	movs	r3, #56	; 0x38
 80009bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ca:	2306      	movs	r3, #6
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <HAL_SPI_MspInit+0x84>)
 80009d6:	f000 fa7f 	bl	8000ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40003c00 	.word	0x40003c00
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000400 	.word	0x48000400

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler+0x4>

08000a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3c:	f000 f8f6 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <USB_IRQHandler+0x10>)
 8000a4a:	f000 fcfb 	bl	8001444 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000fc0 	.word	0x20000fc0

08000a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <_sbrk+0x5c>)
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <_sbrk+0x60>)
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <_sbrk+0x64>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <_sbrk+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d207      	bcs.n	8000a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a88:	f008 fa20 	bl	8008ecc <__errno>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a96:	e009      	b.n	8000aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <_sbrk+0x64>)
 8000aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20010000 	.word	0x20010000
 8000ab8:	00000400 	.word	0x00000400
 8000abc:	20000228 	.word	0x20000228
 8000ac0:	200012c8 	.word	0x200012c8

08000ac4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <SystemInit+0x64>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <SystemInit+0x64>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <SystemInit+0x68>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <SystemInit+0x68>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <SystemInit+0x68>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <SystemInit+0x68>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <SystemInit+0x68>)
 8000af0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000af4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000af8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <SystemInit+0x68>)
 8000afc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b00:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <SystemInit+0x68>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <SystemInit+0x68>)
 8000b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <SystemInit+0x68>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SystemInit+0x64>)
 8000b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00
 8000b2c:	40021000 	.word	0x40021000

08000b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b34:	f7ff ffc6 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b3a:	e003      	b.n	8000b44 <LoopCopyDataInit>

08000b3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b42:	3104      	adds	r1, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b4c:	d3f6      	bcc.n	8000b3c <CopyDataInit>
	ldr	r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b50:	e002      	b.n	8000b58 <LoopFillZerobss>

08000b52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b54:	f842 3b04 	str.w	r3, [r2], #4

08000b58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <LoopForever+0x16>)
	cmp	r2, r3
 8000b5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b5c:	d3f9      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f008 f9bb 	bl	8008ed8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b62:	f7ff fb8d 	bl	8000280 <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b68:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000b6c:	080098a0 	.word	0x080098a0
	ldr	r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b74:	2000020c 	.word	0x2000020c
	ldr	r2, =_sbss
 8000b78:	2000020c 	.word	0x2000020c
	ldr	r3, = _ebss
 8000b7c:	200012c4 	.word	0x200012c4

08000b80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_IRQHandler>

08000b82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f000 f961 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 f80e 	bl	8000bb4 <HAL_InitTick>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d002      	beq.n	8000ba4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	e001      	b.n	8000ba8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba4:	f7ff febc 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <HAL_InitTick+0x6c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d023      	beq.n	8000c10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <HAL_InitTick+0x70>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_InitTick+0x6c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f96d 	bl	8000ebe <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10f      	bne.n	8000c0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d809      	bhi.n	8000c04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf8:	f000 f937 	bl	8000e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <HAL_InitTick+0x74>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	e007      	b.n	8000c14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e004      	b.n	8000c14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e001      	b.n	8000c14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000020 	.word	0x20000020
 8000c24:	20000018 	.word	0x20000018
 8000c28:	2000001c 	.word	0x2000001c

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000020 	.word	0x20000020
 8000c50:	2000031c 	.word	0x2000031c

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000031c 	.word	0x2000031c

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff ffee 	bl	8000c54 <HAL_GetTick>
 8000c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c92:	bf00      	nop
 8000c94:	f7ff ffde 	bl	8000c54 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000020 	.word	0x20000020

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff29 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff3e 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff31 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffa2 	bl	8000e10 <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee6:	e148      	b.n	800117a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2101      	movs	r1, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 813a 	beq.w	8001174 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d00b      	beq.n	8000f20 <HAL_GPIO_Init+0x48>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d007      	beq.n	8000f20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f14:	2b11      	cmp	r3, #17
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b12      	cmp	r3, #18
 8000f1e:	d130      	bne.n	8000f82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f56:	2201      	movs	r2, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	f003 0201 	and.w	r2, r3, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0xea>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d123      	bne.n	800100a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	691a      	ldr	r2, [r3, #16]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	6939      	ldr	r1, [r7, #16]
 8001006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0203 	and.w	r2, r3, #3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8094 	beq.w	8001174 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104c:	4b52      	ldr	r3, [pc, #328]	; (8001198 <HAL_GPIO_Init+0x2c0>)
 800104e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001050:	4a51      	ldr	r2, [pc, #324]	; (8001198 <HAL_GPIO_Init+0x2c0>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6613      	str	r3, [r2, #96]	; 0x60
 8001058:	4b4f      	ldr	r3, [pc, #316]	; (8001198 <HAL_GPIO_Init+0x2c0>)
 800105a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001064:	4a4d      	ldr	r2, [pc, #308]	; (800119c <HAL_GPIO_Init+0x2c4>)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800108e:	d00d      	beq.n	80010ac <HAL_GPIO_Init+0x1d4>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a43      	ldr	r2, [pc, #268]	; (80011a0 <HAL_GPIO_Init+0x2c8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d007      	beq.n	80010a8 <HAL_GPIO_Init+0x1d0>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a42      	ldr	r2, [pc, #264]	; (80011a4 <HAL_GPIO_Init+0x2cc>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d101      	bne.n	80010a4 <HAL_GPIO_Init+0x1cc>
 80010a0:	2302      	movs	r3, #2
 80010a2:	e004      	b.n	80010ae <HAL_GPIO_Init+0x1d6>
 80010a4:	2307      	movs	r3, #7
 80010a6:	e002      	b.n	80010ae <HAL_GPIO_Init+0x1d6>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_GPIO_Init+0x1d6>
 80010ac:	2300      	movs	r3, #0
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	f002 0203 	and.w	r2, r2, #3
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	4093      	lsls	r3, r2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010be:	4937      	ldr	r1, [pc, #220]	; (800119c <HAL_GPIO_Init+0x2c4>)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010cc:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010f0:	4a2d      	ldr	r2, [pc, #180]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800111a:	4a23      	ldr	r2, [pc, #140]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001144:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <HAL_GPIO_Init+0x2d0>)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	f47f aeaf 	bne.w	8000ee8 <HAL_GPIO_Init+0x10>
  }
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000800 	.word	0x48000800
 80011a8:	40010400 	.word	0x40010400

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011de:	b08b      	sub	sp, #44	; 0x2c
 80011e0:	af06      	add	r7, sp, #24
 80011e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e104      	b.n	80013f8 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f007 fafa 	bl	80087fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2203      	movs	r2, #3
 800120c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fbfd 	bl	8004a14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	687e      	ldr	r6, [r7, #4]
 8001222:	466d      	mov	r5, sp
 8001224:	f106 0410 	add.w	r4, r6, #16
 8001228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800122a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	602b      	str	r3, [r5, #0]
 8001230:	1d33      	adds	r3, r6, #4
 8001232:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001234:	6838      	ldr	r0, [r7, #0]
 8001236:	f003 fbc5 	bl	80049c4 <USB_CoreInit>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2202      	movs	r2, #2
 8001244:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e0d5      	b.n	80013f8 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fbf9 	bl	8004a4a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e04c      	b.n	80012f8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	440b      	add	r3, r1
 800126e:	3301      	adds	r3, #1
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	440b      	add	r3, r1
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	b298      	uxth	r0, r3
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	3336      	adds	r3, #54	; 0x36
 800129c:	4602      	mov	r2, r0
 800129e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	3303      	adds	r3, #3
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	3338      	adds	r3, #56	; 0x38
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	440b      	add	r3, r1
 80012d8:	333c      	adds	r3, #60	; 0x3c
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	440b      	add	r3, r1
 80012ec:	3340      	adds	r3, #64	; 0x40
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	3301      	adds	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d3ad      	bcc.n	800125e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001302:	2300      	movs	r3, #0
 8001304:	73fb      	strb	r3, [r7, #15]
 8001306:	e044      	b.n	8001392 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	f203 1369 	addw	r3, r3, #361	; 0x169
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	440b      	add	r3, r1
 800132c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	440b      	add	r3, r1
 800136e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	440b      	add	r3, r1
 8001384:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	3301      	adds	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	d3b5      	bcc.n	8001308 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	687e      	ldr	r6, [r7, #4]
 80013a4:	466d      	mov	r5, sp
 80013a6:	f106 0410 	add.w	r4, r6, #16
 80013aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	602b      	str	r3, [r5, #0]
 80013b2:	1d33      	adds	r3, r6, #4
 80013b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b6:	6838      	ldr	r0, [r7, #0]
 80013b8:	f003 fb54 	bl	8004a64 <USB_DevInit>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2202      	movs	r2, #2
 80013c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e014      	b.n	80013f8 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d102      	bne.n	80013ec <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f001 fa71 	bl	80028ce <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f005 fb0d 	bl	8006a10 <USB_DevDisconnect>

  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001400 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_PCD_Start+0x16>
 8001412:	2302      	movs	r3, #2
 8001414:	e012      	b.n	800143c <HAL_PCD_Start+0x3c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f003 fadf 	bl	80049e6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f005 fad8 	bl	80069e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f005 faf2 	bl	8006a3a <USB_ReadInterrupts>
 8001456:	4603      	mov	r3, r0
 8001458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800145c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001460:	d102      	bne.n	8001468 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fb5b 	bl	8001b1e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f005 fae4 	bl	8006a3a <USB_ReadInterrupts>
 8001472:	4603      	mov	r3, r0
 8001474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147c:	d112      	bne.n	80014a4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001486:	b29a      	uxth	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001490:	b292      	uxth	r2, r2
 8001492:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f007 fa2b 	bl	80088f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800149c:	2100      	movs	r1, #0
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f91e 	bl	80016e0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f005 fac6 	bl	8006a3a <USB_ReadInterrupts>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014b8:	d10b      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014cc:	b292      	uxth	r2, r2
 80014ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f005 faaf 	bl	8006a3a <USB_ReadInterrupts>
 80014dc:	4603      	mov	r3, r0
 80014de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014e6:	d10b      	bne.n	8001500 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014fa:	b292      	uxth	r2, r2
 80014fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f005 fa98 	bl	8006a3a <USB_ReadInterrupts>
 800150a:	4603      	mov	r3, r0
 800150c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001514:	d133      	bne.n	800157e <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800151e:	b29a      	uxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0204 	bic.w	r2, r2, #4
 8001528:	b292      	uxth	r2, r2
 800152a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0208 	bic.w	r2, r2, #8
 8001540:	b292      	uxth	r2, r2
 8001542:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800154c:	2b01      	cmp	r3, #1
 800154e:	d107      	bne.n	8001560 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001558:	2100      	movs	r1, #0
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f007 fc7a 	bl	8008e54 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f007 f9ff 	bl	8008964 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001578:	b292      	uxth	r2, r2
 800157a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f005 fa59 	bl	8006a3a <USB_ReadInterrupts>
 8001588:	4603      	mov	r3, r0
 800158a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800158e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001592:	d126      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800159c:	b29a      	uxth	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0208 	orr.w	r2, r2, #8
 80015a6:	b292      	uxth	r2, r2
 80015a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015be:	b292      	uxth	r2, r2
 80015c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0204 	orr.w	r2, r2, #4
 80015d6:	b292      	uxth	r2, r2
 80015d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f007 f9a7 	bl	8008930 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f005 fa27 	bl	8006a3a <USB_ReadInterrupts>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f2:	2b80      	cmp	r3, #128	; 0x80
 80015f4:	d13f      	bne.n	8001676 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015fe:	b29a      	uxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d12b      	bne.n	8001670 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001620:	b29a      	uxth	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0204 	orr.w	r2, r2, #4
 800162a:	b292      	uxth	r2, r2
 800162c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001638:	b29a      	uxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0208 	orr.w	r2, r2, #8
 8001642:	b292      	uxth	r2, r2
 8001644:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001658:	b29b      	uxth	r3, r3
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001666:	2101      	movs	r1, #1
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f007 fbf3 	bl	8008e54 <HAL_PCDEx_LPM_Callback>
 800166e:	e002      	b.n	8001676 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f007 f95d 	bl	8008930 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f005 f9dd 	bl	8006a3a <USB_ReadInterrupts>
 8001680:	4603      	mov	r3, r0
 8001682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800168a:	d10e      	bne.n	80016aa <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001694:	b29a      	uxth	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800169e:	b292      	uxth	r2, r2
 80016a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f007 f916 	bl	80088d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f005 f9c3 	bl	8006a3a <USB_ReadInterrupts>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016be:	d10b      	bne.n	80016d8 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016d2:	b292      	uxth	r2, r2
 80016d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_PCD_SetAddress+0x1a>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e013      	b.n	8001722 <HAL_PCD_SetAddress+0x42>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f005 f951 	bl	80069ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	4608      	mov	r0, r1
 8001734:	4611      	mov	r1, r2
 8001736:	461a      	mov	r2, r3
 8001738:	4603      	mov	r3, r0
 800173a:	70fb      	strb	r3, [r7, #3]
 800173c:	460b      	mov	r3, r1
 800173e:	803b      	strh	r3, [r7, #0]
 8001740:	4613      	mov	r3, r2
 8001742:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800174c:	2b00      	cmp	r3, #0
 800174e:	da0e      	bge.n	800176e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2201      	movs	r2, #1
 800176a:	705a      	strb	r2, [r3, #1]
 800176c:	e00e      	b.n	800178c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	f003 0207 	and.w	r2, r3, #7
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	b2da      	uxtb	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001798:	883a      	ldrh	r2, [r7, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	78ba      	ldrb	r2, [r7, #2]
 80017a2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	785b      	ldrb	r3, [r3, #1]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017b6:	78bb      	ldrb	r3, [r7, #2]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d102      	bne.n	80017c2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_PCD_EP_Open+0xa6>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e00e      	b.n	80017ee <HAL_PCD_EP_Open+0xc4>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 f962 	bl	8004aa8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80017ec:	7afb      	ldrb	r3, [r7, #11]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b084      	sub	sp, #16
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	460b      	mov	r3, r1
 8001800:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001806:	2b00      	cmp	r3, #0
 8001808:	da0e      	bge.n	8001828 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2201      	movs	r2, #1
 8001824:	705a      	strb	r2, [r3, #1]
 8001826:	e00e      	b.n	8001846 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	f003 0207 	and.w	r2, r3, #7
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	b2da      	uxtb	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_PCD_EP_Close+0x6a>
 800185c:	2302      	movs	r3, #2
 800185e:	e00e      	b.n	800187e <HAL_PCD_EP_Close+0x88>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	4618      	mov	r0, r3
 8001870:	f003 fc88 	bl	8005184 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	460b      	mov	r3, r1
 8001894:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001896:	7afb      	ldrb	r3, [r7, #11]
 8001898:	f003 0207 	and.w	r2, r3, #7
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2200      	movs	r2, #0
 80018be:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2200      	movs	r2, #0
 80018c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018d2:	7afb      	ldrb	r3, [r7, #11]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d106      	bne.n	80018ea <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6979      	ldr	r1, [r7, #20]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 fe3b 	bl	800555e <USB_EPStartXfer>
 80018e8:	e005      	b.n	80018f6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6979      	ldr	r1, [r7, #20]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 fe34 	bl	800555e <USB_EPStartXfer>
  }

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 0207 	and.w	r2, r3, #7
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	460b      	mov	r3, r1
 800193e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2201      	movs	r2, #1
 800197a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800197c:	7afb      	ldrb	r3, [r7, #11]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	b2da      	uxtb	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001988:	7afb      	ldrb	r3, [r7, #11]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6979      	ldr	r1, [r7, #20]
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fde0 	bl	800555e <USB_EPStartXfer>
 800199e:	e005      	b.n	80019ac <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6979      	ldr	r1, [r7, #20]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 fdd9 	bl	800555e <USB_EPStartXfer>
  }

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	f003 0207 	and.w	r2, r3, #7
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d901      	bls.n	80019d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e04c      	b.n	8001a6e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	da0e      	bge.n	80019fa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	705a      	strb	r2, [r3, #1]
 80019f8:	e00c      	b.n	8001a14 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2201      	movs	r2, #1
 8001a18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_PCD_EP_SetStall+0x7e>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e01c      	b.n	8001a6e <HAL_PCD_EP_SetStall+0xb8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68f9      	ldr	r1, [r7, #12]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 feba 	bl	80067bc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d108      	bne.n	8001a64 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	f004 fffb 	bl	8006a5a <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	f003 020f 	and.w	r2, r3, #15
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d901      	bls.n	8001a94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e040      	b.n	8001b16 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da0e      	bge.n	8001aba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	705a      	strb	r2, [r3, #1]
 8001ab8:	e00e      	b.n	8001ad8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f003 0207 	and.w	r2, r3, #7
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_PCD_EP_ClrStall+0x82>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e00e      	b.n	8001b16 <HAL_PCD_EP_ClrStall+0xa0>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68f9      	ldr	r1, [r7, #12]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f004 fea9 	bl	800685e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b08e      	sub	sp, #56	; 0x38
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b26:	e2d1      	b.n	80020cc <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b30:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 8152 	bne.w	8001dec <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d150      	bne.n	8001bf4 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b62:	81fb      	strh	r3, [r7, #14]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	89fb      	ldrh	r3, [r7, #14]
 8001b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3328      	adds	r3, #40	; 0x28
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	4413      	add	r3, r2
 8001b96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	441a      	add	r2, r3
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f006 fe74 	bl	80088a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8282 	beq.w	80020cc <PCD_EP_ISR_Handler+0x5ae>
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f040 827d 	bne.w	80020cc <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b292      	uxth	r2, r2
 8001be6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bf2:	e26b      	b.n	80020cc <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d032      	beq.n	8001c74 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	f004 ff54 	bl	8006af6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	823b      	strh	r3, [r7, #16]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	8a3a      	ldrh	r2, [r7, #16]
 8001c64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c68:	b292      	uxth	r2, r2
 8001c6a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f006 fdeb 	bl	8008848 <HAL_PCD_SetupStageCallback>
 8001c72:	e22b      	b.n	80020cc <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c74:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f280 8227 	bge.w	80020cc <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	83bb      	strh	r3, [r7, #28]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	8bba      	ldrh	r2, [r7, #28]
 8001c94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c98:	b292      	uxth	r2, r2
 8001c9a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d019      	beq.n	8001d00 <PCD_EP_ISR_Handler+0x1e2>
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d015      	beq.n	8001d00 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	6959      	ldr	r1, [r3, #20]
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f004 ff06 	bl	8006af6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	441a      	add	r2, r3
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f006 fdb6 	bl	800886c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4413      	add	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d112      	bne.n	8001d4e <PCD_EP_ISR_Handler+0x230>
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	801a      	strh	r2, [r3, #0]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	801a      	strh	r2, [r3, #0]
 8001d4c:	e02f      	b.n	8001dae <PCD_EP_ISR_Handler+0x290>
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b3e      	cmp	r3, #62	; 0x3e
 8001d54:	d813      	bhi.n	8001d7e <PCD_EP_ISR_Handler+0x260>
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	085b      	lsrs	r3, r3, #1
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <PCD_EP_ISR_Handler+0x252>
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	801a      	strh	r2, [r3, #0]
 8001d7c:	e017      	b.n	8001dae <PCD_EP_ISR_Handler+0x290>
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <PCD_EP_ISR_Handler+0x27a>
 8001d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d94:	3b01      	subs	r3, #1
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
 8001d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	029b      	lsls	r3, r3, #10
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dbe:	827b      	strh	r3, [r7, #18]
 8001dc0:	8a7b      	ldrh	r3, [r7, #18]
 8001dc2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001dc6:	827b      	strh	r3, [r7, #18]
 8001dc8:	8a7b      	ldrh	r3, [r7, #18]
 8001dca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001dce:	827b      	strh	r3, [r7, #18]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	8a7b      	ldrh	r3, [r7, #18]
 8001dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	8013      	strh	r3, [r2, #0]
 8001dea:	e16f      	b.n	80020cc <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dfe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f280 80e4 	bge.w	8001fd0 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e1e:	4013      	ands	r3, r2
 8001e20:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e36:	b292      	uxth	r2, r2
 8001e38:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e3a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	7b1b      	ldrb	r3, [r3, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d120      	bne.n	8001e9a <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e7c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001e7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 8083 	beq.w	8001f8c <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	6959      	ldr	r1, [r3, #20]
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	88da      	ldrh	r2, [r3, #6]
 8001e92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e94:	f004 fe2f 	bl	8006af6 <USB_ReadPMA>
 8001e98:	e078      	b.n	8001f8c <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	78db      	ldrb	r3, [r3, #3]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d108      	bne.n	8001eb4 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ea2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f91d 	bl	80020e8 <HAL_PCD_EP_DB_Receive>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001eb2:	e06b      	b.n	8001f8c <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ece:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	441a      	add	r2, r3
 8001ede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01f      	beq.n	8001f4e <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f32:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d028      	beq.n	8001f8c <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	6959      	ldr	r1, [r3, #20]
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	891a      	ldrh	r2, [r3, #8]
 8001f46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f48:	f004 fdd5 	bl	8006af6 <USB_ReadPMA>
 8001f4c:	e01e      	b.n	8001f8c <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f72:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	6959      	ldr	r1, [r3, #20]
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	895a      	ldrh	r2, [r3, #10]
 8001f86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f88:	f004 fdb5 	bl	8006af6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	69da      	ldr	r2, [r3, #28]
 8001f90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f92:	441a      	add	r2, r3
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f9e:	441a      	add	r2, r3
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <PCD_EP_ISR_Handler+0x498>
 8001fac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d206      	bcs.n	8001fc4 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f006 fc55 	bl	800886c <HAL_PCD_DataOutStageCallback>
 8001fc2:	e005      	b.n	8001fd0 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 fac7 	bl	800555e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001fd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d078      	beq.n	80020cc <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8001fda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002008:	843b      	strh	r3, [r7, #32]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	441a      	add	r2, r3
 8002018:	8c3b      	ldrh	r3, [r7, #32]
 800201a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800201e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002022:	b29b      	uxth	r3, r3
 8002024:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	78db      	ldrb	r3, [r3, #3]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d108      	bne.n	8002040 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002032:	2b02      	cmp	r3, #2
 8002034:	d144      	bne.n	80020c0 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002036:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d13f      	bne.n	80020c0 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002048:	b29b      	uxth	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4413      	add	r3, r2
 800205a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002064:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	8bfb      	ldrh	r3, [r7, #30]
 800206c:	429a      	cmp	r2, r3
 800206e:	d906      	bls.n	800207e <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	8bfb      	ldrh	r3, [r7, #30]
 8002076:	1ad2      	subs	r2, r2, r3
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	619a      	str	r2, [r3, #24]
 800207c:	e002      	b.n	8002084 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d106      	bne.n	800209a <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f006 fc05 	bl	80088a2 <HAL_PCD_DataInStageCallback>
 8002098:	e018      	b.n	80020cc <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	8bfb      	ldrh	r3, [r7, #30]
 80020a0:	441a      	add	r2, r3
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	8bfb      	ldrh	r3, [r7, #30]
 80020ac:	441a      	add	r2, r3
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 fa50 	bl	800555e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80020be:	e005      	b.n	80020cc <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020c2:	461a      	mov	r2, r3
 80020c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f917 	bl	80022fa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f6ff ad25 	blt.w	8001b28 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3738      	adds	r7, #56	; 0x38
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d07c      	beq.n	80021fa <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002108:	b29b      	uxth	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4413      	add	r3, r2
 800211a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002124:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	8b7b      	ldrh	r3, [r7, #26]
 800212c:	429a      	cmp	r2, r3
 800212e:	d306      	bcc.n	800213e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	8b7b      	ldrh	r3, [r7, #26]
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	619a      	str	r2, [r3, #24]
 800213c:	e002      	b.n	8002144 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d123      	bne.n	8002194 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002166:	833b      	strh	r3, [r7, #24]
 8002168:	8b3b      	ldrh	r3, [r7, #24]
 800216a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800216e:	833b      	strh	r3, [r7, #24]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	441a      	add	r2, r3
 800217e:	8b3b      	ldrh	r3, [r7, #24]
 8002180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002190:	b29b      	uxth	r3, r3
 8002192:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d01f      	beq.n	80021de <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b8:	82fb      	strh	r3, [r7, #22]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	441a      	add	r2, r3
 80021c8:	8afb      	ldrh	r3, [r7, #22]
 80021ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021da:	b29b      	uxth	r3, r3
 80021dc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021de:	8b7b      	ldrh	r3, [r7, #26]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8085 	beq.w	80022f0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	6959      	ldr	r1, [r3, #20]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	891a      	ldrh	r2, [r3, #8]
 80021f2:	8b7b      	ldrh	r3, [r7, #26]
 80021f4:	f004 fc7f 	bl	8006af6 <USB_ReadPMA>
 80021f8:	e07a      	b.n	80022f0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	4413      	add	r3, r2
 8002214:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800221e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	699a      	ldr	r2, [r3, #24]
 8002224:	8b7b      	ldrh	r3, [r7, #26]
 8002226:	429a      	cmp	r2, r3
 8002228:	d306      	bcc.n	8002238 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	8b7b      	ldrh	r3, [r7, #26]
 8002230:	1ad2      	subs	r2, r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	619a      	str	r2, [r3, #24]
 8002236:	e002      	b.n	800223e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d123      	bne.n	800228e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800225c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002260:	83fb      	strh	r3, [r7, #30]
 8002262:	8bfb      	ldrh	r3, [r7, #30]
 8002264:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002268:	83fb      	strh	r3, [r7, #30]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	441a      	add	r2, r3
 8002278:	8bfb      	ldrh	r3, [r7, #30]
 800227a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800227e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228a:	b29b      	uxth	r3, r3
 800228c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d11f      	bne.n	80022d8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	83bb      	strh	r3, [r7, #28]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	441a      	add	r2, r3
 80022c2:	8bbb      	ldrh	r3, [r7, #28]
 80022c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022d8:	8b7b      	ldrh	r3, [r7, #26]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	6959      	ldr	r1, [r3, #20]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	895a      	ldrh	r2, [r3, #10]
 80022ea:	8b7b      	ldrh	r3, [r7, #26]
 80022ec:	f004 fc03 	bl	8006af6 <USB_ReadPMA>
    }
  }

  return count;
 80022f0:	8b7b      	ldrh	r3, [r7, #26]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b094      	sub	sp, #80	; 0x50
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	4613      	mov	r3, r2
 8002306:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8136 	beq.w	8002580 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800231c:	b29b      	uxth	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	4413      	add	r3, r2
 800232e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002338:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002344:	429a      	cmp	r2, r3
 8002346:	d907      	bls.n	8002358 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002350:	1ad2      	subs	r2, r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	619a      	str	r2, [r3, #24]
 8002356:	e002      	b.n	800235e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d12c      	bne.n	80023c0 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	4619      	mov	r1, r3
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f006 fa98 	bl	80088a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8238 	beq.w	80027ee <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002398:	82fb      	strh	r3, [r7, #22]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	441a      	add	r2, r3
 80023a8:	8afb      	ldrh	r3, [r7, #22]
 80023aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	8013      	strh	r3, [r2, #0]
 80023be:	e216      	b.n	80027ee <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d01f      	beq.n	800240a <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	441a      	add	r2, r3
 80023f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002406:	b29b      	uxth	r3, r3
 8002408:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002410:	2b01      	cmp	r3, #1
 8002412:	f040 81ec 	bne.w	80027ee <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800241e:	441a      	add	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800242c:	441a      	add	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	6a1a      	ldr	r2, [r3, #32]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	429a      	cmp	r2, r3
 800243c:	d309      	bcc.n	8002452 <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800244a:	1ad2      	subs	r2, r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	621a      	str	r2, [r3, #32]
 8002450:	e015      	b.n	800247e <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 800245a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800245e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002468:	e009      	b.n	800247e <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	785b      	ldrb	r3, [r3, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d155      	bne.n	8002532 <HAL_PCD_EP_DB_Transmit+0x238>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002494:	b29b      	uxth	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	4413      	add	r3, r2
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	00da      	lsls	r2, r3, #3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	4413      	add	r3, r2
 80024a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d112      	bne.n	80024da <HAL_PCD_EP_DB_Transmit+0x1e0>
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024be:	b29a      	uxth	r2, r3
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	801a      	strh	r2, [r3, #0]
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	801a      	strh	r2, [r3, #0]
 80024d8:	e047      	b.n	800256a <HAL_PCD_EP_DB_Transmit+0x270>
 80024da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024dc:	2b3e      	cmp	r3, #62	; 0x3e
 80024de:	d811      	bhi.n	8002504 <HAL_PCD_EP_DB_Transmit+0x20a>
 80024e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_PCD_EP_DB_Transmit+0x1fc>
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	3301      	adds	r3, #1
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	029b      	lsls	r3, r3, #10
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	801a      	strh	r2, [r3, #0]
 8002502:	e032      	b.n	800256a <HAL_PCD_EP_DB_Transmit+0x270>
 8002504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800250a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <HAL_PCD_EP_DB_Transmit+0x220>
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	3b01      	subs	r3, #1
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	b29b      	uxth	r3, r3
 800251e:	029b      	lsls	r3, r3, #10
 8002520:	b29b      	uxth	r3, r3
 8002522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800252a:	b29a      	uxth	r2, r3
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	801a      	strh	r2, [r3, #0]
 8002530:	e01b      	b.n	800256a <HAL_PCD_EP_DB_Transmit+0x270>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d117      	bne.n	800256a <HAL_PCD_EP_DB_Transmit+0x270>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002548:	b29b      	uxth	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	4413      	add	r3, r2
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	00da      	lsls	r2, r3, #3
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	4413      	add	r3, r2
 800255c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002560:	623b      	str	r3, [r7, #32]
 8002562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002564:	b29a      	uxth	r2, r3
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	6959      	ldr	r1, [r3, #20]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	891a      	ldrh	r2, [r3, #8]
 8002576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002578:	b29b      	uxth	r3, r3
 800257a:	f004 fa7a 	bl	8006a72 <USB_WritePMA>
 800257e:	e136      	b.n	80027ee <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	4413      	add	r3, r2
 800259a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	699a      	ldr	r2, [r3, #24]
 80025ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d307      	bcc.n	80025c4 <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	699a      	ldr	r2, [r3, #24]
 80025b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025bc:	1ad2      	subs	r2, r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	619a      	str	r2, [r3, #24]
 80025c2:	e002      	b.n	80025ca <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d12e      	bne.n	8002630 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	4619      	mov	r1, r3
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f006 f962 	bl	80088a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 8102 	bne.w	80027ee <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002604:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800261a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800261e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262a:	b29b      	uxth	r3, r3
 800262c:	8013      	strh	r3, [r2, #0]
 800262e:	e0de      	b.n	80027ee <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d11f      	bne.n	800267a <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002654:	867b      	strh	r3, [r7, #50]	; 0x32
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	441a      	add	r2, r3
 8002664:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800266a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800266e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002676:	b29b      	uxth	r3, r3
 8002678:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002680:	2b01      	cmp	r3, #1
 8002682:	f040 80b4 	bne.w	80027ee <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800268e:	441a      	add	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	69da      	ldr	r2, [r3, #28]
 8002698:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800269c:	441a      	add	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	6a1a      	ldr	r2, [r3, #32]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d309      	bcc.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	6a1a      	ldr	r2, [r3, #32]
 80026b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ba:	1ad2      	subs	r2, r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	621a      	str	r2, [r3, #32]
 80026c0:	e015      	b.n	80026ee <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d107      	bne.n	80026da <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 80026ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026ce:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026d8:	e009      	b.n	80026ee <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2200      	movs	r2, #0
 80026e4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	643b      	str	r3, [r7, #64]	; 0x40
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	785b      	ldrb	r3, [r3, #1]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d155      	bne.n	80027a8 <HAL_PCD_EP_DB_Transmit+0x4ae>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	63bb      	str	r3, [r7, #56]	; 0x38
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	4413      	add	r3, r2
 8002712:	63bb      	str	r3, [r7, #56]	; 0x38
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	00da      	lsls	r2, r3, #3
 800271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271c:	4413      	add	r3, r2
 800271e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002722:	637b      	str	r3, [r7, #52]	; 0x34
 8002724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002726:	2b00      	cmp	r3, #0
 8002728:	d112      	bne.n	8002750 <HAL_PCD_EP_DB_Transmit+0x456>
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002734:	b29a      	uxth	r2, r3
 8002736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002738:	801a      	strh	r2, [r3, #0]
 800273a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002748:	b29a      	uxth	r2, r3
 800274a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	e044      	b.n	80027da <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002752:	2b3e      	cmp	r3, #62	; 0x3e
 8002754:	d811      	bhi.n	800277a <HAL_PCD_EP_DB_Transmit+0x480>
 8002756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800275c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_PCD_EP_DB_Transmit+0x472>
 8002766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002768:	3301      	adds	r3, #1
 800276a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800276c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800276e:	b29b      	uxth	r3, r3
 8002770:	029b      	lsls	r3, r3, #10
 8002772:	b29a      	uxth	r2, r3
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002776:	801a      	strh	r2, [r3, #0]
 8002778:	e02f      	b.n	80027da <HAL_PCD_EP_DB_Transmit+0x4e0>
 800277a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <HAL_PCD_EP_DB_Transmit+0x496>
 800278a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278c:	3b01      	subs	r3, #1
 800278e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002792:	b29b      	uxth	r3, r3
 8002794:	029b      	lsls	r3, r3, #10
 8002796:	b29b      	uxth	r3, r3
 8002798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	e018      	b.n	80027da <HAL_PCD_EP_DB_Transmit+0x4e0>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	785b      	ldrb	r3, [r3, #1]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d114      	bne.n	80027da <HAL_PCD_EP_DB_Transmit+0x4e0>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027be:	4413      	add	r3, r2
 80027c0:	643b      	str	r3, [r7, #64]	; 0x40
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	00da      	lsls	r2, r3, #3
 80027c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ca:	4413      	add	r3, r2
 80027cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	6959      	ldr	r1, [r3, #20]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	895a      	ldrh	r2, [r3, #10]
 80027e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	f004 f942 	bl	8006a72 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002808:	82bb      	strh	r3, [r7, #20]
 800280a:	8abb      	ldrh	r3, [r7, #20]
 800280c:	f083 0310 	eor.w	r3, r3, #16
 8002810:	82bb      	strh	r3, [r7, #20]
 8002812:	8abb      	ldrh	r3, [r7, #20]
 8002814:	f083 0320 	eor.w	r3, r3, #32
 8002818:	82bb      	strh	r3, [r7, #20]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	441a      	add	r2, r3
 8002828:	8abb      	ldrh	r3, [r7, #20]
 800282a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800282e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283a:	b29b      	uxth	r3, r3
 800283c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3750      	adds	r7, #80	; 0x50
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	817b      	strh	r3, [r7, #10]
 8002856:	4613      	mov	r3, r2
 8002858:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800285a:	897b      	ldrh	r3, [r7, #10]
 800285c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002866:	897b      	ldrh	r3, [r7, #10]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4413      	add	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	e009      	b.n	8002892 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800287e:	897a      	ldrh	r2, [r7, #10]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002892:	893b      	ldrh	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d107      	bne.n	80028a8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2200      	movs	r2, #0
 800289c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	80da      	strh	r2, [r3, #6]
 80028a6:	e00b      	b.n	80028c0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2201      	movs	r2, #1
 80028ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002906:	b29b      	uxth	r3, r3
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <HAL_PWREx_GetVoltageRange+0x18>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40007000 	.word	0x40007000

08002940 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294e:	d130      	bne.n	80029b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002950:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800295c:	d038      	beq.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002966:	4a1e      	ldr	r2, [pc, #120]	; (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002968:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800296c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2232      	movs	r2, #50	; 0x32
 8002974:	fb02 f303 	mul.w	r3, r2, r3
 8002978:	4a1b      	ldr	r2, [pc, #108]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	0c9b      	lsrs	r3, r3, #18
 8002980:	3301      	adds	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002984:	e002      	b.n	800298c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3b01      	subs	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800298c:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002998:	d102      	bne.n	80029a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f2      	bne.n	8002986 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ac:	d110      	bne.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e00f      	b.n	80029d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029be:	d007      	beq.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029c8:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40007000 	.word	0x40007000
 80029e4:	20000018 	.word	0x20000018
 80029e8:	431bde83 	.word	0x431bde83

080029ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029fa:	6053      	str	r3, [r2, #4]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40007000 	.word	0x40007000

08002a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d102      	bne.n	8002a20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f000 bc11 	b.w	8003242 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a20:	4ba0      	ldr	r3, [pc, #640]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a2a:	4b9e      	ldr	r3, [pc, #632]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80e4 	beq.w	8002c0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <HAL_RCC_OscConfig+0x4c>
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	f040 808b 	bne.w	8002b66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	f040 8087 	bne.w	8002b66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a58:	4b92      	ldr	r3, [pc, #584]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_OscConfig+0x64>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e3e8      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1a      	ldr	r2, [r3, #32]
 8002a74:	4b8b      	ldr	r3, [pc, #556]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <HAL_RCC_OscConfig+0x7e>
 8002a80:	4b88      	ldr	r3, [pc, #544]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a88:	e005      	b.n	8002a96 <HAL_RCC_OscConfig+0x8a>
 8002a8a:	4b86      	ldr	r3, [pc, #536]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d223      	bcs.n	8002ae2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fd42 	bl	8003528 <RCC_SetFlashLatencyFromMSIRange>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e3c9      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aae:	4b7d      	ldr	r3, [pc, #500]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a7c      	ldr	r2, [pc, #496]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002ab4:	f043 0308 	orr.w	r3, r3, #8
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b7a      	ldr	r3, [pc, #488]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	4977      	ldr	r1, [pc, #476]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002acc:	4b75      	ldr	r3, [pc, #468]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	4972      	ldr	r1, [pc, #456]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
 8002ae0:	e025      	b.n	8002b2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae2:	4b70      	ldr	r3, [pc, #448]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6f      	ldr	r2, [pc, #444]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002ae8:	f043 0308 	orr.w	r3, r3, #8
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b6d      	ldr	r3, [pc, #436]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	496a      	ldr	r1, [pc, #424]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	4965      	ldr	r1, [pc, #404]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fd02 	bl	8003528 <RCC_SetFlashLatencyFromMSIRange>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e389      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b2e:	f000 fc6f 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b5b      	ldr	r3, [pc, #364]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	495a      	ldr	r1, [pc, #360]	; (8002ca8 <HAL_RCC_OscConfig+0x29c>)
 8002b40:	5ccb      	ldrb	r3, [r1, r3]
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4a:	4a58      	ldr	r2, [pc, #352]	; (8002cac <HAL_RCC_OscConfig+0x2a0>)
 8002b4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b4e:	4b58      	ldr	r3, [pc, #352]	; (8002cb0 <HAL_RCC_OscConfig+0x2a4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe f82e 	bl	8000bb4 <HAL_InitTick>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d052      	beq.n	8002c08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	e36d      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d032      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b6e:	4b4d      	ldr	r3, [pc, #308]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a4c      	ldr	r2, [pc, #304]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b7a:	f7fe f86b 	bl	8000c54 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b82:	f7fe f867 	bl	8000c54 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e356      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b94:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba0:	4b40      	ldr	r3, [pc, #256]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a3f      	ldr	r2, [pc, #252]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002ba6:	f043 0308 	orr.w	r3, r3, #8
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	493a      	ldr	r1, [pc, #232]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	4935      	ldr	r1, [pc, #212]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]
 8002bd2:	e01a      	b.n	8002c0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bd4:	4b33      	ldr	r3, [pc, #204]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a32      	ldr	r2, [pc, #200]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002be0:	f7fe f838 	bl	8000c54 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002be8:	f7fe f834 	bl	8000c54 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e323      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x1dc>
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d073      	beq.n	8002cfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_OscConfig+0x21c>
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	d10e      	bne.n	8002c40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d10b      	bne.n	8002c40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c28:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d063      	beq.n	8002cfc <HAL_RCC_OscConfig+0x2f0>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d15f      	bne.n	8002cfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e300      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c48:	d106      	bne.n	8002c58 <HAL_RCC_OscConfig+0x24c>
 8002c4a:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e01d      	b.n	8002c94 <HAL_RCC_OscConfig+0x288>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x270>
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a0f      	ldr	r2, [pc, #60]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e00b      	b.n	8002c94 <HAL_RCC_OscConfig+0x288>
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <HAL_RCC_OscConfig+0x298>)
 8002c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01b      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fd ffda 	bl	8000c54 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca2:	e010      	b.n	8002cc6 <HAL_RCC_OscConfig+0x2ba>
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08009824 	.word	0x08009824
 8002cac:	20000018 	.word	0x20000018
 8002cb0:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7fd ffce 	bl	8000c54 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e2bd      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc6:	4baf      	ldr	r3, [pc, #700]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x2a8>
 8002cd2:	e014      	b.n	8002cfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fd ffbe 	bl	8000c54 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7fd ffba 	bl	8000c54 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	; 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e2a9      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cee:	4ba5      	ldr	r3, [pc, #660]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x2d0>
 8002cfa:	e000      	b.n	8002cfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d060      	beq.n	8002dcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_OscConfig+0x310>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d119      	bne.n	8002d4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d116      	bne.n	8002d4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d1c:	4b99      	ldr	r3, [pc, #612]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_OscConfig+0x328>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e286      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d34:	4b93      	ldr	r3, [pc, #588]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	061b      	lsls	r3, r3, #24
 8002d42:	4990      	ldr	r1, [pc, #576]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d48:	e040      	b.n	8002dcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d023      	beq.n	8002d9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d52:	4b8c      	ldr	r3, [pc, #560]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a8b      	ldr	r2, [pc, #556]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fd ff79 	bl	8000c54 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d66:	f7fd ff75 	bl	8000c54 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e264      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d78:	4b82      	ldr	r3, [pc, #520]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d84:	4b7f      	ldr	r3, [pc, #508]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	497c      	ldr	r1, [pc, #496]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
 8002d98:	e018      	b.n	8002dcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9a:	4b7a      	ldr	r3, [pc, #488]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a79      	ldr	r2, [pc, #484]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fd ff55 	bl	8000c54 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dae:	f7fd ff51 	bl	8000c54 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e240      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dc0:	4b70      	ldr	r3, [pc, #448]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d03c      	beq.n	8002e52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01c      	beq.n	8002e1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de0:	4b68      	ldr	r3, [pc, #416]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de6:	4a67      	ldr	r2, [pc, #412]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7fd ff30 	bl	8000c54 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df8:	f7fd ff2c 	bl	8000c54 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e21b      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e0a:	4b5e      	ldr	r3, [pc, #376]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0ef      	beq.n	8002df8 <HAL_RCC_OscConfig+0x3ec>
 8002e18:	e01b      	b.n	8002e52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1a:	4b5a      	ldr	r3, [pc, #360]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e20:	4a58      	ldr	r2, [pc, #352]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7fd ff13 	bl	8000c54 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e32:	f7fd ff0f 	bl	8000c54 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e1fe      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e44:	4b4f      	ldr	r3, [pc, #316]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1ef      	bne.n	8002e32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 80a6 	beq.w	8002fac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e60:	2300      	movs	r3, #0
 8002e62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e64:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10d      	bne.n	8002e8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e70:	4b44      	ldr	r3, [pc, #272]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	4a43      	ldr	r2, [pc, #268]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e7c:	4b41      	ldr	r3, [pc, #260]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8c:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <HAL_RCC_OscConfig+0x57c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d118      	bne.n	8002eca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e98:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_RCC_OscConfig+0x57c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a3a      	ldr	r2, [pc, #232]	; (8002f88 <HAL_RCC_OscConfig+0x57c>)
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea4:	f7fd fed6 	bl	8000c54 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eac:	f7fd fed2 	bl	8000c54 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e1c1      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ebe:	4b32      	ldr	r3, [pc, #200]	; (8002f88 <HAL_RCC_OscConfig+0x57c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d108      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4d8>
 8002ed2:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee2:	e024      	b.n	8002f2e <HAL_RCC_OscConfig+0x522>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d110      	bne.n	8002f0e <HAL_RCC_OscConfig+0x502>
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	4a24      	ldr	r2, [pc, #144]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002efc:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	4a20      	ldr	r2, [pc, #128]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f0c:	e00f      	b.n	8002f2e <HAL_RCC_OscConfig+0x522>
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f14:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002f26:	f023 0304 	bic.w	r3, r3, #4
 8002f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d016      	beq.n	8002f64 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fd fe8d 	bl	8000c54 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7fd fe89 	bl	8000c54 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e176      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_RCC_OscConfig+0x578>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0ed      	beq.n	8002f3e <HAL_RCC_OscConfig+0x532>
 8002f62:	e01a      	b.n	8002f9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fd fe76 	bl	8000c54 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f6a:	e00f      	b.n	8002f8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6c:	f7fd fe72 	bl	8000c54 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d906      	bls.n	8002f8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e15f      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f8c:	4baa      	ldr	r3, [pc, #680]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e8      	bne.n	8002f6c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f9a:	7ffb      	ldrb	r3, [r7, #31]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa0:	4ba5      	ldr	r3, [pc, #660]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	4aa4      	ldr	r2, [pc, #656]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8002fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002faa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d03c      	beq.n	8003032 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01c      	beq.n	8002ffa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fc0:	4b9d      	ldr	r3, [pc, #628]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8002fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fc6:	4a9c      	ldr	r2, [pc, #624]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fd fe40 	bl	8000c54 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fd8:	f7fd fe3c 	bl	8000c54 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e12b      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fea:	4b93      	ldr	r3, [pc, #588]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8002fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ef      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x5cc>
 8002ff8:	e01b      	b.n	8003032 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ffa:	4b8f      	ldr	r3, [pc, #572]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8002ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003000:	4a8d      	ldr	r2, [pc, #564]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300a:	f7fd fe23 	bl	8000c54 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003012:	f7fd fe1f 	bl	8000c54 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e10e      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003024:	4b84      	ldr	r3, [pc, #528]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8003026:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ef      	bne.n	8003012 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8102 	beq.w	8003240 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	2b02      	cmp	r3, #2
 8003042:	f040 80c5 	bne.w	80031d0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003046:	4b7c      	ldr	r3, [pc, #496]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f003 0203 	and.w	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	429a      	cmp	r2, r3
 8003058:	d12c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	3b01      	subs	r3, #1
 8003066:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d123      	bne.n	80030b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d11b      	bne.n	80030b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d113      	bne.n	80030b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	3b01      	subs	r3, #1
 800309a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d109      	bne.n	80030b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	3b01      	subs	r3, #1
 80030ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d067      	beq.n	8003184 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	d062      	beq.n	8003180 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030ba:	4b5f      	ldr	r3, [pc, #380]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0bb      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030ca:	4b5b      	ldr	r3, [pc, #364]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a5a      	ldr	r2, [pc, #360]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 80030d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030d6:	f7fd fdbd 	bl	8000c54 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fd fdb9 	bl	8000c54 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0a8      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f0:	4b51      	ldr	r3, [pc, #324]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fc:	4b4e      	ldr	r3, [pc, #312]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	4b4e      	ldr	r3, [pc, #312]	; (800323c <HAL_RCC_OscConfig+0x830>)
 8003102:	4013      	ands	r3, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800310c:	3a01      	subs	r2, #1
 800310e:	0112      	lsls	r2, r2, #4
 8003110:	4311      	orrs	r1, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003116:	0212      	lsls	r2, r2, #8
 8003118:	4311      	orrs	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800311e:	0852      	lsrs	r2, r2, #1
 8003120:	3a01      	subs	r2, #1
 8003122:	0552      	lsls	r2, r2, #21
 8003124:	4311      	orrs	r1, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800312a:	0852      	lsrs	r2, r2, #1
 800312c:	3a01      	subs	r2, #1
 800312e:	0652      	lsls	r2, r2, #25
 8003130:	4311      	orrs	r1, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003136:	06d2      	lsls	r2, r2, #27
 8003138:	430a      	orrs	r2, r1
 800313a:	493f      	ldr	r1, [pc, #252]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 800313c:	4313      	orrs	r3, r2
 800313e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003140:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a3c      	ldr	r2, [pc, #240]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8003146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800314c:	4b3a      	ldr	r3, [pc, #232]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4a39      	ldr	r2, [pc, #228]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003156:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003158:	f7fd fd7c 	bl	8000c54 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fd fd78 	bl	8000c54 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e067      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003172:	4b31      	ldr	r3, [pc, #196]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800317e:	e05f      	b.n	8003240 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e05e      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003184:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d157      	bne.n	8003240 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003190:	4b29      	ldr	r3, [pc, #164]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a28      	ldr	r2, [pc, #160]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800319c:	4b26      	ldr	r3, [pc, #152]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a25      	ldr	r2, [pc, #148]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031a8:	f7fd fd54 	bl	8000c54 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fd fd50 	bl	8000c54 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e03f      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x7a4>
 80031ce:	e037      	b.n	8003240 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b0c      	cmp	r3, #12
 80031d4:	d02d      	beq.n	8003232 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b18      	ldr	r3, [pc, #96]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a17      	ldr	r2, [pc, #92]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 80031dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d105      	bne.n	80031fa <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4a11      	ldr	r2, [pc, #68]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 80031f4:	f023 0303 	bic.w	r3, r3, #3
 80031f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8003200:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003208:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fd fd23 	bl	8000c54 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003212:	f7fd fd1f 	bl	8000c54 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e00e      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <HAL_RCC_OscConfig+0x82c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x806>
 8003230:	e006      	b.n	8003240 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e005      	b.n	8003242 <HAL_RCC_OscConfig+0x836>
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop

0800324c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0c8      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b66      	ldr	r3, [pc, #408]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d910      	bls.n	8003290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b63      	ldr	r3, [pc, #396]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 0207 	bic.w	r2, r3, #7
 8003276:	4961      	ldr	r1, [pc, #388]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b5f      	ldr	r3, [pc, #380]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b0      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d04c      	beq.n	8003336 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a4:	4b56      	ldr	r3, [pc, #344]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d121      	bne.n	80032f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e09e      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032bc:	4b50      	ldr	r3, [pc, #320]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d115      	bne.n	80032f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e092      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d107      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d4:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e086      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e4:	4b46      	ldr	r3, [pc, #280]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e07e      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f4:	4b42      	ldr	r3, [pc, #264]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f023 0203 	bic.w	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	493f      	ldr	r1, [pc, #252]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003306:	f7fd fca5 	bl	8000c54 <HAL_GetTick>
 800330a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330c:	e00a      	b.n	8003324 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330e:	f7fd fca1 	bl	8000c54 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e066      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 020c 	and.w	r2, r3, #12
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	429a      	cmp	r2, r3
 8003334:	d1eb      	bne.n	800330e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003342:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	492c      	ldr	r1, [pc, #176]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 8003350:	4313      	orrs	r3, r2
 8003352:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003354:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d210      	bcs.n	8003384 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b26      	ldr	r3, [pc, #152]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 0207 	bic.w	r2, r3, #7
 800336a:	4924      	ldr	r1, [pc, #144]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003372:	4b22      	ldr	r3, [pc, #136]	; (80033fc <HAL_RCC_ClockConfig+0x1b0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e036      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4918      	ldr	r1, [pc, #96]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ae:	4b14      	ldr	r3, [pc, #80]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4910      	ldr	r1, [pc, #64]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033c2:	f000 f825 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80033c6:	4602      	mov	r2, r0
 80033c8:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <HAL_RCC_ClockConfig+0x1b4>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	490c      	ldr	r1, [pc, #48]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 80033d4:	5ccb      	ldrb	r3, [r1, r3]
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	fa22 f303 	lsr.w	r3, r2, r3
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fbe4 	bl	8000bb4 <HAL_InitTick>
 80033ec:	4603      	mov	r3, r0
 80033ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80033f0:	7afb      	ldrb	r3, [r7, #11]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40022000 	.word	0x40022000
 8003400:	40021000 	.word	0x40021000
 8003404:	08009824 	.word	0x08009824
 8003408:	20000018 	.word	0x20000018
 800340c:	2000001c 	.word	0x2000001c

08003410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	; 0x24
 8003414:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341e:	4b3e      	ldr	r3, [pc, #248]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003428:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x34>
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d121      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d11e      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003444:	4b34      	ldr	r3, [pc, #208]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003450:	4b31      	ldr	r3, [pc, #196]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	e005      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003460:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800346c:	4a2b      	ldr	r2, [pc, #172]	; (800351c <HAL_RCC_GetSysClockFreq+0x10c>)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003474:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10d      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d102      	bne.n	800348e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003488:	4b25      	ldr	r3, [pc, #148]	; (8003520 <HAL_RCC_GetSysClockFreq+0x110>)
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	e004      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d101      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003494:	4b23      	ldr	r3, [pc, #140]	; (8003524 <HAL_RCC_GetSysClockFreq+0x114>)
 8003496:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d134      	bne.n	8003508 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d003      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0xac>
 80034b4:	e005      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034b6:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <HAL_RCC_GetSysClockFreq+0x110>)
 80034b8:	617b      	str	r3, [r7, #20]
      break;
 80034ba:	e005      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034bc:	4b19      	ldr	r3, [pc, #100]	; (8003524 <HAL_RCC_GetSysClockFreq+0x114>)
 80034be:	617b      	str	r3, [r7, #20]
      break;
 80034c0:	e002      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	617b      	str	r3, [r7, #20]
      break;
 80034c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c8:	4b13      	ldr	r3, [pc, #76]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	3301      	adds	r3, #1
 80034d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	fb02 f203 	mul.w	r2, r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	0e5b      	lsrs	r3, r3, #25
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	3301      	adds	r3, #1
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003508:	69bb      	ldr	r3, [r7, #24]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3724      	adds	r7, #36	; 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	08009834 	.word	0x08009834
 8003520:	00f42400 	.word	0x00f42400
 8003524:	007a1200 	.word	0x007a1200

08003528 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003534:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003540:	f7ff f9f0 	bl	8002924 <HAL_PWREx_GetVoltageRange>
 8003544:	6178      	str	r0, [r7, #20]
 8003546:	e014      	b.n	8003572 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354c:	4a24      	ldr	r2, [pc, #144]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	6593      	str	r3, [r2, #88]	; 0x58
 8003554:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003560:	f7ff f9e0 	bl	8002924 <HAL_PWREx_GetVoltageRange>
 8003564:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003566:	4b1e      	ldr	r3, [pc, #120]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003570:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003578:	d10b      	bne.n	8003592 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b80      	cmp	r3, #128	; 0x80
 800357e:	d919      	bls.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2ba0      	cmp	r3, #160	; 0xa0
 8003584:	d902      	bls.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003586:	2302      	movs	r3, #2
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	e013      	b.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800358c:	2301      	movs	r3, #1
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	e010      	b.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b80      	cmp	r3, #128	; 0x80
 8003596:	d902      	bls.n	800359e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003598:	2303      	movs	r3, #3
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	e00a      	b.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b80      	cmp	r3, #128	; 0x80
 80035a2:	d102      	bne.n	80035aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035a4:	2302      	movs	r3, #2
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	e004      	b.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b70      	cmp	r3, #112	; 0x70
 80035ae:	d101      	bne.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b0:	2301      	movs	r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 0207 	bic.w	r2, r3, #7
 80035bc:	4909      	ldr	r1, [pc, #36]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d001      	beq.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40022000 	.word	0x40022000

080035e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035f0:	2300      	movs	r3, #0
 80035f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f4:	2300      	movs	r3, #0
 80035f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003600:	2b00      	cmp	r3, #0
 8003602:	d031      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800360c:	d01a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800360e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003612:	d814      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003618:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800361c:	d10f      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800361e:	4bac      	ldr	r3, [pc, #688]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	4aab      	ldr	r2, [pc, #684]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003628:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800362a:	e00c      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	2100      	movs	r1, #0
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f9cc 	bl	80039d0 <RCCEx_PLLSAI1_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	74fb      	strb	r3, [r7, #19]
      break;
 8003642:	e000      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800364c:	4ba0      	ldr	r3, [pc, #640]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	499d      	ldr	r1, [pc, #628]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003662:	e001      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8099 	beq.w	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800367a:	4b95      	ldr	r3, [pc, #596]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003690:	4b8f      	ldr	r3, [pc, #572]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003694:	4a8e      	ldr	r2, [pc, #568]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369a:	6593      	str	r3, [r2, #88]	; 0x58
 800369c:	4b8c      	ldr	r3, [pc, #560]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a8:	2301      	movs	r3, #1
 80036aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ac:	4b89      	ldr	r3, [pc, #548]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a88      	ldr	r2, [pc, #544]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b8:	f7fd facc 	bl	8000c54 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036be:	e009      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c0:	f7fd fac8 	bl	8000c54 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d902      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	74fb      	strb	r3, [r7, #19]
        break;
 80036d2:	e005      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036d4:	4b7f      	ldr	r3, [pc, #508]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ef      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d155      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036e6:	4b7a      	ldr	r3, [pc, #488]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01e      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d019      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003702:	4b73      	ldr	r3, [pc, #460]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800370e:	4b70      	ldr	r3, [pc, #448]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	4a6e      	ldr	r2, [pc, #440]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371e:	4b6c      	ldr	r3, [pc, #432]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	4a6a      	ldr	r2, [pc, #424]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800372e:	4a68      	ldr	r2, [pc, #416]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d016      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fd fa88 	bl	8000c54 <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003746:	e00b      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003748:	f7fd fa84 	bl	8000c54 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	; 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d902      	bls.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	74fb      	strb	r3, [r7, #19]
            break;
 800375e:	e006      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003760:	4b5b      	ldr	r3, [pc, #364]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0ec      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10b      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003774:	4b56      	ldr	r3, [pc, #344]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003782:	4953      	ldr	r1, [pc, #332]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800378a:	e004      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	74bb      	strb	r3, [r7, #18]
 8003790:	e001      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003796:	7c7b      	ldrb	r3, [r7, #17]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d105      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379c:	4b4c      	ldr	r3, [pc, #304]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	4a4b      	ldr	r2, [pc, #300]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037b4:	4b46      	ldr	r3, [pc, #280]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	f023 0203 	bic.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	4943      	ldr	r1, [pc, #268]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037d6:	4b3e      	ldr	r3, [pc, #248]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f023 020c 	bic.w	r2, r3, #12
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	493a      	ldr	r1, [pc, #232]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037f8:	4b35      	ldr	r3, [pc, #212]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	4932      	ldr	r1, [pc, #200]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800381a:	4b2d      	ldr	r3, [pc, #180]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003828:	4929      	ldr	r1, [pc, #164]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	4921      	ldr	r1, [pc, #132]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800385e:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	4918      	ldr	r1, [pc, #96]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003880:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	4910      	ldr	r1, [pc, #64]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d02c      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038a2:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	4907      	ldr	r1, [pc, #28]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038c0:	d10a      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038c2:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	4a02      	ldr	r2, [pc, #8]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038cc:	60d3      	str	r3, [r2, #12]
 80038ce:	e015      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x314>
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038e0:	d10c      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	2101      	movs	r1, #1
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 f871 	bl	80039d0 <RCCEx_PLLSAI1_Config>
 80038ee:	4603      	mov	r3, r0
 80038f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038f2:	7cfb      	ldrb	r3, [r7, #19]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d028      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003908:	4b30      	ldr	r3, [pc, #192]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	492d      	ldr	r1, [pc, #180]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003926:	d106      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4a27      	ldr	r2, [pc, #156]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800392e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003932:	60d3      	str	r3, [r2, #12]
 8003934:	e011      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800393e:	d10c      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f842 	bl	80039d0 <RCCEx_PLLSAI1_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01c      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003966:	4b19      	ldr	r3, [pc, #100]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003974:	4915      	ldr	r1, [pc, #84]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003980:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003984:	d10c      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3304      	adds	r3, #4
 800398a:	2102      	movs	r1, #2
 800398c:	4618      	mov	r0, r3
 800398e:	f000 f81f 	bl	80039d0 <RCCEx_PLLSAI1_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003996:	7cfb      	ldrb	r3, [r7, #19]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800399c:	7cfb      	ldrb	r3, [r7, #19]
 800399e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039ac:	4b07      	ldr	r3, [pc, #28]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ba:	4904      	ldr	r1, [pc, #16]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000

080039d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039de:	4b74      	ldr	r3, [pc, #464]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d018      	beq.n	8003a1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039ea:	4b71      	ldr	r3, [pc, #452]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0203 	and.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d10d      	bne.n	8003a16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
       ||
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a02:	4b6b      	ldr	r3, [pc, #428]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
       ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d047      	beq.n	8003aa6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
 8003a1a:	e044      	b.n	8003aa6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d018      	beq.n	8003a56 <RCCEx_PLLSAI1_Config+0x86>
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d825      	bhi.n	8003a74 <RCCEx_PLLSAI1_Config+0xa4>
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d002      	beq.n	8003a32 <RCCEx_PLLSAI1_Config+0x62>
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d009      	beq.n	8003a44 <RCCEx_PLLSAI1_Config+0x74>
 8003a30:	e020      	b.n	8003a74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a32:	4b5f      	ldr	r3, [pc, #380]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d11d      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a42:	e01a      	b.n	8003a7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a44:	4b5a      	ldr	r3, [pc, #360]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d116      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a54:	e013      	b.n	8003a7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a56:	4b56      	ldr	r3, [pc, #344]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a62:	4b53      	ldr	r3, [pc, #332]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a72:	e006      	b.n	8003a82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      break;
 8003a78:	e004      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e002      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e000      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a82:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10d      	bne.n	8003aa6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a8a:	4b49      	ldr	r3, [pc, #292]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6819      	ldr	r1, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	4943      	ldr	r1, [pc, #268]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d17c      	bne.n	8003ba6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003aac:	4b40      	ldr	r3, [pc, #256]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a3f      	ldr	r2, [pc, #252]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab8:	f7fd f8cc 	bl	8000c54 <HAL_GetTick>
 8003abc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003abe:	e009      	b.n	8003ad4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ac0:	f7fd f8c8 	bl	8000c54 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d902      	bls.n	8003ad4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ad2:	e005      	b.n	8003ae0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ad4:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ef      	bne.n	8003ac0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d15f      	bne.n	8003ba6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d110      	bne.n	8003b0e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aec:	4b30      	ldr	r3, [pc, #192]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003af4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6892      	ldr	r2, [r2, #8]
 8003afc:	0211      	lsls	r1, r2, #8
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68d2      	ldr	r2, [r2, #12]
 8003b02:	06d2      	lsls	r2, r2, #27
 8003b04:	430a      	orrs	r2, r1
 8003b06:	492a      	ldr	r1, [pc, #168]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	610b      	str	r3, [r1, #16]
 8003b0c:	e027      	b.n	8003b5e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d112      	bne.n	8003b3a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b14:	4b26      	ldr	r3, [pc, #152]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6892      	ldr	r2, [r2, #8]
 8003b24:	0211      	lsls	r1, r2, #8
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6912      	ldr	r2, [r2, #16]
 8003b2a:	0852      	lsrs	r2, r2, #1
 8003b2c:	3a01      	subs	r2, #1
 8003b2e:	0552      	lsls	r2, r2, #21
 8003b30:	430a      	orrs	r2, r1
 8003b32:	491f      	ldr	r1, [pc, #124]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	610b      	str	r3, [r1, #16]
 8003b38:	e011      	b.n	8003b5e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b3a:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6892      	ldr	r2, [r2, #8]
 8003b4a:	0211      	lsls	r1, r2, #8
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6952      	ldr	r2, [r2, #20]
 8003b50:	0852      	lsrs	r2, r2, #1
 8003b52:	3a01      	subs	r2, #1
 8003b54:	0652      	lsls	r2, r2, #25
 8003b56:	430a      	orrs	r2, r1
 8003b58:	4915      	ldr	r1, [pc, #84]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b5e:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6a:	f7fd f873 	bl	8000c54 <HAL_GetTick>
 8003b6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b70:	e009      	b.n	8003b86 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b72:	f7fd f86f 	bl	8000c54 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d902      	bls.n	8003b86 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	73fb      	strb	r3, [r7, #15]
          break;
 8003b84:	e005      	b.n	8003b92 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0ef      	beq.n	8003b72 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	4903      	ldr	r1, [pc, #12]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e095      	b.n	8003cf2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d108      	bne.n	8003be0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd6:	d009      	beq.n	8003bec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	61da      	str	r2, [r3, #28]
 8003bde:	e005      	b.n	8003bec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fc feae 	bl	8000968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c2c:	d902      	bls.n	8003c34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	e002      	b.n	8003c3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c42:	d007      	beq.n	8003c54 <HAL_SPI_Init+0xa0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c4c:	d002      	beq.n	8003c54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	ea42 0103 	orr.w	r1, r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	f003 0204 	and.w	r2, r3, #4
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003cd0:	ea42 0103 	orr.w	r1, r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b088      	sub	sp, #32
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_SPI_Transmit+0x22>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e158      	b.n	8003fce <HAL_SPI_Transmit+0x2d4>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d24:	f7fc ff96 	bl	8000c54 <HAL_GetTick>
 8003d28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d002      	beq.n	8003d40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d3e:	e13d      	b.n	8003fbc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_SPI_Transmit+0x52>
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d50:	e134      	b.n	8003fbc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2203      	movs	r2, #3
 8003d56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	88fa      	ldrh	r2, [r7, #6]
 8003d6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	88fa      	ldrh	r2, [r7, #6]
 8003d70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9c:	d10f      	bne.n	8003dbe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d007      	beq.n	8003ddc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003de4:	d94b      	bls.n	8003e7e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_SPI_Transmit+0xfa>
 8003dee:	8afb      	ldrh	r3, [r7, #22]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d13e      	bne.n	8003e72 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	881a      	ldrh	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	1c9a      	adds	r2, r3, #2
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e18:	e02b      	b.n	8003e72 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d112      	bne.n	8003e4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	881a      	ldrh	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	1c9a      	adds	r2, r3, #2
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e4c:	e011      	b.n	8003e72 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e4e:	f7fc ff01 	bl	8000c54 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d803      	bhi.n	8003e66 <HAL_SPI_Transmit+0x16c>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e64:	d102      	bne.n	8003e6c <HAL_SPI_Transmit+0x172>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e70:	e0a4      	b.n	8003fbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1ce      	bne.n	8003e1a <HAL_SPI_Transmit+0x120>
 8003e7c:	e07c      	b.n	8003f78 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_SPI_Transmit+0x192>
 8003e86:	8afb      	ldrh	r3, [r7, #22]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d170      	bne.n	8003f6e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d912      	bls.n	8003ebc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	881a      	ldrh	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	1c9a      	adds	r2, r3, #2
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b02      	subs	r3, #2
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eba:	e058      	b.n	8003f6e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	7812      	ldrb	r2, [r2, #0]
 8003ec8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ee2:	e044      	b.n	8003f6e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d12b      	bne.n	8003f4a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d912      	bls.n	8003f22 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	881a      	ldrh	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	1c9a      	adds	r2, r3, #2
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b02      	subs	r3, #2
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f20:	e025      	b.n	8003f6e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	7812      	ldrb	r2, [r2, #0]
 8003f2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f48:	e011      	b.n	8003f6e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f4a:	f7fc fe83 	bl	8000c54 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d803      	bhi.n	8003f62 <HAL_SPI_Transmit+0x268>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f60:	d102      	bne.n	8003f68 <HAL_SPI_Transmit+0x26e>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f6c:	e026      	b.n	8003fbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1b5      	bne.n	8003ee4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	6839      	ldr	r1, [r7, #0]
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fcdb 	bl	8004938 <SPI_EndRxTxTransaction>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e000      	b.n	8003fbc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003fba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b088      	sub	sp, #32
 8003fda:	af02      	add	r7, sp, #8
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	603b      	str	r3, [r7, #0]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ff2:	d112      	bne.n	800401a <HAL_SPI_Receive+0x44>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10e      	bne.n	800401a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2204      	movs	r2, #4
 8004000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004004:	88fa      	ldrh	r2, [r7, #6]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4613      	mov	r3, r2
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f910 	bl	8004236 <HAL_SPI_TransmitReceive>
 8004016:	4603      	mov	r3, r0
 8004018:	e109      	b.n	800422e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_SPI_Receive+0x52>
 8004024:	2302      	movs	r3, #2
 8004026:	e102      	b.n	800422e <HAL_SPI_Receive+0x258>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004030:	f7fc fe10 	bl	8000c54 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d002      	beq.n	8004048 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004042:	2302      	movs	r3, #2
 8004044:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004046:	e0e9      	b.n	800421c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_SPI_Receive+0x7e>
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004058:	e0e0      	b.n	800421c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2204      	movs	r2, #4
 800405e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	88fa      	ldrh	r2, [r7, #6]
 8004072:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	88fa      	ldrh	r2, [r7, #6]
 800407a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040a4:	d908      	bls.n	80040b8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	e007      	b.n	80040c8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040c6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d0:	d10f      	bne.n	80040f2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b40      	cmp	r3, #64	; 0x40
 80040fe:	d007      	beq.n	8004110 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800410e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004118:	d867      	bhi.n	80041ea <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800411a:	e030      	b.n	800417e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b01      	cmp	r3, #1
 8004128:	d117      	bne.n	800415a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f103 020c 	add.w	r2, r3, #12
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	7812      	ldrb	r2, [r2, #0]
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004158:	e011      	b.n	800417e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800415a:	f7fc fd7b 	bl	8000c54 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d803      	bhi.n	8004172 <HAL_SPI_Receive+0x19c>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004170:	d102      	bne.n	8004178 <HAL_SPI_Receive+0x1a2>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d102      	bne.n	800417e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800417c:	e04e      	b.n	800421c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1c8      	bne.n	800411c <HAL_SPI_Receive+0x146>
 800418a:	e034      	b.n	80041f6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b01      	cmp	r3, #1
 8004198:	d115      	bne.n	80041c6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	b292      	uxth	r2, r2
 80041a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	1c9a      	adds	r2, r3, #2
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80041c4:	e011      	b.n	80041ea <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c6:	f7fc fd45 	bl	8000c54 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d803      	bhi.n	80041de <HAL_SPI_Receive+0x208>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041dc:	d102      	bne.n	80041e4 <HAL_SPI_Receive+0x20e>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041e8:	e018      	b.n	800421c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ca      	bne.n	800418c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	6839      	ldr	r1, [r7, #0]
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 fb44 	bl	8004888 <SPI_EndRxTransaction>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	75fb      	strb	r3, [r7, #23]
 8004218:	e000      	b.n	800421c <HAL_SPI_Receive+0x246>
  }

error :
 800421a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800422c:	7dfb      	ldrb	r3, [r7, #23]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b08a      	sub	sp, #40	; 0x28
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004244:	2301      	movs	r3, #1
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_SPI_TransmitReceive+0x26>
 8004258:	2302      	movs	r3, #2
 800425a:	e1fb      	b.n	8004654 <HAL_SPI_TransmitReceive+0x41e>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004264:	f7fc fcf6 	bl	8000c54 <HAL_GetTick>
 8004268:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004270:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004278:	887b      	ldrh	r3, [r7, #2]
 800427a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800427c:	887b      	ldrh	r3, [r7, #2]
 800427e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004280:	7efb      	ldrb	r3, [r7, #27]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d00e      	beq.n	80042a4 <HAL_SPI_TransmitReceive+0x6e>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800428c:	d106      	bne.n	800429c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <HAL_SPI_TransmitReceive+0x66>
 8004296:	7efb      	ldrb	r3, [r7, #27]
 8004298:	2b04      	cmp	r3, #4
 800429a:	d003      	beq.n	80042a4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800429c:	2302      	movs	r3, #2
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042a2:	e1cd      	b.n	8004640 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_SPI_TransmitReceive+0x80>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_SPI_TransmitReceive+0x80>
 80042b0:	887b      	ldrh	r3, [r7, #2]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d103      	bne.n	80042be <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042bc:	e1c0      	b.n	8004640 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d003      	beq.n	80042d2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2205      	movs	r2, #5
 80042ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	887a      	ldrh	r2, [r7, #2]
 80042e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	887a      	ldrh	r2, [r7, #2]
 80042ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	887a      	ldrh	r2, [r7, #2]
 80042f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	887a      	ldrh	r2, [r7, #2]
 80042fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004314:	d802      	bhi.n	800431c <HAL_SPI_TransmitReceive+0xe6>
 8004316:	8a3b      	ldrh	r3, [r7, #16]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d908      	bls.n	800432e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800432a:	605a      	str	r2, [r3, #4]
 800432c:	e007      	b.n	800433e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800433c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d007      	beq.n	800435c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800435a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004364:	d97c      	bls.n	8004460 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_SPI_TransmitReceive+0x13e>
 800436e:	8a7b      	ldrh	r3, [r7, #18]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d169      	bne.n	8004448 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	881a      	ldrh	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	1c9a      	adds	r2, r3, #2
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004398:	e056      	b.n	8004448 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d11b      	bne.n	80043e0 <HAL_SPI_TransmitReceive+0x1aa>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d016      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x1aa>
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d113      	bne.n	80043e0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	881a      	ldrh	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	1c9a      	adds	r2, r3, #2
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d11c      	bne.n	8004428 <HAL_SPI_TransmitReceive+0x1f2>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	b292      	uxth	r2, r2
 8004406:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	1c9a      	adds	r2, r3, #2
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004424:	2301      	movs	r3, #1
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004428:	f7fc fc14 	bl	8000c54 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004434:	429a      	cmp	r2, r3
 8004436:	d807      	bhi.n	8004448 <HAL_SPI_TransmitReceive+0x212>
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800443e:	d003      	beq.n	8004448 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004446:	e0fb      	b.n	8004640 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1a3      	bne.n	800439a <HAL_SPI_TransmitReceive+0x164>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d19d      	bne.n	800439a <HAL_SPI_TransmitReceive+0x164>
 800445e:	e0df      	b.n	8004620 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_SPI_TransmitReceive+0x23a>
 8004468:	8a7b      	ldrh	r3, [r7, #18]
 800446a:	2b01      	cmp	r3, #1
 800446c:	f040 80cb 	bne.w	8004606 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d912      	bls.n	80044a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	881a      	ldrh	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	1c9a      	adds	r2, r3, #2
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b02      	subs	r3, #2
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800449e:	e0b2      	b.n	8004606 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	7812      	ldrb	r2, [r2, #0]
 80044ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c6:	e09e      	b.n	8004606 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d134      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x30a>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d02f      	beq.n	8004540 <HAL_SPI_TransmitReceive+0x30a>
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d12c      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d912      	bls.n	8004516 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	881a      	ldrh	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	1c9a      	adds	r2, r3, #2
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b02      	subs	r3, #2
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004514:	e012      	b.n	800453c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	7812      	ldrb	r2, [r2, #0]
 8004522:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d148      	bne.n	80045e0 <HAL_SPI_TransmitReceive+0x3aa>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d042      	beq.n	80045e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	d923      	bls.n	80045ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	b292      	uxth	r2, r2
 8004572:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	1c9a      	adds	r2, r3, #2
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b02      	subs	r3, #2
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	d81f      	bhi.n	80045dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045aa:	605a      	str	r2, [r3, #4]
 80045ac:	e016      	b.n	80045dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f103 020c 	add.w	r2, r3, #12
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	7812      	ldrb	r2, [r2, #0]
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045dc:	2301      	movs	r3, #1
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045e0:	f7fc fb38 	bl	8000c54 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d803      	bhi.n	80045f8 <HAL_SPI_TransmitReceive+0x3c2>
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045f6:	d102      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x3c8>
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d103      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004604:	e01c      	b.n	8004640 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	f47f af5b 	bne.w	80044c8 <HAL_SPI_TransmitReceive+0x292>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	f47f af54 	bne.w	80044c8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f987 	bl	8004938 <SPI_EndRxTxTransaction>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d006      	beq.n	800463e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	661a      	str	r2, [r3, #96]	; 0x60
 800463c:	e000      	b.n	8004640 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800463e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004654:	4618      	mov	r0, r3
 8004656:	3728      	adds	r7, #40	; 0x28
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800466c:	f7fc faf2 	bl	8000c54 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	4413      	add	r3, r2
 800467a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800467c:	f7fc faea 	bl	8000c54 <HAL_GetTick>
 8004680:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004682:	4b39      	ldr	r3, [pc, #228]	; (8004768 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	015b      	lsls	r3, r3, #5
 8004688:	0d1b      	lsrs	r3, r3, #20
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	fb02 f303 	mul.w	r3, r2, r3
 8004690:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004692:	e054      	b.n	800473e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800469a:	d050      	beq.n	800473e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800469c:	f7fc fada 	bl	8000c54 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d902      	bls.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d13d      	bne.n	800472e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ca:	d111      	bne.n	80046f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d4:	d004      	beq.n	80046e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046de:	d107      	bne.n	80046f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f8:	d10f      	bne.n	800471a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004718:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e017      	b.n	800475e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	3b01      	subs	r3, #1
 800473c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4013      	ands	r3, r2
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	429a      	cmp	r2, r3
 800474c:	bf0c      	ite	eq
 800474e:	2301      	moveq	r3, #1
 8004750:	2300      	movne	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	429a      	cmp	r2, r3
 800475a:	d19b      	bne.n	8004694 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3720      	adds	r7, #32
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000018 	.word	0x20000018

0800476c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800477a:	f7fc fa6b 	bl	8000c54 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	4413      	add	r3, r2
 8004788:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800478a:	f7fc fa63 	bl	8000c54 <HAL_GetTick>
 800478e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004790:	4b3c      	ldr	r3, [pc, #240]	; (8004884 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	00da      	lsls	r2, r3, #3
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	0d1b      	lsrs	r3, r3, #20
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80047a8:	e05f      	b.n	800486a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047b0:	d106      	bne.n	80047c0 <SPI_WaitFifoStateUntilTimeout+0x54>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d103      	bne.n	80047c0 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c6:	d050      	beq.n	800486a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047c8:	f7fc fa44 	bl	8000c54 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d902      	bls.n	80047de <SPI_WaitFifoStateUntilTimeout+0x72>
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d13d      	bne.n	800485a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f6:	d111      	bne.n	800481c <SPI_WaitFifoStateUntilTimeout+0xb0>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004800:	d004      	beq.n	800480c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480a:	d107      	bne.n	800481c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004824:	d10f      	bne.n	8004846 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004844:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e010      	b.n	800487c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	3b01      	subs	r3, #1
 8004868:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4013      	ands	r3, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	d197      	bne.n	80047aa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3720      	adds	r7, #32
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20000018 	.word	0x20000018

08004888 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489c:	d111      	bne.n	80048c2 <SPI_EndRxTransaction+0x3a>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a6:	d004      	beq.n	80048b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b0:	d107      	bne.n	80048c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2200      	movs	r2, #0
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f7ff fec5 	bl	800465c <SPI_WaitFlagStateUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e023      	b.n	8004930 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048f0:	d11d      	bne.n	800492e <SPI_EndRxTransaction+0xa6>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fa:	d004      	beq.n	8004906 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004904:	d113      	bne.n	800492e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2200      	movs	r2, #0
 800490e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7ff ff2a 	bl	800476c <SPI_WaitFifoStateUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004922:	f043 0220 	orr.w	r2, r3, #32
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e000      	b.n	8004930 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2200      	movs	r2, #0
 800494c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f7ff ff0b 	bl	800476c <SPI_WaitFifoStateUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d007      	beq.n	800496c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e027      	b.n	80049bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2200      	movs	r2, #0
 8004974:	2180      	movs	r1, #128	; 0x80
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f7ff fe70 	bl	800465c <SPI_WaitFlagStateUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004986:	f043 0220 	orr.w	r2, r3, #32
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e014      	b.n	80049bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2200      	movs	r2, #0
 800499a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f7ff fee4 	bl	800476c <SPI_WaitFifoStateUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ae:	f043 0220 	orr.w	r2, r3, #32
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e000      	b.n	80049bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049c4:	b084      	sub	sp, #16
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	f107 0014 	add.w	r0, r7, #20
 80049d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	b004      	add	sp, #16
 80049e4:	4770      	bx	lr

080049e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049f6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80049fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a1c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a20:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	4013      	ands	r3, r2
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a64:	b084      	sub	sp, #16
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	f107 0014 	add.w	r0, r7, #20
 8004a72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	b004      	add	sp, #16
 8004aa4:	4770      	bx	lr
	...

08004aa8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b09b      	sub	sp, #108	; 0x6c
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	78db      	ldrb	r3, [r3, #3]
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d81f      	bhi.n	8004b1a <USB_ActivateEndpoint+0x72>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <USB_ActivateEndpoint+0x38>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004af1 	.word	0x08004af1
 8004ae4:	08004b0d 	.word	0x08004b0d
 8004ae8:	08004b23 	.word	0x08004b23
 8004aec:	08004aff 	.word	0x08004aff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004af0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004af8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004afc:	e012      	b.n	8004b24 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004afe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b02:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b06:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b0a:	e00b      	b.n	8004b24 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b0c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b14:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b18:	e004      	b.n	8004b24 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b20:	e000      	b.n	8004b24 <USB_ActivateEndpoint+0x7c>
      break;
 8004b22:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	441a      	add	r2, r3
 8004b2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	b21b      	sxth	r3, r3
 8004b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	b21a      	sxth	r2, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b21b      	sxth	r3, r3
 8004b66:	4313      	orrs	r3, r2
 8004b68:	b21b      	sxth	r3, r3
 8004b6a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	7b1b      	ldrb	r3, [r3, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f040 8149 	bne.w	8004e2c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	785b      	ldrb	r3, [r3, #1]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 8084 	beq.w	8004cac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	00da      	lsls	r2, r3, #3
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	88db      	ldrh	r3, [r3, #6]
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	81fb      	strh	r3, [r7, #14]
 8004be6:	89fb      	ldrh	r3, [r7, #14]
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01b      	beq.n	8004c28 <USB_ActivateEndpoint+0x180>
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	81bb      	strh	r3, [r7, #12]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	441a      	add	r2, r3
 8004c12:	89bb      	ldrh	r3, [r7, #12]
 8004c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	78db      	ldrb	r3, [r3, #3]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d020      	beq.n	8004c72 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c46:	813b      	strh	r3, [r7, #8]
 8004c48:	893b      	ldrh	r3, [r7, #8]
 8004c4a:	f083 0320 	eor.w	r3, r3, #32
 8004c4e:	813b      	strh	r3, [r7, #8]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	893b      	ldrh	r3, [r7, #8]
 8004c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	8013      	strh	r3, [r2, #0]
 8004c70:	e27f      	b.n	8005172 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c88:	817b      	strh	r3, [r7, #10]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	441a      	add	r2, r3
 8004c94:	897b      	ldrh	r3, [r7, #10]
 8004c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	8013      	strh	r3, [r2, #0]
 8004caa:	e262      	b.n	8005172 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbc:	4413      	add	r3, r2
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	00da      	lsls	r2, r3, #3
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	4413      	add	r3, r2
 8004cca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	88db      	ldrh	r3, [r3, #6]
 8004cd4:	085b      	lsrs	r3, r3, #1
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	461a      	mov	r2, r3
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	4413      	add	r3, r2
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	00da      	lsls	r2, r3, #3
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d02:	623b      	str	r3, [r7, #32]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d112      	bne.n	8004d32 <USB_ActivateEndpoint+0x28a>
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	801a      	strh	r2, [r3, #0]
 8004d30:	e02f      	b.n	8004d92 <USB_ActivateEndpoint+0x2ea>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b3e      	cmp	r3, #62	; 0x3e
 8004d38:	d813      	bhi.n	8004d62 <USB_ActivateEndpoint+0x2ba>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	663b      	str	r3, [r7, #96]	; 0x60
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <USB_ActivateEndpoint+0x2ac>
 8004d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d50:	3301      	adds	r3, #1
 8004d52:	663b      	str	r3, [r7, #96]	; 0x60
 8004d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	029b      	lsls	r3, r3, #10
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	801a      	strh	r2, [r3, #0]
 8004d60:	e017      	b.n	8004d92 <USB_ActivateEndpoint+0x2ea>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	663b      	str	r3, [r7, #96]	; 0x60
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 031f 	and.w	r3, r3, #31
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <USB_ActivateEndpoint+0x2d4>
 8004d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	029b      	lsls	r3, r3, #10
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	83fb      	strh	r3, [r7, #30]
 8004da0:	8bfb      	ldrh	r3, [r7, #30]
 8004da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01b      	beq.n	8004de2 <USB_ActivateEndpoint+0x33a>
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc0:	83bb      	strh	r3, [r7, #28]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	441a      	add	r2, r3
 8004dcc:	8bbb      	ldrh	r3, [r7, #28]
 8004dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df8:	837b      	strh	r3, [r7, #26]
 8004dfa:	8b7b      	ldrh	r3, [r7, #26]
 8004dfc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e00:	837b      	strh	r3, [r7, #26]
 8004e02:	8b7b      	ldrh	r3, [r7, #26]
 8004e04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e08:	837b      	strh	r3, [r7, #26]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	441a      	add	r2, r3
 8004e14:	8b7b      	ldrh	r3, [r7, #26]
 8004e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	8013      	strh	r3, [r2, #0]
 8004e2a:	e1a2      	b.n	8005172 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	441a      	add	r2, r3
 8004e50:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e78:	4413      	add	r3, r2
 8004e7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	00da      	lsls	r2, r3, #3
 8004e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	891b      	ldrh	r3, [r3, #8]
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e9a:	801a      	strh	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	653b      	str	r3, [r7, #80]	; 0x50
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eac:	4413      	add	r3, r2
 8004eae:	653b      	str	r3, [r7, #80]	; 0x50
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	00da      	lsls	r2, r3, #3
 8004eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb8:	4413      	add	r3, r2
 8004eba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	895b      	ldrh	r3, [r3, #10]
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ece:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	785b      	ldrb	r3, [r3, #1]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f040 8091 	bne.w	8004ffc <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004ee8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01b      	beq.n	8004f2a <USB_ActivateEndpoint+0x482>
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f08:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	441a      	add	r2, r3
 8004f14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01b      	beq.n	8004f7a <USB_ActivateEndpoint+0x4d2>
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f90:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f98:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fa0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd8:	867b      	strh	r3, [r7, #50]	; 0x32
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	441a      	add	r2, r3
 8004fe4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	8013      	strh	r3, [r2, #0]
 8004ffa:	e0ba      	b.n	8005172 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800500c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01d      	beq.n	8005054 <USB_ActivateEndpoint+0x5ac>
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	441a      	add	r2, r3
 800503c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800504c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005050:	b29b      	uxth	r3, r3
 8005052:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005064:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01d      	beq.n	80050ac <USB_ActivateEndpoint+0x604>
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29b      	uxth	r3, r3
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	441a      	add	r2, r3
 8005094:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	78db      	ldrb	r3, [r3, #3]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d024      	beq.n	80050fe <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80050ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80050d2:	f083 0320 	eor.w	r3, r3, #32
 80050d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	441a      	add	r2, r3
 80050e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80050e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	8013      	strh	r3, [r2, #0]
 80050fc:	e01d      	b.n	800513a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005114:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005136:	b29b      	uxth	r3, r3
 8005138:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800514c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005150:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	441a      	add	r2, r3
 800515c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800515e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800516e:	b29b      	uxth	r3, r3
 8005170:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005172:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005176:	4618      	mov	r0, r3
 8005178:	376c      	adds	r7, #108	; 0x6c
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop

08005184 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005184:	b480      	push	{r7}
 8005186:	b08d      	sub	sp, #52	; 0x34
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	7b1b      	ldrb	r3, [r3, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	f040 808e 	bne.w	80052b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d044      	beq.n	800522a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	81bb      	strh	r3, [r7, #12]
 80051ae:	89bb      	ldrh	r3, [r7, #12]
 80051b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01b      	beq.n	80051f0 <USB_DeactivateEndpoint+0x6c>
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ce:	817b      	strh	r3, [r7, #10]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	897b      	ldrh	r3, [r7, #10]
 80051dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005206:	813b      	strh	r3, [r7, #8]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	441a      	add	r2, r3
 8005212:	893b      	ldrh	r3, [r7, #8]
 8005214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800521c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005224:	b29b      	uxth	r3, r3
 8005226:	8013      	strh	r3, [r2, #0]
 8005228:	e192      	b.n	8005550 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	827b      	strh	r3, [r7, #18]
 8005238:	8a7b      	ldrh	r3, [r7, #18]
 800523a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d01b      	beq.n	800527a <USB_DeactivateEndpoint+0xf6>
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005258:	823b      	strh	r3, [r7, #16]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	441a      	add	r2, r3
 8005264:	8a3b      	ldrh	r3, [r7, #16]
 8005266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005276:	b29b      	uxth	r3, r3
 8005278:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800528c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005290:	81fb      	strh	r3, [r7, #14]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	441a      	add	r2, r3
 800529c:	89fb      	ldrh	r3, [r7, #14]
 800529e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	8013      	strh	r3, [r2, #0]
 80052b2:	e14d      	b.n	8005550 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	785b      	ldrb	r3, [r3, #1]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f040 80a5 	bne.w	8005408 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	843b      	strh	r3, [r7, #32]
 80052cc:	8c3b      	ldrh	r3, [r7, #32]
 80052ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01b      	beq.n	800530e <USB_DeactivateEndpoint+0x18a>
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ec:	83fb      	strh	r3, [r7, #30]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	441a      	add	r2, r3
 80052f8:	8bfb      	ldrh	r3, [r7, #30]
 80052fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530a:	b29b      	uxth	r3, r3
 800530c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	83bb      	strh	r3, [r7, #28]
 800531c:	8bbb      	ldrh	r3, [r7, #28]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01b      	beq.n	800535e <USB_DeactivateEndpoint+0x1da>
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	837b      	strh	r3, [r7, #26]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	441a      	add	r2, r3
 8005348:	8b7b      	ldrh	r3, [r7, #26]
 800534a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800534e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005356:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800535a:	b29b      	uxth	r3, r3
 800535c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005374:	833b      	strh	r3, [r7, #24]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	441a      	add	r2, r3
 8005380:	8b3b      	ldrh	r3, [r7, #24]
 8005382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005392:	b29b      	uxth	r3, r3
 8005394:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ac:	82fb      	strh	r3, [r7, #22]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	441a      	add	r2, r3
 80053b8:	8afb      	ldrh	r3, [r7, #22]
 80053ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e4:	82bb      	strh	r3, [r7, #20]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	441a      	add	r2, r3
 80053f0:	8abb      	ldrh	r3, [r7, #20]
 80053f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005402:	b29b      	uxth	r3, r3
 8005404:	8013      	strh	r3, [r2, #0]
 8005406:	e0a3      	b.n	8005550 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005416:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01b      	beq.n	8005458 <USB_DeactivateEndpoint+0x2d4>
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	441a      	add	r2, r3
 8005442:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005454:	b29b      	uxth	r3, r3
 8005456:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005466:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01b      	beq.n	80054a8 <USB_DeactivateEndpoint+0x324>
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005486:	853b      	strh	r3, [r7, #40]	; 0x28
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800549c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	441a      	add	r2, r3
 80054ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054dc:	b29b      	uxth	r3, r3
 80054de:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	441a      	add	r2, r3
 8005502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800550c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005514:	b29b      	uxth	r3, r3
 8005516:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b29b      	uxth	r3, r3
 8005526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800552a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	441a      	add	r2, r3
 800553a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800553c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800554c:	b29b      	uxth	r3, r3
 800554e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3734      	adds	r7, #52	; 0x34
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b0c4      	sub	sp, #272	; 0x110
 8005562:	af00      	add	r7, sp, #0
 8005564:	1d3b      	adds	r3, r7, #4
 8005566:	6018      	str	r0, [r3, #0]
 8005568:	463b      	mov	r3, r7
 800556a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800556c:	463b      	mov	r3, r7
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	785b      	ldrb	r3, [r3, #1]
 8005572:	2b01      	cmp	r3, #1
 8005574:	f040 8566 	bne.w	8006044 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005578:	463b      	mov	r3, r7
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	463b      	mov	r3, r7
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	429a      	cmp	r2, r3
 8005586:	d905      	bls.n	8005594 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005588:	463b      	mov	r3, r7
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005592:	e004      	b.n	800559e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800559e:	463b      	mov	r3, r7
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	7b1b      	ldrb	r3, [r3, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d12c      	bne.n	8005602 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055a8:	463b      	mov	r3, r7
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6959      	ldr	r1, [r3, #20]
 80055ae:	463b      	mov	r3, r7
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	88da      	ldrh	r2, [r3, #6]
 80055b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	1d38      	adds	r0, r7, #4
 80055bc:	6800      	ldr	r0, [r0, #0]
 80055be:	f001 fa58 	bl	8006a72 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	1d3b      	adds	r3, r7, #4
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	4413      	add	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	463b      	mov	r3, r7
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	00da      	lsls	r2, r3, #3
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	4413      	add	r3, r2
 80055e6:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80055ea:	f107 0310 	add.w	r3, r7, #16
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	f107 0310 	add.w	r3, r7, #16
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	f000 bcec 	b.w	8005fda <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005602:	463b      	mov	r3, r7
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	78db      	ldrb	r3, [r3, #3]
 8005608:	2b02      	cmp	r3, #2
 800560a:	f040 8356 	bne.w	8005cba <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800560e:	463b      	mov	r3, r7
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6a1a      	ldr	r2, [r3, #32]
 8005614:	463b      	mov	r3, r7
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	429a      	cmp	r2, r3
 800561c:	f240 82fa 	bls.w	8005c14 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005620:	1d3b      	adds	r3, r7, #4
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	463b      	mov	r3, r7
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	463b      	mov	r3, r7
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	441a      	add	r2, r3
 800564c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005658:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800565c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8005664:	463b      	mov	r3, r7
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800566e:	463b      	mov	r3, r7
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005678:	1ad2      	subs	r2, r2, r3
 800567a:	463b      	mov	r3, r7
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005680:	1d3b      	adds	r3, r7, #4
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	463b      	mov	r3, r7
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 815e 	beq.w	8005958 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800569c:	1d3b      	adds	r3, r7, #4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	637b      	str	r3, [r7, #52]	; 0x34
 80056a2:	463b      	mov	r3, r7
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d164      	bne.n	8005776 <USB_EPStartXfer+0x218>
 80056ac:	1d3b      	adds	r3, r7, #4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b2:	1d3b      	adds	r3, r7, #4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	4413      	add	r3, r2
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c4:	463b      	mov	r3, r7
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	00da      	lsls	r2, r3, #3
 80056cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ce:	4413      	add	r3, r2
 80056d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d112      	bne.n	8005704 <USB_EPStartXfer+0x1a6>
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	801a      	strh	r2, [r3, #0]
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e054      	b.n	80057ae <USB_EPStartXfer+0x250>
 8005704:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005708:	2b3e      	cmp	r3, #62	; 0x3e
 800570a:	d817      	bhi.n	800573c <USB_EPStartXfer+0x1de>
 800570c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005716:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <USB_EPStartXfer+0x1ce>
 8005722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005726:	3301      	adds	r3, #1
 8005728:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800572c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005730:	b29b      	uxth	r3, r3
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	b29a      	uxth	r2, r3
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	e038      	b.n	80057ae <USB_EPStartXfer+0x250>
 800573c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005740:	095b      	lsrs	r3, r3, #5
 8005742:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005746:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	2b00      	cmp	r3, #0
 8005750:	d104      	bne.n	800575c <USB_EPStartXfer+0x1fe>
 8005752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005756:	3b01      	subs	r3, #1
 8005758:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800575c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005760:	b29b      	uxth	r3, r3
 8005762:	029b      	lsls	r3, r3, #10
 8005764:	b29b      	uxth	r3, r3
 8005766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800576a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576e:	b29a      	uxth	r2, r3
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	e01b      	b.n	80057ae <USB_EPStartXfer+0x250>
 8005776:	463b      	mov	r3, r7
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d116      	bne.n	80057ae <USB_EPStartXfer+0x250>
 8005780:	1d3b      	adds	r3, r7, #4
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005788:	b29b      	uxth	r3, r3
 800578a:	461a      	mov	r2, r3
 800578c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578e:	4413      	add	r3, r2
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
 8005792:	463b      	mov	r3, r7
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	00da      	lsls	r2, r3, #3
 800579a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579c:	4413      	add	r3, r2
 800579e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057a2:	633b      	str	r3, [r7, #48]	; 0x30
 80057a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057ae:	463b      	mov	r3, r7
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	895b      	ldrh	r3, [r3, #10]
 80057b4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057b8:	463b      	mov	r3, r7
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6959      	ldr	r1, [r3, #20]
 80057be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80057c8:	1d38      	adds	r0, r7, #4
 80057ca:	6800      	ldr	r0, [r0, #0]
 80057cc:	f001 f951 	bl	8006a72 <USB_WritePMA>
            ep->xfer_buff += len;
 80057d0:	463b      	mov	r3, r7
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057da:	441a      	add	r2, r3
 80057dc:	463b      	mov	r3, r7
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057e2:	463b      	mov	r3, r7
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6a1a      	ldr	r2, [r3, #32]
 80057e8:	463b      	mov	r3, r7
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d90e      	bls.n	8005810 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80057f2:	463b      	mov	r3, r7
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80057fc:	463b      	mov	r3, r7
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6a1a      	ldr	r2, [r3, #32]
 8005802:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005806:	1ad2      	subs	r2, r2, r3
 8005808:	463b      	mov	r3, r7
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	621a      	str	r2, [r3, #32]
 800580e:	e008      	b.n	8005822 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005810:	463b      	mov	r3, r7
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800581a:	463b      	mov	r3, r7
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2200      	movs	r2, #0
 8005820:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005822:	463b      	mov	r3, r7
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d164      	bne.n	80058f6 <USB_EPStartXfer+0x398>
 800582c:	1d3b      	adds	r3, r7, #4
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	1d3b      	adds	r3, r7, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583a:	b29b      	uxth	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	463b      	mov	r3, r7
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	00da      	lsls	r2, r3, #3
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800585a:	2b00      	cmp	r3, #0
 800585c:	d112      	bne.n	8005884 <USB_EPStartXfer+0x326>
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005868:	b29a      	uxth	r2, r3
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	801a      	strh	r2, [r3, #0]
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29b      	uxth	r3, r3
 8005874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587c:	b29a      	uxth	r2, r3
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	e057      	b.n	8005934 <USB_EPStartXfer+0x3d6>
 8005884:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005888:	2b3e      	cmp	r3, #62	; 0x3e
 800588a:	d817      	bhi.n	80058bc <USB_EPStartXfer+0x35e>
 800588c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005890:	085b      	lsrs	r3, r3, #1
 8005892:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005896:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d004      	beq.n	80058ac <USB_EPStartXfer+0x34e>
 80058a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058a6:	3301      	adds	r3, #1
 80058a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	029b      	lsls	r3, r3, #10
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	801a      	strh	r2, [r3, #0]
 80058ba:	e03b      	b.n	8005934 <USB_EPStartXfer+0x3d6>
 80058bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058ca:	f003 031f 	and.w	r3, r3, #31
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d104      	bne.n	80058dc <USB_EPStartXfer+0x37e>
 80058d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058d6:	3b01      	subs	r3, #1
 80058d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	029b      	lsls	r3, r3, #10
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	e01e      	b.n	8005934 <USB_EPStartXfer+0x3d6>
 80058f6:	463b      	mov	r3, r7
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d119      	bne.n	8005934 <USB_EPStartXfer+0x3d6>
 8005900:	1d3b      	adds	r3, r7, #4
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
 8005906:	1d3b      	adds	r3, r7, #4
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590e:	b29b      	uxth	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	4413      	add	r3, r2
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
 8005918:	463b      	mov	r3, r7
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	00da      	lsls	r2, r3, #3
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	4413      	add	r3, r2
 8005924:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005928:	623b      	str	r3, [r7, #32]
 800592a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800592e:	b29a      	uxth	r2, r3
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005934:	463b      	mov	r3, r7
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	891b      	ldrh	r3, [r3, #8]
 800593a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800593e:	463b      	mov	r3, r7
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6959      	ldr	r1, [r3, #20]
 8005944:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005948:	b29b      	uxth	r3, r3
 800594a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800594e:	1d38      	adds	r0, r7, #4
 8005950:	6800      	ldr	r0, [r0, #0]
 8005952:	f001 f88e 	bl	8006a72 <USB_WritePMA>
 8005956:	e340      	b.n	8005fda <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005958:	463b      	mov	r3, r7
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	785b      	ldrb	r3, [r3, #1]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d164      	bne.n	8005a2c <USB_EPStartXfer+0x4ce>
 8005962:	1d3b      	adds	r3, r7, #4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005970:	b29b      	uxth	r3, r3
 8005972:	461a      	mov	r2, r3
 8005974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005976:	4413      	add	r3, r2
 8005978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800597a:	463b      	mov	r3, r7
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	00da      	lsls	r2, r3, #3
 8005982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005984:	4413      	add	r3, r2
 8005986:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800598a:	64bb      	str	r3, [r7, #72]	; 0x48
 800598c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005990:	2b00      	cmp	r3, #0
 8005992:	d112      	bne.n	80059ba <USB_EPStartXfer+0x45c>
 8005994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800599e:	b29a      	uxth	r2, r3
 80059a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a2:	801a      	strh	r2, [r3, #0]
 80059a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b6:	801a      	strh	r2, [r3, #0]
 80059b8:	e057      	b.n	8005a6a <USB_EPStartXfer+0x50c>
 80059ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059be:	2b3e      	cmp	r3, #62	; 0x3e
 80059c0:	d817      	bhi.n	80059f2 <USB_EPStartXfer+0x494>
 80059c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <USB_EPStartXfer+0x484>
 80059d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059dc:	3301      	adds	r3, #1
 80059de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	029b      	lsls	r3, r3, #10
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e03b      	b.n	8005a6a <USB_EPStartXfer+0x50c>
 80059f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <USB_EPStartXfer+0x4b4>
 8005a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	029b      	lsls	r3, r3, #10
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e01e      	b.n	8005a6a <USB_EPStartXfer+0x50c>
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	785b      	ldrb	r3, [r3, #1]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d119      	bne.n	8005a6a <USB_EPStartXfer+0x50c>
 8005a36:	1d3b      	adds	r3, r7, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a3c:	1d3b      	adds	r3, r7, #4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a4a:	4413      	add	r3, r2
 8005a4c:	657b      	str	r3, [r7, #84]	; 0x54
 8005a4e:	463b      	mov	r3, r7
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00da      	lsls	r2, r3, #3
 8005a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	891b      	ldrh	r3, [r3, #8]
 8005a70:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a74:	463b      	mov	r3, r7
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6959      	ldr	r1, [r3, #20]
 8005a7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005a84:	1d38      	adds	r0, r7, #4
 8005a86:	6800      	ldr	r0, [r0, #0]
 8005a88:	f000 fff3 	bl	8006a72 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a8c:	463b      	mov	r3, r7
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695a      	ldr	r2, [r3, #20]
 8005a92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a96:	441a      	add	r2, r3
 8005a98:	463b      	mov	r3, r7
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a9e:	463b      	mov	r3, r7
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6a1a      	ldr	r2, [r3, #32]
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d90e      	bls.n	8005acc <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005aae:	463b      	mov	r3, r7
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005ab8:	463b      	mov	r3, r7
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6a1a      	ldr	r2, [r3, #32]
 8005abe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ac2:	1ad2      	subs	r2, r2, r3
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	621a      	str	r2, [r3, #32]
 8005aca:	e008      	b.n	8005ade <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005acc:	463b      	mov	r3, r7
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2200      	movs	r2, #0
 8005adc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae4:	463b      	mov	r3, r7
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	785b      	ldrb	r3, [r3, #1]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d164      	bne.n	8005bb8 <USB_EPStartXfer+0x65a>
 8005aee:	1d3b      	adds	r3, r7, #4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af4:	1d3b      	adds	r3, r7, #4
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b02:	4413      	add	r3, r2
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b06:	463b      	mov	r3, r7
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	00da      	lsls	r2, r3, #3
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b10:	4413      	add	r3, r2
 8005b12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d112      	bne.n	8005b46 <USB_EPStartXfer+0x5e8>
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2e:	801a      	strh	r2, [r3, #0]
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	e054      	b.n	8005bf0 <USB_EPStartXfer+0x692>
 8005b46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b4a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b4c:	d817      	bhi.n	8005b7e <USB_EPStartXfer+0x620>
 8005b4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <USB_EPStartXfer+0x610>
 8005b64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b68:	3301      	adds	r3, #1
 8005b6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	029b      	lsls	r3, r3, #10
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	801a      	strh	r2, [r3, #0]
 8005b7c:	e038      	b.n	8005bf0 <USB_EPStartXfer+0x692>
 8005b7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b8c:	f003 031f 	and.w	r3, r3, #31
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d104      	bne.n	8005b9e <USB_EPStartXfer+0x640>
 8005b94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	029b      	lsls	r3, r3, #10
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	e01b      	b.n	8005bf0 <USB_EPStartXfer+0x692>
 8005bb8:	463b      	mov	r3, r7
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	785b      	ldrb	r3, [r3, #1]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d116      	bne.n	8005bf0 <USB_EPStartXfer+0x692>
 8005bc2:	1d3b      	adds	r3, r7, #4
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	461a      	mov	r2, r3
 8005bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bd0:	4413      	add	r3, r2
 8005bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8005bd4:	463b      	mov	r3, r7
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	00da      	lsls	r2, r3, #3
 8005bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bde:	4413      	add	r3, r2
 8005be0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005be4:	643b      	str	r3, [r7, #64]	; 0x40
 8005be6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	895b      	ldrh	r3, [r3, #10]
 8005bf6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bfa:	463b      	mov	r3, r7
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6959      	ldr	r1, [r3, #20]
 8005c00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005c0a:	1d38      	adds	r0, r7, #4
 8005c0c:	6800      	ldr	r0, [r0, #0]
 8005c0e:	f000 ff30 	bl	8006a72 <USB_WritePMA>
 8005c12:	e1e2      	b.n	8005fda <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005c14:	463b      	mov	r3, r7
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005c1e:	1d3b      	adds	r3, r7, #4
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	463b      	mov	r3, r7
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c38:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005c3c:	1d3b      	adds	r3, r7, #4
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	463b      	mov	r3, r7
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	441a      	add	r2, r3
 8005c4a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c62:	1d3b      	adds	r3, r7, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	663b      	str	r3, [r7, #96]	; 0x60
 8005c68:	1d3b      	adds	r3, r7, #4
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c76:	4413      	add	r3, r2
 8005c78:	663b      	str	r3, [r7, #96]	; 0x60
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	00da      	lsls	r2, r3, #3
 8005c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c84:	4413      	add	r3, r2
 8005c86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c96:	463b      	mov	r3, r7
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	891b      	ldrh	r3, [r3, #8]
 8005c9c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6959      	ldr	r1, [r3, #20]
 8005ca6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005cb0:	1d38      	adds	r0, r7, #4
 8005cb2:	6800      	ldr	r0, [r0, #0]
 8005cb4:	f000 fedd 	bl	8006a72 <USB_WritePMA>
 8005cb8:	e18f      	b.n	8005fda <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cba:	1d3b      	adds	r3, r7, #4
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 808f 	beq.w	8005df4 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cd6:	1d3b      	adds	r3, r7, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cdc:	463b      	mov	r3, r7
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d164      	bne.n	8005db0 <USB_EPStartXfer+0x852>
 8005ce6:	1d3b      	adds	r3, r7, #4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	673b      	str	r3, [r7, #112]	; 0x70
 8005cec:	1d3b      	adds	r3, r7, #4
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cfa:	4413      	add	r3, r2
 8005cfc:	673b      	str	r3, [r7, #112]	; 0x70
 8005cfe:	463b      	mov	r3, r7
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	00da      	lsls	r2, r3, #3
 8005d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d08:	4413      	add	r3, r2
 8005d0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d112      	bne.n	8005d3e <USB_EPStartXfer+0x7e0>
 8005d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d26:	801a      	strh	r2, [r3, #0]
 8005d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	e054      	b.n	8005de8 <USB_EPStartXfer+0x88a>
 8005d3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d42:	2b3e      	cmp	r3, #62	; 0x3e
 8005d44:	d817      	bhi.n	8005d76 <USB_EPStartXfer+0x818>
 8005d46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d4a:	085b      	lsrs	r3, r3, #1
 8005d4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d004      	beq.n	8005d66 <USB_EPStartXfer+0x808>
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d60:	3301      	adds	r3, #1
 8005d62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	029b      	lsls	r3, r3, #10
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d72:	801a      	strh	r2, [r3, #0]
 8005d74:	e038      	b.n	8005de8 <USB_EPStartXfer+0x88a>
 8005d76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d84:	f003 031f 	and.w	r3, r3, #31
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d104      	bne.n	8005d96 <USB_EPStartXfer+0x838>
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	3b01      	subs	r3, #1
 8005d92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	029b      	lsls	r3, r3, #10
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	e01b      	b.n	8005de8 <USB_EPStartXfer+0x88a>
 8005db0:	463b      	mov	r3, r7
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	785b      	ldrb	r3, [r3, #1]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d116      	bne.n	8005de8 <USB_EPStartXfer+0x88a>
 8005dba:	1d3b      	adds	r3, r7, #4
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dc8:	4413      	add	r3, r2
 8005dca:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dcc:	463b      	mov	r3, r7
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	00da      	lsls	r2, r3, #3
 8005dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ddc:	677b      	str	r3, [r7, #116]	; 0x74
 8005dde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005de6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005de8:	463b      	mov	r3, r7
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	895b      	ldrh	r3, [r3, #10]
 8005dee:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005df2:	e097      	b.n	8005f24 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005df4:	463b      	mov	r3, r7
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d168      	bne.n	8005ed0 <USB_EPStartXfer+0x972>
 8005dfe:	1d3b      	adds	r3, r7, #4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e06:	1d3b      	adds	r3, r7, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e16:	4413      	add	r3, r2
 8005e18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e1c:	463b      	mov	r3, r7
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	00da      	lsls	r2, r3, #3
 8005e24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e28:	4413      	add	r3, r2
 8005e2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d112      	bne.n	8005e5e <USB_EPStartXfer+0x900>
 8005e38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	e05d      	b.n	8005f1a <USB_EPStartXfer+0x9bc>
 8005e5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e62:	2b3e      	cmp	r3, #62	; 0x3e
 8005e64:	d817      	bhi.n	8005e96 <USB_EPStartXfer+0x938>
 8005e66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <USB_EPStartXfer+0x928>
 8005e7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e80:	3301      	adds	r3, #1
 8005e82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	029b      	lsls	r3, r3, #10
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	e041      	b.n	8005f1a <USB_EPStartXfer+0x9bc>
 8005e96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ea0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ea4:	f003 031f 	and.w	r3, r3, #31
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d104      	bne.n	8005eb6 <USB_EPStartXfer+0x958>
 8005eac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005eb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	029b      	lsls	r3, r3, #10
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	e024      	b.n	8005f1a <USB_EPStartXfer+0x9bc>
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d11f      	bne.n	8005f1a <USB_EPStartXfer+0x9bc>
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ee2:	1d3b      	adds	r3, r7, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ef8:	463b      	mov	r3, r7
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	00da      	lsls	r2, r3, #3
 8005f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f04:	4413      	add	r3, r2
 8005f06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	891b      	ldrh	r3, [r3, #8]
 8005f20:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f24:	463b      	mov	r3, r7
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6959      	ldr	r1, [r3, #20]
 8005f2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005f34:	1d38      	adds	r0, r7, #4
 8005f36:	6800      	ldr	r0, [r0, #0]
 8005f38:	f000 fd9b 	bl	8006a72 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d122      	bne.n	8005f8c <USB_EPStartXfer+0xa2e>
 8005f46:	1d3b      	adds	r3, r7, #4
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	463b      	mov	r3, r7
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f60:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005f64:	1d3b      	adds	r3, r7, #4
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	463b      	mov	r3, r7
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	441a      	add	r2, r3
 8005f72:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	8013      	strh	r3, [r2, #0]
 8005f8a:	e026      	b.n	8005fda <USB_EPStartXfer+0xa7c>
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d121      	bne.n	8005fda <USB_EPStartXfer+0xa7c>
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005fb4:	1d3b      	adds	r3, r7, #4
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	463b      	mov	r3, r7
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f107 020e 	add.w	r2, r7, #14
 8005ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff8:	8013      	strh	r3, [r2, #0]
 8005ffa:	f107 030e 	add.w	r3, r7, #14
 8005ffe:	f107 020e 	add.w	r2, r7, #14
 8006002:	8812      	ldrh	r2, [r2, #0]
 8006004:	f082 0210 	eor.w	r2, r2, #16
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	f107 030e 	add.w	r3, r7, #14
 800600e:	f107 020e 	add.w	r2, r7, #14
 8006012:	8812      	ldrh	r2, [r2, #0]
 8006014:	f082 0220 	eor.w	r2, r2, #32
 8006018:	801a      	strh	r2, [r3, #0]
 800601a:	1d3b      	adds	r3, r7, #4
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	463b      	mov	r3, r7
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	441a      	add	r2, r3
 8006028:	f107 030e 	add.w	r3, r7, #14
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]
 8006042:	e3b5      	b.n	80067b0 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006044:	463b      	mov	r3, r7
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	7b1b      	ldrb	r3, [r3, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f040 8090 	bne.w	8006170 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006050:	463b      	mov	r3, r7
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	463b      	mov	r3, r7
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	429a      	cmp	r2, r3
 800605e:	d90e      	bls.n	800607e <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006060:	463b      	mov	r3, r7
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800606a:	463b      	mov	r3, r7
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	699a      	ldr	r2, [r3, #24]
 8006070:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006074:	1ad2      	subs	r2, r2, r3
 8006076:	463b      	mov	r3, r7
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	619a      	str	r2, [r3, #24]
 800607c:	e008      	b.n	8006090 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800607e:	463b      	mov	r3, r7
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006088:	463b      	mov	r3, r7
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2200      	movs	r2, #0
 800608e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006090:	1d3b      	adds	r3, r7, #4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006098:	1d3b      	adds	r3, r7, #4
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060a8:	4413      	add	r3, r2
 80060aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060ae:	463b      	mov	r3, r7
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	00da      	lsls	r2, r3, #3
 80060b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060ba:	4413      	add	r3, r2
 80060bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d116      	bne.n	80060fa <USB_EPStartXfer+0xb9c>
 80060cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060d8:	b29a      	uxth	r2, r3
 80060da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060de:	801a      	strh	r2, [r3, #0]
 80060e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060f6:	801a      	strh	r2, [r3, #0]
 80060f8:	e32c      	b.n	8006754 <USB_EPStartXfer+0x11f6>
 80060fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006100:	d818      	bhi.n	8006134 <USB_EPStartXfer+0xbd6>
 8006102:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800610c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <USB_EPStartXfer+0xbc4>
 8006118:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800611c:	3301      	adds	r3, #1
 800611e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006122:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006126:	b29b      	uxth	r3, r3
 8006128:	029b      	lsls	r3, r3, #10
 800612a:	b29a      	uxth	r2, r3
 800612c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006130:	801a      	strh	r2, [r3, #0]
 8006132:	e30f      	b.n	8006754 <USB_EPStartXfer+0x11f6>
 8006134:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800613e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	2b00      	cmp	r3, #0
 8006148:	d104      	bne.n	8006154 <USB_EPStartXfer+0xbf6>
 800614a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800614e:	3b01      	subs	r3, #1
 8006150:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006154:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006158:	b29b      	uxth	r3, r3
 800615a:	029b      	lsls	r3, r3, #10
 800615c:	b29b      	uxth	r3, r3
 800615e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006166:	b29a      	uxth	r2, r3
 8006168:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800616c:	801a      	strh	r2, [r3, #0]
 800616e:	e2f1      	b.n	8006754 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006170:	463b      	mov	r3, r7
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	78db      	ldrb	r3, [r3, #3]
 8006176:	2b02      	cmp	r3, #2
 8006178:	f040 818f 	bne.w	800649a <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800617c:	463b      	mov	r3, r7
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d175      	bne.n	8006272 <USB_EPStartXfer+0xd14>
 8006186:	1d3b      	adds	r3, r7, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800618e:	1d3b      	adds	r3, r7, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006196:	b29b      	uxth	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800619e:	4413      	add	r3, r2
 80061a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061a4:	463b      	mov	r3, r7
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	00da      	lsls	r2, r3, #3
 80061ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061b0:	4413      	add	r3, r2
 80061b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061ba:	463b      	mov	r3, r7
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d116      	bne.n	80061f2 <USB_EPStartXfer+0xc94>
 80061c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061ee:	801a      	strh	r2, [r3, #0]
 80061f0:	e065      	b.n	80062be <USB_EPStartXfer+0xd60>
 80061f2:	463b      	mov	r3, r7
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	2b3e      	cmp	r3, #62	; 0x3e
 80061fa:	d81a      	bhi.n	8006232 <USB_EPStartXfer+0xcd4>
 80061fc:	463b      	mov	r3, r7
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006208:	463b      	mov	r3, r7
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d004      	beq.n	8006220 <USB_EPStartXfer+0xcc2>
 8006216:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800621a:	3301      	adds	r3, #1
 800621c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006220:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006224:	b29b      	uxth	r3, r3
 8006226:	029b      	lsls	r3, r3, #10
 8006228:	b29a      	uxth	r2, r3
 800622a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	e045      	b.n	80062be <USB_EPStartXfer+0xd60>
 8006232:	463b      	mov	r3, r7
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800623e:	463b      	mov	r3, r7
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <USB_EPStartXfer+0xcf8>
 800624c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006250:	3b01      	subs	r3, #1
 8006252:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006256:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800625a:	b29b      	uxth	r3, r3
 800625c:	029b      	lsls	r3, r3, #10
 800625e:	b29b      	uxth	r3, r3
 8006260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	e025      	b.n	80062be <USB_EPStartXfer+0xd60>
 8006272:	463b      	mov	r3, r7
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	785b      	ldrb	r3, [r3, #1]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d120      	bne.n	80062be <USB_EPStartXfer+0xd60>
 800627c:	1d3b      	adds	r3, r7, #4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006284:	1d3b      	adds	r3, r7, #4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800628c:	b29b      	uxth	r3, r3
 800628e:	461a      	mov	r2, r3
 8006290:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006294:	4413      	add	r3, r2
 8006296:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800629a:	463b      	mov	r3, r7
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	00da      	lsls	r2, r3, #3
 80062a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062a6:	4413      	add	r3, r2
 80062a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062b0:	463b      	mov	r3, r7
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	1d3b      	adds	r3, r7, #4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062c6:	463b      	mov	r3, r7
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d175      	bne.n	80063bc <USB_EPStartXfer+0xe5e>
 80062d0:	1d3b      	adds	r3, r7, #4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062d8:	1d3b      	adds	r3, r7, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062e8:	4413      	add	r3, r2
 80062ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062ee:	463b      	mov	r3, r7
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	00da      	lsls	r2, r3, #3
 80062f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062fa:	4413      	add	r3, r2
 80062fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006304:	463b      	mov	r3, r7
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d116      	bne.n	800633c <USB_EPStartXfer+0xdde>
 800630e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800631a:	b29a      	uxth	r2, r3
 800631c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29b      	uxth	r3, r3
 800632a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006332:	b29a      	uxth	r2, r3
 8006334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006338:	801a      	strh	r2, [r3, #0]
 800633a:	e061      	b.n	8006400 <USB_EPStartXfer+0xea2>
 800633c:	463b      	mov	r3, r7
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b3e      	cmp	r3, #62	; 0x3e
 8006344:	d81a      	bhi.n	800637c <USB_EPStartXfer+0xe1e>
 8006346:	463b      	mov	r3, r7
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	085b      	lsrs	r3, r3, #1
 800634e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006352:	463b      	mov	r3, r7
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <USB_EPStartXfer+0xe0c>
 8006360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006364:	3301      	adds	r3, #1
 8006366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800636a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636e:	b29b      	uxth	r3, r3
 8006370:	029b      	lsls	r3, r3, #10
 8006372:	b29a      	uxth	r2, r3
 8006374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006378:	801a      	strh	r2, [r3, #0]
 800637a:	e041      	b.n	8006400 <USB_EPStartXfer+0xea2>
 800637c:	463b      	mov	r3, r7
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	095b      	lsrs	r3, r3, #5
 8006384:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006388:	463b      	mov	r3, r7
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <USB_EPStartXfer+0xe42>
 8006396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639a:	3b01      	subs	r3, #1
 800639c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	029b      	lsls	r3, r3, #10
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	e021      	b.n	8006400 <USB_EPStartXfer+0xea2>
 80063bc:	463b      	mov	r3, r7
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	785b      	ldrb	r3, [r3, #1]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d11c      	bne.n	8006400 <USB_EPStartXfer+0xea2>
 80063c6:	1d3b      	adds	r3, r7, #4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063d6:	4413      	add	r3, r2
 80063d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063dc:	463b      	mov	r3, r7
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	00da      	lsls	r2, r3, #3
 80063e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063e8:	4413      	add	r3, r2
 80063ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063f2:	463b      	mov	r3, r7
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063fe:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8006400:	463b      	mov	r3, r7
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 81a4 	beq.w	8006754 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800640c:	1d3b      	adds	r3, r7, #4
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	463b      	mov	r3, r7
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006420:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d005      	beq.n	8006438 <USB_EPStartXfer+0xeda>
 800642c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10d      	bne.n	8006454 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006438:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800643c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006440:	2b00      	cmp	r3, #0
 8006442:	f040 8187 	bne.w	8006754 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006446:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800644a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	f040 8180 	bne.w	8006754 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006454:	1d3b      	adds	r3, r7, #4
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	463b      	mov	r3, r7
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006472:	1d3b      	adds	r3, r7, #4
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	463b      	mov	r3, r7
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	441a      	add	r2, r3
 8006480:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800648c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006490:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006494:	b29b      	uxth	r3, r3
 8006496:	8013      	strh	r3, [r2, #0]
 8006498:	e15c      	b.n	8006754 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800649a:	463b      	mov	r3, r7
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	78db      	ldrb	r3, [r3, #3]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	f040 8155 	bne.w	8006750 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80064a6:	463b      	mov	r3, r7
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699a      	ldr	r2, [r3, #24]
 80064ac:	463b      	mov	r3, r7
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d90e      	bls.n	80064d4 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80064b6:	463b      	mov	r3, r7
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80064c0:	463b      	mov	r3, r7
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ca:	1ad2      	subs	r2, r2, r3
 80064cc:	463b      	mov	r3, r7
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	619a      	str	r2, [r3, #24]
 80064d2:	e008      	b.n	80064e6 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80064d4:	463b      	mov	r3, r7
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80064de:	463b      	mov	r3, r7
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2200      	movs	r2, #0
 80064e4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064e6:	463b      	mov	r3, r7
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	785b      	ldrb	r3, [r3, #1]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d16f      	bne.n	80065d0 <USB_EPStartXfer+0x1072>
 80064f0:	1d3b      	adds	r3, r7, #4
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064f8:	1d3b      	adds	r3, r7, #4
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006500:	b29b      	uxth	r3, r3
 8006502:	461a      	mov	r2, r3
 8006504:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006508:	4413      	add	r3, r2
 800650a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800650e:	463b      	mov	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	00da      	lsls	r2, r3, #3
 8006516:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800651a:	4413      	add	r3, r2
 800651c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006520:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006524:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006528:	2b00      	cmp	r3, #0
 800652a:	d116      	bne.n	800655a <USB_EPStartXfer+0xffc>
 800652c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006538:	b29a      	uxth	r2, r3
 800653a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006550:	b29a      	uxth	r2, r3
 8006552:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	e05f      	b.n	800661a <USB_EPStartXfer+0x10bc>
 800655a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800655e:	2b3e      	cmp	r3, #62	; 0x3e
 8006560:	d818      	bhi.n	8006594 <USB_EPStartXfer+0x1036>
 8006562:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006566:	085b      	lsrs	r3, r3, #1
 8006568:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800656c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <USB_EPStartXfer+0x1024>
 8006578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800657c:	3301      	adds	r3, #1
 800657e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006586:	b29b      	uxth	r3, r3
 8006588:	029b      	lsls	r3, r3, #10
 800658a:	b29a      	uxth	r2, r3
 800658c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006590:	801a      	strh	r2, [r3, #0]
 8006592:	e042      	b.n	800661a <USB_EPStartXfer+0x10bc>
 8006594:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800659e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <USB_EPStartXfer+0x1056>
 80065aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ae:	3b01      	subs	r3, #1
 80065b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	029b      	lsls	r3, r3, #10
 80065bc:	b29b      	uxth	r3, r3
 80065be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	e024      	b.n	800661a <USB_EPStartXfer+0x10bc>
 80065d0:	463b      	mov	r3, r7
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d11f      	bne.n	800661a <USB_EPStartXfer+0x10bc>
 80065da:	1d3b      	adds	r3, r7, #4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065f2:	4413      	add	r3, r2
 80065f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065f8:	463b      	mov	r3, r7
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	00da      	lsls	r2, r3, #3
 8006600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006604:	4413      	add	r3, r2
 8006606:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800660a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800660e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006612:	b29a      	uxth	r2, r3
 8006614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006618:	801a      	strh	r2, [r3, #0]
 800661a:	1d3b      	adds	r3, r7, #4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006622:	463b      	mov	r3, r7
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d16f      	bne.n	800670c <USB_EPStartXfer+0x11ae>
 800662c:	1d3b      	adds	r3, r7, #4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006634:	1d3b      	adds	r3, r7, #4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663c:	b29b      	uxth	r3, r3
 800663e:	461a      	mov	r2, r3
 8006640:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006644:	4413      	add	r3, r2
 8006646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800664a:	463b      	mov	r3, r7
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	00da      	lsls	r2, r3, #3
 8006652:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006656:	4413      	add	r3, r2
 8006658:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800665c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006660:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006664:	2b00      	cmp	r3, #0
 8006666:	d116      	bne.n	8006696 <USB_EPStartXfer+0x1138>
 8006668:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006674:	b29a      	uxth	r2, r3
 8006676:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800667a:	801a      	strh	r2, [r3, #0]
 800667c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29b      	uxth	r3, r3
 8006684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668c:	b29a      	uxth	r2, r3
 800668e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006692:	801a      	strh	r2, [r3, #0]
 8006694:	e05e      	b.n	8006754 <USB_EPStartXfer+0x11f6>
 8006696:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800669a:	2b3e      	cmp	r3, #62	; 0x3e
 800669c:	d818      	bhi.n	80066d0 <USB_EPStartXfer+0x1172>
 800669e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066a2:	085b      	lsrs	r3, r3, #1
 80066a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <USB_EPStartXfer+0x1160>
 80066b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b8:	3301      	adds	r3, #1
 80066ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	029b      	lsls	r3, r3, #10
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066cc:	801a      	strh	r2, [r3, #0]
 80066ce:	e041      	b.n	8006754 <USB_EPStartXfer+0x11f6>
 80066d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <USB_EPStartXfer+0x1192>
 80066e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ea:	3b01      	subs	r3, #1
 80066ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	029b      	lsls	r3, r3, #10
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006702:	b29a      	uxth	r2, r3
 8006704:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006708:	801a      	strh	r2, [r3, #0]
 800670a:	e023      	b.n	8006754 <USB_EPStartXfer+0x11f6>
 800670c:	463b      	mov	r3, r7
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d11e      	bne.n	8006754 <USB_EPStartXfer+0x11f6>
 8006716:	1d3b      	adds	r3, r7, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006726:	4413      	add	r3, r2
 8006728:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800672c:	463b      	mov	r3, r7
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	00da      	lsls	r2, r3, #3
 8006734:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006738:	4413      	add	r3, r2
 800673a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800673e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006742:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006746:	b29a      	uxth	r2, r3
 8006748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800674c:	801a      	strh	r2, [r3, #0]
 800674e:	e001      	b.n	8006754 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e02e      	b.n	80067b2 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006754:	1d3b      	adds	r3, r7, #4
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	463b      	mov	r3, r7
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800676a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006772:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006776:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800677a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800677e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006782:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006786:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800678a:	1d3b      	adds	r3, r7, #4
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	463b      	mov	r3, r7
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	441a      	add	r2, r3
 8006798:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800679c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	785b      	ldrb	r3, [r3, #1]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d020      	beq.n	8006810 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e4:	81bb      	strh	r3, [r7, #12]
 80067e6:	89bb      	ldrh	r3, [r7, #12]
 80067e8:	f083 0310 	eor.w	r3, r3, #16
 80067ec:	81bb      	strh	r3, [r7, #12]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	441a      	add	r2, r3
 80067f8:	89bb      	ldrh	r3, [r7, #12]
 80067fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680a:	b29b      	uxth	r3, r3
 800680c:	8013      	strh	r3, [r2, #0]
 800680e:	e01f      	b.n	8006850 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	81fb      	strh	r3, [r7, #14]
 8006828:	89fb      	ldrh	r3, [r7, #14]
 800682a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800682e:	81fb      	strh	r3, [r7, #14]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	89fb      	ldrh	r3, [r7, #14]
 800683c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684c:	b29b      	uxth	r3, r3
 800684e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800685e:	b480      	push	{r7}
 8006860:	b087      	sub	sp, #28
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	7b1b      	ldrb	r3, [r3, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	f040 809d 	bne.w	80069ac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	785b      	ldrb	r3, [r3, #1]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d04c      	beq.n	8006914 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	823b      	strh	r3, [r7, #16]
 8006888:	8a3b      	ldrh	r3, [r7, #16]
 800688a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	d01b      	beq.n	80068ca <USB_EPClearStall+0x6c>
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a8:	81fb      	strh	r3, [r7, #14]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	441a      	add	r2, r3
 80068b4:	89fb      	ldrh	r3, [r7, #14]
 80068b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	78db      	ldrb	r3, [r3, #3]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d06c      	beq.n	80069ac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e8:	81bb      	strh	r3, [r7, #12]
 80068ea:	89bb      	ldrh	r3, [r7, #12]
 80068ec:	f083 0320 	eor.w	r3, r3, #32
 80068f0:	81bb      	strh	r3, [r7, #12]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	441a      	add	r2, r3
 80068fc:	89bb      	ldrh	r3, [r7, #12]
 80068fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800690a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690e:	b29b      	uxth	r3, r3
 8006910:	8013      	strh	r3, [r2, #0]
 8006912:	e04b      	b.n	80069ac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	82fb      	strh	r3, [r7, #22]
 8006922:	8afb      	ldrh	r3, [r7, #22]
 8006924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01b      	beq.n	8006964 <USB_EPClearStall+0x106>
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	82bb      	strh	r3, [r7, #20]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	441a      	add	r2, r3
 800694e:	8abb      	ldrh	r3, [r7, #20]
 8006950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800695c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006960:	b29b      	uxth	r3, r3
 8006962:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	b29b      	uxth	r3, r3
 8006972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697a:	827b      	strh	r3, [r7, #18]
 800697c:	8a7b      	ldrh	r3, [r7, #18]
 800697e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006982:	827b      	strh	r3, [r7, #18]
 8006984:	8a7b      	ldrh	r3, [r7, #18]
 8006986:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800698a:	827b      	strh	r3, [r7, #18]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	441a      	add	r2, r3
 8006996:	8a7b      	ldrh	r3, [r7, #18]
 8006998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	460b      	mov	r3, r1
 80069c4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d103      	bne.n	80069d4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2280      	movs	r2, #128	; 0x80
 80069d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b08d      	sub	sp, #52	; 0x34
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	461a      	mov	r2, r3
 8006a80:	460b      	mov	r3, r1
 8006a82:	80fb      	strh	r3, [r7, #6]
 8006a84:	4613      	mov	r3, r2
 8006a86:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a88:	88bb      	ldrh	r3, [r7, #4]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	085b      	lsrs	r3, r3, #1
 8006a8e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a98:	88fa      	ldrh	r2, [r7, #6]
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aa8:	e01b      	b.n	8006ae2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	3302      	adds	r3, #2
 8006ad4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	3301      	adds	r3, #1
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e0      	bne.n	8006aaa <USB_WritePMA+0x38>
  }
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
 8006aec:	3734      	adds	r7, #52	; 0x34
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b08b      	sub	sp, #44	; 0x2c
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	4611      	mov	r1, r2
 8006b02:	461a      	mov	r2, r3
 8006b04:	460b      	mov	r3, r1
 8006b06:	80fb      	strh	r3, [r7, #6]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b0c:	88bb      	ldrh	r3, [r7, #4]
 8006b0e:	085b      	lsrs	r3, r3, #1
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b1c:	88fa      	ldrh	r2, [r7, #6]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b26:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2c:	e018      	b.n	8006b60 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	3302      	adds	r3, #2
 8006b3a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	0a1b      	lsrs	r3, r3, #8
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3301      	adds	r3, #1
 8006b58:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e3      	bne.n	8006b2e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006b66:	88bb      	ldrh	r3, [r7, #4]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d007      	beq.n	8006b82 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	701a      	strb	r2, [r3, #0]
  }
}
 8006b82:	bf00      	nop
 8006b84:	372c      	adds	r7, #44	; 0x2c
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b9a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b9e:	f002 f9bf 	bl	8008f20 <malloc>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d105      	bne.n	8006bb8 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e066      	b.n	8006c86 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	7c1b      	ldrb	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d119      	bne.n	8006bfc <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bcc:	2202      	movs	r2, #2
 8006bce:	2181      	movs	r1, #129	; 0x81
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 ff77 	bl	8008ac4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006be0:	2202      	movs	r2, #2
 8006be2:	2101      	movs	r1, #1
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 ff6d 	bl	8008ac4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2210      	movs	r2, #16
 8006bf6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006bfa:	e016      	b.n	8006c2a <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bfc:	2340      	movs	r3, #64	; 0x40
 8006bfe:	2202      	movs	r2, #2
 8006c00:	2181      	movs	r1, #129	; 0x81
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 ff5e 	bl	8008ac4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c0e:	2340      	movs	r3, #64	; 0x40
 8006c10:	2202      	movs	r2, #2
 8006c12:	2101      	movs	r1, #1
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 ff55 	bl	8008ac4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2210      	movs	r2, #16
 8006c26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	2182      	movs	r1, #130	; 0x82
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 ff47 	bl	8008ac4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	7c1b      	ldrb	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d109      	bne.n	8006c74 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f002 f8a5 	bl	8008dbc <USBD_LL_PrepareReceive>
 8006c72:	e007      	b.n	8006c84 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c7a:	2340      	movs	r3, #64	; 0x40
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f002 f89c 	bl	8008dbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	460b      	mov	r3, r1
 8006c98:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c9a:	2181      	movs	r1, #129	; 0x81
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 ff4f 	bl	8008b40 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ca8:	2101      	movs	r1, #1
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 ff48 	bl	8008b40 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cb8:	2182      	movs	r1, #130	; 0x82
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 ff40 	bl	8008b40 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00e      	beq.n	8006cf8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cea:	4618      	mov	r0, r3
 8006cec:	f002 f920 	bl	8008f30 <free>
    pdev->pClassData = NULL;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d14:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d03a      	beq.n	8006da4 <USBD_CDC_Setup+0xa0>
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	f040 8097 	bne.w	8006e62 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	88db      	ldrh	r3, [r3, #6]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d029      	beq.n	8006d90 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	b25b      	sxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	da11      	bge.n	8006d6a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006d52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	88d2      	ldrh	r2, [r2, #6]
 8006d58:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006d5a:	6939      	ldr	r1, [r7, #16]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	88db      	ldrh	r3, [r3, #6]
 8006d60:	461a      	mov	r2, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 fa9c 	bl	80082a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006d68:	e082      	b.n	8006e70 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	785a      	ldrb	r2, [r3, #1]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	88db      	ldrh	r3, [r3, #6]
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006d80:	6939      	ldr	r1, [r7, #16]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	88db      	ldrh	r3, [r3, #6]
 8006d86:	461a      	mov	r2, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 fab5 	bl	80082f8 <USBD_CtlPrepareRx>
      break;
 8006d8e:	e06f      	b.n	8006e70 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	7850      	ldrb	r0, [r2, #1]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	4798      	blx	r3
      break;
 8006da2:	e065      	b.n	8006e70 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	785b      	ldrb	r3, [r3, #1]
 8006da8:	2b0b      	cmp	r3, #11
 8006daa:	d84f      	bhi.n	8006e4c <USBD_CDC_Setup+0x148>
 8006dac:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <USBD_CDC_Setup+0xb0>)
 8006dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db2:	bf00      	nop
 8006db4:	08006de5 	.word	0x08006de5
 8006db8:	08006e5b 	.word	0x08006e5b
 8006dbc:	08006e4d 	.word	0x08006e4d
 8006dc0:	08006e4d 	.word	0x08006e4d
 8006dc4:	08006e4d 	.word	0x08006e4d
 8006dc8:	08006e4d 	.word	0x08006e4d
 8006dcc:	08006e4d 	.word	0x08006e4d
 8006dd0:	08006e4d 	.word	0x08006e4d
 8006dd4:	08006e4d 	.word	0x08006e4d
 8006dd8:	08006e4d 	.word	0x08006e4d
 8006ddc:	08006e0d 	.word	0x08006e0d
 8006de0:	08006e35 	.word	0x08006e35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d107      	bne.n	8006dfe <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006dee:	f107 030c 	add.w	r3, r7, #12
 8006df2:	2202      	movs	r2, #2
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 fa52 	bl	80082a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dfc:	e030      	b.n	8006e60 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 f9dc 	bl	80081be <USBD_CtlError>
            ret = USBD_FAIL;
 8006e06:	2303      	movs	r3, #3
 8006e08:	75fb      	strb	r3, [r7, #23]
          break;
 8006e0a:	e029      	b.n	8006e60 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d107      	bne.n	8006e26 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e16:	f107 030f 	add.w	r3, r7, #15
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 fa3e 	bl	80082a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e24:	e01c      	b.n	8006e60 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f001 f9c8 	bl	80081be <USBD_CtlError>
            ret = USBD_FAIL;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	75fb      	strb	r3, [r7, #23]
          break;
 8006e32:	e015      	b.n	8006e60 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d00f      	beq.n	8006e5e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 f9bc 	bl	80081be <USBD_CtlError>
            ret = USBD_FAIL;
 8006e46:	2303      	movs	r3, #3
 8006e48:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e4a:	e008      	b.n	8006e5e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 f9b5 	bl	80081be <USBD_CtlError>
          ret = USBD_FAIL;
 8006e54:	2303      	movs	r3, #3
 8006e56:	75fb      	strb	r3, [r7, #23]
          break;
 8006e58:	e002      	b.n	8006e60 <USBD_CDC_Setup+0x15c>
          break;
 8006e5a:	bf00      	nop
 8006e5c:	e008      	b.n	8006e70 <USBD_CDC_Setup+0x16c>
          break;
 8006e5e:	bf00      	nop
      }
      break;
 8006e60:	e006      	b.n	8006e70 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 f9aa 	bl	80081be <USBD_CtlError>
      ret = USBD_FAIL;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e6e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop

08006e7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e04f      	b.n	8006f3e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ea4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ea6:	78fa      	ldrb	r2, [r7, #3]
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	440b      	add	r3, r1
 8006eb4:	3318      	adds	r3, #24
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d029      	beq.n	8006f10 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ebc:	78fa      	ldrb	r2, [r7, #3]
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	3318      	adds	r3, #24
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	78f9      	ldrb	r1, [r7, #3]
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	4403      	add	r3, r0
 8006edc:	3338      	adds	r3, #56	; 0x38
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ee4:	fb03 f301 	mul.w	r3, r3, r1
 8006ee8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d110      	bne.n	8006f10 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006eee:	78fa      	ldrb	r2, [r7, #3]
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	440b      	add	r3, r1
 8006efc:	3318      	adds	r3, #24
 8006efe:	2200      	movs	r2, #0
 8006f00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f02:	78f9      	ldrb	r1, [r7, #3]
 8006f04:	2300      	movs	r3, #0
 8006f06:	2200      	movs	r2, #0
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f001 ff1f 	bl	8008d4c <USBD_LL_Transmit>
 8006f0e:	e015      	b.n	8006f3c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f38:	78fa      	ldrb	r2, [r7, #3]
 8006f3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e015      	b.n	8006f94 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 ff5d 	bl	8008e2c <USBD_LL_GetRxDataSize>
 8006f72:	4602      	mov	r2, r0
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006faa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d015      	beq.n	8006fe2 <USBD_CDC_EP0_RxReady+0x46>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fbc:	2bff      	cmp	r3, #255	; 0xff
 8006fbe:	d010      	beq.n	8006fe2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006fce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fd6:	b292      	uxth	r2, r2
 8006fd8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	22ff      	movs	r2, #255	; 0xff
 8006fde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2243      	movs	r2, #67	; 0x43
 8006ff8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006ffa:	4b03      	ldr	r3, [pc, #12]	; (8007008 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	200000ac 	.word	0x200000ac

0800700c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2243      	movs	r2, #67	; 0x43
 8007018:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800701a:	4b03      	ldr	r3, [pc, #12]	; (8007028 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800701c:	4618      	mov	r0, r3
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	20000068 	.word	0x20000068

0800702c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2243      	movs	r2, #67	; 0x43
 8007038:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800703a:	4b03      	ldr	r3, [pc, #12]	; (8007048 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	200000f0 	.word	0x200000f0

0800704c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	220a      	movs	r2, #10
 8007058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800705a:	4b03      	ldr	r3, [pc, #12]	; (8007068 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	20000024 	.word	0x20000024

0800706c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800707c:	2303      	movs	r3, #3
 800707e:	e004      	b.n	800708a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007096:	b480      	push	{r7}
 8007098:	b087      	sub	sp, #28
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070a8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	371c      	adds	r7, #28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070d8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007100:	2301      	movs	r3, #1
 8007102:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800710e:	2303      	movs	r3, #3
 8007110:	e01a      	b.n	8007148 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007118:	2b00      	cmp	r3, #0
 800711a:	d114      	bne.n	8007146 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2201      	movs	r2, #1
 8007120:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800713a:	2181      	movs	r1, #129	; 0x81
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fe05 	bl	8008d4c <USBD_LL_Transmit>

    ret = USBD_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007146:	7bfb      	ldrb	r3, [r7, #15]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800715e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800716a:	2303      	movs	r3, #3
 800716c:	e016      	b.n	800719c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	7c1b      	ldrb	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d109      	bne.n	800718a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800717c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007180:	2101      	movs	r1, #1
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f001 fe1a 	bl	8008dbc <USBD_LL_PrepareReceive>
 8007188:	e007      	b.n	800719a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007190:	2340      	movs	r3, #64	; 0x40
 8007192:	2101      	movs	r1, #1
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 fe11 	bl	8008dbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	4613      	mov	r3, r2
 80071b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e01f      	b.n	80071fc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	79fa      	ldrb	r2, [r7, #7]
 80071ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f001 fbd3 	bl	800899c <USBD_LL_Init>
 80071f6:	4603      	mov	r3, r0
 80071f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007218:	2303      	movs	r3, #3
 800721a:	e016      	b.n	800724a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	f107 020e 	add.w	r2, r7, #14
 800723c:	4610      	mov	r0, r2
 800723e:	4798      	blx	r3
 8007240:	4602      	mov	r2, r0
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 fc00 	bl	8008a60 <USBD_LL_Start>
 8007260:	4603      	mov	r3, r0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800728c:	2303      	movs	r3, #3
 800728e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	78fa      	ldrb	r2, [r7, #3]
 80072a4:	4611      	mov	r1, r2
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	78fa      	ldrb	r2, [r7, #3]
 80072d8:	4611      	mov	r1, r2
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
  }

  return USBD_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 ff25 	bl	800814a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800730e:	461a      	mov	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2b02      	cmp	r3, #2
 8007322:	d01a      	beq.n	800735a <USBD_LL_SetupStage+0x72>
 8007324:	2b02      	cmp	r3, #2
 8007326:	d822      	bhi.n	800736e <USBD_LL_SetupStage+0x86>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <USBD_LL_SetupStage+0x4a>
 800732c:	2b01      	cmp	r3, #1
 800732e:	d00a      	beq.n	8007346 <USBD_LL_SetupStage+0x5e>
 8007330:	e01d      	b.n	800736e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f9d6 	bl	80076ec <USBD_StdDevReq>
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]
      break;
 8007344:	e020      	b.n	8007388 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa3a 	bl	80077c8 <USBD_StdItfReq>
 8007354:	4603      	mov	r3, r0
 8007356:	73fb      	strb	r3, [r7, #15]
      break;
 8007358:	e016      	b.n	8007388 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa78 	bl	8007858 <USBD_StdEPReq>
 8007368:	4603      	mov	r3, r0
 800736a:	73fb      	strb	r3, [r7, #15]
      break;
 800736c:	e00c      	b.n	8007388 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007374:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007378:	b2db      	uxtb	r3, r3
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 fc15 	bl	8008bac <USBD_LL_StallEP>
 8007382:	4603      	mov	r3, r0
 8007384:	73fb      	strb	r3, [r7, #15]
      break;
 8007386:	bf00      	nop
  }

  return ret;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b086      	sub	sp, #24
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	460b      	mov	r3, r1
 800739c:	607a      	str	r2, [r7, #4]
 800739e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80073a0:	7afb      	ldrb	r3, [r7, #11]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d137      	bne.n	8007416 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d14a      	bne.n	800744e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d913      	bls.n	80073ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	1ad2      	subs	r2, r2, r3
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	4293      	cmp	r3, r2
 80073dc:	bf28      	it	cs
 80073de:	4613      	movcs	r3, r2
 80073e0:	461a      	mov	r2, r3
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 ffa4 	bl	8008332 <USBD_CtlContinueRx>
 80073ea:	e030      	b.n	800744e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d105      	bne.n	800740e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 ffa0 	bl	8008354 <USBD_CtlSendStatus>
 8007414:	e01b      	b.n	800744e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d013      	beq.n	800744a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007428:	2b03      	cmp	r3, #3
 800742a:	d10e      	bne.n	800744a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	7afa      	ldrb	r2, [r7, #11]
 8007436:	4611      	mov	r1, r2
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	4798      	blx	r3
 800743c:	4603      	mov	r3, r0
 800743e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	e002      	b.n	8007450 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800744a:	2303      	movs	r3, #3
 800744c:	e000      	b.n	8007450 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	460b      	mov	r3, r1
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007466:	7afb      	ldrb	r3, [r7, #11]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d16a      	bne.n	8007542 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	3314      	adds	r3, #20
 8007470:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007478:	2b02      	cmp	r3, #2
 800747a:	d155      	bne.n	8007528 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	429a      	cmp	r2, r3
 8007486:	d914      	bls.n	80074b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	1ad2      	subs	r2, r2, r3
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	461a      	mov	r2, r3
 800749c:	6879      	ldr	r1, [r7, #4]
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 ff19 	bl	80082d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074a4:	2300      	movs	r3, #0
 80074a6:	2200      	movs	r2, #0
 80074a8:	2100      	movs	r1, #0
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f001 fc86 	bl	8008dbc <USBD_LL_PrepareReceive>
 80074b0:	e03a      	b.n	8007528 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d11c      	bne.n	80074f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d316      	bcc.n	80074f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d20f      	bcs.n	80074f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074d8:	2200      	movs	r2, #0
 80074da:	2100      	movs	r1, #0
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 fefa 	bl	80082d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074ea:	2300      	movs	r3, #0
 80074ec:	2200      	movs	r2, #0
 80074ee:	2100      	movs	r1, #0
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f001 fc63 	bl	8008dbc <USBD_LL_PrepareReceive>
 80074f6:	e017      	b.n	8007528 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00a      	beq.n	800751a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800750a:	2b03      	cmp	r3, #3
 800750c:	d105      	bne.n	800751a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800751a:	2180      	movs	r1, #128	; 0x80
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f001 fb45 	bl	8008bac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 ff29 	bl	800837a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800752e:	2b01      	cmp	r3, #1
 8007530:	d123      	bne.n	800757a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff fe99 	bl	800726a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007540:	e01b      	b.n	800757a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d013      	beq.n	8007576 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007554:	2b03      	cmp	r3, #3
 8007556:	d10e      	bne.n	8007576 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	7afa      	ldrb	r2, [r7, #11]
 8007562:	4611      	mov	r1, r2
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	4798      	blx	r3
 8007568:	4603      	mov	r3, r0
 800756a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800756c:	7dfb      	ldrb	r3, [r7, #23]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	e002      	b.n	800757c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007576:	2303      	movs	r3, #3
 8007578:	e000      	b.n	800757c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d009      	beq.n	80075c8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6852      	ldr	r2, [r2, #4]
 80075c0:	b2d2      	uxtb	r2, r2
 80075c2:	4611      	mov	r1, r2
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075c8:	2340      	movs	r3, #64	; 0x40
 80075ca:	2200      	movs	r2, #0
 80075cc:	2100      	movs	r1, #0
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 fa78 	bl	8008ac4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2240      	movs	r2, #64	; 0x40
 80075e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075e4:	2340      	movs	r3, #64	; 0x40
 80075e6:	2200      	movs	r2, #0
 80075e8:	2180      	movs	r1, #128	; 0x80
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 fa6a 	bl	8008ac4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2240      	movs	r2, #64	; 0x40
 80075fa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	78fa      	ldrb	r2, [r7, #3]
 8007616:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2204      	movs	r2, #4
 800763e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765e:	2b04      	cmp	r3, #4
 8007660:	d105      	bne.n	800766e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768a:	2b03      	cmp	r3, #3
 800768c:	d10b      	bne.n	80076a6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d005      	beq.n	80076a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	3301      	adds	r3, #1
 80076c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076ce:	8a3b      	ldrh	r3, [r7, #16]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	b21a      	sxth	r2, r3
 80076d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076d8:	4313      	orrs	r3, r2
 80076da:	b21b      	sxth	r3, r3
 80076dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076de:	89fb      	ldrh	r3, [r7, #14]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007702:	2b40      	cmp	r3, #64	; 0x40
 8007704:	d005      	beq.n	8007712 <USBD_StdDevReq+0x26>
 8007706:	2b40      	cmp	r3, #64	; 0x40
 8007708:	d853      	bhi.n	80077b2 <USBD_StdDevReq+0xc6>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00b      	beq.n	8007726 <USBD_StdDevReq+0x3a>
 800770e:	2b20      	cmp	r3, #32
 8007710:	d14f      	bne.n	80077b2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	4798      	blx	r3
 8007720:	4603      	mov	r3, r0
 8007722:	73fb      	strb	r3, [r7, #15]
    break;
 8007724:	e04a      	b.n	80077bc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	785b      	ldrb	r3, [r3, #1]
 800772a:	2b09      	cmp	r3, #9
 800772c:	d83b      	bhi.n	80077a6 <USBD_StdDevReq+0xba>
 800772e:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <USBD_StdDevReq+0x48>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	08007789 	.word	0x08007789
 8007738:	0800779d 	.word	0x0800779d
 800773c:	080077a7 	.word	0x080077a7
 8007740:	08007793 	.word	0x08007793
 8007744:	080077a7 	.word	0x080077a7
 8007748:	08007767 	.word	0x08007767
 800774c:	0800775d 	.word	0x0800775d
 8007750:	080077a7 	.word	0x080077a7
 8007754:	0800777f 	.word	0x0800777f
 8007758:	08007771 	.word	0x08007771
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f9da 	bl	8007b18 <USBD_GetDescriptor>
      break;
 8007764:	e024      	b.n	80077b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fb69 	bl	8007e40 <USBD_SetAddress>
      break;
 800776e:	e01f      	b.n	80077b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fba8 	bl	8007ec8 <USBD_SetConfig>
 8007778:	4603      	mov	r3, r0
 800777a:	73fb      	strb	r3, [r7, #15]
      break;
 800777c:	e018      	b.n	80077b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fc45 	bl	8008010 <USBD_GetConfig>
      break;
 8007786:	e013      	b.n	80077b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fc75 	bl	800807a <USBD_GetStatus>
      break;
 8007790:	e00e      	b.n	80077b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fca3 	bl	80080e0 <USBD_SetFeature>
      break;
 800779a:	e009      	b.n	80077b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fcb2 	bl	8008108 <USBD_ClrFeature>
      break;
 80077a4:	e004      	b.n	80077b0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fd08 	bl	80081be <USBD_CtlError>
      break;
 80077ae:	bf00      	nop
    }
    break;
 80077b0:	e004      	b.n	80077bc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fd02 	bl	80081be <USBD_CtlError>
    break;
 80077ba:	bf00      	nop
  }

  return ret;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop

080077c8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077de:	2b40      	cmp	r3, #64	; 0x40
 80077e0:	d005      	beq.n	80077ee <USBD_StdItfReq+0x26>
 80077e2:	2b40      	cmp	r3, #64	; 0x40
 80077e4:	d82e      	bhi.n	8007844 <USBD_StdItfReq+0x7c>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <USBD_StdItfReq+0x26>
 80077ea:	2b20      	cmp	r3, #32
 80077ec:	d12a      	bne.n	8007844 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f4:	3b01      	subs	r3, #1
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d81d      	bhi.n	8007836 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	889b      	ldrh	r3, [r3, #4]
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b01      	cmp	r3, #1
 8007802:	d813      	bhi.n	800782c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	4798      	blx	r3
 8007812:	4603      	mov	r3, r0
 8007814:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	88db      	ldrh	r3, [r3, #6]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d110      	bne.n	8007840 <USBD_StdItfReq+0x78>
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10d      	bne.n	8007840 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fd95 	bl	8008354 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800782a:	e009      	b.n	8007840 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fcc5 	bl	80081be <USBD_CtlError>
      break;
 8007834:	e004      	b.n	8007840 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fcc0 	bl	80081be <USBD_CtlError>
      break;
 800783e:	e000      	b.n	8007842 <USBD_StdItfReq+0x7a>
      break;
 8007840:	bf00      	nop
    }
    break;
 8007842:	e004      	b.n	800784e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fcb9 	bl	80081be <USBD_CtlError>
    break;
 800784c:	bf00      	nop
  }

  return ret;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	889b      	ldrh	r3, [r3, #4]
 800786a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007874:	2b40      	cmp	r3, #64	; 0x40
 8007876:	d007      	beq.n	8007888 <USBD_StdEPReq+0x30>
 8007878:	2b40      	cmp	r3, #64	; 0x40
 800787a:	f200 8142 	bhi.w	8007b02 <USBD_StdEPReq+0x2aa>
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00c      	beq.n	800789c <USBD_StdEPReq+0x44>
 8007882:	2b20      	cmp	r3, #32
 8007884:	f040 813d 	bne.w	8007b02 <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	4798      	blx	r3
 8007896:	4603      	mov	r3, r0
 8007898:	73fb      	strb	r3, [r7, #15]
    break;
 800789a:	e137      	b.n	8007b0c <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	785b      	ldrb	r3, [r3, #1]
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d007      	beq.n	80078b4 <USBD_StdEPReq+0x5c>
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	f300 8126 	bgt.w	8007af6 <USBD_StdEPReq+0x29e>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d07d      	beq.n	80079aa <USBD_StdEPReq+0x152>
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d03b      	beq.n	800792a <USBD_StdEPReq+0xd2>
 80078b2:	e120      	b.n	8007af6 <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d002      	beq.n	80078c4 <USBD_StdEPReq+0x6c>
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d016      	beq.n	80078f0 <USBD_StdEPReq+0x98>
 80078c2:	e02c      	b.n	800791e <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00d      	beq.n	80078e6 <USBD_StdEPReq+0x8e>
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b80      	cmp	r3, #128	; 0x80
 80078ce:	d00a      	beq.n	80078e6 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 f969 	bl	8008bac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078da:	2180      	movs	r1, #128	; 0x80
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 f965 	bl	8008bac <USBD_LL_StallEP>
 80078e2:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078e4:	e020      	b.n	8007928 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fc68 	bl	80081be <USBD_CtlError>
        break;
 80078ee:	e01b      	b.n	8007928 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	885b      	ldrh	r3, [r3, #2]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10e      	bne.n	8007916 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00b      	beq.n	8007916 <USBD_StdEPReq+0xbe>
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	2b80      	cmp	r3, #128	; 0x80
 8007902:	d008      	beq.n	8007916 <USBD_StdEPReq+0xbe>
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	88db      	ldrh	r3, [r3, #6]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d104      	bne.n	8007916 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 f94b 	bl	8008bac <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fd1c 	bl	8008354 <USBD_CtlSendStatus>

        break;
 800791c:	e004      	b.n	8007928 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fc4c 	bl	80081be <USBD_CtlError>
        break;
 8007926:	bf00      	nop
      }
      break;
 8007928:	e0ea      	b.n	8007b00 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007930:	2b02      	cmp	r3, #2
 8007932:	d002      	beq.n	800793a <USBD_StdEPReq+0xe2>
 8007934:	2b03      	cmp	r3, #3
 8007936:	d016      	beq.n	8007966 <USBD_StdEPReq+0x10e>
 8007938:	e030      	b.n	800799c <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00d      	beq.n	800795c <USBD_StdEPReq+0x104>
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b80      	cmp	r3, #128	; 0x80
 8007944:	d00a      	beq.n	800795c <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 f92e 	bl	8008bac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007950:	2180      	movs	r1, #128	; 0x80
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 f92a 	bl	8008bac <USBD_LL_StallEP>
 8007958:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800795a:	e025      	b.n	80079a8 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fc2d 	bl	80081be <USBD_CtlError>
        break;
 8007964:	e020      	b.n	80079a8 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	885b      	ldrh	r3, [r3, #2]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d11b      	bne.n	80079a6 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007974:	2b00      	cmp	r3, #0
 8007976:	d004      	beq.n	8007982 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 f94b 	bl	8008c18 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fce6 	bl	8008354 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	4798      	blx	r3
 8007996:	4603      	mov	r3, r0
 8007998:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800799a:	e004      	b.n	80079a6 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fc0d 	bl	80081be <USBD_CtlError>
        break;
 80079a4:	e000      	b.n	80079a8 <USBD_StdEPReq+0x150>
        break;
 80079a6:	bf00      	nop
      }
      break;
 80079a8:	e0aa      	b.n	8007b00 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d002      	beq.n	80079ba <USBD_StdEPReq+0x162>
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d032      	beq.n	8007a1e <USBD_StdEPReq+0x1c6>
 80079b8:	e097      	b.n	8007aea <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d007      	beq.n	80079d0 <USBD_StdEPReq+0x178>
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	2b80      	cmp	r3, #128	; 0x80
 80079c4:	d004      	beq.n	80079d0 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fbf8 	bl	80081be <USBD_CtlError>
          break;
 80079ce:	e091      	b.n	8007af4 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	da0b      	bge.n	80079f0 <USBD_StdEPReq+0x198>
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	3310      	adds	r3, #16
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	4413      	add	r3, r2
 80079ec:	3304      	adds	r3, #4
 80079ee:	e00b      	b.n	8007a08 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	4413      	add	r3, r2
 8007a06:	3304      	adds	r3, #4
 8007a08:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2202      	movs	r2, #2
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fc42 	bl	80082a0 <USBD_CtlSendData>
        break;
 8007a1c:	e06a      	b.n	8007af4 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007a1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	da11      	bge.n	8007a4a <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	f003 020f 	and.w	r2, r3, #15
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	440b      	add	r3, r1
 8007a38:	3324      	adds	r3, #36	; 0x24
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d117      	bne.n	8007a70 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fbbb 	bl	80081be <USBD_CtlError>
            break;
 8007a48:	e054      	b.n	8007af4 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	f003 020f 	and.w	r2, r3, #15
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	440b      	add	r3, r1
 8007a5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d104      	bne.n	8007a70 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fba8 	bl	80081be <USBD_CtlError>
            break;
 8007a6e:	e041      	b.n	8007af4 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	da0b      	bge.n	8007a90 <USBD_StdEPReq+0x238>
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	3310      	adds	r3, #16
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	e00b      	b.n	8007aa8 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <USBD_StdEPReq+0x25e>
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b80      	cmp	r3, #128	; 0x80
 8007ab4:	d103      	bne.n	8007abe <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	e00e      	b.n	8007adc <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 f8de 	bl	8008c84 <USBD_LL_IsStallEP>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e002      	b.n	8007adc <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fbdc 	bl	80082a0 <USBD_CtlSendData>
          break;
 8007ae8:	e004      	b.n	8007af4 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fb66 	bl	80081be <USBD_CtlError>
        break;
 8007af2:	bf00      	nop
      }
      break;
 8007af4:	e004      	b.n	8007b00 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fb60 	bl	80081be <USBD_CtlError>
      break;
 8007afe:	bf00      	nop
    }
    break;
 8007b00:	e004      	b.n	8007b0c <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fb5a 	bl	80081be <USBD_CtlError>
    break;
 8007b0a:	bf00      	nop
  }

  return ret;
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	885b      	ldrh	r3, [r3, #2]
 8007b32:	0a1b      	lsrs	r3, r3, #8
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	2b0e      	cmp	r3, #14
 8007b3a:	f200 8152 	bhi.w	8007de2 <USBD_GetDescriptor+0x2ca>
 8007b3e:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <USBD_GetDescriptor+0x2c>)
 8007b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b44:	08007bb5 	.word	0x08007bb5
 8007b48:	08007bcd 	.word	0x08007bcd
 8007b4c:	08007c0d 	.word	0x08007c0d
 8007b50:	08007de3 	.word	0x08007de3
 8007b54:	08007de3 	.word	0x08007de3
 8007b58:	08007d83 	.word	0x08007d83
 8007b5c:	08007daf 	.word	0x08007daf
 8007b60:	08007de3 	.word	0x08007de3
 8007b64:	08007de3 	.word	0x08007de3
 8007b68:	08007de3 	.word	0x08007de3
 8007b6c:	08007de3 	.word	0x08007de3
 8007b70:	08007de3 	.word	0x08007de3
 8007b74:	08007de3 	.word	0x08007de3
 8007b78:	08007de3 	.word	0x08007de3
 8007b7c:	08007b81 	.word	0x08007b81
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	7c12      	ldrb	r2, [r2, #16]
 8007b98:	f107 0108 	add.w	r1, r7, #8
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007ba2:	e126      	b.n	8007df2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fb09 	bl	80081be <USBD_CtlError>
      err++;
 8007bac:	7afb      	ldrb	r3, [r7, #11]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	72fb      	strb	r3, [r7, #11]
    break;
 8007bb2:	e11e      	b.n	8007df2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	7c12      	ldrb	r2, [r2, #16]
 8007bc0:	f107 0108 	add.w	r1, r7, #8
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
    break;
 8007bca:	e112      	b.n	8007df2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7c1b      	ldrb	r3, [r3, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10d      	bne.n	8007bf0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bdc:	f107 0208 	add.w	r2, r7, #8
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
 8007be4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3301      	adds	r3, #1
 8007bea:	2202      	movs	r2, #2
 8007bec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007bee:	e100      	b.n	8007df2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	f107 0208 	add.w	r2, r7, #8
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
 8007c00:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3301      	adds	r3, #1
 8007c06:	2202      	movs	r2, #2
 8007c08:	701a      	strb	r2, [r3, #0]
    break;
 8007c0a:	e0f2      	b.n	8007df2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	885b      	ldrh	r3, [r3, #2]
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b05      	cmp	r3, #5
 8007c14:	f200 80ac 	bhi.w	8007d70 <USBD_GetDescriptor+0x258>
 8007c18:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <USBD_GetDescriptor+0x108>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c39 	.word	0x08007c39
 8007c24:	08007c6d 	.word	0x08007c6d
 8007c28:	08007ca1 	.word	0x08007ca1
 8007c2c:	08007cd5 	.word	0x08007cd5
 8007c30:	08007d09 	.word	0x08007d09
 8007c34:	08007d3d 	.word	0x08007d3d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	7c12      	ldrb	r2, [r2, #16]
 8007c50:	f107 0108 	add.w	r1, r7, #8
 8007c54:	4610      	mov	r0, r2
 8007c56:	4798      	blx	r3
 8007c58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c5a:	e091      	b.n	8007d80 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 faad 	bl	80081be <USBD_CtlError>
        err++;
 8007c64:	7afb      	ldrb	r3, [r7, #11]
 8007c66:	3301      	adds	r3, #1
 8007c68:	72fb      	strb	r3, [r7, #11]
      break;
 8007c6a:	e089      	b.n	8007d80 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	7c12      	ldrb	r2, [r2, #16]
 8007c84:	f107 0108 	add.w	r1, r7, #8
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4798      	blx	r3
 8007c8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c8e:	e077      	b.n	8007d80 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa93 	bl	80081be <USBD_CtlError>
        err++;
 8007c98:	7afb      	ldrb	r3, [r7, #11]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c9e:	e06f      	b.n	8007d80 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00b      	beq.n	8007cc4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	7c12      	ldrb	r2, [r2, #16]
 8007cb8:	f107 0108 	add.w	r1, r7, #8
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
 8007cc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cc2:	e05d      	b.n	8007d80 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fa79 	bl	80081be <USBD_CtlError>
        err++;
 8007ccc:	7afb      	ldrb	r3, [r7, #11]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	72fb      	strb	r3, [r7, #11]
      break;
 8007cd2:	e055      	b.n	8007d80 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	7c12      	ldrb	r2, [r2, #16]
 8007cec:	f107 0108 	add.w	r1, r7, #8
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
 8007cf4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cf6:	e043      	b.n	8007d80 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fa5f 	bl	80081be <USBD_CtlError>
        err++;
 8007d00:	7afb      	ldrb	r3, [r7, #11]
 8007d02:	3301      	adds	r3, #1
 8007d04:	72fb      	strb	r3, [r7, #11]
      break;
 8007d06:	e03b      	b.n	8007d80 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	7c12      	ldrb	r2, [r2, #16]
 8007d20:	f107 0108 	add.w	r1, r7, #8
 8007d24:	4610      	mov	r0, r2
 8007d26:	4798      	blx	r3
 8007d28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d2a:	e029      	b.n	8007d80 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa45 	bl	80081be <USBD_CtlError>
        err++;
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	3301      	adds	r3, #1
 8007d38:	72fb      	strb	r3, [r7, #11]
      break;
 8007d3a:	e021      	b.n	8007d80 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00b      	beq.n	8007d60 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	7c12      	ldrb	r2, [r2, #16]
 8007d54:	f107 0108 	add.w	r1, r7, #8
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d5e:	e00f      	b.n	8007d80 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fa2b 	bl	80081be <USBD_CtlError>
        err++;
 8007d68:	7afb      	ldrb	r3, [r7, #11]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d6e:	e007      	b.n	8007d80 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa23 	bl	80081be <USBD_CtlError>
      err++;
 8007d78:	7afb      	ldrb	r3, [r7, #11]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007d7e:	bf00      	nop
    }
    break;
 8007d80:	e037      	b.n	8007df2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	7c1b      	ldrb	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d92:	f107 0208 	add.w	r2, r7, #8
 8007d96:	4610      	mov	r0, r2
 8007d98:	4798      	blx	r3
 8007d9a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d9c:	e029      	b.n	8007df2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fa0c 	bl	80081be <USBD_CtlError>
      err++;
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	3301      	adds	r3, #1
 8007daa:	72fb      	strb	r3, [r7, #11]
    break;
 8007dac:	e021      	b.n	8007df2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	7c1b      	ldrb	r3, [r3, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10d      	bne.n	8007dd2 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbe:	f107 0208 	add.w	r2, r7, #8
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	4798      	blx	r3
 8007dc6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	2207      	movs	r2, #7
 8007dce:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007dd0:	e00f      	b.n	8007df2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f9f2 	bl	80081be <USBD_CtlError>
      err++;
 8007dda:	7afb      	ldrb	r3, [r7, #11]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	72fb      	strb	r3, [r7, #11]
    break;
 8007de0:	e007      	b.n	8007df2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f9ea 	bl	80081be <USBD_CtlError>
    err++;
 8007dea:	7afb      	ldrb	r3, [r7, #11]
 8007dec:	3301      	adds	r3, #1
 8007dee:	72fb      	strb	r3, [r7, #11]
    break;
 8007df0:	bf00      	nop
  }

  if (err != 0U)
 8007df2:	7afb      	ldrb	r3, [r7, #11]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d11e      	bne.n	8007e36 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	88db      	ldrh	r3, [r3, #6]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d016      	beq.n	8007e2e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007e00:	893b      	ldrh	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00e      	beq.n	8007e24 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	88da      	ldrh	r2, [r3, #6]
 8007e0a:	893b      	ldrh	r3, [r7, #8]
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	bf28      	it	cs
 8007e10:	4613      	movcs	r3, r2
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e16:	893b      	ldrh	r3, [r7, #8]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	68f9      	ldr	r1, [r7, #12]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fa3f 	bl	80082a0 <USBD_CtlSendData>
 8007e22:	e009      	b.n	8007e38 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f9c9 	bl	80081be <USBD_CtlError>
 8007e2c:	e004      	b.n	8007e38 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fa90 	bl	8008354 <USBD_CtlSendStatus>
 8007e34:	e000      	b.n	8007e38 <USBD_GetDescriptor+0x320>
    return;
 8007e36:	bf00      	nop
    }
  }
}
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop

08007e40 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	889b      	ldrh	r3, [r3, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d130      	bne.n	8007eb4 <USBD_SetAddress+0x74>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	88db      	ldrh	r3, [r3, #6]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d12c      	bne.n	8007eb4 <USBD_SetAddress+0x74>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	885b      	ldrh	r3, [r3, #2]
 8007e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e60:	d828      	bhi.n	8007eb4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	885b      	ldrh	r3, [r3, #2]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d104      	bne.n	8007e82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f99f 	bl	80081be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e80:	e01d      	b.n	8007ebe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	7bfa      	ldrb	r2, [r7, #15]
 8007e86:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 ff26 	bl	8008ce0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fa5d 	bl	8008354 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d004      	beq.n	8007eaa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea8:	e009      	b.n	8007ebe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb2:	e004      	b.n	8007ebe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f981 	bl	80081be <USBD_CtlError>
  }
}
 8007ebc:	bf00      	nop
 8007ebe:	bf00      	nop
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	885b      	ldrh	r3, [r3, #2]
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	4b4b      	ldr	r3, [pc, #300]	; (800800c <USBD_SetConfig+0x144>)
 8007ede:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ee0:	4b4a      	ldr	r3, [pc, #296]	; (800800c <USBD_SetConfig+0x144>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d905      	bls.n	8007ef4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f967 	bl	80081be <USBD_CtlError>
    return USBD_FAIL;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e087      	b.n	8008004 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d002      	beq.n	8007f04 <USBD_SetConfig+0x3c>
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d025      	beq.n	8007f4e <USBD_SetConfig+0x86>
 8007f02:	e071      	b.n	8007fe8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007f04:	4b41      	ldr	r3, [pc, #260]	; (800800c <USBD_SetConfig+0x144>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d01c      	beq.n	8007f46 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007f0c:	4b3f      	ldr	r3, [pc, #252]	; (800800c <USBD_SetConfig+0x144>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f16:	4b3d      	ldr	r3, [pc, #244]	; (800800c <USBD_SetConfig+0x144>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff f9af 	bl	8007280 <USBD_SetClassConfig>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d004      	beq.n	8007f36 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f945 	bl	80081be <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f34:	e065      	b.n	8008002 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa0c 	bl	8008354 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2203      	movs	r2, #3
 8007f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f44:	e05d      	b.n	8008002 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fa04 	bl	8008354 <USBD_CtlSendStatus>
    break;
 8007f4c:	e059      	b.n	8008002 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007f4e:	4b2f      	ldr	r3, [pc, #188]	; (800800c <USBD_SetConfig+0x144>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d112      	bne.n	8007f7c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007f5e:	4b2b      	ldr	r3, [pc, #172]	; (800800c <USBD_SetConfig+0x144>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f68:	4b28      	ldr	r3, [pc, #160]	; (800800c <USBD_SetConfig+0x144>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff f9a2 	bl	80072b8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f9ed 	bl	8008354 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f7a:	e042      	b.n	8008002 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007f7c:	4b23      	ldr	r3, [pc, #140]	; (800800c <USBD_SetConfig+0x144>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d02a      	beq.n	8007fe0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7ff f990 	bl	80072b8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007f98:	4b1c      	ldr	r3, [pc, #112]	; (800800c <USBD_SetConfig+0x144>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fa2:	4b1a      	ldr	r3, [pc, #104]	; (800800c <USBD_SetConfig+0x144>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff f969 	bl	8007280 <USBD_SetClassConfig>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00f      	beq.n	8007fd8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f8ff 	bl	80081be <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff f975 	bl	80072b8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007fd6:	e014      	b.n	8008002 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f9bb 	bl	8008354 <USBD_CtlSendStatus>
    break;
 8007fde:	e010      	b.n	8008002 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f9b7 	bl	8008354 <USBD_CtlSendStatus>
    break;
 8007fe6:	e00c      	b.n	8008002 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f8e7 	bl	80081be <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <USBD_SetConfig+0x144>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff f95e 	bl	80072b8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8008000:	bf00      	nop
  }

  return ret;
 8008002:	7bfb      	ldrb	r3, [r7, #15]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	2000022c 	.word	0x2000022c

08008010 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	88db      	ldrh	r3, [r3, #6]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d004      	beq.n	800802c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f8ca 	bl	80081be <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800802a:	e022      	b.n	8008072 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008032:	2b02      	cmp	r3, #2
 8008034:	dc02      	bgt.n	800803c <USBD_GetConfig+0x2c>
 8008036:	2b00      	cmp	r3, #0
 8008038:	dc03      	bgt.n	8008042 <USBD_GetConfig+0x32>
 800803a:	e015      	b.n	8008068 <USBD_GetConfig+0x58>
 800803c:	2b03      	cmp	r3, #3
 800803e:	d00b      	beq.n	8008058 <USBD_GetConfig+0x48>
 8008040:	e012      	b.n	8008068 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3308      	adds	r3, #8
 800804c:	2201      	movs	r2, #1
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f925 	bl	80082a0 <USBD_CtlSendData>
      break;
 8008056:	e00c      	b.n	8008072 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3304      	adds	r3, #4
 800805c:	2201      	movs	r2, #1
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f91d 	bl	80082a0 <USBD_CtlSendData>
      break;
 8008066:	e004      	b.n	8008072 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f8a7 	bl	80081be <USBD_CtlError>
      break;
 8008070:	bf00      	nop
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808a:	3b01      	subs	r3, #1
 800808c:	2b02      	cmp	r3, #2
 800808e:	d81e      	bhi.n	80080ce <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	88db      	ldrh	r3, [r3, #6]
 8008094:	2b02      	cmp	r3, #2
 8008096:	d004      	beq.n	80080a2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f88f 	bl	80081be <USBD_CtlError>
      break;
 80080a0:	e01a      	b.n	80080d8 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d005      	beq.n	80080be <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f043 0202 	orr.w	r2, r3, #2
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	330c      	adds	r3, #12
 80080c2:	2202      	movs	r2, #2
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f8ea 	bl	80082a0 <USBD_CtlSendData>
    break;
 80080cc:	e004      	b.n	80080d8 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f874 	bl	80081be <USBD_CtlError>
    break;
 80080d6:	bf00      	nop
  }
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	885b      	ldrh	r3, [r3, #2]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d106      	bne.n	8008100 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f92a 	bl	8008354 <USBD_CtlSendStatus>
  }
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008118:	3b01      	subs	r3, #1
 800811a:	2b02      	cmp	r3, #2
 800811c:	d80b      	bhi.n	8008136 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	885b      	ldrh	r3, [r3, #2]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d10c      	bne.n	8008140 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f910 	bl	8008354 <USBD_CtlSendStatus>
      }
      break;
 8008134:	e004      	b.n	8008140 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f840 	bl	80081be <USBD_CtlError>
      break;
 800813e:	e000      	b.n	8008142 <USBD_ClrFeature+0x3a>
      break;
 8008140:	bf00      	nop
  }
}
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	781a      	ldrb	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3301      	adds	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	781a      	ldrb	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3301      	adds	r3, #1
 8008172:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f7ff fa9b 	bl	80076b0 <SWAPBYTE>
 800817a:	4603      	mov	r3, r0
 800817c:	461a      	mov	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3301      	adds	r3, #1
 8008186:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	3301      	adds	r3, #1
 800818c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f7ff fa8e 	bl	80076b0 <SWAPBYTE>
 8008194:	4603      	mov	r3, r0
 8008196:	461a      	mov	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3301      	adds	r3, #1
 80081a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3301      	adds	r3, #1
 80081a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f7ff fa81 	bl	80076b0 <SWAPBYTE>
 80081ae:	4603      	mov	r3, r0
 80081b0:	461a      	mov	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	80da      	strh	r2, [r3, #6]
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081c8:	2180      	movs	r1, #128	; 0x80
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fcee 	bl	8008bac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081d0:	2100      	movs	r1, #0
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fcea 	bl	8008bac <USBD_LL_StallEP>
}
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d036      	beq.n	8008264 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081fa:	6938      	ldr	r0, [r7, #16]
 80081fc:	f000 f836 	bl	800826c <USBD_GetLen>
 8008200:	4603      	mov	r3, r0
 8008202:	3301      	adds	r3, #1
 8008204:	b29b      	uxth	r3, r3
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	b29a      	uxth	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	4413      	add	r3, r2
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	7812      	ldrb	r2, [r2, #0]
 8008218:	701a      	strb	r2, [r3, #0]
  idx++;
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	3301      	adds	r3, #1
 800821e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	4413      	add	r3, r2
 8008226:	2203      	movs	r2, #3
 8008228:	701a      	strb	r2, [r3, #0]
  idx++;
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	3301      	adds	r3, #1
 800822e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008230:	e013      	b.n	800825a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	4413      	add	r3, r2
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	7812      	ldrb	r2, [r2, #0]
 800823c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	3301      	adds	r3, #1
 8008242:	613b      	str	r3, [r7, #16]
    idx++;
 8008244:	7dfb      	ldrb	r3, [r7, #23]
 8008246:	3301      	adds	r3, #1
 8008248:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800824a:	7dfb      	ldrb	r3, [r7, #23]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	4413      	add	r3, r2
 8008250:	2200      	movs	r2, #0
 8008252:	701a      	strb	r2, [r3, #0]
    idx++;
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	3301      	adds	r3, #1
 8008258:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e7      	bne.n	8008232 <USBD_GetString+0x52>
 8008262:	e000      	b.n	8008266 <USBD_GetString+0x86>
    return;
 8008264:	bf00      	nop
  }
}
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800827c:	e005      	b.n	800828a <USBD_GetLen+0x1e>
  {
    len++;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	3301      	adds	r3, #1
 8008282:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	3301      	adds	r3, #1
 8008288:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1f5      	bne.n	800827e <USBD_GetLen+0x12>
  }

  return len;
 8008292:	7bfb      	ldrb	r3, [r7, #15]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	2100      	movs	r1, #0
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fd40 	bl	8008d4c <USBD_LL_Transmit>

  return USBD_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	2100      	movs	r1, #0
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fd2f 	bl	8008d4c <USBD_LL_Transmit>

  return USBD_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2203      	movs	r2, #3
 8008308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	2100      	movs	r1, #0
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 fd4a 	bl	8008dbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	60f8      	str	r0, [r7, #12]
 800833a:	60b9      	str	r1, [r7, #8]
 800833c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	2100      	movs	r1, #0
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 fd39 	bl	8008dbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2204      	movs	r2, #4
 8008360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008364:	2300      	movs	r3, #0
 8008366:	2200      	movs	r2, #0
 8008368:	2100      	movs	r1, #0
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fcee 	bl	8008d4c <USBD_LL_Transmit>

  return USBD_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b082      	sub	sp, #8
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2205      	movs	r2, #5
 8008386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800838a:	2300      	movs	r3, #0
 800838c:	2200      	movs	r2, #0
 800838e:	2100      	movs	r1, #0
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fd13 	bl	8008dbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083a4:	2200      	movs	r2, #0
 80083a6:	4912      	ldr	r1, [pc, #72]	; (80083f0 <MX_USB_DEVICE_Init+0x50>)
 80083a8:	4812      	ldr	r0, [pc, #72]	; (80083f4 <MX_USB_DEVICE_Init+0x54>)
 80083aa:	f7fe fefb 	bl	80071a4 <USBD_Init>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d001      	beq.n	80083b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083b4:	f7f8 f8ce 	bl	8000554 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80083b8:	490f      	ldr	r1, [pc, #60]	; (80083f8 <MX_USB_DEVICE_Init+0x58>)
 80083ba:	480e      	ldr	r0, [pc, #56]	; (80083f4 <MX_USB_DEVICE_Init+0x54>)
 80083bc:	f7fe ff22 	bl	8007204 <USBD_RegisterClass>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083c6:	f7f8 f8c5 	bl	8000554 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083ca:	490c      	ldr	r1, [pc, #48]	; (80083fc <MX_USB_DEVICE_Init+0x5c>)
 80083cc:	4809      	ldr	r0, [pc, #36]	; (80083f4 <MX_USB_DEVICE_Init+0x54>)
 80083ce:	f7fe fe4d 	bl	800706c <USBD_CDC_RegisterInterface>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083d8:	f7f8 f8bc 	bl	8000554 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083dc:	4805      	ldr	r0, [pc, #20]	; (80083f4 <MX_USB_DEVICE_Init+0x54>)
 80083de:	f7fe ff38 	bl	8007252 <USBD_Start>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083e8:	f7f8 f8b4 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083ec:	bf00      	nop
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20000148 	.word	0x20000148
 80083f4:	20000320 	.word	0x20000320
 80083f8:	20000030 	.word	0x20000030
 80083fc:	20000134 	.word	0x20000134

08008400 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008404:	2200      	movs	r2, #0
 8008406:	4905      	ldr	r1, [pc, #20]	; (800841c <CDC_Init_FS+0x1c>)
 8008408:	4805      	ldr	r0, [pc, #20]	; (8008420 <CDC_Init_FS+0x20>)
 800840a:	f7fe fe44 	bl	8007096 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800840e:	4905      	ldr	r1, [pc, #20]	; (8008424 <CDC_Init_FS+0x24>)
 8008410:	4803      	ldr	r0, [pc, #12]	; (8008420 <CDC_Init_FS+0x20>)
 8008412:	f7fe fe59 	bl	80070c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008416:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008418:	4618      	mov	r0, r3
 800841a:	bd80      	pop	{r7, pc}
 800841c:	200009d8 	.word	0x200009d8
 8008420:	20000320 	.word	0x20000320
 8008424:	200005f0 	.word	0x200005f0

08008428 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008428:	b480      	push	{r7}
 800842a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800842c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800842e:	4618      	mov	r0, r3
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	71fb      	strb	r3, [r7, #7]
 8008444:	4613      	mov	r3, r2
 8008446:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008448:	79fb      	ldrb	r3, [r7, #7]
 800844a:	2b23      	cmp	r3, #35	; 0x23
 800844c:	d84a      	bhi.n	80084e4 <CDC_Control_FS+0xac>
 800844e:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <CDC_Control_FS+0x1c>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	080084e5 	.word	0x080084e5
 8008458:	080084e5 	.word	0x080084e5
 800845c:	080084e5 	.word	0x080084e5
 8008460:	080084e5 	.word	0x080084e5
 8008464:	080084e5 	.word	0x080084e5
 8008468:	080084e5 	.word	0x080084e5
 800846c:	080084e5 	.word	0x080084e5
 8008470:	080084e5 	.word	0x080084e5
 8008474:	080084e5 	.word	0x080084e5
 8008478:	080084e5 	.word	0x080084e5
 800847c:	080084e5 	.word	0x080084e5
 8008480:	080084e5 	.word	0x080084e5
 8008484:	080084e5 	.word	0x080084e5
 8008488:	080084e5 	.word	0x080084e5
 800848c:	080084e5 	.word	0x080084e5
 8008490:	080084e5 	.word	0x080084e5
 8008494:	080084e5 	.word	0x080084e5
 8008498:	080084e5 	.word	0x080084e5
 800849c:	080084e5 	.word	0x080084e5
 80084a0:	080084e5 	.word	0x080084e5
 80084a4:	080084e5 	.word	0x080084e5
 80084a8:	080084e5 	.word	0x080084e5
 80084ac:	080084e5 	.word	0x080084e5
 80084b0:	080084e5 	.word	0x080084e5
 80084b4:	080084e5 	.word	0x080084e5
 80084b8:	080084e5 	.word	0x080084e5
 80084bc:	080084e5 	.word	0x080084e5
 80084c0:	080084e5 	.word	0x080084e5
 80084c4:	080084e5 	.word	0x080084e5
 80084c8:	080084e5 	.word	0x080084e5
 80084cc:	080084e5 	.word	0x080084e5
 80084d0:	080084e5 	.word	0x080084e5
 80084d4:	080084e5 	.word	0x080084e5
 80084d8:	080084e5 	.word	0x080084e5
 80084dc:	080084e5 	.word	0x080084e5
 80084e0:	080084e5 	.word	0x080084e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084e4:	bf00      	nop
  }

  return (USBD_OK);
 80084e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	480f      	ldr	r0, [pc, #60]	; (8008540 <CDC_Receive_FS+0x4c>)
 8008502:	f7fe fde1 	bl	80070c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008506:	480e      	ldr	r0, [pc, #56]	; (8008540 <CDC_Receive_FS+0x4c>)
 8008508:	f7fe fe22 	bl	8007150 <USBD_CDC_ReceivePacket>


  for(i=0;i<*Len;i++){
 800850c:	2300      	movs	r3, #0
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	e00b      	b.n	800852a <CDC_Receive_FS+0x36>
	  rxBuffer[i] = Buf[i];
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4413      	add	r3, r2
 8008518:	7819      	ldrb	r1, [r3, #0]
 800851a:	4a0a      	ldr	r2, [pc, #40]	; (8008544 <CDC_Receive_FS+0x50>)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4413      	add	r3, r2
 8008520:	460a      	mov	r2, r1
 8008522:	701a      	strb	r2, [r3, #0]
  for(i=0;i<*Len;i++){
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3301      	adds	r3, #1
 8008528:	60fb      	str	r3, [r7, #12]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	429a      	cmp	r2, r3
 8008532:	d3ee      	bcc.n	8008512 <CDC_Receive_FS+0x1e>
  }

  //CDC_Transmit_FS((uint8_t *) rxBuffer,strlen(rxBuffer));


  return (USBD_OK);
 8008534:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20000320 	.word	0x20000320
 8008544:	2000029c 	.word	0x2000029c

08008548 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008558:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <CDC_Transmit_FS+0x48>)
 800855a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800855e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800856a:	2301      	movs	r3, #1
 800856c:	e00b      	b.n	8008586 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800856e:	887b      	ldrh	r3, [r7, #2]
 8008570:	461a      	mov	r2, r3
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	4806      	ldr	r0, [pc, #24]	; (8008590 <CDC_Transmit_FS+0x48>)
 8008576:	f7fe fd8e 	bl	8007096 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800857a:	4805      	ldr	r0, [pc, #20]	; (8008590 <CDC_Transmit_FS+0x48>)
 800857c:	f7fe fdb8 	bl	80070f0 <USBD_CDC_TransmitPacket>
 8008580:	4603      	mov	r3, r0
 8008582:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008584:	7bfb      	ldrb	r3, [r7, #15]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20000320 	.word	0x20000320

08008594 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80085a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	371c      	adds	r7, #28
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
	...

080085b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	6039      	str	r1, [r7, #0]
 80085c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2212      	movs	r2, #18
 80085c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085ca:	4b03      	ldr	r3, [pc, #12]	; (80085d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	20000168 	.word	0x20000168

080085dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	6039      	str	r1, [r7, #0]
 80085e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2204      	movs	r2, #4
 80085ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085ee:	4b03      	ldr	r3, [pc, #12]	; (80085fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	20000188 	.word	0x20000188

08008600 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	6039      	str	r1, [r7, #0]
 800860a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800860c:	79fb      	ldrb	r3, [r7, #7]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d105      	bne.n	800861e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	4907      	ldr	r1, [pc, #28]	; (8008634 <USBD_FS_ProductStrDescriptor+0x34>)
 8008616:	4808      	ldr	r0, [pc, #32]	; (8008638 <USBD_FS_ProductStrDescriptor+0x38>)
 8008618:	f7ff fde2 	bl	80081e0 <USBD_GetString>
 800861c:	e004      	b.n	8008628 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	4904      	ldr	r1, [pc, #16]	; (8008634 <USBD_FS_ProductStrDescriptor+0x34>)
 8008622:	4805      	ldr	r0, [pc, #20]	; (8008638 <USBD_FS_ProductStrDescriptor+0x38>)
 8008624:	f7ff fddc 	bl	80081e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008628:	4b02      	ldr	r3, [pc, #8]	; (8008634 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20000dc0 	.word	0x20000dc0
 8008638:	080097dc 	.word	0x080097dc

0800863c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	4603      	mov	r3, r0
 8008644:	6039      	str	r1, [r7, #0]
 8008646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	4904      	ldr	r1, [pc, #16]	; (800865c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800864c:	4804      	ldr	r0, [pc, #16]	; (8008660 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800864e:	f7ff fdc7 	bl	80081e0 <USBD_GetString>
  return USBD_StrDesc;
 8008652:	4b02      	ldr	r3, [pc, #8]	; (800865c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	20000dc0 	.word	0x20000dc0
 8008660:	080097f4 	.word	0x080097f4

08008664 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	221a      	movs	r2, #26
 8008674:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008676:	f000 f855 	bl	8008724 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800867a:	4b02      	ldr	r3, [pc, #8]	; (8008684 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	2000018c 	.word	0x2000018c

08008688 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	6039      	str	r1, [r7, #0]
 8008692:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008694:	79fb      	ldrb	r3, [r7, #7]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d105      	bne.n	80086a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	4907      	ldr	r1, [pc, #28]	; (80086bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800869e:	4808      	ldr	r0, [pc, #32]	; (80086c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086a0:	f7ff fd9e 	bl	80081e0 <USBD_GetString>
 80086a4:	e004      	b.n	80086b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	4904      	ldr	r1, [pc, #16]	; (80086bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80086aa:	4805      	ldr	r0, [pc, #20]	; (80086c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086ac:	f7ff fd98 	bl	80081e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086b0:	4b02      	ldr	r3, [pc, #8]	; (80086bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20000dc0 	.word	0x20000dc0
 80086c0:	08009808 	.word	0x08009808

080086c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4603      	mov	r3, r0
 80086cc:	6039      	str	r1, [r7, #0]
 80086ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086d0:	79fb      	ldrb	r3, [r7, #7]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d105      	bne.n	80086e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	4907      	ldr	r1, [pc, #28]	; (80086f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086da:	4808      	ldr	r0, [pc, #32]	; (80086fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086dc:	f7ff fd80 	bl	80081e0 <USBD_GetString>
 80086e0:	e004      	b.n	80086ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	4904      	ldr	r1, [pc, #16]	; (80086f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086e6:	4805      	ldr	r0, [pc, #20]	; (80086fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086e8:	f7ff fd7a 	bl	80081e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086ec:	4b02      	ldr	r3, [pc, #8]	; (80086f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20000dc0 	.word	0x20000dc0
 80086fc:	08009814 	.word	0x08009814

08008700 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	6039      	str	r1, [r7, #0]
 800870a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	220c      	movs	r2, #12
 8008710:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008712:	4b03      	ldr	r3, [pc, #12]	; (8008720 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	2000017c 	.word	0x2000017c

08008724 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800872a:	4b0f      	ldr	r3, [pc, #60]	; (8008768 <Get_SerialNum+0x44>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008730:	4b0e      	ldr	r3, [pc, #56]	; (800876c <Get_SerialNum+0x48>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008736:	4b0e      	ldr	r3, [pc, #56]	; (8008770 <Get_SerialNum+0x4c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4413      	add	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800874a:	2208      	movs	r2, #8
 800874c:	4909      	ldr	r1, [pc, #36]	; (8008774 <Get_SerialNum+0x50>)
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 f814 	bl	800877c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008754:	2204      	movs	r2, #4
 8008756:	4908      	ldr	r1, [pc, #32]	; (8008778 <Get_SerialNum+0x54>)
 8008758:	68b8      	ldr	r0, [r7, #8]
 800875a:	f000 f80f 	bl	800877c <IntToUnicode>
  }
}
 800875e:	bf00      	nop
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	1fff7590 	.word	0x1fff7590
 800876c:	1fff7594 	.word	0x1fff7594
 8008770:	1fff7598 	.word	0x1fff7598
 8008774:	2000018e 	.word	0x2000018e
 8008778:	2000019e 	.word	0x2000019e

0800877c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800878e:	2300      	movs	r3, #0
 8008790:	75fb      	strb	r3, [r7, #23]
 8008792:	e027      	b.n	80087e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	0f1b      	lsrs	r3, r3, #28
 8008798:	2b09      	cmp	r3, #9
 800879a:	d80b      	bhi.n	80087b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	0f1b      	lsrs	r3, r3, #28
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	7dfb      	ldrb	r3, [r7, #23]
 80087a4:	005b      	lsls	r3, r3, #1
 80087a6:	4619      	mov	r1, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	440b      	add	r3, r1
 80087ac:	3230      	adds	r2, #48	; 0x30
 80087ae:	b2d2      	uxtb	r2, r2
 80087b0:	701a      	strb	r2, [r3, #0]
 80087b2:	e00a      	b.n	80087ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	0f1b      	lsrs	r3, r3, #28
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	7dfb      	ldrb	r3, [r7, #23]
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	4619      	mov	r1, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	440b      	add	r3, r1
 80087c4:	3237      	adds	r2, #55	; 0x37
 80087c6:	b2d2      	uxtb	r2, r2
 80087c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	011b      	lsls	r3, r3, #4
 80087ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	3301      	adds	r3, #1
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	4413      	add	r3, r2
 80087da:	2200      	movs	r2, #0
 80087dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	3301      	adds	r3, #1
 80087e2:	75fb      	strb	r3, [r7, #23]
 80087e4:	7dfa      	ldrb	r2, [r7, #23]
 80087e6:	79fb      	ldrb	r3, [r7, #7]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d3d3      	bcc.n	8008794 <IntToUnicode+0x18>
  }
}
 80087ec:	bf00      	nop
 80087ee:	bf00      	nop
 80087f0:	371c      	adds	r7, #28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
	...

080087fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a0d      	ldr	r2, [pc, #52]	; (8008840 <HAL_PCD_MspInit+0x44>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d113      	bne.n	8008836 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800880e:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <HAL_PCD_MspInit+0x48>)
 8008810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008812:	4a0c      	ldr	r2, [pc, #48]	; (8008844 <HAL_PCD_MspInit+0x48>)
 8008814:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008818:	6593      	str	r3, [r2, #88]	; 0x58
 800881a:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <HAL_PCD_MspInit+0x48>)
 800881c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008826:	2200      	movs	r2, #0
 8008828:	2100      	movs	r1, #0
 800882a:	2043      	movs	r0, #67	; 0x43
 800882c:	f7f8 fb1d 	bl	8000e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008830:	2043      	movs	r0, #67	; 0x43
 8008832:	f7f8 fb36 	bl	8000ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	40006800 	.word	0x40006800
 8008844:	40021000 	.word	0x40021000

08008848 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800885c:	4619      	mov	r1, r3
 800885e:	4610      	mov	r0, r2
 8008860:	f7fe fd42 	bl	80072e8 <USBD_LL_SetupStage>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	440b      	add	r3, r1
 800888c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	78fb      	ldrb	r3, [r7, #3]
 8008894:	4619      	mov	r1, r3
 8008896:	f7fe fd7c 	bl	8007392 <USBD_LL_DataOutStage>
}
 800889a:	bf00      	nop
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	4613      	mov	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	00db      	lsls	r3, r3, #3
 80088c0:	440b      	add	r3, r1
 80088c2:	333c      	adds	r3, #60	; 0x3c
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	4619      	mov	r1, r3
 80088ca:	f7fe fdc5 	bl	8007458 <USBD_LL_DataInStage>
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fec9 	bl	800767c <USBD_LL_SOF>
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088fa:	2301      	movs	r3, #1
 80088fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d001      	beq.n	800890a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008906:	f7f7 fe25 	bl	8000554 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008910:	7bfa      	ldrb	r2, [r7, #15]
 8008912:	4611      	mov	r1, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe fe76 	bl	8007606 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008920:	4618      	mov	r0, r3
 8008922:	f7fe fe2f 	bl	8007584 <USBD_LL_Reset>
}
 8008926:	bf00      	nop
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
	...

08008930 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe fe71 	bl	8007626 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d005      	beq.n	8008958 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800894c:	4b04      	ldr	r3, [pc, #16]	; (8008960 <HAL_PCD_SuspendCallback+0x30>)
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	4a03      	ldr	r2, [pc, #12]	; (8008960 <HAL_PCD_SuspendCallback+0x30>)
 8008952:	f043 0306 	orr.w	r3, r3, #6
 8008956:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	e000ed00 	.word	0xe000ed00

08008964 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d007      	beq.n	8008984 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008974:	4b08      	ldr	r3, [pc, #32]	; (8008998 <HAL_PCD_ResumeCallback+0x34>)
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	4a07      	ldr	r2, [pc, #28]	; (8008998 <HAL_PCD_ResumeCallback+0x34>)
 800897a:	f023 0306 	bic.w	r3, r3, #6
 800897e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008980:	f000 fa9e 	bl	8008ec0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800898a:	4618      	mov	r0, r3
 800898c:	f7fe fe60 	bl	8007650 <USBD_LL_Resume>
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	e000ed00 	.word	0xe000ed00

0800899c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80089a4:	f7fa f822 	bl	80029ec <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80089a8:	4a2b      	ldr	r2, [pc, #172]	; (8008a58 <USBD_LL_Init+0xbc>)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a29      	ldr	r2, [pc, #164]	; (8008a58 <USBD_LL_Init+0xbc>)
 80089b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80089b8:	4b27      	ldr	r3, [pc, #156]	; (8008a58 <USBD_LL_Init+0xbc>)
 80089ba:	4a28      	ldr	r2, [pc, #160]	; (8008a5c <USBD_LL_Init+0xc0>)
 80089bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80089be:	4b26      	ldr	r3, [pc, #152]	; (8008a58 <USBD_LL_Init+0xbc>)
 80089c0:	2208      	movs	r2, #8
 80089c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80089c4:	4b24      	ldr	r3, [pc, #144]	; (8008a58 <USBD_LL_Init+0xbc>)
 80089c6:	2202      	movs	r2, #2
 80089c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089ca:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <USBD_LL_Init+0xbc>)
 80089cc:	2202      	movs	r2, #2
 80089ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80089d0:	4b21      	ldr	r3, [pc, #132]	; (8008a58 <USBD_LL_Init+0xbc>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80089d6:	4b20      	ldr	r3, [pc, #128]	; (8008a58 <USBD_LL_Init+0xbc>)
 80089d8:	2200      	movs	r2, #0
 80089da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80089dc:	4b1e      	ldr	r3, [pc, #120]	; (8008a58 <USBD_LL_Init+0xbc>)
 80089de:	2200      	movs	r2, #0
 80089e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80089e2:	4b1d      	ldr	r3, [pc, #116]	; (8008a58 <USBD_LL_Init+0xbc>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80089e8:	481b      	ldr	r0, [pc, #108]	; (8008a58 <USBD_LL_Init+0xbc>)
 80089ea:	f7f8 fbf7 	bl	80011dc <HAL_PCD_Init>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80089f4:	f7f7 fdae 	bl	8000554 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089fe:	2318      	movs	r3, #24
 8008a00:	2200      	movs	r2, #0
 8008a02:	2100      	movs	r1, #0
 8008a04:	f7f9 ff20 	bl	8002848 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a0e:	2358      	movs	r3, #88	; 0x58
 8008a10:	2200      	movs	r2, #0
 8008a12:	2180      	movs	r1, #128	; 0x80
 8008a14:	f7f9 ff18 	bl	8002848 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a1e:	23c0      	movs	r3, #192	; 0xc0
 8008a20:	2200      	movs	r2, #0
 8008a22:	2181      	movs	r1, #129	; 0x81
 8008a24:	f7f9 ff10 	bl	8002848 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008a32:	2200      	movs	r2, #0
 8008a34:	2101      	movs	r1, #1
 8008a36:	f7f9 ff07 	bl	8002848 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a44:	2200      	movs	r2, #0
 8008a46:	2182      	movs	r1, #130	; 0x82
 8008a48:	f7f9 fefe 	bl	8002848 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20000fc0 	.word	0x20000fc0
 8008a5c:	40006800 	.word	0x40006800

08008a60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7f8 fcc2 	bl	8001400 <HAL_PCD_Start>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d816      	bhi.n	8008ab4 <USBD_LL_Start+0x54>
 8008a86:	a201      	add	r2, pc, #4	; (adr r2, 8008a8c <USBD_LL_Start+0x2c>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008a9d 	.word	0x08008a9d
 8008a90:	08008aa3 	.word	0x08008aa3
 8008a94:	08008aa9 	.word	0x08008aa9
 8008a98:	08008aaf 	.word	0x08008aaf
    case HAL_OK :
      usb_status = USBD_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa0:	e00b      	b.n	8008aba <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa6:	e008      	b.n	8008aba <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8008aac:	e005      	b.n	8008aba <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab2:	e002      	b.n	8008aba <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab8:	bf00      	nop
  }
  return usb_status;
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	4608      	mov	r0, r1
 8008ace:	4611      	mov	r1, r2
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	70fb      	strb	r3, [r7, #3]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	70bb      	strb	r3, [r7, #2]
 8008ada:	4613      	mov	r3, r2
 8008adc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008aec:	78bb      	ldrb	r3, [r7, #2]
 8008aee:	883a      	ldrh	r2, [r7, #0]
 8008af0:	78f9      	ldrb	r1, [r7, #3]
 8008af2:	f7f8 fe1a 	bl	800172a <HAL_PCD_EP_Open>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	d817      	bhi.n	8008b30 <USBD_LL_OpenEP+0x6c>
 8008b00:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <USBD_LL_OpenEP+0x44>)
 8008b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b06:	bf00      	nop
 8008b08:	08008b19 	.word	0x08008b19
 8008b0c:	08008b1f 	.word	0x08008b1f
 8008b10:	08008b25 	.word	0x08008b25
 8008b14:	08008b2b 	.word	0x08008b2b
    case HAL_OK :
      usb_status = USBD_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1c:	e00b      	b.n	8008b36 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	73fb      	strb	r3, [r7, #15]
    break;
 8008b22:	e008      	b.n	8008b36 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b24:	2301      	movs	r3, #1
 8008b26:	73fb      	strb	r3, [r7, #15]
    break;
 8008b28:	e005      	b.n	8008b36 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2e:	e002      	b.n	8008b36 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008b30:	2303      	movs	r3, #3
 8008b32:	73fb      	strb	r3, [r7, #15]
    break;
 8008b34:	bf00      	nop
  }
  return usb_status;
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b5a:	78fa      	ldrb	r2, [r7, #3]
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7f8 fe49 	bl	80017f6 <HAL_PCD_EP_Close>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d816      	bhi.n	8008b9c <USBD_LL_CloseEP+0x5c>
 8008b6e:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <USBD_LL_CloseEP+0x34>)
 8008b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b74:	08008b85 	.word	0x08008b85
 8008b78:	08008b8b 	.word	0x08008b8b
 8008b7c:	08008b91 	.word	0x08008b91
 8008b80:	08008b97 	.word	0x08008b97
    case HAL_OK :
      usb_status = USBD_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
    break;
 8008b88:	e00b      	b.n	8008ba2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8e:	e008      	b.n	8008ba2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b90:	2301      	movs	r3, #1
 8008b92:	73fb      	strb	r3, [r7, #15]
    break;
 8008b94:	e005      	b.n	8008ba2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b96:	2303      	movs	r3, #3
 8008b98:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9a:	e002      	b.n	8008ba2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba0:	bf00      	nop
  }
  return usb_status;
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bc6:	78fa      	ldrb	r2, [r7, #3]
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7f8 fef3 	bl	80019b6 <HAL_PCD_EP_SetStall>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008bd4:	7bbb      	ldrb	r3, [r7, #14]
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d816      	bhi.n	8008c08 <USBD_LL_StallEP+0x5c>
 8008bda:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <USBD_LL_StallEP+0x34>)
 8008bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be0:	08008bf1 	.word	0x08008bf1
 8008be4:	08008bf7 	.word	0x08008bf7
 8008be8:	08008bfd 	.word	0x08008bfd
 8008bec:	08008c03 	.word	0x08008c03
    case HAL_OK :
      usb_status = USBD_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf4:	e00b      	b.n	8008c0e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8008bfa:	e008      	b.n	8008c0e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8008c00:	e005      	b.n	8008c0e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c02:	2303      	movs	r3, #3
 8008c04:	73fb      	strb	r3, [r7, #15]
    break;
 8008c06:	e002      	b.n	8008c0e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c0c:	bf00      	nop
  }
  return usb_status;
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	4611      	mov	r1, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7f8 ff1d 	bl	8001a76 <HAL_PCD_EP_ClrStall>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d816      	bhi.n	8008c74 <USBD_LL_ClearStallEP+0x5c>
 8008c46:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <USBD_LL_ClearStallEP+0x34>)
 8008c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4c:	08008c5d 	.word	0x08008c5d
 8008c50:	08008c63 	.word	0x08008c63
 8008c54:	08008c69 	.word	0x08008c69
 8008c58:	08008c6f 	.word	0x08008c6f
    case HAL_OK :
      usb_status = USBD_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c60:	e00b      	b.n	8008c7a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c62:	2303      	movs	r3, #3
 8008c64:	73fb      	strb	r3, [r7, #15]
    break;
 8008c66:	e008      	b.n	8008c7a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6c:	e005      	b.n	8008c7a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	73fb      	strb	r3, [r7, #15]
    break;
 8008c72:	e002      	b.n	8008c7a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008c74:	2303      	movs	r3, #3
 8008c76:	73fb      	strb	r3, [r7, #15]
    break;
 8008c78:	bf00      	nop
  }
  return usb_status;
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	da0c      	bge.n	8008cba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ca6:	68f9      	ldr	r1, [r7, #12]
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	4613      	mov	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	440b      	add	r3, r1
 8008cb4:	3302      	adds	r3, #2
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	e00b      	b.n	8008cd2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cba:	78fb      	ldrb	r3, [r7, #3]
 8008cbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cc0:	68f9      	ldr	r1, [r7, #12]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	00db      	lsls	r3, r3, #3
 8008cca:	440b      	add	r3, r1
 8008ccc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008cd0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
	...

08008ce0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7f8 fcee 	bl	80016e0 <HAL_PCD_SetAddress>
 8008d04:	4603      	mov	r3, r0
 8008d06:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d816      	bhi.n	8008d3c <USBD_LL_SetUSBAddress+0x5c>
 8008d0e:	a201      	add	r2, pc, #4	; (adr r2, 8008d14 <USBD_LL_SetUSBAddress+0x34>)
 8008d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d14:	08008d25 	.word	0x08008d25
 8008d18:	08008d2b 	.word	0x08008d2b
 8008d1c:	08008d31 	.word	0x08008d31
 8008d20:	08008d37 	.word	0x08008d37
    case HAL_OK :
      usb_status = USBD_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73fb      	strb	r3, [r7, #15]
    break;
 8008d28:	e00b      	b.n	8008d42 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d2e:	e008      	b.n	8008d42 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
    break;
 8008d34:	e005      	b.n	8008d42 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d36:	2303      	movs	r3, #3
 8008d38:	73fb      	strb	r3, [r7, #15]
    break;
 8008d3a:	e002      	b.n	8008d42 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d40:	bf00      	nop
  }
  return usb_status;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	607a      	str	r2, [r7, #4]
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d60:	2300      	movs	r3, #0
 8008d62:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d6a:	7af9      	ldrb	r1, [r7, #11]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	f7f8 fdde 	bl	8001930 <HAL_PCD_EP_Transmit>
 8008d74:	4603      	mov	r3, r0
 8008d76:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008d78:	7dbb      	ldrb	r3, [r7, #22]
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d816      	bhi.n	8008dac <USBD_LL_Transmit+0x60>
 8008d7e:	a201      	add	r2, pc, #4	; (adr r2, 8008d84 <USBD_LL_Transmit+0x38>)
 8008d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d84:	08008d95 	.word	0x08008d95
 8008d88:	08008d9b 	.word	0x08008d9b
 8008d8c:	08008da1 	.word	0x08008da1
 8008d90:	08008da7 	.word	0x08008da7
    case HAL_OK :
      usb_status = USBD_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	75fb      	strb	r3, [r7, #23]
    break;
 8008d98:	e00b      	b.n	8008db2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	75fb      	strb	r3, [r7, #23]
    break;
 8008d9e:	e008      	b.n	8008db2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008da0:	2301      	movs	r3, #1
 8008da2:	75fb      	strb	r3, [r7, #23]
    break;
 8008da4:	e005      	b.n	8008db2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008da6:	2303      	movs	r3, #3
 8008da8:	75fb      	strb	r3, [r7, #23]
    break;
 8008daa:	e002      	b.n	8008db2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008dac:	2303      	movs	r3, #3
 8008dae:	75fb      	strb	r3, [r7, #23]
    break;
 8008db0:	bf00      	nop
  }
  return usb_status;
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3718      	adds	r7, #24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	607a      	str	r2, [r7, #4]
 8008dc6:	603b      	str	r3, [r7, #0]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008dda:	7af9      	ldrb	r1, [r7, #11]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	f7f8 fd51 	bl	8001886 <HAL_PCD_EP_Receive>
 8008de4:	4603      	mov	r3, r0
 8008de6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008de8:	7dbb      	ldrb	r3, [r7, #22]
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d816      	bhi.n	8008e1c <USBD_LL_PrepareReceive+0x60>
 8008dee:	a201      	add	r2, pc, #4	; (adr r2, 8008df4 <USBD_LL_PrepareReceive+0x38>)
 8008df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df4:	08008e05 	.word	0x08008e05
 8008df8:	08008e0b 	.word	0x08008e0b
 8008dfc:	08008e11 	.word	0x08008e11
 8008e00:	08008e17 	.word	0x08008e17
    case HAL_OK :
      usb_status = USBD_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	75fb      	strb	r3, [r7, #23]
    break;
 8008e08:	e00b      	b.n	8008e22 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	75fb      	strb	r3, [r7, #23]
    break;
 8008e0e:	e008      	b.n	8008e22 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e10:	2301      	movs	r3, #1
 8008e12:	75fb      	strb	r3, [r7, #23]
    break;
 8008e14:	e005      	b.n	8008e22 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e16:	2303      	movs	r3, #3
 8008e18:	75fb      	strb	r3, [r7, #23]
    break;
 8008e1a:	e002      	b.n	8008e22 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	75fb      	strb	r3, [r7, #23]
    break;
 8008e20:	bf00      	nop
  }
  return usb_status;
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e3e:	78fa      	ldrb	r2, [r7, #3]
 8008e40:	4611      	mov	r1, r2
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7f8 fd5c 	bl	8001900 <HAL_PCD_EP_GetRxCount>
 8008e48:	4603      	mov	r3, r0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d002      	beq.n	8008e6c <HAL_PCDEx_LPM_Callback+0x18>
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d013      	beq.n	8008e92 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008e6a:	e023      	b.n	8008eb4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d007      	beq.n	8008e84 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008e74:	f000 f824 	bl	8008ec0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e78:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <HAL_PCDEx_LPM_Callback+0x68>)
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	4a0f      	ldr	r2, [pc, #60]	; (8008ebc <HAL_PCDEx_LPM_Callback+0x68>)
 8008e7e:	f023 0306 	bic.w	r3, r3, #6
 8008e82:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe fbe0 	bl	8007650 <USBD_LL_Resume>
    break;
 8008e90:	e010      	b.n	8008eb4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fe fbc4 	bl	8007626 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d005      	beq.n	8008eb2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ea6:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <HAL_PCDEx_LPM_Callback+0x68>)
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	4a04      	ldr	r2, [pc, #16]	; (8008ebc <HAL_PCDEx_LPM_Callback+0x68>)
 8008eac:	f043 0306 	orr.w	r3, r3, #6
 8008eb0:	6113      	str	r3, [r2, #16]
    break;
 8008eb2:	bf00      	nop
}
 8008eb4:	bf00      	nop
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	e000ed00 	.word	0xe000ed00

08008ec0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008ec4:	f7f7 fa3a 	bl	800033c <SystemClock_Config>
}
 8008ec8:	bf00      	nop
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <__errno>:
 8008ecc:	4b01      	ldr	r3, [pc, #4]	; (8008ed4 <__errno+0x8>)
 8008ece:	6818      	ldr	r0, [r3, #0]
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	200001a8 	.word	0x200001a8

08008ed8 <__libc_init_array>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	4d0d      	ldr	r5, [pc, #52]	; (8008f10 <__libc_init_array+0x38>)
 8008edc:	4c0d      	ldr	r4, [pc, #52]	; (8008f14 <__libc_init_array+0x3c>)
 8008ede:	1b64      	subs	r4, r4, r5
 8008ee0:	10a4      	asrs	r4, r4, #2
 8008ee2:	2600      	movs	r6, #0
 8008ee4:	42a6      	cmp	r6, r4
 8008ee6:	d109      	bne.n	8008efc <__libc_init_array+0x24>
 8008ee8:	4d0b      	ldr	r5, [pc, #44]	; (8008f18 <__libc_init_array+0x40>)
 8008eea:	4c0c      	ldr	r4, [pc, #48]	; (8008f1c <__libc_init_array+0x44>)
 8008eec:	f000 fc5e 	bl	80097ac <_init>
 8008ef0:	1b64      	subs	r4, r4, r5
 8008ef2:	10a4      	asrs	r4, r4, #2
 8008ef4:	2600      	movs	r6, #0
 8008ef6:	42a6      	cmp	r6, r4
 8008ef8:	d105      	bne.n	8008f06 <__libc_init_array+0x2e>
 8008efa:	bd70      	pop	{r4, r5, r6, pc}
 8008efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f00:	4798      	blx	r3
 8008f02:	3601      	adds	r6, #1
 8008f04:	e7ee      	b.n	8008ee4 <__libc_init_array+0xc>
 8008f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f0a:	4798      	blx	r3
 8008f0c:	3601      	adds	r6, #1
 8008f0e:	e7f2      	b.n	8008ef6 <__libc_init_array+0x1e>
 8008f10:	08009898 	.word	0x08009898
 8008f14:	08009898 	.word	0x08009898
 8008f18:	08009898 	.word	0x08009898
 8008f1c:	0800989c 	.word	0x0800989c

08008f20 <malloc>:
 8008f20:	4b02      	ldr	r3, [pc, #8]	; (8008f2c <malloc+0xc>)
 8008f22:	4601      	mov	r1, r0
 8008f24:	6818      	ldr	r0, [r3, #0]
 8008f26:	f000 b863 	b.w	8008ff0 <_malloc_r>
 8008f2a:	bf00      	nop
 8008f2c:	200001a8 	.word	0x200001a8

08008f30 <free>:
 8008f30:	4b02      	ldr	r3, [pc, #8]	; (8008f3c <free+0xc>)
 8008f32:	4601      	mov	r1, r0
 8008f34:	6818      	ldr	r0, [r3, #0]
 8008f36:	f000 b80b 	b.w	8008f50 <_free_r>
 8008f3a:	bf00      	nop
 8008f3c:	200001a8 	.word	0x200001a8

08008f40 <memset>:
 8008f40:	4402      	add	r2, r0
 8008f42:	4603      	mov	r3, r0
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d100      	bne.n	8008f4a <memset+0xa>
 8008f48:	4770      	bx	lr
 8008f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f4e:	e7f9      	b.n	8008f44 <memset+0x4>

08008f50 <_free_r>:
 8008f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f52:	2900      	cmp	r1, #0
 8008f54:	d048      	beq.n	8008fe8 <_free_r+0x98>
 8008f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f5a:	9001      	str	r0, [sp, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8008f62:	bfb8      	it	lt
 8008f64:	18e4      	addlt	r4, r4, r3
 8008f66:	f000 f8cd 	bl	8009104 <__malloc_lock>
 8008f6a:	4a20      	ldr	r2, [pc, #128]	; (8008fec <_free_r+0x9c>)
 8008f6c:	9801      	ldr	r0, [sp, #4]
 8008f6e:	6813      	ldr	r3, [r2, #0]
 8008f70:	4615      	mov	r5, r2
 8008f72:	b933      	cbnz	r3, 8008f82 <_free_r+0x32>
 8008f74:	6063      	str	r3, [r4, #4]
 8008f76:	6014      	str	r4, [r2, #0]
 8008f78:	b003      	add	sp, #12
 8008f7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f7e:	f000 b8c7 	b.w	8009110 <__malloc_unlock>
 8008f82:	42a3      	cmp	r3, r4
 8008f84:	d90b      	bls.n	8008f9e <_free_r+0x4e>
 8008f86:	6821      	ldr	r1, [r4, #0]
 8008f88:	1862      	adds	r2, r4, r1
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	bf04      	itt	eq
 8008f8e:	681a      	ldreq	r2, [r3, #0]
 8008f90:	685b      	ldreq	r3, [r3, #4]
 8008f92:	6063      	str	r3, [r4, #4]
 8008f94:	bf04      	itt	eq
 8008f96:	1852      	addeq	r2, r2, r1
 8008f98:	6022      	streq	r2, [r4, #0]
 8008f9a:	602c      	str	r4, [r5, #0]
 8008f9c:	e7ec      	b.n	8008f78 <_free_r+0x28>
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	b10b      	cbz	r3, 8008fa8 <_free_r+0x58>
 8008fa4:	42a3      	cmp	r3, r4
 8008fa6:	d9fa      	bls.n	8008f9e <_free_r+0x4e>
 8008fa8:	6811      	ldr	r1, [r2, #0]
 8008faa:	1855      	adds	r5, r2, r1
 8008fac:	42a5      	cmp	r5, r4
 8008fae:	d10b      	bne.n	8008fc8 <_free_r+0x78>
 8008fb0:	6824      	ldr	r4, [r4, #0]
 8008fb2:	4421      	add	r1, r4
 8008fb4:	1854      	adds	r4, r2, r1
 8008fb6:	42a3      	cmp	r3, r4
 8008fb8:	6011      	str	r1, [r2, #0]
 8008fba:	d1dd      	bne.n	8008f78 <_free_r+0x28>
 8008fbc:	681c      	ldr	r4, [r3, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	6053      	str	r3, [r2, #4]
 8008fc2:	4421      	add	r1, r4
 8008fc4:	6011      	str	r1, [r2, #0]
 8008fc6:	e7d7      	b.n	8008f78 <_free_r+0x28>
 8008fc8:	d902      	bls.n	8008fd0 <_free_r+0x80>
 8008fca:	230c      	movs	r3, #12
 8008fcc:	6003      	str	r3, [r0, #0]
 8008fce:	e7d3      	b.n	8008f78 <_free_r+0x28>
 8008fd0:	6825      	ldr	r5, [r4, #0]
 8008fd2:	1961      	adds	r1, r4, r5
 8008fd4:	428b      	cmp	r3, r1
 8008fd6:	bf04      	itt	eq
 8008fd8:	6819      	ldreq	r1, [r3, #0]
 8008fda:	685b      	ldreq	r3, [r3, #4]
 8008fdc:	6063      	str	r3, [r4, #4]
 8008fde:	bf04      	itt	eq
 8008fe0:	1949      	addeq	r1, r1, r5
 8008fe2:	6021      	streq	r1, [r4, #0]
 8008fe4:	6054      	str	r4, [r2, #4]
 8008fe6:	e7c7      	b.n	8008f78 <_free_r+0x28>
 8008fe8:	b003      	add	sp, #12
 8008fea:	bd30      	pop	{r4, r5, pc}
 8008fec:	20000230 	.word	0x20000230

08008ff0 <_malloc_r>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	1ccd      	adds	r5, r1, #3
 8008ff4:	f025 0503 	bic.w	r5, r5, #3
 8008ff8:	3508      	adds	r5, #8
 8008ffa:	2d0c      	cmp	r5, #12
 8008ffc:	bf38      	it	cc
 8008ffe:	250c      	movcc	r5, #12
 8009000:	2d00      	cmp	r5, #0
 8009002:	4606      	mov	r6, r0
 8009004:	db01      	blt.n	800900a <_malloc_r+0x1a>
 8009006:	42a9      	cmp	r1, r5
 8009008:	d903      	bls.n	8009012 <_malloc_r+0x22>
 800900a:	230c      	movs	r3, #12
 800900c:	6033      	str	r3, [r6, #0]
 800900e:	2000      	movs	r0, #0
 8009010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009012:	f000 f877 	bl	8009104 <__malloc_lock>
 8009016:	4921      	ldr	r1, [pc, #132]	; (800909c <_malloc_r+0xac>)
 8009018:	680a      	ldr	r2, [r1, #0]
 800901a:	4614      	mov	r4, r2
 800901c:	b99c      	cbnz	r4, 8009046 <_malloc_r+0x56>
 800901e:	4f20      	ldr	r7, [pc, #128]	; (80090a0 <_malloc_r+0xb0>)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	b923      	cbnz	r3, 800902e <_malloc_r+0x3e>
 8009024:	4621      	mov	r1, r4
 8009026:	4630      	mov	r0, r6
 8009028:	f000 f83c 	bl	80090a4 <_sbrk_r>
 800902c:	6038      	str	r0, [r7, #0]
 800902e:	4629      	mov	r1, r5
 8009030:	4630      	mov	r0, r6
 8009032:	f000 f837 	bl	80090a4 <_sbrk_r>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	d123      	bne.n	8009082 <_malloc_r+0x92>
 800903a:	230c      	movs	r3, #12
 800903c:	6033      	str	r3, [r6, #0]
 800903e:	4630      	mov	r0, r6
 8009040:	f000 f866 	bl	8009110 <__malloc_unlock>
 8009044:	e7e3      	b.n	800900e <_malloc_r+0x1e>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	1b5b      	subs	r3, r3, r5
 800904a:	d417      	bmi.n	800907c <_malloc_r+0x8c>
 800904c:	2b0b      	cmp	r3, #11
 800904e:	d903      	bls.n	8009058 <_malloc_r+0x68>
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	441c      	add	r4, r3
 8009054:	6025      	str	r5, [r4, #0]
 8009056:	e004      	b.n	8009062 <_malloc_r+0x72>
 8009058:	6863      	ldr	r3, [r4, #4]
 800905a:	42a2      	cmp	r2, r4
 800905c:	bf0c      	ite	eq
 800905e:	600b      	streq	r3, [r1, #0]
 8009060:	6053      	strne	r3, [r2, #4]
 8009062:	4630      	mov	r0, r6
 8009064:	f000 f854 	bl	8009110 <__malloc_unlock>
 8009068:	f104 000b 	add.w	r0, r4, #11
 800906c:	1d23      	adds	r3, r4, #4
 800906e:	f020 0007 	bic.w	r0, r0, #7
 8009072:	1ac2      	subs	r2, r0, r3
 8009074:	d0cc      	beq.n	8009010 <_malloc_r+0x20>
 8009076:	1a1b      	subs	r3, r3, r0
 8009078:	50a3      	str	r3, [r4, r2]
 800907a:	e7c9      	b.n	8009010 <_malloc_r+0x20>
 800907c:	4622      	mov	r2, r4
 800907e:	6864      	ldr	r4, [r4, #4]
 8009080:	e7cc      	b.n	800901c <_malloc_r+0x2c>
 8009082:	1cc4      	adds	r4, r0, #3
 8009084:	f024 0403 	bic.w	r4, r4, #3
 8009088:	42a0      	cmp	r0, r4
 800908a:	d0e3      	beq.n	8009054 <_malloc_r+0x64>
 800908c:	1a21      	subs	r1, r4, r0
 800908e:	4630      	mov	r0, r6
 8009090:	f000 f808 	bl	80090a4 <_sbrk_r>
 8009094:	3001      	adds	r0, #1
 8009096:	d1dd      	bne.n	8009054 <_malloc_r+0x64>
 8009098:	e7cf      	b.n	800903a <_malloc_r+0x4a>
 800909a:	bf00      	nop
 800909c:	20000230 	.word	0x20000230
 80090a0:	20000234 	.word	0x20000234

080090a4 <_sbrk_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4d06      	ldr	r5, [pc, #24]	; (80090c0 <_sbrk_r+0x1c>)
 80090a8:	2300      	movs	r3, #0
 80090aa:	4604      	mov	r4, r0
 80090ac:	4608      	mov	r0, r1
 80090ae:	602b      	str	r3, [r5, #0]
 80090b0:	f7f7 fcd2 	bl	8000a58 <_sbrk>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_sbrk_r+0x1a>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_sbrk_r+0x1a>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	200012b4 	.word	0x200012b4

080090c4 <siprintf>:
 80090c4:	b40e      	push	{r1, r2, r3}
 80090c6:	b500      	push	{lr}
 80090c8:	b09c      	sub	sp, #112	; 0x70
 80090ca:	ab1d      	add	r3, sp, #116	; 0x74
 80090cc:	9002      	str	r0, [sp, #8]
 80090ce:	9006      	str	r0, [sp, #24]
 80090d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090d4:	4809      	ldr	r0, [pc, #36]	; (80090fc <siprintf+0x38>)
 80090d6:	9107      	str	r1, [sp, #28]
 80090d8:	9104      	str	r1, [sp, #16]
 80090da:	4909      	ldr	r1, [pc, #36]	; (8009100 <siprintf+0x3c>)
 80090dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e0:	9105      	str	r1, [sp, #20]
 80090e2:	6800      	ldr	r0, [r0, #0]
 80090e4:	9301      	str	r3, [sp, #4]
 80090e6:	a902      	add	r1, sp, #8
 80090e8:	f000 f874 	bl	80091d4 <_svfiprintf_r>
 80090ec:	9b02      	ldr	r3, [sp, #8]
 80090ee:	2200      	movs	r2, #0
 80090f0:	701a      	strb	r2, [r3, #0]
 80090f2:	b01c      	add	sp, #112	; 0x70
 80090f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80090f8:	b003      	add	sp, #12
 80090fa:	4770      	bx	lr
 80090fc:	200001a8 	.word	0x200001a8
 8009100:	ffff0208 	.word	0xffff0208

08009104 <__malloc_lock>:
 8009104:	4801      	ldr	r0, [pc, #4]	; (800910c <__malloc_lock+0x8>)
 8009106:	f000 baf9 	b.w	80096fc <__retarget_lock_acquire_recursive>
 800910a:	bf00      	nop
 800910c:	200012bc 	.word	0x200012bc

08009110 <__malloc_unlock>:
 8009110:	4801      	ldr	r0, [pc, #4]	; (8009118 <__malloc_unlock+0x8>)
 8009112:	f000 baf4 	b.w	80096fe <__retarget_lock_release_recursive>
 8009116:	bf00      	nop
 8009118:	200012bc 	.word	0x200012bc

0800911c <__ssputs_r>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	688e      	ldr	r6, [r1, #8]
 8009122:	429e      	cmp	r6, r3
 8009124:	4682      	mov	sl, r0
 8009126:	460c      	mov	r4, r1
 8009128:	4690      	mov	r8, r2
 800912a:	461f      	mov	r7, r3
 800912c:	d838      	bhi.n	80091a0 <__ssputs_r+0x84>
 800912e:	898a      	ldrh	r2, [r1, #12]
 8009130:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009134:	d032      	beq.n	800919c <__ssputs_r+0x80>
 8009136:	6825      	ldr	r5, [r4, #0]
 8009138:	6909      	ldr	r1, [r1, #16]
 800913a:	eba5 0901 	sub.w	r9, r5, r1
 800913e:	6965      	ldr	r5, [r4, #20]
 8009140:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009144:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009148:	3301      	adds	r3, #1
 800914a:	444b      	add	r3, r9
 800914c:	106d      	asrs	r5, r5, #1
 800914e:	429d      	cmp	r5, r3
 8009150:	bf38      	it	cc
 8009152:	461d      	movcc	r5, r3
 8009154:	0553      	lsls	r3, r2, #21
 8009156:	d531      	bpl.n	80091bc <__ssputs_r+0xa0>
 8009158:	4629      	mov	r1, r5
 800915a:	f7ff ff49 	bl	8008ff0 <_malloc_r>
 800915e:	4606      	mov	r6, r0
 8009160:	b950      	cbnz	r0, 8009178 <__ssputs_r+0x5c>
 8009162:	230c      	movs	r3, #12
 8009164:	f8ca 3000 	str.w	r3, [sl]
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800916e:	81a3      	strh	r3, [r4, #12]
 8009170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009178:	6921      	ldr	r1, [r4, #16]
 800917a:	464a      	mov	r2, r9
 800917c:	f000 fac0 	bl	8009700 <memcpy>
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800918a:	81a3      	strh	r3, [r4, #12]
 800918c:	6126      	str	r6, [r4, #16]
 800918e:	6165      	str	r5, [r4, #20]
 8009190:	444e      	add	r6, r9
 8009192:	eba5 0509 	sub.w	r5, r5, r9
 8009196:	6026      	str	r6, [r4, #0]
 8009198:	60a5      	str	r5, [r4, #8]
 800919a:	463e      	mov	r6, r7
 800919c:	42be      	cmp	r6, r7
 800919e:	d900      	bls.n	80091a2 <__ssputs_r+0x86>
 80091a0:	463e      	mov	r6, r7
 80091a2:	4632      	mov	r2, r6
 80091a4:	6820      	ldr	r0, [r4, #0]
 80091a6:	4641      	mov	r1, r8
 80091a8:	f000 fab8 	bl	800971c <memmove>
 80091ac:	68a3      	ldr	r3, [r4, #8]
 80091ae:	6822      	ldr	r2, [r4, #0]
 80091b0:	1b9b      	subs	r3, r3, r6
 80091b2:	4432      	add	r2, r6
 80091b4:	60a3      	str	r3, [r4, #8]
 80091b6:	6022      	str	r2, [r4, #0]
 80091b8:	2000      	movs	r0, #0
 80091ba:	e7db      	b.n	8009174 <__ssputs_r+0x58>
 80091bc:	462a      	mov	r2, r5
 80091be:	f000 fac7 	bl	8009750 <_realloc_r>
 80091c2:	4606      	mov	r6, r0
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d1e1      	bne.n	800918c <__ssputs_r+0x70>
 80091c8:	6921      	ldr	r1, [r4, #16]
 80091ca:	4650      	mov	r0, sl
 80091cc:	f7ff fec0 	bl	8008f50 <_free_r>
 80091d0:	e7c7      	b.n	8009162 <__ssputs_r+0x46>
	...

080091d4 <_svfiprintf_r>:
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	4698      	mov	r8, r3
 80091da:	898b      	ldrh	r3, [r1, #12]
 80091dc:	061b      	lsls	r3, r3, #24
 80091de:	b09d      	sub	sp, #116	; 0x74
 80091e0:	4607      	mov	r7, r0
 80091e2:	460d      	mov	r5, r1
 80091e4:	4614      	mov	r4, r2
 80091e6:	d50e      	bpl.n	8009206 <_svfiprintf_r+0x32>
 80091e8:	690b      	ldr	r3, [r1, #16]
 80091ea:	b963      	cbnz	r3, 8009206 <_svfiprintf_r+0x32>
 80091ec:	2140      	movs	r1, #64	; 0x40
 80091ee:	f7ff feff 	bl	8008ff0 <_malloc_r>
 80091f2:	6028      	str	r0, [r5, #0]
 80091f4:	6128      	str	r0, [r5, #16]
 80091f6:	b920      	cbnz	r0, 8009202 <_svfiprintf_r+0x2e>
 80091f8:	230c      	movs	r3, #12
 80091fa:	603b      	str	r3, [r7, #0]
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009200:	e0d1      	b.n	80093a6 <_svfiprintf_r+0x1d2>
 8009202:	2340      	movs	r3, #64	; 0x40
 8009204:	616b      	str	r3, [r5, #20]
 8009206:	2300      	movs	r3, #0
 8009208:	9309      	str	r3, [sp, #36]	; 0x24
 800920a:	2320      	movs	r3, #32
 800920c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009210:	f8cd 800c 	str.w	r8, [sp, #12]
 8009214:	2330      	movs	r3, #48	; 0x30
 8009216:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093c0 <_svfiprintf_r+0x1ec>
 800921a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800921e:	f04f 0901 	mov.w	r9, #1
 8009222:	4623      	mov	r3, r4
 8009224:	469a      	mov	sl, r3
 8009226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800922a:	b10a      	cbz	r2, 8009230 <_svfiprintf_r+0x5c>
 800922c:	2a25      	cmp	r2, #37	; 0x25
 800922e:	d1f9      	bne.n	8009224 <_svfiprintf_r+0x50>
 8009230:	ebba 0b04 	subs.w	fp, sl, r4
 8009234:	d00b      	beq.n	800924e <_svfiprintf_r+0x7a>
 8009236:	465b      	mov	r3, fp
 8009238:	4622      	mov	r2, r4
 800923a:	4629      	mov	r1, r5
 800923c:	4638      	mov	r0, r7
 800923e:	f7ff ff6d 	bl	800911c <__ssputs_r>
 8009242:	3001      	adds	r0, #1
 8009244:	f000 80aa 	beq.w	800939c <_svfiprintf_r+0x1c8>
 8009248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800924a:	445a      	add	r2, fp
 800924c:	9209      	str	r2, [sp, #36]	; 0x24
 800924e:	f89a 3000 	ldrb.w	r3, [sl]
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 80a2 	beq.w	800939c <_svfiprintf_r+0x1c8>
 8009258:	2300      	movs	r3, #0
 800925a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800925e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009262:	f10a 0a01 	add.w	sl, sl, #1
 8009266:	9304      	str	r3, [sp, #16]
 8009268:	9307      	str	r3, [sp, #28]
 800926a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800926e:	931a      	str	r3, [sp, #104]	; 0x68
 8009270:	4654      	mov	r4, sl
 8009272:	2205      	movs	r2, #5
 8009274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009278:	4851      	ldr	r0, [pc, #324]	; (80093c0 <_svfiprintf_r+0x1ec>)
 800927a:	f7f6 ffb1 	bl	80001e0 <memchr>
 800927e:	9a04      	ldr	r2, [sp, #16]
 8009280:	b9d8      	cbnz	r0, 80092ba <_svfiprintf_r+0xe6>
 8009282:	06d0      	lsls	r0, r2, #27
 8009284:	bf44      	itt	mi
 8009286:	2320      	movmi	r3, #32
 8009288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800928c:	0711      	lsls	r1, r2, #28
 800928e:	bf44      	itt	mi
 8009290:	232b      	movmi	r3, #43	; 0x2b
 8009292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009296:	f89a 3000 	ldrb.w	r3, [sl]
 800929a:	2b2a      	cmp	r3, #42	; 0x2a
 800929c:	d015      	beq.n	80092ca <_svfiprintf_r+0xf6>
 800929e:	9a07      	ldr	r2, [sp, #28]
 80092a0:	4654      	mov	r4, sl
 80092a2:	2000      	movs	r0, #0
 80092a4:	f04f 0c0a 	mov.w	ip, #10
 80092a8:	4621      	mov	r1, r4
 80092aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ae:	3b30      	subs	r3, #48	; 0x30
 80092b0:	2b09      	cmp	r3, #9
 80092b2:	d94e      	bls.n	8009352 <_svfiprintf_r+0x17e>
 80092b4:	b1b0      	cbz	r0, 80092e4 <_svfiprintf_r+0x110>
 80092b6:	9207      	str	r2, [sp, #28]
 80092b8:	e014      	b.n	80092e4 <_svfiprintf_r+0x110>
 80092ba:	eba0 0308 	sub.w	r3, r0, r8
 80092be:	fa09 f303 	lsl.w	r3, r9, r3
 80092c2:	4313      	orrs	r3, r2
 80092c4:	9304      	str	r3, [sp, #16]
 80092c6:	46a2      	mov	sl, r4
 80092c8:	e7d2      	b.n	8009270 <_svfiprintf_r+0x9c>
 80092ca:	9b03      	ldr	r3, [sp, #12]
 80092cc:	1d19      	adds	r1, r3, #4
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	9103      	str	r1, [sp, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	bfbb      	ittet	lt
 80092d6:	425b      	neglt	r3, r3
 80092d8:	f042 0202 	orrlt.w	r2, r2, #2
 80092dc:	9307      	strge	r3, [sp, #28]
 80092de:	9307      	strlt	r3, [sp, #28]
 80092e0:	bfb8      	it	lt
 80092e2:	9204      	strlt	r2, [sp, #16]
 80092e4:	7823      	ldrb	r3, [r4, #0]
 80092e6:	2b2e      	cmp	r3, #46	; 0x2e
 80092e8:	d10c      	bne.n	8009304 <_svfiprintf_r+0x130>
 80092ea:	7863      	ldrb	r3, [r4, #1]
 80092ec:	2b2a      	cmp	r3, #42	; 0x2a
 80092ee:	d135      	bne.n	800935c <_svfiprintf_r+0x188>
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	1d1a      	adds	r2, r3, #4
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	9203      	str	r2, [sp, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	bfb8      	it	lt
 80092fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009300:	3402      	adds	r4, #2
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093d0 <_svfiprintf_r+0x1fc>
 8009308:	7821      	ldrb	r1, [r4, #0]
 800930a:	2203      	movs	r2, #3
 800930c:	4650      	mov	r0, sl
 800930e:	f7f6 ff67 	bl	80001e0 <memchr>
 8009312:	b140      	cbz	r0, 8009326 <_svfiprintf_r+0x152>
 8009314:	2340      	movs	r3, #64	; 0x40
 8009316:	eba0 000a 	sub.w	r0, r0, sl
 800931a:	fa03 f000 	lsl.w	r0, r3, r0
 800931e:	9b04      	ldr	r3, [sp, #16]
 8009320:	4303      	orrs	r3, r0
 8009322:	3401      	adds	r4, #1
 8009324:	9304      	str	r3, [sp, #16]
 8009326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800932a:	4826      	ldr	r0, [pc, #152]	; (80093c4 <_svfiprintf_r+0x1f0>)
 800932c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009330:	2206      	movs	r2, #6
 8009332:	f7f6 ff55 	bl	80001e0 <memchr>
 8009336:	2800      	cmp	r0, #0
 8009338:	d038      	beq.n	80093ac <_svfiprintf_r+0x1d8>
 800933a:	4b23      	ldr	r3, [pc, #140]	; (80093c8 <_svfiprintf_r+0x1f4>)
 800933c:	bb1b      	cbnz	r3, 8009386 <_svfiprintf_r+0x1b2>
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	3307      	adds	r3, #7
 8009342:	f023 0307 	bic.w	r3, r3, #7
 8009346:	3308      	adds	r3, #8
 8009348:	9303      	str	r3, [sp, #12]
 800934a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800934c:	4433      	add	r3, r6
 800934e:	9309      	str	r3, [sp, #36]	; 0x24
 8009350:	e767      	b.n	8009222 <_svfiprintf_r+0x4e>
 8009352:	fb0c 3202 	mla	r2, ip, r2, r3
 8009356:	460c      	mov	r4, r1
 8009358:	2001      	movs	r0, #1
 800935a:	e7a5      	b.n	80092a8 <_svfiprintf_r+0xd4>
 800935c:	2300      	movs	r3, #0
 800935e:	3401      	adds	r4, #1
 8009360:	9305      	str	r3, [sp, #20]
 8009362:	4619      	mov	r1, r3
 8009364:	f04f 0c0a 	mov.w	ip, #10
 8009368:	4620      	mov	r0, r4
 800936a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800936e:	3a30      	subs	r2, #48	; 0x30
 8009370:	2a09      	cmp	r2, #9
 8009372:	d903      	bls.n	800937c <_svfiprintf_r+0x1a8>
 8009374:	2b00      	cmp	r3, #0
 8009376:	d0c5      	beq.n	8009304 <_svfiprintf_r+0x130>
 8009378:	9105      	str	r1, [sp, #20]
 800937a:	e7c3      	b.n	8009304 <_svfiprintf_r+0x130>
 800937c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009380:	4604      	mov	r4, r0
 8009382:	2301      	movs	r3, #1
 8009384:	e7f0      	b.n	8009368 <_svfiprintf_r+0x194>
 8009386:	ab03      	add	r3, sp, #12
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	462a      	mov	r2, r5
 800938c:	4b0f      	ldr	r3, [pc, #60]	; (80093cc <_svfiprintf_r+0x1f8>)
 800938e:	a904      	add	r1, sp, #16
 8009390:	4638      	mov	r0, r7
 8009392:	f3af 8000 	nop.w
 8009396:	1c42      	adds	r2, r0, #1
 8009398:	4606      	mov	r6, r0
 800939a:	d1d6      	bne.n	800934a <_svfiprintf_r+0x176>
 800939c:	89ab      	ldrh	r3, [r5, #12]
 800939e:	065b      	lsls	r3, r3, #25
 80093a0:	f53f af2c 	bmi.w	80091fc <_svfiprintf_r+0x28>
 80093a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093a6:	b01d      	add	sp, #116	; 0x74
 80093a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ac:	ab03      	add	r3, sp, #12
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	462a      	mov	r2, r5
 80093b2:	4b06      	ldr	r3, [pc, #24]	; (80093cc <_svfiprintf_r+0x1f8>)
 80093b4:	a904      	add	r1, sp, #16
 80093b6:	4638      	mov	r0, r7
 80093b8:	f000 f87a 	bl	80094b0 <_printf_i>
 80093bc:	e7eb      	b.n	8009396 <_svfiprintf_r+0x1c2>
 80093be:	bf00      	nop
 80093c0:	08009864 	.word	0x08009864
 80093c4:	0800986e 	.word	0x0800986e
 80093c8:	00000000 	.word	0x00000000
 80093cc:	0800911d 	.word	0x0800911d
 80093d0:	0800986a 	.word	0x0800986a

080093d4 <_printf_common>:
 80093d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d8:	4616      	mov	r6, r2
 80093da:	4699      	mov	r9, r3
 80093dc:	688a      	ldr	r2, [r1, #8]
 80093de:	690b      	ldr	r3, [r1, #16]
 80093e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093e4:	4293      	cmp	r3, r2
 80093e6:	bfb8      	it	lt
 80093e8:	4613      	movlt	r3, r2
 80093ea:	6033      	str	r3, [r6, #0]
 80093ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093f0:	4607      	mov	r7, r0
 80093f2:	460c      	mov	r4, r1
 80093f4:	b10a      	cbz	r2, 80093fa <_printf_common+0x26>
 80093f6:	3301      	adds	r3, #1
 80093f8:	6033      	str	r3, [r6, #0]
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	0699      	lsls	r1, r3, #26
 80093fe:	bf42      	ittt	mi
 8009400:	6833      	ldrmi	r3, [r6, #0]
 8009402:	3302      	addmi	r3, #2
 8009404:	6033      	strmi	r3, [r6, #0]
 8009406:	6825      	ldr	r5, [r4, #0]
 8009408:	f015 0506 	ands.w	r5, r5, #6
 800940c:	d106      	bne.n	800941c <_printf_common+0x48>
 800940e:	f104 0a19 	add.w	sl, r4, #25
 8009412:	68e3      	ldr	r3, [r4, #12]
 8009414:	6832      	ldr	r2, [r6, #0]
 8009416:	1a9b      	subs	r3, r3, r2
 8009418:	42ab      	cmp	r3, r5
 800941a:	dc26      	bgt.n	800946a <_printf_common+0x96>
 800941c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009420:	1e13      	subs	r3, r2, #0
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	bf18      	it	ne
 8009426:	2301      	movne	r3, #1
 8009428:	0692      	lsls	r2, r2, #26
 800942a:	d42b      	bmi.n	8009484 <_printf_common+0xb0>
 800942c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009430:	4649      	mov	r1, r9
 8009432:	4638      	mov	r0, r7
 8009434:	47c0      	blx	r8
 8009436:	3001      	adds	r0, #1
 8009438:	d01e      	beq.n	8009478 <_printf_common+0xa4>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	68e5      	ldr	r5, [r4, #12]
 800943e:	6832      	ldr	r2, [r6, #0]
 8009440:	f003 0306 	and.w	r3, r3, #6
 8009444:	2b04      	cmp	r3, #4
 8009446:	bf08      	it	eq
 8009448:	1aad      	subeq	r5, r5, r2
 800944a:	68a3      	ldr	r3, [r4, #8]
 800944c:	6922      	ldr	r2, [r4, #16]
 800944e:	bf0c      	ite	eq
 8009450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009454:	2500      	movne	r5, #0
 8009456:	4293      	cmp	r3, r2
 8009458:	bfc4      	itt	gt
 800945a:	1a9b      	subgt	r3, r3, r2
 800945c:	18ed      	addgt	r5, r5, r3
 800945e:	2600      	movs	r6, #0
 8009460:	341a      	adds	r4, #26
 8009462:	42b5      	cmp	r5, r6
 8009464:	d11a      	bne.n	800949c <_printf_common+0xc8>
 8009466:	2000      	movs	r0, #0
 8009468:	e008      	b.n	800947c <_printf_common+0xa8>
 800946a:	2301      	movs	r3, #1
 800946c:	4652      	mov	r2, sl
 800946e:	4649      	mov	r1, r9
 8009470:	4638      	mov	r0, r7
 8009472:	47c0      	blx	r8
 8009474:	3001      	adds	r0, #1
 8009476:	d103      	bne.n	8009480 <_printf_common+0xac>
 8009478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800947c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009480:	3501      	adds	r5, #1
 8009482:	e7c6      	b.n	8009412 <_printf_common+0x3e>
 8009484:	18e1      	adds	r1, r4, r3
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	2030      	movs	r0, #48	; 0x30
 800948a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800948e:	4422      	add	r2, r4
 8009490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009498:	3302      	adds	r3, #2
 800949a:	e7c7      	b.n	800942c <_printf_common+0x58>
 800949c:	2301      	movs	r3, #1
 800949e:	4622      	mov	r2, r4
 80094a0:	4649      	mov	r1, r9
 80094a2:	4638      	mov	r0, r7
 80094a4:	47c0      	blx	r8
 80094a6:	3001      	adds	r0, #1
 80094a8:	d0e6      	beq.n	8009478 <_printf_common+0xa4>
 80094aa:	3601      	adds	r6, #1
 80094ac:	e7d9      	b.n	8009462 <_printf_common+0x8e>
	...

080094b0 <_printf_i>:
 80094b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094b4:	460c      	mov	r4, r1
 80094b6:	4691      	mov	r9, r2
 80094b8:	7e27      	ldrb	r7, [r4, #24]
 80094ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80094bc:	2f78      	cmp	r7, #120	; 0x78
 80094be:	4680      	mov	r8, r0
 80094c0:	469a      	mov	sl, r3
 80094c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094c6:	d807      	bhi.n	80094d8 <_printf_i+0x28>
 80094c8:	2f62      	cmp	r7, #98	; 0x62
 80094ca:	d80a      	bhi.n	80094e2 <_printf_i+0x32>
 80094cc:	2f00      	cmp	r7, #0
 80094ce:	f000 80d8 	beq.w	8009682 <_printf_i+0x1d2>
 80094d2:	2f58      	cmp	r7, #88	; 0x58
 80094d4:	f000 80a3 	beq.w	800961e <_printf_i+0x16e>
 80094d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094e0:	e03a      	b.n	8009558 <_printf_i+0xa8>
 80094e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094e6:	2b15      	cmp	r3, #21
 80094e8:	d8f6      	bhi.n	80094d8 <_printf_i+0x28>
 80094ea:	a001      	add	r0, pc, #4	; (adr r0, 80094f0 <_printf_i+0x40>)
 80094ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80094f0:	08009549 	.word	0x08009549
 80094f4:	0800955d 	.word	0x0800955d
 80094f8:	080094d9 	.word	0x080094d9
 80094fc:	080094d9 	.word	0x080094d9
 8009500:	080094d9 	.word	0x080094d9
 8009504:	080094d9 	.word	0x080094d9
 8009508:	0800955d 	.word	0x0800955d
 800950c:	080094d9 	.word	0x080094d9
 8009510:	080094d9 	.word	0x080094d9
 8009514:	080094d9 	.word	0x080094d9
 8009518:	080094d9 	.word	0x080094d9
 800951c:	08009669 	.word	0x08009669
 8009520:	0800958d 	.word	0x0800958d
 8009524:	0800964b 	.word	0x0800964b
 8009528:	080094d9 	.word	0x080094d9
 800952c:	080094d9 	.word	0x080094d9
 8009530:	0800968b 	.word	0x0800968b
 8009534:	080094d9 	.word	0x080094d9
 8009538:	0800958d 	.word	0x0800958d
 800953c:	080094d9 	.word	0x080094d9
 8009540:	080094d9 	.word	0x080094d9
 8009544:	08009653 	.word	0x08009653
 8009548:	680b      	ldr	r3, [r1, #0]
 800954a:	1d1a      	adds	r2, r3, #4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	600a      	str	r2, [r1, #0]
 8009550:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009558:	2301      	movs	r3, #1
 800955a:	e0a3      	b.n	80096a4 <_printf_i+0x1f4>
 800955c:	6825      	ldr	r5, [r4, #0]
 800955e:	6808      	ldr	r0, [r1, #0]
 8009560:	062e      	lsls	r6, r5, #24
 8009562:	f100 0304 	add.w	r3, r0, #4
 8009566:	d50a      	bpl.n	800957e <_printf_i+0xce>
 8009568:	6805      	ldr	r5, [r0, #0]
 800956a:	600b      	str	r3, [r1, #0]
 800956c:	2d00      	cmp	r5, #0
 800956e:	da03      	bge.n	8009578 <_printf_i+0xc8>
 8009570:	232d      	movs	r3, #45	; 0x2d
 8009572:	426d      	negs	r5, r5
 8009574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009578:	485e      	ldr	r0, [pc, #376]	; (80096f4 <_printf_i+0x244>)
 800957a:	230a      	movs	r3, #10
 800957c:	e019      	b.n	80095b2 <_printf_i+0x102>
 800957e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009582:	6805      	ldr	r5, [r0, #0]
 8009584:	600b      	str	r3, [r1, #0]
 8009586:	bf18      	it	ne
 8009588:	b22d      	sxthne	r5, r5
 800958a:	e7ef      	b.n	800956c <_printf_i+0xbc>
 800958c:	680b      	ldr	r3, [r1, #0]
 800958e:	6825      	ldr	r5, [r4, #0]
 8009590:	1d18      	adds	r0, r3, #4
 8009592:	6008      	str	r0, [r1, #0]
 8009594:	0628      	lsls	r0, r5, #24
 8009596:	d501      	bpl.n	800959c <_printf_i+0xec>
 8009598:	681d      	ldr	r5, [r3, #0]
 800959a:	e002      	b.n	80095a2 <_printf_i+0xf2>
 800959c:	0669      	lsls	r1, r5, #25
 800959e:	d5fb      	bpl.n	8009598 <_printf_i+0xe8>
 80095a0:	881d      	ldrh	r5, [r3, #0]
 80095a2:	4854      	ldr	r0, [pc, #336]	; (80096f4 <_printf_i+0x244>)
 80095a4:	2f6f      	cmp	r7, #111	; 0x6f
 80095a6:	bf0c      	ite	eq
 80095a8:	2308      	moveq	r3, #8
 80095aa:	230a      	movne	r3, #10
 80095ac:	2100      	movs	r1, #0
 80095ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095b2:	6866      	ldr	r6, [r4, #4]
 80095b4:	60a6      	str	r6, [r4, #8]
 80095b6:	2e00      	cmp	r6, #0
 80095b8:	bfa2      	ittt	ge
 80095ba:	6821      	ldrge	r1, [r4, #0]
 80095bc:	f021 0104 	bicge.w	r1, r1, #4
 80095c0:	6021      	strge	r1, [r4, #0]
 80095c2:	b90d      	cbnz	r5, 80095c8 <_printf_i+0x118>
 80095c4:	2e00      	cmp	r6, #0
 80095c6:	d04d      	beq.n	8009664 <_printf_i+0x1b4>
 80095c8:	4616      	mov	r6, r2
 80095ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80095ce:	fb03 5711 	mls	r7, r3, r1, r5
 80095d2:	5dc7      	ldrb	r7, [r0, r7]
 80095d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095d8:	462f      	mov	r7, r5
 80095da:	42bb      	cmp	r3, r7
 80095dc:	460d      	mov	r5, r1
 80095de:	d9f4      	bls.n	80095ca <_printf_i+0x11a>
 80095e0:	2b08      	cmp	r3, #8
 80095e2:	d10b      	bne.n	80095fc <_printf_i+0x14c>
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	07df      	lsls	r7, r3, #31
 80095e8:	d508      	bpl.n	80095fc <_printf_i+0x14c>
 80095ea:	6923      	ldr	r3, [r4, #16]
 80095ec:	6861      	ldr	r1, [r4, #4]
 80095ee:	4299      	cmp	r1, r3
 80095f0:	bfde      	ittt	le
 80095f2:	2330      	movle	r3, #48	; 0x30
 80095f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095f8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80095fc:	1b92      	subs	r2, r2, r6
 80095fe:	6122      	str	r2, [r4, #16]
 8009600:	f8cd a000 	str.w	sl, [sp]
 8009604:	464b      	mov	r3, r9
 8009606:	aa03      	add	r2, sp, #12
 8009608:	4621      	mov	r1, r4
 800960a:	4640      	mov	r0, r8
 800960c:	f7ff fee2 	bl	80093d4 <_printf_common>
 8009610:	3001      	adds	r0, #1
 8009612:	d14c      	bne.n	80096ae <_printf_i+0x1fe>
 8009614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009618:	b004      	add	sp, #16
 800961a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961e:	4835      	ldr	r0, [pc, #212]	; (80096f4 <_printf_i+0x244>)
 8009620:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	680e      	ldr	r6, [r1, #0]
 8009628:	061f      	lsls	r7, r3, #24
 800962a:	f856 5b04 	ldr.w	r5, [r6], #4
 800962e:	600e      	str	r6, [r1, #0]
 8009630:	d514      	bpl.n	800965c <_printf_i+0x1ac>
 8009632:	07d9      	lsls	r1, r3, #31
 8009634:	bf44      	itt	mi
 8009636:	f043 0320 	orrmi.w	r3, r3, #32
 800963a:	6023      	strmi	r3, [r4, #0]
 800963c:	b91d      	cbnz	r5, 8009646 <_printf_i+0x196>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	f023 0320 	bic.w	r3, r3, #32
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	2310      	movs	r3, #16
 8009648:	e7b0      	b.n	80095ac <_printf_i+0xfc>
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	f043 0320 	orr.w	r3, r3, #32
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	2378      	movs	r3, #120	; 0x78
 8009654:	4828      	ldr	r0, [pc, #160]	; (80096f8 <_printf_i+0x248>)
 8009656:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800965a:	e7e3      	b.n	8009624 <_printf_i+0x174>
 800965c:	065e      	lsls	r6, r3, #25
 800965e:	bf48      	it	mi
 8009660:	b2ad      	uxthmi	r5, r5
 8009662:	e7e6      	b.n	8009632 <_printf_i+0x182>
 8009664:	4616      	mov	r6, r2
 8009666:	e7bb      	b.n	80095e0 <_printf_i+0x130>
 8009668:	680b      	ldr	r3, [r1, #0]
 800966a:	6826      	ldr	r6, [r4, #0]
 800966c:	6960      	ldr	r0, [r4, #20]
 800966e:	1d1d      	adds	r5, r3, #4
 8009670:	600d      	str	r5, [r1, #0]
 8009672:	0635      	lsls	r5, r6, #24
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	d501      	bpl.n	800967c <_printf_i+0x1cc>
 8009678:	6018      	str	r0, [r3, #0]
 800967a:	e002      	b.n	8009682 <_printf_i+0x1d2>
 800967c:	0671      	lsls	r1, r6, #25
 800967e:	d5fb      	bpl.n	8009678 <_printf_i+0x1c8>
 8009680:	8018      	strh	r0, [r3, #0]
 8009682:	2300      	movs	r3, #0
 8009684:	6123      	str	r3, [r4, #16]
 8009686:	4616      	mov	r6, r2
 8009688:	e7ba      	b.n	8009600 <_printf_i+0x150>
 800968a:	680b      	ldr	r3, [r1, #0]
 800968c:	1d1a      	adds	r2, r3, #4
 800968e:	600a      	str	r2, [r1, #0]
 8009690:	681e      	ldr	r6, [r3, #0]
 8009692:	6862      	ldr	r2, [r4, #4]
 8009694:	2100      	movs	r1, #0
 8009696:	4630      	mov	r0, r6
 8009698:	f7f6 fda2 	bl	80001e0 <memchr>
 800969c:	b108      	cbz	r0, 80096a2 <_printf_i+0x1f2>
 800969e:	1b80      	subs	r0, r0, r6
 80096a0:	6060      	str	r0, [r4, #4]
 80096a2:	6863      	ldr	r3, [r4, #4]
 80096a4:	6123      	str	r3, [r4, #16]
 80096a6:	2300      	movs	r3, #0
 80096a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ac:	e7a8      	b.n	8009600 <_printf_i+0x150>
 80096ae:	6923      	ldr	r3, [r4, #16]
 80096b0:	4632      	mov	r2, r6
 80096b2:	4649      	mov	r1, r9
 80096b4:	4640      	mov	r0, r8
 80096b6:	47d0      	blx	sl
 80096b8:	3001      	adds	r0, #1
 80096ba:	d0ab      	beq.n	8009614 <_printf_i+0x164>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	079b      	lsls	r3, r3, #30
 80096c0:	d413      	bmi.n	80096ea <_printf_i+0x23a>
 80096c2:	68e0      	ldr	r0, [r4, #12]
 80096c4:	9b03      	ldr	r3, [sp, #12]
 80096c6:	4298      	cmp	r0, r3
 80096c8:	bfb8      	it	lt
 80096ca:	4618      	movlt	r0, r3
 80096cc:	e7a4      	b.n	8009618 <_printf_i+0x168>
 80096ce:	2301      	movs	r3, #1
 80096d0:	4632      	mov	r2, r6
 80096d2:	4649      	mov	r1, r9
 80096d4:	4640      	mov	r0, r8
 80096d6:	47d0      	blx	sl
 80096d8:	3001      	adds	r0, #1
 80096da:	d09b      	beq.n	8009614 <_printf_i+0x164>
 80096dc:	3501      	adds	r5, #1
 80096de:	68e3      	ldr	r3, [r4, #12]
 80096e0:	9903      	ldr	r1, [sp, #12]
 80096e2:	1a5b      	subs	r3, r3, r1
 80096e4:	42ab      	cmp	r3, r5
 80096e6:	dcf2      	bgt.n	80096ce <_printf_i+0x21e>
 80096e8:	e7eb      	b.n	80096c2 <_printf_i+0x212>
 80096ea:	2500      	movs	r5, #0
 80096ec:	f104 0619 	add.w	r6, r4, #25
 80096f0:	e7f5      	b.n	80096de <_printf_i+0x22e>
 80096f2:	bf00      	nop
 80096f4:	08009875 	.word	0x08009875
 80096f8:	08009886 	.word	0x08009886

080096fc <__retarget_lock_acquire_recursive>:
 80096fc:	4770      	bx	lr

080096fe <__retarget_lock_release_recursive>:
 80096fe:	4770      	bx	lr

08009700 <memcpy>:
 8009700:	440a      	add	r2, r1
 8009702:	4291      	cmp	r1, r2
 8009704:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009708:	d100      	bne.n	800970c <memcpy+0xc>
 800970a:	4770      	bx	lr
 800970c:	b510      	push	{r4, lr}
 800970e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009716:	4291      	cmp	r1, r2
 8009718:	d1f9      	bne.n	800970e <memcpy+0xe>
 800971a:	bd10      	pop	{r4, pc}

0800971c <memmove>:
 800971c:	4288      	cmp	r0, r1
 800971e:	b510      	push	{r4, lr}
 8009720:	eb01 0402 	add.w	r4, r1, r2
 8009724:	d902      	bls.n	800972c <memmove+0x10>
 8009726:	4284      	cmp	r4, r0
 8009728:	4623      	mov	r3, r4
 800972a:	d807      	bhi.n	800973c <memmove+0x20>
 800972c:	1e43      	subs	r3, r0, #1
 800972e:	42a1      	cmp	r1, r4
 8009730:	d008      	beq.n	8009744 <memmove+0x28>
 8009732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800973a:	e7f8      	b.n	800972e <memmove+0x12>
 800973c:	4402      	add	r2, r0
 800973e:	4601      	mov	r1, r0
 8009740:	428a      	cmp	r2, r1
 8009742:	d100      	bne.n	8009746 <memmove+0x2a>
 8009744:	bd10      	pop	{r4, pc}
 8009746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800974a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800974e:	e7f7      	b.n	8009740 <memmove+0x24>

08009750 <_realloc_r>:
 8009750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009752:	4607      	mov	r7, r0
 8009754:	4614      	mov	r4, r2
 8009756:	460e      	mov	r6, r1
 8009758:	b921      	cbnz	r1, 8009764 <_realloc_r+0x14>
 800975a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800975e:	4611      	mov	r1, r2
 8009760:	f7ff bc46 	b.w	8008ff0 <_malloc_r>
 8009764:	b922      	cbnz	r2, 8009770 <_realloc_r+0x20>
 8009766:	f7ff fbf3 	bl	8008f50 <_free_r>
 800976a:	4625      	mov	r5, r4
 800976c:	4628      	mov	r0, r5
 800976e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009770:	f000 f814 	bl	800979c <_malloc_usable_size_r>
 8009774:	42a0      	cmp	r0, r4
 8009776:	d20f      	bcs.n	8009798 <_realloc_r+0x48>
 8009778:	4621      	mov	r1, r4
 800977a:	4638      	mov	r0, r7
 800977c:	f7ff fc38 	bl	8008ff0 <_malloc_r>
 8009780:	4605      	mov	r5, r0
 8009782:	2800      	cmp	r0, #0
 8009784:	d0f2      	beq.n	800976c <_realloc_r+0x1c>
 8009786:	4631      	mov	r1, r6
 8009788:	4622      	mov	r2, r4
 800978a:	f7ff ffb9 	bl	8009700 <memcpy>
 800978e:	4631      	mov	r1, r6
 8009790:	4638      	mov	r0, r7
 8009792:	f7ff fbdd 	bl	8008f50 <_free_r>
 8009796:	e7e9      	b.n	800976c <_realloc_r+0x1c>
 8009798:	4635      	mov	r5, r6
 800979a:	e7e7      	b.n	800976c <_realloc_r+0x1c>

0800979c <_malloc_usable_size_r>:
 800979c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097a0:	1f18      	subs	r0, r3, #4
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	bfbc      	itt	lt
 80097a6:	580b      	ldrlt	r3, [r1, r0]
 80097a8:	18c0      	addlt	r0, r0, r3
 80097aa:	4770      	bx	lr

080097ac <_init>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	bf00      	nop
 80097b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b2:	bc08      	pop	{r3}
 80097b4:	469e      	mov	lr, r3
 80097b6:	4770      	bx	lr

080097b8 <_fini>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	bf00      	nop
 80097bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097be:	bc08      	pop	{r3}
 80097c0:	469e      	mov	lr, r3
 80097c2:	4770      	bx	lr
