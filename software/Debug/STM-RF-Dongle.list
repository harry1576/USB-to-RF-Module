
STM-RF-Dongle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08009d98  08009d98  00019d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e7c  08009e7c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08009e7c  08009e7c  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e7c  08009e7c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e7c  08009e7c  00019e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e80  08009e80  00019e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000112c  200001f4  0800a078  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20001320  0800a078  00021320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd6c  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039bf  00000000  00000000  0003df90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00041950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  000429d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023686  00000000  00000000  000438c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013857  00000000  00000000  00066f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4a84  00000000  00000000  0007a7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f229  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ac  00000000  00000000  0013f27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d80 	.word	0x08009d80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08009d80 	.word	0x08009d80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b0a5      	sub	sp, #148	; 0x94
 8000284:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 ff66 	bl	8001156 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f89b 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f959 	bl	8000544 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000292:	f000 f919 	bl	80004c8 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 8000296:	f008 fb6d 	bl	8008974 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(GPIOB, GPIO_PIN_6, GPIO_PIN_7, hspi3);
 800029a:	4c45      	ldr	r4, [pc, #276]	; (80003b0 <main+0x130>)
 800029c:	4668      	mov	r0, sp
 800029e:	1d23      	adds	r3, r4, #4
 80002a0:	2260      	movs	r2, #96	; 0x60
 80002a2:	4619      	mov	r1, r3
 80002a4:	f009 f936 	bl	8009514 <memcpy>
 80002a8:	6823      	ldr	r3, [r4, #0]
 80002aa:	2280      	movs	r2, #128	; 0x80
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	4841      	ldr	r0, [pc, #260]	; (80003b4 <main+0x134>)
 80002b0:	f000 fad6 	bl	8000860 <NRF24_begin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2101      	movs	r1, #1
 80002b8:	483e      	ldr	r0, [pc, #248]	; (80003b4 <main+0x134>)
 80002ba:	f001 fa61 	bl	8001780 <HAL_GPIO_WritePin>
  uint64_t txPipeAddress = 0x11223344AA;
 80002be:	a33a      	add	r3, pc, #232	; (adr r3, 80003a8 <main+0x128>)
 80002c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  uint8_t count = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  char myTxData[32] = "Hello World!";
 80002ce:	4b3a      	ldr	r3, [pc, #232]	; (80003b8 <main+0x138>)
 80002d0:	1d3c      	adds	r4, r7, #4
 80002d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d4:	c407      	stmia	r4!, {r0, r1, r2}
 80002d6:	7023      	strb	r3, [r4, #0]
 80002d8:	f107 0311 	add.w	r3, r7, #17
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	f8c3 200f 	str.w	r2, [r3, #15]


  NRF24_stopListening();
 80002ea:	f000 fb97 	bl	8000a1c <NRF24_stopListening>
  NRF24_openWritingPipe(txPipeAddress);
 80002ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80002f2:	f000 fbf3 	bl	8000adc <NRF24_openWritingPipe>
  NRF24_setAutoAck(false);
 80002f6:	2000      	movs	r0, #0
 80002f8:	f000 fc7c 	bl	8000bf4 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 80002fc:	2034      	movs	r0, #52	; 0x34
 80002fe:	f000 fc2c 	bl	8000b5a <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8000302:	2020      	movs	r0, #32
 8000304:	f000 fc3e 	bl	8000b84 <NRF24_setPayloadSize>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	if(NRF24_write(myTxData,32) == 1)
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2120      	movs	r1, #32
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fb91 	bl	8000a34 <NRF24_write>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d021      	beq.n	800035c <main+0xdc>
	{
		count = 1;
 8000318:	2301      	movs	r3, #1
 800031a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		sprintf(txBuffer,"%u\r\n",count);
 800031e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000322:	461a      	mov	r2, r3
 8000324:	4925      	ldr	r1, [pc, #148]	; (80003bc <main+0x13c>)
 8000326:	4826      	ldr	r0, [pc, #152]	; (80003c0 <main+0x140>)
 8000328:	f009 f9c4 	bl	80096b4 <siprintf>

		if(CDC_Transmit_FS((uint8_t *) txBuffer,strlen(txBuffer)) == 1)
 800032c:	4824      	ldr	r0, [pc, #144]	; (80003c0 <main+0x140>)
 800032e:	f7ff ff4f 	bl	80001d0 <strlen>
 8000332:	4603      	mov	r3, r0
 8000334:	b29b      	uxth	r3, r3
 8000336:	4619      	mov	r1, r3
 8000338:	4821      	ldr	r0, [pc, #132]	; (80003c0 <main+0x140>)
 800033a:	f008 fbef 	bl	8008b1c <CDC_Transmit_FS>
 800033e:	4603      	mov	r3, r0
 8000340:	2b01      	cmp	r3, #1
 8000342:	d105      	bne.n	8000350 <main+0xd0>
		{
	   		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000344:	2201      	movs	r2, #1
 8000346:	2101      	movs	r1, #1
 8000348:	481a      	ldr	r0, [pc, #104]	; (80003b4 <main+0x134>)
 800034a:	f001 fa19 	bl	8001780 <HAL_GPIO_WritePin>
 800034e:	e026      	b.n	800039e <main+0x11e>
	   	}
	   	else
	   	{
	   		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
 8000350:	2200      	movs	r2, #0
 8000352:	2101      	movs	r1, #1
 8000354:	4817      	ldr	r0, [pc, #92]	; (80003b4 <main+0x134>)
 8000356:	f001 fa13 	bl	8001780 <HAL_GPIO_WritePin>
 800035a:	e020      	b.n	800039e <main+0x11e>
	   	}
	}
	else
	{
		count = 2;
 800035c:	2302      	movs	r3, #2
 800035e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		sprintf(txBuffer,"%u\r\n",count);
 8000362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000366:	461a      	mov	r2, r3
 8000368:	4914      	ldr	r1, [pc, #80]	; (80003bc <main+0x13c>)
 800036a:	4815      	ldr	r0, [pc, #84]	; (80003c0 <main+0x140>)
 800036c:	f009 f9a2 	bl	80096b4 <siprintf>

		if(CDC_Transmit_FS((uint8_t *) txBuffer,strlen(txBuffer)) == 1)
 8000370:	4813      	ldr	r0, [pc, #76]	; (80003c0 <main+0x140>)
 8000372:	f7ff ff2d 	bl	80001d0 <strlen>
 8000376:	4603      	mov	r3, r0
 8000378:	b29b      	uxth	r3, r3
 800037a:	4619      	mov	r1, r3
 800037c:	4810      	ldr	r0, [pc, #64]	; (80003c0 <main+0x140>)
 800037e:	f008 fbcd 	bl	8008b1c <CDC_Transmit_FS>
 8000382:	4603      	mov	r3, r0
 8000384:	2b01      	cmp	r3, #1
 8000386:	d105      	bne.n	8000394 <main+0x114>
		{
	   		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000388:	2201      	movs	r2, #1
 800038a:	2101      	movs	r1, #1
 800038c:	4809      	ldr	r0, [pc, #36]	; (80003b4 <main+0x134>)
 800038e:	f001 f9f7 	bl	8001780 <HAL_GPIO_WritePin>
 8000392:	e004      	b.n	800039e <main+0x11e>
	   	}
	   	else
	   	{
	   		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
 8000394:	2200      	movs	r2, #0
 8000396:	2101      	movs	r1, #1
 8000398:	4806      	ldr	r0, [pc, #24]	; (80003b4 <main+0x134>)
 800039a:	f001 f9f1 	bl	8001780 <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);

    //HAL_Delay(20);
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
    HAL_Delay(500);
 800039e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a2:	f000 ff4d 	bl	8001240 <HAL_Delay>
	if(NRF24_write(myTxData,32) == 1)
 80003a6:	e7af      	b.n	8000308 <main+0x88>
 80003a8:	223344aa 	.word	0x223344aa
 80003ac:	00000011 	.word	0x00000011
 80003b0:	20000294 	.word	0x20000294
 80003b4:	48000400 	.word	0x48000400
 80003b8:	08009da0 	.word	0x08009da0
 80003bc:	08009d98 	.word	0x08009d98
 80003c0:	20000338 	.word	0x20000338

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b0ac      	sub	sp, #176	; 0xb0
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003ce:	2244      	movs	r2, #68	; 0x44
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f009 f8ac 	bl	8009530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2254      	movs	r2, #84	; 0x54
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f009 f89e 	bl	8009530 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003f4:	2310      	movs	r3, #16
 80003f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003f8:	2301      	movs	r3, #1
 80003fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000404:	2360      	movs	r3, #96	; 0x60
 8000406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040a:	2302      	movs	r3, #2
 800040c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000410:	2301      	movs	r3, #1
 8000412:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000416:	2301      	movs	r3, #1
 8000418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800041c:	2328      	movs	r3, #40	; 0x28
 800041e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000422:	2307      	movs	r3, #7
 8000424:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000428:	2302      	movs	r3, #2
 800042a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800042e:	2302      	movs	r3, #2
 8000430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000434:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000438:	4618      	mov	r0, r3
 800043a:	f002 fdd1 	bl	8002fe0 <HAL_RCC_OscConfig>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000444:	f000 f8ca 	bl	80005dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000448:	230f      	movs	r3, #15
 800044a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044c:	2303      	movs	r3, #3
 800044e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800045c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000460:	2104      	movs	r1, #4
 8000462:	4618      	mov	r0, r3
 8000464:	f003 f9dc 	bl	8003820 <HAL_RCC_ClockConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800046e:	f000 f8b5 	bl	80005dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000476:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000478:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800047c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800047e:	2301      	movs	r3, #1
 8000480:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000482:	2301      	movs	r3, #1
 8000484:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000486:	2318      	movs	r3, #24
 8000488:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800048a:	2307      	movs	r3, #7
 800048c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800048e:	2302      	movs	r3, #2
 8000490:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000492:	2302      	movs	r3, #2
 8000494:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000496:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800049a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 fb8c 	bl	8003bbc <HAL_RCCEx_PeriphCLKConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0xea>
  {
    Error_Handler();
 80004aa:	f000 f897 	bl	80005dc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004b2:	f002 fd2f 	bl	8002f14 <HAL_PWREx_ControlVoltageScaling>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80004bc:	f000 f88e 	bl	80005dc <Error_Handler>
  }
}
 80004c0:	bf00      	nop
 80004c2:	37b0      	adds	r7, #176	; 0xb0
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <MX_SPI3_Init+0x74>)
 80004ce:	4a1c      	ldr	r2, [pc, #112]	; (8000540 <MX_SPI3_Init+0x78>)
 80004d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80004d2:	4b1a      	ldr	r3, [pc, #104]	; (800053c <MX_SPI3_Init+0x74>)
 80004d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80004da:	4b18      	ldr	r3, [pc, #96]	; (800053c <MX_SPI3_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_5BIT;
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <MX_SPI3_Init+0x74>)
 80004e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004e6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_SPI3_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_SPI3_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_SPI3_Init+0x74>)
 80004f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_SPI3_Init+0x74>)
 80004fe:	2228      	movs	r2, #40	; 0x28
 8000500:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_SPI3_Init+0x74>)
 8000504:	2200      	movs	r2, #0
 8000506:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_SPI3_Init+0x74>)
 800050a:	2200      	movs	r2, #0
 800050c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_SPI3_Init+0x74>)
 8000510:	2200      	movs	r2, #0
 8000512:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_SPI3_Init+0x74>)
 8000516:	2207      	movs	r2, #7
 8000518:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_SPI3_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_SPI3_Init+0x74>)
 8000522:	2208      	movs	r2, #8
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_SPI3_Init+0x74>)
 8000528:	f003 fe2e 	bl	8004188 <HAL_SPI_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000532:	f000 f853 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000294 	.word	0x20000294
 8000540:	40003c00 	.word	0x40003c00

08000544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <MX_GPIO_Init+0x90>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a1d      	ldr	r2, [pc, #116]	; (80005d4 <MX_GPIO_Init+0x90>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <MX_GPIO_Init+0x90>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_GPIO_Init+0x90>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <MX_GPIO_Init+0x90>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_GPIO_Init+0x90>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	21c3      	movs	r1, #195	; 0xc3
 800058e:	4812      	ldr	r0, [pc, #72]	; (80005d8 <MX_GPIO_Init+0x94>)
 8000590:	f001 f8f6 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin NRF_CS_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin;
 8000594:	23c3      	movs	r3, #195	; 0xc3
 8000596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	4619      	mov	r1, r3
 80005aa:	480b      	ldr	r0, [pc, #44]	; (80005d8 <MX_GPIO_Init+0x94>)
 80005ac:	f000 ff7e 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80005b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c8:	f000 ff70 	bl	80014ac <HAL_GPIO_Init>

}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000400 	.word	0x48000400

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <Error_Handler+0x8>
	...

080005e8 <NRF24_DelayMicroSeconds>:
//Debugging UART handle

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <NRF24_DelayMicroSeconds+0x3c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <NRF24_DelayMicroSeconds+0x40>)
 80005fa:	fba2 2303 	umull	r2, r3, r2, r3
 80005fe:	0c9a      	lsrs	r2, r3, #18
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	fb02 f303 	mul.w	r3, r2, r3
 8000606:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000608:	bf00      	nop
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	1e5a      	subs	r2, r3, #1
 800060e:	60fa      	str	r2, [r7, #12]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1fa      	bne.n	800060a <NRF24_DelayMicroSeconds+0x22>
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000000 	.word	0x20000000
 8000628:	165e9f81 	.word	0x165e9f81

0800062c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d008      	beq.n	800064c <NRF24_csn+0x20>
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <NRF24_csn+0x38>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <NRF24_csn+0x3c>)
 8000640:	8811      	ldrh	r1, [r2, #0]
 8000642:	2201      	movs	r2, #1
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f89b 	bl	8001780 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800064a:	e007      	b.n	800065c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <NRF24_csn+0x38>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a05      	ldr	r2, [pc, #20]	; (8000668 <NRF24_csn+0x3c>)
 8000652:	8811      	ldrh	r1, [r2, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f892 	bl	8001780 <HAL_GPIO_WritePin>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000218 	.word	0x20000218
 8000668:	2000021c 	.word	0x2000021c

0800066c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d008      	beq.n	800068c <NRF24_ce+0x20>
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <NRF24_ce+0x38>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <NRF24_ce+0x3c>)
 8000680:	8811      	ldrh	r1, [r2, #0]
 8000682:	2201      	movs	r2, #1
 8000684:	4618      	mov	r0, r3
 8000686:	f001 f87b 	bl	8001780 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800068a:	e007      	b.n	800069c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <NRF24_ce+0x38>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <NRF24_ce+0x3c>)
 8000692:	8811      	ldrh	r1, [r2, #0]
 8000694:	2200      	movs	r2, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f872 	bl	8001780 <HAL_GPIO_WritePin>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000218 	.word	0x20000218
 80006a8:	2000021e 	.word	0x2000021e

080006ac <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80006b6:	2000      	movs	r0, #0
 80006b8:	f7ff ffb8 	bl	800062c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	f003 031f 	and.w	r3, r3, #31
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006c6:	f107 010c 	add.w	r1, r7, #12
 80006ca:	2364      	movs	r3, #100	; 0x64
 80006cc:	2201      	movs	r2, #1
 80006ce:	480a      	ldr	r0, [pc, #40]	; (80006f8 <NRF24_read_register+0x4c>)
 80006d0:	f003 fdfd 	bl	80042ce <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	1c59      	adds	r1, r3, #1
 80006da:	2364      	movs	r3, #100	; 0x64
 80006dc:	2201      	movs	r2, #1
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <NRF24_read_register+0x4c>)
 80006e0:	f003 ff63 	bl	80045aa <HAL_SPI_Receive>
	retData = spiBuf[1];
 80006e4:	7b7b      	ldrb	r3, [r7, #13]
 80006e6:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f7ff ff9f 	bl	800062c <NRF24_csn>
	return retData;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000220 	.word	0x20000220

080006fc <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	4613      	mov	r3, r2
 800070a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff ff8d 	bl	800062c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 031f 	and.w	r3, r3, #31
 8000718:	b2db      	uxtb	r3, r3
 800071a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800071c:	f107 010c 	add.w	r1, r7, #12
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	2201      	movs	r2, #1
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <NRF24_read_registerN+0x4c>)
 8000726:	f003 fdd2 	bl	80042ce <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	b29a      	uxth	r2, r3
 800072e:	2364      	movs	r3, #100	; 0x64
 8000730:	6839      	ldr	r1, [r7, #0]
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <NRF24_read_registerN+0x4c>)
 8000734:	f003 ff39 	bl	80045aa <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ff77 	bl	800062c <NRF24_csn>
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000220 	.word	0x20000220

0800074c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff ff65 	bl	800062c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	b2db      	uxtb	r3, r3
 800076a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000770:	f107 010c 	add.w	r1, r7, #12
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	2202      	movs	r2, #2
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <NRF24_write_register+0x40>)
 800077a:	f003 fda8 	bl	80042ce <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff ff54 	bl	800062c <NRF24_csn>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000220 	.word	0x20000220

08000790 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	71fb      	strb	r3, [r7, #7]
 800079c:	4613      	mov	r3, r2
 800079e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ff43 	bl	800062c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80007b0:	f107 010c 	add.w	r1, r7, #12
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	2201      	movs	r2, #1
 80007b8:	4808      	ldr	r0, [pc, #32]	; (80007dc <NRF24_write_registerN+0x4c>)
 80007ba:	f003 fd88 	bl	80042ce <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	2364      	movs	r3, #100	; 0x64
 80007c4:	6839      	ldr	r1, [r7, #0]
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <NRF24_write_registerN+0x4c>)
 80007c8:	f003 fd81 	bl	80042ce <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ff2d 	bl	800062c <NRF24_csn>
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000220 	.word	0x20000220

080007e0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff ff1d 	bl	800062c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80007f2:	23a0      	movs	r3, #160	; 0xa0
 80007f4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80007f6:	f107 010f 	add.w	r1, r7, #15
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	2201      	movs	r2, #1
 80007fe:	4808      	ldr	r0, [pc, #32]	; (8000820 <NRF24_write_payload+0x40>)
 8000800:	f003 fd65 	bl	80042ce <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	b29a      	uxth	r2, r3
 8000808:	2364      	movs	r3, #100	; 0x64
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <NRF24_write_payload+0x40>)
 800080e:	f003 fd5e 	bl	80042ce <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ff0a 	bl	800062c <NRF24_csn>
}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000220 	.word	0x20000220

08000824 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000828:	21ff      	movs	r1, #255	; 0xff
 800082a:	20e1      	movs	r0, #225	; 0xe1
 800082c:	f7ff ff8e 	bl	800074c <NRF24_write_register>
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000838:	21ff      	movs	r1, #255	; 0xff
 800083a:	20e2      	movs	r0, #226	; 0xe2
 800083c:	f7ff ff86 	bl	800074c <NRF24_write_register>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800084a:	2007      	movs	r0, #7
 800084c:	f7ff ff2e 	bl	80006ac <NRF24_read_register>
 8000850:	4603      	mov	r3, r0
 8000852:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000854:	79fb      	ldrb	r3, [r7, #7]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000860:	b082      	sub	sp, #8
 8000862:	b580      	push	{r7, lr}
 8000864:	b084      	sub	sp, #16
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	460b      	mov	r3, r1
 800086e:	807b      	strh	r3, [r7, #2]
 8000870:	4613      	mov	r3, r2
 8000872:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000874:	4b65      	ldr	r3, [pc, #404]	; (8000a0c <NRF24_begin+0x1ac>)
 8000876:	4618      	mov	r0, r3
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	2264      	movs	r2, #100	; 0x64
 800087e:	4619      	mov	r1, r3
 8000880:	f008 fe48 	bl	8009514 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000884:	4a62      	ldr	r2, [pc, #392]	; (8000a10 <NRF24_begin+0x1b0>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800088a:	4a62      	ldr	r2, [pc, #392]	; (8000a14 <NRF24_begin+0x1b4>)
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000890:	4a61      	ldr	r2, [pc, #388]	; (8000a18 <NRF24_begin+0x1b8>)
 8000892:	883b      	ldrh	r3, [r7, #0]
 8000894:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000896:	2001      	movs	r0, #1
 8000898:	f7ff fec8 	bl	800062c <NRF24_csn>
	NRF24_ce(0);
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fee5 	bl	800066c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80008a2:	2005      	movs	r0, #5
 80008a4:	f000 fccc 	bl	8001240 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80008a8:	2108      	movs	r1, #8
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ff4e 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80008b0:	213f      	movs	r1, #63	; 0x3f
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff ff4a 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80008b8:	2103      	movs	r1, #3
 80008ba:	2002      	movs	r0, #2
 80008bc:	f7ff ff46 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80008c0:	2103      	movs	r1, #3
 80008c2:	2003      	movs	r0, #3
 80008c4:	f7ff ff42 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80008c8:	2103      	movs	r1, #3
 80008ca:	2004      	movs	r0, #4
 80008cc:	f7ff ff3e 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80008d0:	2102      	movs	r1, #2
 80008d2:	2005      	movs	r0, #5
 80008d4:	f7ff ff3a 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80008d8:	210f      	movs	r1, #15
 80008da:	2006      	movs	r0, #6
 80008dc:	f7ff ff36 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80008e0:	210e      	movs	r1, #14
 80008e2:	2007      	movs	r0, #7
 80008e4:	f7ff ff32 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80008e8:	2100      	movs	r1, #0
 80008ea:	2008      	movs	r0, #8
 80008ec:	f7ff ff2e 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80008f0:	2100      	movs	r1, #0
 80008f2:	2009      	movs	r0, #9
 80008f4:	f7ff ff2a 	bl	800074c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80008f8:	23e7      	movs	r3, #231	; 0xe7
 80008fa:	733b      	strb	r3, [r7, #12]
 80008fc:	23e7      	movs	r3, #231	; 0xe7
 80008fe:	72fb      	strb	r3, [r7, #11]
 8000900:	23e7      	movs	r3, #231	; 0xe7
 8000902:	72bb      	strb	r3, [r7, #10]
 8000904:	23e7      	movs	r3, #231	; 0xe7
 8000906:	727b      	strb	r3, [r7, #9]
 8000908:	23e7      	movs	r3, #231	; 0xe7
 800090a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	2205      	movs	r2, #5
 8000912:	4619      	mov	r1, r3
 8000914:	200a      	movs	r0, #10
 8000916:	f7ff ff3b 	bl	8000790 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800091a:	23c2      	movs	r3, #194	; 0xc2
 800091c:	733b      	strb	r3, [r7, #12]
 800091e:	23c2      	movs	r3, #194	; 0xc2
 8000920:	72fb      	strb	r3, [r7, #11]
 8000922:	23c2      	movs	r3, #194	; 0xc2
 8000924:	72bb      	strb	r3, [r7, #10]
 8000926:	23c2      	movs	r3, #194	; 0xc2
 8000928:	727b      	strb	r3, [r7, #9]
 800092a:	23c2      	movs	r3, #194	; 0xc2
 800092c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	2205      	movs	r2, #5
 8000934:	4619      	mov	r1, r3
 8000936:	200b      	movs	r0, #11
 8000938:	f7ff ff2a 	bl	8000790 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800093c:	21c3      	movs	r1, #195	; 0xc3
 800093e:	200c      	movs	r0, #12
 8000940:	f7ff ff04 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000944:	21c4      	movs	r1, #196	; 0xc4
 8000946:	200d      	movs	r0, #13
 8000948:	f7ff ff00 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800094c:	21c5      	movs	r1, #197	; 0xc5
 800094e:	200e      	movs	r0, #14
 8000950:	f7ff fefc 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000954:	21c6      	movs	r1, #198	; 0xc6
 8000956:	200f      	movs	r0, #15
 8000958:	f7ff fef8 	bl	800074c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800095c:	23e7      	movs	r3, #231	; 0xe7
 800095e:	733b      	strb	r3, [r7, #12]
 8000960:	23e7      	movs	r3, #231	; 0xe7
 8000962:	72fb      	strb	r3, [r7, #11]
 8000964:	23e7      	movs	r3, #231	; 0xe7
 8000966:	72bb      	strb	r3, [r7, #10]
 8000968:	23e7      	movs	r3, #231	; 0xe7
 800096a:	727b      	strb	r3, [r7, #9]
 800096c:	23e7      	movs	r3, #231	; 0xe7
 800096e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	2205      	movs	r2, #5
 8000976:	4619      	mov	r1, r3
 8000978:	2010      	movs	r0, #16
 800097a:	f7ff ff09 	bl	8000790 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800097e:	2100      	movs	r1, #0
 8000980:	2011      	movs	r0, #17
 8000982:	f7ff fee3 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000986:	2100      	movs	r1, #0
 8000988:	2012      	movs	r0, #18
 800098a:	f7ff fedf 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800098e:	2100      	movs	r1, #0
 8000990:	2013      	movs	r0, #19
 8000992:	f7ff fedb 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000996:	2100      	movs	r1, #0
 8000998:	2014      	movs	r0, #20
 800099a:	f7ff fed7 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800099e:	2100      	movs	r1, #0
 80009a0:	2015      	movs	r0, #21
 80009a2:	f7ff fed3 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80009a6:	2100      	movs	r1, #0
 80009a8:	2016      	movs	r0, #22
 80009aa:	f7ff fecf 	bl	800074c <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80009ae:	f000 fa87 	bl	8000ec0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80009b2:	2100      	movs	r1, #0
 80009b4:	201c      	movs	r0, #28
 80009b6:	f7ff fec9 	bl	800074c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80009ba:	2100      	movs	r1, #0
 80009bc:	201d      	movs	r0, #29
 80009be:	f7ff fec5 	bl	800074c <NRF24_write_register>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80009c2:	210f      	movs	r1, #15
 80009c4:	200f      	movs	r0, #15
 80009c6:	f000 f8ad 	bl	8000b24 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80009ca:	2003      	movs	r0, #3
 80009cc:	f000 f927 	bl	8000c1e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f000 f95d 	bl	8000c90 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80009d6:	2002      	movs	r0, #2
 80009d8:	f000 f9a0 	bl	8000d1c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80009dc:	f000 f8f2 	bl	8000bc4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80009e0:	2020      	movs	r0, #32
 80009e2:	f000 f8cf 	bl	8000b84 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 80009e6:	f000 fa62 	bl	8000eae <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80009ea:	204c      	movs	r0, #76	; 0x4c
 80009ec:	f000 f8b5 	bl	8000b5a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80009f0:	f7ff ff18 	bl	8000824 <NRF24_flush_tx>
	NRF24_flush_rx();
 80009f4:	f7ff ff1e 	bl	8000834 <NRF24_flush_rx>

	NRF24_powerDown();
 80009f8:	f000 f9b8 	bl	8000d6c <NRF24_powerDown>

}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a06:	b002      	add	sp, #8
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000220 	.word	0x20000220
 8000a10:	20000218 	.word	0x20000218
 8000a14:	2000021c 	.word	0x2000021c
 8000a18:	2000021e 	.word	0x2000021e

08000a1c <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fe23 	bl	800066c <NRF24_ce>
	NRF24_flush_tx();
 8000a26:	f7ff fefd 	bl	8000824 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000a2a:	f7ff ff03 	bl	8000834 <NRF24_flush_rx>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000a40:	f000 fa35 	bl	8000eae <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	4619      	mov	r1, r3
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 f9ce 	bl	8000dea <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000a4e:	f000 fbeb 	bl	8001228 <HAL_GetTick>
 8000a52:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000a54:	230a      	movs	r3, #10
 8000a56:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000a58:	f107 030d 	add.w	r3, r7, #13
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	2008      	movs	r0, #8
 8000a62:	f7ff fe4b 	bl	80006fc <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000a66:	f7ff feed 	bl	8000844 <NRF24_get_status>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d107      	bne.n	8000a88 <NRF24_write+0x54>
 8000a78:	f000 fbd6 	bl	8001228 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8e7      	bhi.n	8000a58 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000a88:	f107 010b 	add.w	r1, r7, #11
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <NRF24_write+0x90>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f9d8 	bl	8000e48 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000a98:	7b3b      	ldrb	r3, [r7, #12]
 8000a9a:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <NRF24_write+0x90>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d005      	beq.n	8000ab0 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000aa4:	f000 f886 	bl	8000bb4 <NRF24_getDynamicPayloadSize>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <NRF24_write+0x94>)
 8000aae:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8000ab0:	f000 f80c 	bl	8000acc <NRF24_available>
	NRF24_flush_tx();
 8000ab4:	f7ff feb6 	bl	8000824 <NRF24_flush_tx>
	return retStatus;
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000210 	.word	0x20000210
 8000ac8:	20000211 	.word	0x20000211

08000acc <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 f95a 	bl	8000d8a <NRF24_availablePipe>
 8000ad6:	4603      	mov	r3, r0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	bd80      	pop	{r7, pc}

08000adc <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2205      	movs	r2, #5
 8000aea:	4619      	mov	r1, r3
 8000aec:	200a      	movs	r0, #10
 8000aee:	f7ff fe4f 	bl	8000790 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000af2:	463b      	mov	r3, r7
 8000af4:	2205      	movs	r2, #5
 8000af6:	4619      	mov	r1, r3
 8000af8:	2010      	movs	r0, #16
 8000afa:	f7ff fe49 	bl	8000790 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8000afe:	2320      	movs	r3, #32
 8000b00:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <NRF24_openWritingPipe+0x44>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	7bfa      	ldrb	r2, [r7, #15]
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	bf28      	it	cs
 8000b0c:	4613      	movcs	r3, r2
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4619      	mov	r1, r3
 8000b12:	2011      	movs	r0, #17
 8000b14:	f7ff fe1a 	bl	800074c <NRF24_write_register>
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000212 	.word	0x20000212

08000b24 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	460a      	mov	r2, r1
 8000b2e:	71fb      	strb	r3, [r7, #7]
 8000b30:	4613      	mov	r3, r2
 8000b32:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	011b      	lsls	r3, r3, #4
 8000b38:	b25a      	sxtb	r2, r3
 8000b3a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	4313      	orrs	r3, r2
 8000b46:	b25b      	sxtb	r3, r3
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	2004      	movs	r0, #4
 8000b4e:	f7ff fdfd 	bl	800074c <NRF24_write_register>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000b64:	237f      	movs	r3, #127	; 0x7f
 8000b66:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000b68:	7bfa      	ldrb	r2, [r7, #15]
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	bf28      	it	cs
 8000b70:	4613      	movcs	r3, r2
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	4619      	mov	r1, r3
 8000b76:	2005      	movs	r0, #5
 8000b78:	f7ff fde8 	bl	800074c <NRF24_write_register>
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000b8e:	2320      	movs	r3, #32
 8000b90:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000b92:	7bfa      	ldrb	r2, [r7, #15]
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	4293      	cmp	r3, r2
 8000b98:	bf28      	it	cs
 8000b9a:	4613      	movcs	r3, r2
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <NRF24_setPayloadSize+0x2c>)
 8000ba0:	701a      	strb	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000212 	.word	0x20000212

08000bb4 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000bb8:	2060      	movs	r0, #96	; 0x60
 8000bba:	f7ff fd77 	bl	80006ac <NRF24_read_register>
 8000bbe:	4603      	mov	r3, r0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000bc8:	201d      	movs	r0, #29
 8000bca:	f7ff fd6f 	bl	80006ac <NRF24_read_register>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f023 0304 	bic.w	r3, r3, #4
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	201d      	movs	r0, #29
 8000bda:	f7ff fdb7 	bl	800074c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	201c      	movs	r0, #28
 8000be2:	f7ff fdb3 	bl	800074c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000be6:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <NRF24_disableDynamicPayloads+0x2c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000213 	.word	0x20000213

08000bf4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d004      	beq.n	8000c0e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000c04:	213f      	movs	r1, #63	; 0x3f
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fda0 	bl	800074c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000c0c:	e003      	b.n	8000c16 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2001      	movs	r0, #1
 8000c12:	f7ff fd9b 	bl	800074c <NRF24_write_register>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b084      	sub	sp, #16
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c28:	2006      	movs	r0, #6
 8000c2a:	f7ff fd3f 	bl	80006ac <NRF24_read_register>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	f023 0306 	bic.w	r3, r3, #6
 8000c38:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d104      	bne.n	8000c4a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	f043 0306 	orr.w	r3, r3, #6
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e019      	b.n	8000c7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d104      	bne.n	8000c5a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e011      	b.n	8000c7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d104      	bne.n	8000c6a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e009      	b.n	8000c7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d006      	beq.n	8000c7e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	d103      	bne.n	8000c7e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	f043 0306 	orr.w	r3, r3, #6
 8000c7c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	4619      	mov	r1, r3
 8000c82:	2006      	movs	r0, #6
 8000c84:	f7ff fd62 	bl	800074c <NRF24_write_register>
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c9e:	2006      	movs	r0, #6
 8000ca0:	f7ff fd04 	bl	80006ac <NRF24_read_register>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <NRF24_setDataRate+0x88>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000cae:	7bbb      	ldrb	r3, [r7, #14]
 8000cb0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000cb4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d107      	bne.n	8000ccc <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <NRF24_setDataRate+0x88>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	73bb      	strb	r3, [r7, #14]
 8000cca:	e00d      	b.n	8000ce8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d107      	bne.n	8000ce2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <NRF24_setDataRate+0x88>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000cd8:	7bbb      	ldrb	r3, [r7, #14]
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	73bb      	strb	r3, [r7, #14]
 8000ce0:	e002      	b.n	8000ce8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <NRF24_setDataRate+0x88>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	4619      	mov	r1, r3
 8000cec:	2006      	movs	r0, #6
 8000cee:	f7ff fd2d 	bl	800074c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000cf2:	2006      	movs	r0, #6
 8000cf4:	f7ff fcda 	bl	80006ac <NRF24_read_register>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	7bbb      	ldrb	r3, [r7, #14]
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d102      	bne.n	8000d08 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000d02:	2301      	movs	r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	e002      	b.n	8000d0e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <NRF24_setDataRate+0x88>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000214 	.word	0x20000214

08000d1c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff fcc0 	bl	80006ac <NRF24_read_register>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f023 030c 	bic.w	r3, r3, #12
 8000d32:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00f      	beq.n	8000d5a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d104      	bne.n	8000d4a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e007      	b.n	8000d5a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff fcf4 	bl	800074c <NRF24_write_register>
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000d70:	2000      	movs	r0, #0
 8000d72:	f7ff fc9b 	bl	80006ac <NRF24_read_register>
 8000d76:	4603      	mov	r3, r0
 8000d78:	f023 0302 	bic.w	r3, r3, #2
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4619      	mov	r1, r3
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fce3 	bl	800074c <NRF24_write_register>
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000d92:	f7ff fd57 	bl	8000844 <NRF24_get_status>
 8000d96:	4603      	mov	r3, r0
 8000d98:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000daa:	7bbb      	ldrb	r3, [r7, #14]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d017      	beq.n	8000de0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d007      	beq.n	8000dc6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	085b      	lsrs	r3, r3, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000dc6:	2140      	movs	r1, #64	; 0x40
 8000dc8:	2007      	movs	r0, #7
 8000dca:	f7ff fcbf 	bl	800074c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	f003 0320 	and.w	r3, r3, #32
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000dd8:	2120      	movs	r1, #32
 8000dda:	2007      	movs	r0, #7
 8000ddc:	f7ff fcb6 	bl	800074c <NRF24_write_register>
    }
  }
  return result;
 8000de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	460b      	mov	r3, r1
 8000df4:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff fc38 	bl	800066c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fc55 	bl	80006ac <NRF24_read_register>
 8000e02:	4603      	mov	r3, r0
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f023 0301 	bic.w	r3, r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	4619      	mov	r1, r3
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff fc9a 	bl	800074c <NRF24_write_register>
  NRF24_ce(1);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff fc27 	bl	800066c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000e1e:	2096      	movs	r0, #150	; 0x96
 8000e20:	f7ff fbe2 	bl	80005e8 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	4619      	mov	r1, r3
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fcd9 	bl	80007e0 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f7ff fc1c 	bl	800066c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000e34:	200f      	movs	r0, #15
 8000e36:	f7ff fbd7 	bl	80005e8 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fc16 	bl	800066c <NRF24_ce>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000e54:	f7ff fcf6 	bl	8000844 <NRF24_get_status>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e62:	2170      	movs	r1, #112	; 0x70
 8000e64:	2007      	movs	r0, #7
 8000e66:	f7ff fc71 	bl	800074c <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
 8000e6c:	f003 0320 	and.w	r3, r3, #32
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bf14      	ite	ne
 8000e74:	2301      	movne	r3, #1
 8000e76:	2300      	moveq	r3, #0
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
 8000e80:	f003 0310 	and.w	r3, r3, #16
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bf14      	ite	ne
 8000e88:	2301      	movne	r3, #1
 8000e8a:	2300      	moveq	r3, #0
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000e92:	7dfb      	ldrb	r3, [r7, #23]
 8000e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf14      	ite	ne
 8000e9c:	2301      	movne	r3, #1
 8000e9e:	2300      	moveq	r3, #0
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	701a      	strb	r2, [r3, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000eb2:	2170      	movs	r1, #112	; 0x70
 8000eb4:	2007      	movs	r0, #7
 8000eb6:	f7ff fc49 	bl	800074c <NRF24_write_register>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff fbb0 	bl	800062c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000ecc:	2350      	movs	r3, #80	; 0x50
 8000ece:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000ed0:	2373      	movs	r3, #115	; 0x73
 8000ed2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000ed4:	1d39      	adds	r1, r7, #4
 8000ed6:	2364      	movs	r3, #100	; 0x64
 8000ed8:	2202      	movs	r2, #2
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <NRF24_ACTIVATE_cmd+0x30>)
 8000edc:	f003 f9f7 	bl	80042ce <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f7ff fba3 	bl	800062c <NRF24_csn>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000220 	.word	0x20000220

08000ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_MspInit+0x44>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <HAL_MspInit+0x44>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6613      	str	r3, [r2, #96]	; 0x60
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_MspInit+0x44>)
 8000f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_MspInit+0x44>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <HAL_MspInit+0x44>)
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_MspInit+0x44>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000

08000f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_SPI_MspInit+0x7c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d127      	bne.n	8000fae <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f68:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f8e:	2338      	movs	r3, #56	; 0x38
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_SPI_MspInit+0x84>)
 8000faa:	f000 fa7f 	bl	80014ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3728      	adds	r7, #40	; 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40003c00 	.word	0x40003c00
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	48000400 	.word	0x48000400

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8f6 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USB_IRQHandler+0x10>)
 800101e:	f000 fcfb 	bl	8001a18 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000101c 	.word	0x2000101c

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f008 fa20 	bl	80094a0 <__errno>
 8001060:	4603      	mov	r3, r0
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20010000 	.word	0x20010000
 800108c:	00000400 	.word	0x00000400
 8001090:	20000284 	.word	0x20000284
 8001094:	20001320 	.word	0x20001320

08001098 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <SystemInit+0x64>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a16      	ldr	r2, [pc, #88]	; (80010fc <SystemInit+0x64>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <SystemInit+0x68>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <SystemInit+0x68>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <SystemInit+0x68>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <SystemInit+0x68>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <SystemInit+0x68>)
 80010c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <SystemInit+0x68>)
 80010d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <SystemInit+0x68>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a09      	ldr	r2, [pc, #36]	; (8001100 <SystemInit+0x68>)
 80010dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <SystemInit+0x68>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SystemInit+0x64>)
 80010ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ee:	609a      	str	r2, [r3, #8]
#endif
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00
 8001100:	40021000 	.word	0x40021000

08001104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800113c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001108:	f7ff ffc6 	bl	8001098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800110c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800110e:	e003      	b.n	8001118 <LoopCopyDataInit>

08001110 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001112:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001114:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001116:	3104      	adds	r1, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001118:	480a      	ldr	r0, [pc, #40]	; (8001144 <LoopForever+0xa>)
	ldr	r3, =_edata
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <LoopForever+0xe>)
	adds	r2, r0, r1
 800111c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800111e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001120:	d3f6      	bcc.n	8001110 <CopyDataInit>
	ldr	r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001124:	e002      	b.n	800112c <LoopFillZerobss>

08001126 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001126:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001128:	f842 3b04 	str.w	r3, [r2], #4

0800112c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <LoopForever+0x16>)
	cmp	r2, r3
 800112e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001130:	d3f9      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001132:	f008 f9bb 	bl	80094ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001136:	f7ff f8a3 	bl	8000280 <main>

0800113a <LoopForever>:

LoopForever:
    b LoopForever
 800113a:	e7fe      	b.n	800113a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800113c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001140:	08009e84 	.word	0x08009e84
	ldr	r0, =_sdata
 8001144:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001148:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 800114c:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8001150:	20001320 	.word	0x20001320

08001154 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC1_IRQHandler>

08001156 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 f961 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001166:	2000      	movs	r0, #0
 8001168:	f000 f80e 	bl	8001188 <HAL_InitTick>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	e001      	b.n	800117c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001178:	f7ff febc 	bl	8000ef4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800117c:	79fb      	ldrb	r3, [r7, #7]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <HAL_InitTick+0x6c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d023      	beq.n	80011e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_InitTick+0x70>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <HAL_InitTick+0x6c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f96d 	bl	8001492 <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10f      	bne.n	80011de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d809      	bhi.n	80011d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c4:	2200      	movs	r2, #0
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011cc:	f000 f937 	bl	800143e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d0:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_InitTick+0x74>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e007      	b.n	80011e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e004      	b.n	80011e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	73fb      	strb	r3, [r7, #15]
 80011e2:	e001      	b.n	80011e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000004 	.word	0x20000004

08001200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x20>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_IncTick+0x24>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008
 8001224:	20000378 	.word	0x20000378

08001228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_GetTick+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000378 	.word	0x20000378

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff ffee 	bl	8001228 <HAL_GetTick>
 800124c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001266:	bf00      	nop
 8001268:	f7ff ffde 	bl	8001228 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001408:	f7ff ff8e 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff29 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001450:	f7ff ff3e 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001454:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f7ff ff8e 	bl	800137c <NVIC_EncodePriority>
 8001460:	4602      	mov	r2, r0
 8001462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff5d 	bl	8001328 <__NVIC_SetPriority>
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff31 	bl	80012ec <__NVIC_EnableIRQ>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffa2 	bl	80013e4 <SysTick_Config>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ba:	e148      	b.n	800174e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2101      	movs	r1, #1
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	4013      	ands	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 813a 	beq.w	8001748 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d00b      	beq.n	80014f4 <HAL_GPIO_Init+0x48>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d007      	beq.n	80014f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e8:	2b11      	cmp	r3, #17
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b12      	cmp	r3, #18
 80014f2:	d130      	bne.n	8001556 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800152a:	2201      	movs	r2, #1
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	f003 0201 	and.w	r2, r3, #1
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	2203      	movs	r2, #3
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0xea>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b12      	cmp	r3, #18
 8001594:	d123      	bne.n	80015de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	08da      	lsrs	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3208      	adds	r2, #8
 800159e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	691a      	ldr	r2, [r3, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	6939      	ldr	r1, [r7, #16]
 80015da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0203 	and.w	r2, r3, #3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8094 	beq.w	8001748 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001620:	4b52      	ldr	r3, [pc, #328]	; (800176c <HAL_GPIO_Init+0x2c0>)
 8001622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001624:	4a51      	ldr	r2, [pc, #324]	; (800176c <HAL_GPIO_Init+0x2c0>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6613      	str	r3, [r2, #96]	; 0x60
 800162c:	4b4f      	ldr	r3, [pc, #316]	; (800176c <HAL_GPIO_Init+0x2c0>)
 800162e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001638:	4a4d      	ldr	r2, [pc, #308]	; (8001770 <HAL_GPIO_Init+0x2c4>)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001662:	d00d      	beq.n	8001680 <HAL_GPIO_Init+0x1d4>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a43      	ldr	r2, [pc, #268]	; (8001774 <HAL_GPIO_Init+0x2c8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d007      	beq.n	800167c <HAL_GPIO_Init+0x1d0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a42      	ldr	r2, [pc, #264]	; (8001778 <HAL_GPIO_Init+0x2cc>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d101      	bne.n	8001678 <HAL_GPIO_Init+0x1cc>
 8001674:	2302      	movs	r3, #2
 8001676:	e004      	b.n	8001682 <HAL_GPIO_Init+0x1d6>
 8001678:	2307      	movs	r3, #7
 800167a:	e002      	b.n	8001682 <HAL_GPIO_Init+0x1d6>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <HAL_GPIO_Init+0x1d6>
 8001680:	2300      	movs	r3, #0
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	f002 0203 	and.w	r2, r2, #3
 8001688:	0092      	lsls	r2, r2, #2
 800168a:	4093      	lsls	r3, r2
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001692:	4937      	ldr	r1, [pc, #220]	; (8001770 <HAL_GPIO_Init+0x2c4>)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016a0:	4b36      	ldr	r3, [pc, #216]	; (800177c <HAL_GPIO_Init+0x2d0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016c4:	4a2d      	ldr	r2, [pc, #180]	; (800177c <HAL_GPIO_Init+0x2d0>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <HAL_GPIO_Init+0x2d0>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ee:	4a23      	ldr	r2, [pc, #140]	; (800177c <HAL_GPIO_Init+0x2d0>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_GPIO_Init+0x2d0>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001718:	4a18      	ldr	r2, [pc, #96]	; (800177c <HAL_GPIO_Init+0x2d0>)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_GPIO_Init+0x2d0>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <HAL_GPIO_Init+0x2d0>)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	f47f aeaf 	bne.w	80014bc <HAL_GPIO_Init+0x10>
  }
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40021000 	.word	0x40021000
 8001770:	40010000 	.word	0x40010000
 8001774:	48000400 	.word	0x48000400
 8001778:	48000800 	.word	0x48000800
 800177c:	40010400 	.word	0x40010400

08001780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
 800178c:	4613      	mov	r3, r2
 800178e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001790:	787b      	ldrb	r3, [r7, #1]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b2:	b08b      	sub	sp, #44	; 0x2c
 80017b4:	af06      	add	r7, sp, #24
 80017b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e104      	b.n	80019cc <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f007 fafa 	bl	8008dd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2203      	movs	r2, #3
 80017e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 fbfd 	bl	8004fe8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	687e      	ldr	r6, [r7, #4]
 80017f6:	466d      	mov	r5, sp
 80017f8:	f106 0410 	add.w	r4, r6, #16
 80017fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	602b      	str	r3, [r5, #0]
 8001804:	1d33      	adds	r3, r6, #4
 8001806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f003 fbc5 	bl	8004f98 <USB_CoreInit>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2202      	movs	r2, #2
 8001818:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0d5      	b.n	80019cc <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f003 fbf9 	bl	800501e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e04c      	b.n	80018cc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	3301      	adds	r3, #1
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	b298      	uxth	r0, r3
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	3336      	adds	r3, #54	; 0x36
 8001870:	4602      	mov	r2, r0
 8001872:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	3303      	adds	r3, #3
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	3338      	adds	r3, #56	; 0x38
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	333c      	adds	r3, #60	; 0x3c
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	3340      	adds	r3, #64	; 0x40
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	3301      	adds	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3ad      	bcc.n	8001832 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	e044      	b.n	8001966 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	440b      	add	r3, r1
 800192c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	3301      	adds	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	d3b5      	bcc.n	80018dc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	687e      	ldr	r6, [r7, #4]
 8001978:	466d      	mov	r5, sp
 800197a:	f106 0410 	add.w	r4, r6, #16
 800197e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	602b      	str	r3, [r5, #0]
 8001986:	1d33      	adds	r3, r6, #4
 8001988:	cb0e      	ldmia	r3, {r1, r2, r3}
 800198a:	6838      	ldr	r0, [r7, #0]
 800198c:	f003 fb54 	bl	8005038 <USB_DevInit>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2202      	movs	r2, #2
 800199a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e014      	b.n	80019cc <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d102      	bne.n	80019c0 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f001 fa71 	bl	8002ea2 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f005 fb0d 	bl	8006fe4 <USB_DevDisconnect>

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_PCD_Start+0x16>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e012      	b.n	8001a10 <HAL_PCD_Start+0x3c>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fadf 	bl	8004fba <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f005 fad8 	bl	8006fb6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f005 faf2 	bl	800700e <USB_ReadInterrupts>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a34:	d102      	bne.n	8001a3c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fb5b 	bl	80020f2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f005 fae4 	bl	800700e <USB_ReadInterrupts>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a50:	d112      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a64:	b292      	uxth	r2, r2
 8001a66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f007 fa2b 	bl	8008ec6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a70:	2100      	movs	r1, #0
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f91e 	bl	8001cb4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f005 fac6 	bl	800700e <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a8c:	d10b      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001aa0:	b292      	uxth	r2, r2
 8001aa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 faaf 	bl	800700e <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aba:	d10b      	bne.n	8001ad4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ace:	b292      	uxth	r2, r2
 8001ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f005 fa98 	bl	800700e <USB_ReadInterrupts>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae8:	d133      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0204 	bic.w	r2, r2, #4
 8001afc:	b292      	uxth	r2, r2
 8001afe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0208 	bic.w	r2, r2, #8
 8001b14:	b292      	uxth	r2, r2
 8001b16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d107      	bne.n	8001b34 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f007 fc7a 	bl	8009428 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f007 f9ff 	bl	8008f38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b4c:	b292      	uxth	r2, r2
 8001b4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f005 fa59 	bl	800700e <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b66:	d126      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0208 	orr.w	r2, r2, #8
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b92:	b292      	uxth	r2, r2
 8001b94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0204 	orr.w	r2, r2, #4
 8001baa:	b292      	uxth	r2, r2
 8001bac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f007 f9a7 	bl	8008f04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f005 fa27 	bl	800700e <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc6:	2b80      	cmp	r3, #128	; 0x80
 8001bc8:	d13f      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bdc:	b292      	uxth	r2, r2
 8001bde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d12b      	bne.n	8001c44 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0204 	orr.w	r2, r2, #4
 8001bfe:	b292      	uxth	r2, r2
 8001c00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0208 	orr.w	r2, r2, #8
 8001c16:	b292      	uxth	r2, r2
 8001c18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f007 fbf3 	bl	8009428 <HAL_PCDEx_LPM_Callback>
 8001c42:	e002      	b.n	8001c4a <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f007 f95d 	bl	8008f04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f005 f9dd 	bl	800700e <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c5e:	d10e      	bne.n	8001c7e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c72:	b292      	uxth	r2, r2
 8001c74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f007 f916 	bl	8008eaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f005 f9c3 	bl	800700e <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c92:	d10b      	bne.n	8001cac <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_PCD_SetAddress+0x1a>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e013      	b.n	8001cf6 <HAL_PCD_SetAddress+0x42>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f005 f951 	bl	8006f8e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	4608      	mov	r0, r1
 8001d08:	4611      	mov	r1, r2
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	70fb      	strb	r3, [r7, #3]
 8001d10:	460b      	mov	r3, r1
 8001d12:	803b      	strh	r3, [r7, #0]
 8001d14:	4613      	mov	r3, r2
 8001d16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da0e      	bge.n	8001d42 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	705a      	strb	r2, [r3, #1]
 8001d40:	e00e      	b.n	8001d60 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	f003 0207 	and.w	r2, r3, #7
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d6c:	883a      	ldrh	r2, [r7, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	78ba      	ldrb	r2, [r7, #2]
 8001d76:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d8a:	78bb      	ldrb	r3, [r7, #2]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d102      	bne.n	8001d96 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_PCD_EP_Open+0xa6>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e00e      	b.n	8001dc2 <HAL_PCD_EP_Open+0xc4>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68f9      	ldr	r1, [r7, #12]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 f962 	bl	800507c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001dc0:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	da0e      	bge.n	8001dfc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2201      	movs	r2, #1
 8001df8:	705a      	strb	r2, [r3, #1]
 8001dfa:	e00e      	b.n	8001e1a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	f003 0207 	and.w	r2, r3, #7
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_PCD_EP_Close+0x6a>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e00e      	b.n	8001e52 <HAL_PCD_EP_Close+0x88>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fc88 	bl	8005758 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	460b      	mov	r3, r1
 8001e68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
 8001e6c:	f003 0207 	and.w	r2, r3, #7
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2200      	movs	r2, #0
 8001e92:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2200      	movs	r2, #0
 8001e98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d106      	bne.n	8001ebe <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6979      	ldr	r1, [r7, #20]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 fe3b 	bl	8005b32 <USB_EPStartXfer>
 8001ebc:	e005      	b.n	8001eca <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6979      	ldr	r1, [r7, #20]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 fe34 	bl	8005b32 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 0207 	and.w	r2, r3, #7
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	440b      	add	r3, r1
 8001ef2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	460b      	mov	r3, r1
 8001f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4413      	add	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f50:	7afb      	ldrb	r3, [r7, #11]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f5c:	7afb      	ldrb	r3, [r7, #11]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6979      	ldr	r1, [r7, #20]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 fde0 	bl	8005b32 <USB_EPStartXfer>
 8001f72:	e005      	b.n	8001f80 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6979      	ldr	r1, [r7, #20]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 fdd9 	bl	8005b32 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f003 0207 	and.w	r2, r3, #7
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d901      	bls.n	8001fa8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e04c      	b.n	8002042 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	da0e      	bge.n	8001fce <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	705a      	strb	r2, [r3, #1]
 8001fcc:	e00c      	b.n	8001fe8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_PCD_EP_SetStall+0x7e>
 8002004:	2302      	movs	r3, #2
 8002006:	e01c      	b.n	8002042 <HAL_PCD_EP_SetStall+0xb8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68f9      	ldr	r1, [r7, #12]
 8002016:	4618      	mov	r0, r3
 8002018:	f004 feba 	bl	8006d90 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	2b00      	cmp	r3, #0
 8002024:	d108      	bne.n	8002038 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002030:	4619      	mov	r1, r3
 8002032:	4610      	mov	r0, r2
 8002034:	f004 fffb 	bl	800702e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	f003 020f 	and.w	r2, r3, #15
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	429a      	cmp	r2, r3
 8002062:	d901      	bls.n	8002068 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e040      	b.n	80020ea <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800206c:	2b00      	cmp	r3, #0
 800206e:	da0e      	bge.n	800208e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	705a      	strb	r2, [r3, #1]
 800208c:	e00e      	b.n	80020ac <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	f003 0207 	and.w	r2, r3, #7
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_PCD_EP_ClrStall+0x82>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e00e      	b.n	80020ea <HAL_PCD_EP_ClrStall+0xa0>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68f9      	ldr	r1, [r7, #12]
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 fea9 	bl	8006e32 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b08e      	sub	sp, #56	; 0x38
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020fa:	e2d1      	b.n	80026a0 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002104:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002112:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 8152 	bne.w	80023c0 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800211c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d150      	bne.n	80021c8 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002136:	81fb      	strh	r3, [r7, #14]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	89fb      	ldrh	r3, [r7, #14]
 800213e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002146:	b29b      	uxth	r3, r3
 8002148:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3328      	adds	r3, #40	; 0x28
 800214e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002158:	b29b      	uxth	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	4413      	add	r3, r2
 800216a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	441a      	add	r2, r3
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002186:	2100      	movs	r1, #0
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f006 fe74 	bl	8008e76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8282 	beq.w	80026a0 <PCD_EP_ISR_Handler+0x5ae>
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f040 827d 	bne.w	80026a0 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	b292      	uxth	r2, r2
 80021ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021c6:	e26b      	b.n	80026a0 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d032      	beq.n	8002248 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800221c:	b29b      	uxth	r3, r3
 800221e:	f004 ff54 	bl	80070ca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29a      	uxth	r2, r3
 800222a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800222e:	4013      	ands	r3, r2
 8002230:	823b      	strh	r3, [r7, #16]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	8a3a      	ldrh	r2, [r7, #16]
 8002238:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800223c:	b292      	uxth	r2, r2
 800223e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f006 fdeb 	bl	8008e1c <HAL_PCD_SetupStageCallback>
 8002246:	e22b      	b.n	80026a0 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002248:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800224c:	2b00      	cmp	r3, #0
 800224e:	f280 8227 	bge.w	80026a0 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29a      	uxth	r2, r3
 800225a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800225e:	4013      	ands	r3, r2
 8002260:	83bb      	strh	r3, [r7, #28]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	8bba      	ldrh	r2, [r7, #28]
 8002268:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800226c:	b292      	uxth	r2, r2
 800226e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002278:	b29b      	uxth	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4413      	add	r3, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	4413      	add	r3, r2
 800228a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d019      	beq.n	80022d4 <PCD_EP_ISR_Handler+0x1e2>
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	6959      	ldr	r1, [r3, #20]
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	f004 ff06 	bl	80070ca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	441a      	add	r2, r3
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022cc:	2100      	movs	r1, #0
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f006 fdb6 	bl	8008e40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4413      	add	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d112      	bne.n	8002322 <PCD_EP_ISR_Handler+0x230>
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002306:	b29a      	uxth	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	801a      	strh	r2, [r3, #0]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800231a:	b29a      	uxth	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	801a      	strh	r2, [r3, #0]
 8002320:	e02f      	b.n	8002382 <PCD_EP_ISR_Handler+0x290>
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b3e      	cmp	r3, #62	; 0x3e
 8002328:	d813      	bhi.n	8002352 <PCD_EP_ISR_Handler+0x260>
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	085b      	lsrs	r3, r3, #1
 8002330:	633b      	str	r3, [r7, #48]	; 0x30
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <PCD_EP_ISR_Handler+0x252>
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	3301      	adds	r3, #1
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	b29b      	uxth	r3, r3
 8002348:	029b      	lsls	r3, r3, #10
 800234a:	b29a      	uxth	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	801a      	strh	r2, [r3, #0]
 8002350:	e017      	b.n	8002382 <PCD_EP_ISR_Handler+0x290>
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	633b      	str	r3, [r7, #48]	; 0x30
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <PCD_EP_ISR_Handler+0x27a>
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	3b01      	subs	r3, #1
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
 800236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236e:	b29b      	uxth	r3, r3
 8002370:	029b      	lsls	r3, r3, #10
 8002372:	b29b      	uxth	r3, r3
 8002374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800237c:	b29a      	uxth	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800238e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002392:	827b      	strh	r3, [r7, #18]
 8002394:	8a7b      	ldrh	r3, [r7, #18]
 8002396:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800239a:	827b      	strh	r3, [r7, #18]
 800239c:	8a7b      	ldrh	r3, [r7, #18]
 800239e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023a2:	827b      	strh	r3, [r7, #18]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	8a7b      	ldrh	r3, [r7, #18]
 80023aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	8013      	strh	r3, [r2, #0]
 80023be:	e16f      	b.n	80026a0 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f280 80e4 	bge.w	80025a4 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023f2:	4013      	ands	r3, r2
 80023f4:	853b      	strh	r3, [r7, #40]	; 0x28
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002406:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800240a:	b292      	uxth	r2, r2
 800240c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800240e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	7b1b      	ldrb	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d120      	bne.n	800246e <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002434:	b29b      	uxth	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	4413      	add	r3, r2
 8002446:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002450:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002452:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8083 	beq.w	8002560 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	6959      	ldr	r1, [r3, #20]
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	88da      	ldrh	r2, [r3, #6]
 8002466:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002468:	f004 fe2f 	bl	80070ca <USB_ReadPMA>
 800246c:	e078      	b.n	8002560 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	78db      	ldrb	r3, [r3, #3]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d108      	bne.n	8002488 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002476:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002478:	461a      	mov	r2, r3
 800247a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f91d 	bl	80026bc <HAL_PCD_EP_DB_Receive>
 8002482:	4603      	mov	r3, r0
 8002484:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002486:	e06b      	b.n	8002560 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800249e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	441a      	add	r2, r3
 80024b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01f      	beq.n	8002522 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002506:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002508:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800250a:	2b00      	cmp	r3, #0
 800250c:	d028      	beq.n	8002560 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	6959      	ldr	r1, [r3, #20]
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	891a      	ldrh	r2, [r3, #8]
 800251a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800251c:	f004 fdd5 	bl	80070ca <USB_ReadPMA>
 8002520:	e01e      	b.n	8002560 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252a:	b29b      	uxth	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	4413      	add	r3, r2
 800253c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002546:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002548:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	6959      	ldr	r1, [r3, #20]
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	895a      	ldrh	r2, [r3, #10]
 800255a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800255c:	f004 fdb5 	bl	80070ca <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002566:	441a      	add	r2, r3
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002572:	441a      	add	r2, r3
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <PCD_EP_ISR_Handler+0x498>
 8002580:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	429a      	cmp	r2, r3
 8002588:	d206      	bcs.n	8002598 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f006 fc55 	bl	8008e40 <HAL_PCD_DataOutStageCallback>
 8002596:	e005      	b.n	80025a4 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 fac7 	bl	8005b32 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d078      	beq.n	80026a0 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80025ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025dc:	843b      	strh	r3, [r7, #32]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	441a      	add	r2, r3
 80025ec:	8c3b      	ldrh	r3, [r7, #32]
 80025ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	78db      	ldrb	r3, [r3, #3]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d108      	bne.n	8002614 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002606:	2b02      	cmp	r3, #2
 8002608:	d144      	bne.n	8002694 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800260a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d13f      	bne.n	8002694 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261c:	b29b      	uxth	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	4413      	add	r3, r2
 800262e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002638:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	8bfb      	ldrh	r3, [r7, #30]
 8002640:	429a      	cmp	r2, r3
 8002642:	d906      	bls.n	8002652 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	8bfb      	ldrh	r3, [r7, #30]
 800264a:	1ad2      	subs	r2, r2, r3
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	619a      	str	r2, [r3, #24]
 8002650:	e002      	b.n	8002658 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d106      	bne.n	800266e <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f006 fc05 	bl	8008e76 <HAL_PCD_DataInStageCallback>
 800266c:	e018      	b.n	80026a0 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	8bfb      	ldrh	r3, [r7, #30]
 8002674:	441a      	add	r2, r3
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	8bfb      	ldrh	r3, [r7, #30]
 8002680:	441a      	add	r2, r3
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fa50 	bl	8005b32 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002692:	e005      	b.n	80026a0 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002694:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002696:	461a      	mov	r2, r3
 8002698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f917 	bl	80028ce <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	b21b      	sxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f6ff ad25 	blt.w	80020fc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3738      	adds	r7, #56	; 0x38
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	4613      	mov	r3, r2
 80026c8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d07c      	beq.n	80027ce <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026dc:	b29b      	uxth	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	4413      	add	r3, r2
 80026ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	8b7b      	ldrh	r3, [r7, #26]
 8002700:	429a      	cmp	r2, r3
 8002702:	d306      	bcc.n	8002712 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	8b7b      	ldrh	r3, [r7, #26]
 800270a:	1ad2      	subs	r2, r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	619a      	str	r2, [r3, #24]
 8002710:	e002      	b.n	8002718 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d123      	bne.n	8002768 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273a:	833b      	strh	r3, [r7, #24]
 800273c:	8b3b      	ldrh	r3, [r7, #24]
 800273e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002742:	833b      	strh	r3, [r7, #24]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	441a      	add	r2, r3
 8002752:	8b3b      	ldrh	r3, [r7, #24]
 8002754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800275c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002764:	b29b      	uxth	r3, r3
 8002766:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d01f      	beq.n	80027b2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278c:	82fb      	strh	r3, [r7, #22]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	441a      	add	r2, r3
 800279c:	8afb      	ldrh	r3, [r7, #22]
 800279e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027b2:	8b7b      	ldrh	r3, [r7, #26]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8085 	beq.w	80028c4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	6959      	ldr	r1, [r3, #20]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	891a      	ldrh	r2, [r3, #8]
 80027c6:	8b7b      	ldrh	r3, [r7, #26]
 80027c8:	f004 fc7f 	bl	80070ca <USB_ReadPMA>
 80027cc:	e07a      	b.n	80028c4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	699a      	ldr	r2, [r3, #24]
 80027f8:	8b7b      	ldrh	r3, [r7, #26]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d306      	bcc.n	800280c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	8b7b      	ldrh	r3, [r7, #26]
 8002804:	1ad2      	subs	r2, r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	619a      	str	r2, [r3, #24]
 800280a:	e002      	b.n	8002812 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2200      	movs	r2, #0
 8002810:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d123      	bne.n	8002862 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002834:	83fb      	strh	r3, [r7, #30]
 8002836:	8bfb      	ldrh	r3, [r7, #30]
 8002838:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800283c:	83fb      	strh	r3, [r7, #30]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	441a      	add	r2, r3
 800284c:	8bfb      	ldrh	r3, [r7, #30]
 800284e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285e:	b29b      	uxth	r3, r3
 8002860:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d11f      	bne.n	80028ac <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002886:	83bb      	strh	r3, [r7, #28]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	441a      	add	r2, r3
 8002896:	8bbb      	ldrh	r3, [r7, #28]
 8002898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800289c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028ac:	8b7b      	ldrh	r3, [r7, #26]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	6959      	ldr	r1, [r3, #20]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	895a      	ldrh	r2, [r3, #10]
 80028be:	8b7b      	ldrh	r3, [r7, #26]
 80028c0:	f004 fc03 	bl	80070ca <USB_ReadPMA>
    }
  }

  return count;
 80028c4:	8b7b      	ldrh	r3, [r7, #26]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3720      	adds	r7, #32
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b094      	sub	sp, #80	; 0x50
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	4613      	mov	r3, r2
 80028da:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8136 	beq.w	8002b54 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	4413      	add	r3, r2
 8002902:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002918:	429a      	cmp	r2, r3
 800291a:	d907      	bls.n	800292c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002924:	1ad2      	subs	r2, r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	619a      	str	r2, [r3, #24]
 800292a:	e002      	b.n	8002932 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d12c      	bne.n	8002994 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f006 fa98 	bl	8008e76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8238 	beq.w	8002dc2 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296c:	82fb      	strh	r3, [r7, #22]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	441a      	add	r2, r3
 800297c:	8afb      	ldrh	r3, [r7, #22]
 800297e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800298a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298e:	b29b      	uxth	r3, r3
 8002990:	8013      	strh	r3, [r2, #0]
 8002992:	e216      	b.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01f      	beq.n	80029de <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	441a      	add	r2, r3
 80029c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029da:	b29b      	uxth	r3, r3
 80029dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	f040 81ec 	bne.w	8002dc2 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80029f2:	441a      	add	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a00:	441a      	add	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	6a1a      	ldr	r2, [r3, #32]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d309      	bcc.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	6a1a      	ldr	r2, [r3, #32]
 8002a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a1e:	1ad2      	subs	r2, r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	621a      	str	r2, [r3, #32]
 8002a24:	e015      	b.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 8002a2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a32:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a3c:	e009      	b.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	785b      	ldrb	r3, [r3, #1]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d155      	bne.n	8002b06 <HAL_PCD_EP_DB_Transmit+0x238>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	4413      	add	r3, r2
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	00da      	lsls	r2, r3, #3
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d112      	bne.n	8002aae <HAL_PCD_EP_DB_Transmit+0x1e0>
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	801a      	strh	r2, [r3, #0]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	801a      	strh	r2, [r3, #0]
 8002aac:	e047      	b.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x270>
 8002aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8002ab2:	d811      	bhi.n	8002ad8 <HAL_PCD_EP_DB_Transmit+0x20a>
 8002ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <HAL_PCD_EP_DB_Transmit+0x1fc>
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	029b      	lsls	r3, r3, #10
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	801a      	strh	r2, [r3, #0]
 8002ad6:	e032      	b.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x270>
 8002ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <HAL_PCD_EP_DB_Transmit+0x220>
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	3b01      	subs	r3, #1
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	029b      	lsls	r3, r3, #10
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	801a      	strh	r2, [r3, #0]
 8002b04:	e01b      	b.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x270>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	785b      	ldrb	r3, [r3, #1]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d117      	bne.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x270>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	4413      	add	r3, r2
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	00da      	lsls	r2, r3, #3
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	4413      	add	r3, r2
 8002b30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b34:	623b      	str	r3, [r7, #32]
 8002b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	6959      	ldr	r1, [r3, #20]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	891a      	ldrh	r2, [r3, #8]
 8002b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f004 fa7a 	bl	8007046 <USB_WritePMA>
 8002b52:	e136      	b.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b78:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	699a      	ldr	r2, [r3, #24]
 8002b80:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d307      	bcc.n	8002b98 <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b90:	1ad2      	subs	r2, r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	619a      	str	r2, [r3, #24]
 8002b96:	e002      	b.n	8002b9e <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d12e      	bne.n	8002c04 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4619      	mov	r1, r3
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f006 f962 	bl	8008e76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f040 8102 	bne.w	8002dc2 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	441a      	add	r2, r3
 8002bea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	8013      	strh	r3, [r2, #0]
 8002c02:	e0de      	b.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d11f      	bne.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c28:	867b      	strh	r3, [r7, #50]	; 0x32
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	441a      	add	r2, r3
 8002c38:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	f040 80b4 	bne.w	8002dc2 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c62:	441a      	add	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c70:	441a      	add	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	6a1a      	ldr	r2, [r3, #32]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d309      	bcc.n	8002c96 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	6a1a      	ldr	r2, [r3, #32]
 8002c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8e:	1ad2      	subs	r2, r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	621a      	str	r2, [r3, #32]
 8002c94:	e015      	b.n	8002cc2 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 8002c9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ca2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cac:	e009      	b.n	8002cc2 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d155      	bne.n	8002d7c <HAL_PCD_EP_DB_Transmit+0x4ae>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	4413      	add	r3, r2
 8002ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	00da      	lsls	r2, r3, #3
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d112      	bne.n	8002d24 <HAL_PCD_EP_DB_Transmit+0x456>
 8002cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	801a      	strh	r2, [r3, #0]
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d20:	801a      	strh	r2, [r3, #0]
 8002d22:	e044      	b.n	8002dae <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d26:	2b3e      	cmp	r3, #62	; 0x3e
 8002d28:	d811      	bhi.n	8002d4e <HAL_PCD_EP_DB_Transmit+0x480>
 8002d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_PCD_EP_DB_Transmit+0x472>
 8002d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	029b      	lsls	r3, r3, #10
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4a:	801a      	strh	r2, [r3, #0]
 8002d4c:	e02f      	b.n	8002dae <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x496>
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d60:	3b01      	subs	r3, #1
 8002d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	029b      	lsls	r3, r3, #10
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d78:	801a      	strh	r2, [r3, #0]
 8002d7a:	e018      	b.n	8002dae <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	785b      	ldrb	r3, [r3, #1]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d114      	bne.n	8002dae <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d92:	4413      	add	r3, r2
 8002d94:	643b      	str	r3, [r7, #64]	; 0x40
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	00da      	lsls	r2, r3, #3
 8002d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9e:	4413      	add	r3, r2
 8002da0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	6959      	ldr	r1, [r3, #20]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	895a      	ldrh	r2, [r3, #10]
 8002dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	f004 f942 	bl	8007046 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ddc:	82bb      	strh	r3, [r7, #20]
 8002dde:	8abb      	ldrh	r3, [r7, #20]
 8002de0:	f083 0310 	eor.w	r3, r3, #16
 8002de4:	82bb      	strh	r3, [r7, #20]
 8002de6:	8abb      	ldrh	r3, [r7, #20]
 8002de8:	f083 0320 	eor.w	r3, r3, #32
 8002dec:	82bb      	strh	r3, [r7, #20]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	441a      	add	r2, r3
 8002dfc:	8abb      	ldrh	r3, [r7, #20]
 8002dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3750      	adds	r7, #80	; 0x50
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	817b      	strh	r3, [r7, #10]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e2e:	897b      	ldrh	r3, [r7, #10]
 8002e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3a:	897b      	ldrh	r3, [r7, #10]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e009      	b.n	8002e66 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e52:	897a      	ldrh	r2, [r7, #10]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e66:	893b      	ldrh	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d107      	bne.n	8002e7c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	80da      	strh	r2, [r3, #6]
 8002e7a:	e00b      	b.n	8002e94 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <HAL_PWREx_GetVoltageRange+0x18>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40007000 	.word	0x40007000

08002f14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f22:	d130      	bne.n	8002f86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f24:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f30:	d038      	beq.n	8002fa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f3a:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2232      	movs	r2, #50	; 0x32
 8002f48:	fb02 f303 	mul.w	r3, r2, r3
 8002f4c:	4a1b      	ldr	r2, [pc, #108]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	0c9b      	lsrs	r3, r3, #18
 8002f54:	3301      	adds	r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f58:	e002      	b.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f60:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6c:	d102      	bne.n	8002f74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f2      	bne.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f80:	d110      	bne.n	8002fa4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e00f      	b.n	8002fa6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f92:	d007      	beq.n	8002fa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f94:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f9c:	4a05      	ldr	r2, [pc, #20]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	431bde83 	.word	0x431bde83

08002fc0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_PWREx_EnableVddUSB+0x1c>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <HAL_PWREx_EnableVddUSB+0x1c>)
 8002fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fce:	6053      	str	r3, [r2, #4]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40007000 	.word	0x40007000

08002fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f000 bc11 	b.w	8003816 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff4:	4ba0      	ldr	r3, [pc, #640]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ffe:	4b9e      	ldr	r3, [pc, #632]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80e4 	beq.w	80031de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <HAL_RCC_OscConfig+0x4c>
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2b0c      	cmp	r3, #12
 8003020:	f040 808b 	bne.w	800313a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b01      	cmp	r3, #1
 8003028:	f040 8087 	bne.w	800313a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800302c:	4b92      	ldr	r3, [pc, #584]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_OscConfig+0x64>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e3e8      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	4b8b      	ldr	r3, [pc, #556]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <HAL_RCC_OscConfig+0x7e>
 8003054:	4b88      	ldr	r3, [pc, #544]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800305c:	e005      	b.n	800306a <HAL_RCC_OscConfig+0x8a>
 800305e:	4b86      	ldr	r3, [pc, #536]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800306a:	4293      	cmp	r3, r2
 800306c:	d223      	bcs.n	80030b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fd42 	bl	8003afc <RCC_SetFlashLatencyFromMSIRange>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e3c9      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003082:	4b7d      	ldr	r3, [pc, #500]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a7c      	ldr	r2, [pc, #496]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003088:	f043 0308 	orr.w	r3, r3, #8
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	4b7a      	ldr	r3, [pc, #488]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	4977      	ldr	r1, [pc, #476]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a0:	4b75      	ldr	r3, [pc, #468]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	4972      	ldr	r1, [pc, #456]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
 80030b4:	e025      	b.n	8003102 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b6:	4b70      	ldr	r3, [pc, #448]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a6f      	ldr	r2, [pc, #444]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	496a      	ldr	r1, [pc, #424]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d4:	4b68      	ldr	r3, [pc, #416]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	4965      	ldr	r1, [pc, #404]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fd02 	bl	8003afc <RCC_SetFlashLatencyFromMSIRange>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e389      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003102:	f000 fc6f 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8003106:	4602      	mov	r2, r0
 8003108:	4b5b      	ldr	r3, [pc, #364]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	495a      	ldr	r1, [pc, #360]	; (800327c <HAL_RCC_OscConfig+0x29c>)
 8003114:	5ccb      	ldrb	r3, [r1, r3]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	fa22 f303 	lsr.w	r3, r2, r3
 800311e:	4a58      	ldr	r2, [pc, #352]	; (8003280 <HAL_RCC_OscConfig+0x2a0>)
 8003120:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003122:	4b58      	ldr	r3, [pc, #352]	; (8003284 <HAL_RCC_OscConfig+0x2a4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe f82e 	bl	8001188 <HAL_InitTick>
 800312c:	4603      	mov	r3, r0
 800312e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d052      	beq.n	80031dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	e36d      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d032      	beq.n	80031a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003142:	4b4d      	ldr	r3, [pc, #308]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a4c      	ldr	r2, [pc, #304]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800314e:	f7fe f86b 	bl	8001228 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003156:	f7fe f867 	bl	8001228 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e356      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003168:	4b43      	ldr	r3, [pc, #268]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003174:	4b40      	ldr	r3, [pc, #256]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a3f      	ldr	r2, [pc, #252]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 800317a:	f043 0308 	orr.w	r3, r3, #8
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	493a      	ldr	r1, [pc, #232]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003192:	4b39      	ldr	r3, [pc, #228]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	4935      	ldr	r1, [pc, #212]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
 80031a6:	e01a      	b.n	80031de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031a8:	4b33      	ldr	r3, [pc, #204]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a32      	ldr	r2, [pc, #200]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031b4:	f7fe f838 	bl	8001228 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031bc:	f7fe f834 	bl	8001228 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e323      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031ce:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x1dc>
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d073      	beq.n	80032d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_OscConfig+0x21c>
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d10e      	bne.n	8003214 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d10b      	bne.n	8003214 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fc:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d063      	beq.n	80032d0 <HAL_RCC_OscConfig+0x2f0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d15f      	bne.n	80032d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e300      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321c:	d106      	bne.n	800322c <HAL_RCC_OscConfig+0x24c>
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a15      	ldr	r2, [pc, #84]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e01d      	b.n	8003268 <HAL_RCC_OscConfig+0x288>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x270>
 8003236:	4b10      	ldr	r3, [pc, #64]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a0f      	ldr	r2, [pc, #60]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 800323c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a0c      	ldr	r2, [pc, #48]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e00b      	b.n	8003268 <HAL_RCC_OscConfig+0x288>
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a08      	ldr	r2, [pc, #32]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a05      	ldr	r2, [pc, #20]	; (8003278 <HAL_RCC_OscConfig+0x298>)
 8003262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01b      	beq.n	80032a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fd ffda 	bl	8001228 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003276:	e010      	b.n	800329a <HAL_RCC_OscConfig+0x2ba>
 8003278:	40021000 	.word	0x40021000
 800327c:	08009e08 	.word	0x08009e08
 8003280:	20000000 	.word	0x20000000
 8003284:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7fd ffce 	bl	8001228 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e2bd      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800329a:	4baf      	ldr	r3, [pc, #700]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x2a8>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fd ffbe 	bl	8001228 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fd ffba 	bl	8001228 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e2a9      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032c2:	4ba5      	ldr	r3, [pc, #660]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x2d0>
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d060      	beq.n	80033a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_OscConfig+0x310>
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d119      	bne.n	800331e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d116      	bne.n	800331e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f0:	4b99      	ldr	r3, [pc, #612]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_OscConfig+0x328>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e286      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003308:	4b93      	ldr	r3, [pc, #588]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	4990      	ldr	r1, [pc, #576]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800331c:	e040      	b.n	80033a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d023      	beq.n	800336e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003326:	4b8c      	ldr	r3, [pc, #560]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a8b      	ldr	r2, [pc, #556]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fd ff79 	bl	8001228 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333a:	f7fd ff75 	bl	8001228 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e264      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800334c:	4b82      	ldr	r3, [pc, #520]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b7f      	ldr	r3, [pc, #508]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	061b      	lsls	r3, r3, #24
 8003366:	497c      	ldr	r1, [pc, #496]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
 800336c:	e018      	b.n	80033a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b7a      	ldr	r3, [pc, #488]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a79      	ldr	r2, [pc, #484]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 8003374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fd ff55 	bl	8001228 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003382:	f7fd ff51 	bl	8001228 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e240      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003394:	4b70      	ldr	r3, [pc, #448]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d03c      	beq.n	8003426 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01c      	beq.n	80033ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b4:	4b68      	ldr	r3, [pc, #416]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80033b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ba:	4a67      	ldr	r2, [pc, #412]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fd ff30 	bl	8001228 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033cc:	f7fd ff2c 	bl	8001228 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e21b      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033de:	4b5e      	ldr	r3, [pc, #376]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80033e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0ef      	beq.n	80033cc <HAL_RCC_OscConfig+0x3ec>
 80033ec:	e01b      	b.n	8003426 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ee:	4b5a      	ldr	r3, [pc, #360]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80033f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f4:	4a58      	ldr	r2, [pc, #352]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fd ff13 	bl	8001228 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003406:	f7fd ff0f 	bl	8001228 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e1fe      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003418:	4b4f      	ldr	r3, [pc, #316]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 800341a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ef      	bne.n	8003406 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80a6 	beq.w	8003580 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003434:	2300      	movs	r3, #0
 8003436:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003438:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10d      	bne.n	8003460 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003444:	4b44      	ldr	r3, [pc, #272]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	4a43      	ldr	r2, [pc, #268]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 800344a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344e:	6593      	str	r3, [r2, #88]	; 0x58
 8003450:	4b41      	ldr	r3, [pc, #260]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 8003452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345c:	2301      	movs	r3, #1
 800345e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003460:	4b3e      	ldr	r3, [pc, #248]	; (800355c <HAL_RCC_OscConfig+0x57c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d118      	bne.n	800349e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800346c:	4b3b      	ldr	r3, [pc, #236]	; (800355c <HAL_RCC_OscConfig+0x57c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3a      	ldr	r2, [pc, #232]	; (800355c <HAL_RCC_OscConfig+0x57c>)
 8003472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003476:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003478:	f7fd fed6 	bl	8001228 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003480:	f7fd fed2 	bl	8001228 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e1c1      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003492:	4b32      	ldr	r3, [pc, #200]	; (800355c <HAL_RCC_OscConfig+0x57c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d108      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4d8>
 80034a6:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	4a2a      	ldr	r2, [pc, #168]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034b6:	e024      	b.n	8003502 <HAL_RCC_OscConfig+0x522>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d110      	bne.n	80034e2 <HAL_RCC_OscConfig+0x502>
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	4a24      	ldr	r2, [pc, #144]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d0:	4b21      	ldr	r3, [pc, #132]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	4a20      	ldr	r2, [pc, #128]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034e0:	e00f      	b.n	8003502 <HAL_RCC_OscConfig+0x522>
 80034e2:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	4a1b      	ldr	r2, [pc, #108]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034f2:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	4a17      	ldr	r2, [pc, #92]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 80034fa:	f023 0304 	bic.w	r3, r3, #4
 80034fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fd fe8d 	bl	8001228 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fd fe89 	bl	8001228 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e176      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_OscConfig+0x578>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0ed      	beq.n	8003512 <HAL_RCC_OscConfig+0x532>
 8003536:	e01a      	b.n	800356e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fd fe76 	bl	8001228 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800353e:	e00f      	b.n	8003560 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7fd fe72 	bl	8001228 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d906      	bls.n	8003560 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e15f      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
 800355c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003560:	4baa      	ldr	r3, [pc, #680]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e8      	bne.n	8003540 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800356e:	7ffb      	ldrb	r3, [r7, #31]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d105      	bne.n	8003580 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003574:	4ba5      	ldr	r3, [pc, #660]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	4aa4      	ldr	r2, [pc, #656]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03c      	beq.n	8003606 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01c      	beq.n	80035ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003594:	4b9d      	ldr	r3, [pc, #628]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 8003596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800359a:	4a9c      	ldr	r2, [pc, #624]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fd fe40 	bl	8001228 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ac:	f7fd fe3c 	bl	8001228 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e12b      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035be:	4b93      	ldr	r3, [pc, #588]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80035c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ef      	beq.n	80035ac <HAL_RCC_OscConfig+0x5cc>
 80035cc:	e01b      	b.n	8003606 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035ce:	4b8f      	ldr	r3, [pc, #572]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80035d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d4:	4a8d      	ldr	r2, [pc, #564]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fd fe23 	bl	8001228 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e6:	f7fd fe1f 	bl	8001228 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e10e      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035f8:	4b84      	ldr	r3, [pc, #528]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80035fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1ef      	bne.n	80035e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8102 	beq.w	8003814 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	2b02      	cmp	r3, #2
 8003616:	f040 80c5 	bne.w	80037a4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800361a:	4b7c      	ldr	r3, [pc, #496]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0203 	and.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	429a      	cmp	r2, r3
 800362c:	d12c      	bne.n	8003688 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	3b01      	subs	r3, #1
 800363a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d123      	bne.n	8003688 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d11b      	bne.n	8003688 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d113      	bne.n	8003688 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	3b01      	subs	r3, #1
 800366e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d109      	bne.n	8003688 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	3b01      	subs	r3, #1
 8003682:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d067      	beq.n	8003758 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b0c      	cmp	r3, #12
 800368c:	d062      	beq.n	8003754 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800368e:	4b5f      	ldr	r3, [pc, #380]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0bb      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800369e:	4b5b      	ldr	r3, [pc, #364]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5a      	ldr	r2, [pc, #360]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80036a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036aa:	f7fd fdbd 	bl	8001228 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fd fdb9 	bl	8001228 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0a8      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c4:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d0:	4b4e      	ldr	r3, [pc, #312]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	4b4e      	ldr	r3, [pc, #312]	; (8003810 <HAL_RCC_OscConfig+0x830>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036e0:	3a01      	subs	r2, #1
 80036e2:	0112      	lsls	r2, r2, #4
 80036e4:	4311      	orrs	r1, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ea:	0212      	lsls	r2, r2, #8
 80036ec:	4311      	orrs	r1, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036f2:	0852      	lsrs	r2, r2, #1
 80036f4:	3a01      	subs	r2, #1
 80036f6:	0552      	lsls	r2, r2, #21
 80036f8:	4311      	orrs	r1, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036fe:	0852      	lsrs	r2, r2, #1
 8003700:	3a01      	subs	r2, #1
 8003702:	0652      	lsls	r2, r2, #25
 8003704:	4311      	orrs	r1, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800370a:	06d2      	lsls	r2, r2, #27
 800370c:	430a      	orrs	r2, r1
 800370e:	493f      	ldr	r1, [pc, #252]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 8003710:	4313      	orrs	r3, r2
 8003712:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003714:	4b3d      	ldr	r3, [pc, #244]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a3c      	ldr	r2, [pc, #240]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 800371a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800371e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003720:	4b3a      	ldr	r3, [pc, #232]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a39      	ldr	r2, [pc, #228]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 8003726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800372c:	f7fd fd7c 	bl	8001228 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fd fd78 	bl	8001228 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e067      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	4b31      	ldr	r3, [pc, #196]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003752:	e05f      	b.n	8003814 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e05e      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003758:	4b2c      	ldr	r3, [pc, #176]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d157      	bne.n	8003814 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003764:	4b29      	ldr	r3, [pc, #164]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a28      	ldr	r2, [pc, #160]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 800376a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003770:	4b26      	ldr	r3, [pc, #152]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a25      	ldr	r2, [pc, #148]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 8003776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800377c:	f7fd fd54 	bl	8001228 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003784:	f7fd fd50 	bl	8001228 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e03f      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003796:	4b1d      	ldr	r3, [pc, #116]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x7a4>
 80037a2:	e037      	b.n	8003814 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	d02d      	beq.n	8003806 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b18      	ldr	r3, [pc, #96]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a17      	ldr	r2, [pc, #92]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80037b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037b6:	4b15      	ldr	r3, [pc, #84]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d105      	bne.n	80037ce <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037c2:	4b12      	ldr	r3, [pc, #72]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	4a11      	ldr	r2, [pc, #68]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80037c8:	f023 0303 	bic.w	r3, r3, #3
 80037cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80037ce:	4b0f      	ldr	r3, [pc, #60]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4a0e      	ldr	r2, [pc, #56]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80037d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037de:	f7fd fd23 	bl	8001228 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fd fd1f 	bl	8001228 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e00e      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <HAL_RCC_OscConfig+0x82c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x806>
 8003804:	e006      	b.n	8003814 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e005      	b.n	8003816 <HAL_RCC_OscConfig+0x836>
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop

08003820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0c8      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b66      	ldr	r3, [pc, #408]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d910      	bls.n	8003864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b63      	ldr	r3, [pc, #396]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 0207 	bic.w	r2, r3, #7
 800384a:	4961      	ldr	r1, [pc, #388]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b5f      	ldr	r3, [pc, #380]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0b0      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d04c      	beq.n	800390a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d107      	bne.n	8003888 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003878:	4b56      	ldr	r3, [pc, #344]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d121      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e09e      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003890:	4b50      	ldr	r3, [pc, #320]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d115      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e092      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d107      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a8:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e086      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b8:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e07e      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038c8:	4b42      	ldr	r3, [pc, #264]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f023 0203 	bic.w	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	493f      	ldr	r1, [pc, #252]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038da:	f7fd fca5 	bl	8001228 <HAL_GetTick>
 80038de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e0:	e00a      	b.n	80038f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e2:	f7fd fca1 	bl	8001228 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e066      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f8:	4b36      	ldr	r3, [pc, #216]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 020c 	and.w	r2, r3, #12
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	429a      	cmp	r2, r3
 8003908:	d1eb      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003916:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	492c      	ldr	r1, [pc, #176]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003928:	4b29      	ldr	r3, [pc, #164]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d210      	bcs.n	8003958 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 0207 	bic.w	r2, r3, #7
 800393e:	4924      	ldr	r1, [pc, #144]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e036      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4918      	ldr	r1, [pc, #96]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003982:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4910      	ldr	r1, [pc, #64]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003996:	f000 f825 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 800399a:	4602      	mov	r2, r0
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_RCC_ClockConfig+0x1b4>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	490c      	ldr	r1, [pc, #48]	; (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	5ccb      	ldrb	r3, [r1, r3]
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd fbe4 	bl	8001188 <HAL_InitTick>
 80039c0:	4603      	mov	r3, r0
 80039c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80039c4:	7afb      	ldrb	r3, [r7, #11]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	08009e08 	.word	0x08009e08
 80039dc:	20000000 	.word	0x20000000
 80039e0:	20000004 	.word	0x20000004

080039e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	; 0x24
 80039e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f2:	4b3e      	ldr	r3, [pc, #248]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039fc:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x34>
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d121      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d11e      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a18:	4b34      	ldr	r3, [pc, #208]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a24:	4b31      	ldr	r3, [pc, #196]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	e005      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a34:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a40:	4a2b      	ldr	r2, [pc, #172]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10d      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d102      	bne.n	8003a62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a5c:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	e004      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a68:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d134      	bne.n	8003adc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a72:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d003      	beq.n	8003a8a <HAL_RCC_GetSysClockFreq+0xa6>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d003      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0xac>
 8003a88:	e005      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a8a:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a8c:	617b      	str	r3, [r7, #20]
      break;
 8003a8e:	e005      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a92:	617b      	str	r3, [r7, #20]
      break;
 8003a94:	e002      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	617b      	str	r3, [r7, #20]
      break;
 8003a9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a9c:	4b13      	ldr	r3, [pc, #76]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	fb02 f203 	mul.w	r2, r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	0e5b      	lsrs	r3, r3, #25
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	3301      	adds	r3, #1
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003adc:	69bb      	ldr	r3, [r7, #24]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
 8003af0:	08009e18 	.word	0x08009e18
 8003af4:	00f42400 	.word	0x00f42400
 8003af8:	007a1200 	.word	0x007a1200

08003afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b08:	4b2a      	ldr	r3, [pc, #168]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b14:	f7ff f9f0 	bl	8002ef8 <HAL_PWREx_GetVoltageRange>
 8003b18:	6178      	str	r0, [r7, #20]
 8003b1a:	e014      	b.n	8003b46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b1c:	4b25      	ldr	r3, [pc, #148]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b20:	4a24      	ldr	r2, [pc, #144]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b26:	6593      	str	r3, [r2, #88]	; 0x58
 8003b28:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b34:	f7ff f9e0 	bl	8002ef8 <HAL_PWREx_GetVoltageRange>
 8003b38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b3a:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3e:	4a1d      	ldr	r2, [pc, #116]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b4c:	d10b      	bne.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d919      	bls.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2ba0      	cmp	r3, #160	; 0xa0
 8003b58:	d902      	bls.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	e013      	b.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b60:	2301      	movs	r3, #1
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	e010      	b.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b80      	cmp	r3, #128	; 0x80
 8003b6a:	d902      	bls.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	e00a      	b.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b80      	cmp	r3, #128	; 0x80
 8003b76:	d102      	bne.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b78:	2302      	movs	r3, #2
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	e004      	b.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b70      	cmp	r3, #112	; 0x70
 8003b82:	d101      	bne.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b84:	2301      	movs	r3, #1
 8003b86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 0207 	bic.w	r2, r3, #7
 8003b90:	4909      	ldr	r1, [pc, #36]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b98:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d001      	beq.n	8003baa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40022000 	.word	0x40022000

08003bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bc8:	2300      	movs	r3, #0
 8003bca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d031      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003be0:	d01a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003be2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003be6:	d814      	bhi.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d009      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bf0:	d10f      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003bf2:	4bac      	ldr	r3, [pc, #688]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	4aab      	ldr	r2, [pc, #684]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bfe:	e00c      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f9cc 	bl	8003fa4 <RCCEx_PLLSAI1_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c10:	e003      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	74fb      	strb	r3, [r7, #19]
      break;
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c20:	4ba0      	ldr	r3, [pc, #640]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	499d      	ldr	r1, [pc, #628]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c36:	e001      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8099 	beq.w	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c4e:	4b95      	ldr	r3, [pc, #596]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c64:	4b8f      	ldr	r3, [pc, #572]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	4a8e      	ldr	r2, [pc, #568]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c70:	4b8c      	ldr	r3, [pc, #560]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c80:	4b89      	ldr	r3, [pc, #548]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a88      	ldr	r2, [pc, #544]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c8c:	f7fd facc 	bl	8001228 <HAL_GetTick>
 8003c90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c92:	e009      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c94:	f7fd fac8 	bl	8001228 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d902      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ca6:	e005      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ca8:	4b7f      	ldr	r3, [pc, #508]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ef      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d155      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cba:	4b7a      	ldr	r3, [pc, #488]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01e      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d019      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cd6:	4b73      	ldr	r3, [pc, #460]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ce2:	4b70      	ldr	r3, [pc, #448]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	4a6e      	ldr	r2, [pc, #440]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf2:	4b6c      	ldr	r3, [pc, #432]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	4a6a      	ldr	r2, [pc, #424]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d02:	4a68      	ldr	r2, [pc, #416]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d016      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fd fa88 	bl	8001228 <HAL_GetTick>
 8003d18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1c:	f7fd fa84 	bl	8001228 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d902      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	74fb      	strb	r3, [r7, #19]
            break;
 8003d32:	e006      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d34:	4b5b      	ldr	r3, [pc, #364]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0ec      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003d42:	7cfb      	ldrb	r3, [r7, #19]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d48:	4b56      	ldr	r3, [pc, #344]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d56:	4953      	ldr	r1, [pc, #332]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d5e:	e004      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	74bb      	strb	r3, [r7, #18]
 8003d64:	e001      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d66:	7cfb      	ldrb	r3, [r7, #19]
 8003d68:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d6a:	7c7b      	ldrb	r3, [r7, #17]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d105      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d70:	4b4c      	ldr	r3, [pc, #304]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	4a4b      	ldr	r2, [pc, #300]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d88:	4b46      	ldr	r3, [pc, #280]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8e:	f023 0203 	bic.w	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	4943      	ldr	r1, [pc, #268]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003daa:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db0:	f023 020c 	bic.w	r2, r3, #12
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	493a      	ldr	r1, [pc, #232]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dcc:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	4932      	ldr	r1, [pc, #200]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dee:	4b2d      	ldr	r3, [pc, #180]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	4929      	ldr	r1, [pc, #164]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e10:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	4921      	ldr	r1, [pc, #132]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e32:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	4918      	ldr	r1, [pc, #96]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	4910      	ldr	r1, [pc, #64]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d02c      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e76:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	4907      	ldr	r1, [pc, #28]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e94:	d10a      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e96:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	4a02      	ldr	r2, [pc, #8]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ea0:	60d3      	str	r3, [r2, #12]
 8003ea2:	e015      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f871 	bl	8003fa4 <RCCEx_PLLSAI1_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003ecc:	7cfb      	ldrb	r3, [r7, #19]
 8003ece:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d028      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003edc:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	492d      	ldr	r1, [pc, #180]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003efa:	d106      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efc:	4b28      	ldr	r3, [pc, #160]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a27      	ldr	r2, [pc, #156]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f06:	60d3      	str	r3, [r2, #12]
 8003f08:	e011      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f12:	d10c      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	2101      	movs	r1, #1
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 f842 	bl	8003fa4 <RCCEx_PLLSAI1_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01c      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f48:	4915      	ldr	r1, [pc, #84]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2102      	movs	r1, #2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 f81f 	bl	8003fa4 <RCCEx_PLLSAI1_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f6a:	7cfb      	ldrb	r3, [r7, #19]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f80:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	4904      	ldr	r1, [pc, #16]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f96:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000

08003fa4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fb2:	4b74      	ldr	r3, [pc, #464]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d018      	beq.n	8003ff0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fbe:	4b71      	ldr	r3, [pc, #452]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0203 	and.w	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d10d      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
       ||
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fd6:	4b6b      	ldr	r3, [pc, #428]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	091b      	lsrs	r3, r3, #4
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d047      	beq.n	800407a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	73fb      	strb	r3, [r7, #15]
 8003fee:	e044      	b.n	800407a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d018      	beq.n	800402a <RCCEx_PLLSAI1_Config+0x86>
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d825      	bhi.n	8004048 <RCCEx_PLLSAI1_Config+0xa4>
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d002      	beq.n	8004006 <RCCEx_PLLSAI1_Config+0x62>
 8004000:	2b02      	cmp	r3, #2
 8004002:	d009      	beq.n	8004018 <RCCEx_PLLSAI1_Config+0x74>
 8004004:	e020      	b.n	8004048 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004006:	4b5f      	ldr	r3, [pc, #380]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d11d      	bne.n	800404e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004016:	e01a      	b.n	800404e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004018:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004020:	2b00      	cmp	r3, #0
 8004022:	d116      	bne.n	8004052 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004028:	e013      	b.n	8004052 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800402a:	4b56      	ldr	r3, [pc, #344]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004036:	4b53      	ldr	r3, [pc, #332]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004046:	e006      	b.n	8004056 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
      break;
 800404c:	e004      	b.n	8004058 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800404e:	bf00      	nop
 8004050:	e002      	b.n	8004058 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004056:	bf00      	nop
    }

    if(status == HAL_OK)
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10d      	bne.n	800407a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800405e:	4b49      	ldr	r3, [pc, #292]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6819      	ldr	r1, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	3b01      	subs	r3, #1
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	430b      	orrs	r3, r1
 8004074:	4943      	ldr	r1, [pc, #268]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004076:	4313      	orrs	r3, r2
 8004078:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d17c      	bne.n	800417a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004080:	4b40      	ldr	r3, [pc, #256]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a3f      	ldr	r2, [pc, #252]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004086:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800408a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fd f8cc 	bl	8001228 <HAL_GetTick>
 8004090:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004092:	e009      	b.n	80040a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004094:	f7fd f8c8 	bl	8001228 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d902      	bls.n	80040a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	73fb      	strb	r3, [r7, #15]
        break;
 80040a6:	e005      	b.n	80040b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040a8:	4b36      	ldr	r3, [pc, #216]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ef      	bne.n	8004094 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d15f      	bne.n	800417a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d110      	bne.n	80040e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040c0:	4b30      	ldr	r3, [pc, #192]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80040c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6892      	ldr	r2, [r2, #8]
 80040d0:	0211      	lsls	r1, r2, #8
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68d2      	ldr	r2, [r2, #12]
 80040d6:	06d2      	lsls	r2, r2, #27
 80040d8:	430a      	orrs	r2, r1
 80040da:	492a      	ldr	r1, [pc, #168]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	610b      	str	r3, [r1, #16]
 80040e0:	e027      	b.n	8004132 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d112      	bne.n	800410e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040e8:	4b26      	ldr	r3, [pc, #152]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6892      	ldr	r2, [r2, #8]
 80040f8:	0211      	lsls	r1, r2, #8
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6912      	ldr	r2, [r2, #16]
 80040fe:	0852      	lsrs	r2, r2, #1
 8004100:	3a01      	subs	r2, #1
 8004102:	0552      	lsls	r2, r2, #21
 8004104:	430a      	orrs	r2, r1
 8004106:	491f      	ldr	r1, [pc, #124]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004108:	4313      	orrs	r3, r2
 800410a:	610b      	str	r3, [r1, #16]
 800410c:	e011      	b.n	8004132 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800410e:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004116:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6892      	ldr	r2, [r2, #8]
 800411e:	0211      	lsls	r1, r2, #8
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6952      	ldr	r2, [r2, #20]
 8004124:	0852      	lsrs	r2, r2, #1
 8004126:	3a01      	subs	r2, #1
 8004128:	0652      	lsls	r2, r2, #25
 800412a:	430a      	orrs	r2, r1
 800412c:	4915      	ldr	r1, [pc, #84]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 800412e:	4313      	orrs	r3, r2
 8004130:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004132:	4b14      	ldr	r3, [pc, #80]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a13      	ldr	r2, [pc, #76]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004138:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800413c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413e:	f7fd f873 	bl	8001228 <HAL_GetTick>
 8004142:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004144:	e009      	b.n	800415a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004146:	f7fd f86f 	bl	8001228 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d902      	bls.n	800415a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	73fb      	strb	r3, [r7, #15]
          break;
 8004158:	e005      	b.n	8004166 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0ef      	beq.n	8004146 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	4903      	ldr	r1, [pc, #12]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004176:	4313      	orrs	r3, r2
 8004178:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800417a:	7bfb      	ldrb	r3, [r7, #15]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40021000 	.word	0x40021000

08004188 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e095      	b.n	80042c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d108      	bne.n	80041b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041aa:	d009      	beq.n	80041c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	61da      	str	r2, [r3, #28]
 80041b2:	e005      	b.n	80041c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fc feae 	bl	8000f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004200:	d902      	bls.n	8004208 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e002      	b.n	800420e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800420c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004216:	d007      	beq.n	8004228 <HAL_SPI_Init+0xa0>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004220:	d002      	beq.n	8004228 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	ea42 0103 	orr.w	r1, r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	0c1b      	lsrs	r3, r3, #16
 8004284:	f003 0204 	and.w	r2, r3, #4
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80042a4:	ea42 0103 	orr.w	r1, r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b088      	sub	sp, #32
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	4613      	mov	r3, r2
 80042dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_SPI_Transmit+0x22>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e158      	b.n	80045a2 <HAL_SPI_Transmit+0x2d4>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042f8:	f7fc ff96 	bl	8001228 <HAL_GetTick>
 80042fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d002      	beq.n	8004314 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800430e:	2302      	movs	r3, #2
 8004310:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004312:	e13d      	b.n	8004590 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_SPI_Transmit+0x52>
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004324:	e134      	b.n	8004590 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2203      	movs	r2, #3
 800432a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004370:	d10f      	bne.n	8004392 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004380:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004390:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d007      	beq.n	80043b0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b8:	d94b      	bls.n	8004452 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_SPI_Transmit+0xfa>
 80043c2:	8afb      	ldrh	r3, [r7, #22]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d13e      	bne.n	8004446 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	881a      	ldrh	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	1c9a      	adds	r2, r3, #2
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043ec:	e02b      	b.n	8004446 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d112      	bne.n	8004422 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	881a      	ldrh	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	1c9a      	adds	r2, r3, #2
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004420:	e011      	b.n	8004446 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004422:	f7fc ff01 	bl	8001228 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d803      	bhi.n	800443a <HAL_SPI_Transmit+0x16c>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004438:	d102      	bne.n	8004440 <HAL_SPI_Transmit+0x172>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004444:	e0a4      	b.n	8004590 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1ce      	bne.n	80043ee <HAL_SPI_Transmit+0x120>
 8004450:	e07c      	b.n	800454c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <HAL_SPI_Transmit+0x192>
 800445a:	8afb      	ldrh	r3, [r7, #22]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d170      	bne.n	8004542 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d912      	bls.n	8004490 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	881a      	ldrh	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	1c9a      	adds	r2, r3, #2
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b02      	subs	r3, #2
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800448e:	e058      	b.n	8004542 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80044b6:	e044      	b.n	8004542 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d12b      	bne.n	800451e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d912      	bls.n	80044f6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	881a      	ldrh	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	1c9a      	adds	r2, r3, #2
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b02      	subs	r3, #2
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044f4:	e025      	b.n	8004542 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	7812      	ldrb	r2, [r2, #0]
 8004502:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800451c:	e011      	b.n	8004542 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800451e:	f7fc fe83 	bl	8001228 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d803      	bhi.n	8004536 <HAL_SPI_Transmit+0x268>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004534:	d102      	bne.n	800453c <HAL_SPI_Transmit+0x26e>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004540:	e026      	b.n	8004590 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1b5      	bne.n	80044b8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	6839      	ldr	r1, [r7, #0]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fcdb 	bl	8004f0c <SPI_EndRxTxTransaction>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	77fb      	strb	r3, [r7, #31]
 800458c:	e000      	b.n	8004590 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800458e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b088      	sub	sp, #32
 80045ae:	af02      	add	r7, sp, #8
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c6:	d112      	bne.n	80045ee <HAL_SPI_Receive+0x44>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10e      	bne.n	80045ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2204      	movs	r2, #4
 80045d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	4613      	mov	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f910 	bl	800480a <HAL_SPI_TransmitReceive>
 80045ea:	4603      	mov	r3, r0
 80045ec:	e109      	b.n	8004802 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_SPI_Receive+0x52>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e102      	b.n	8004802 <HAL_SPI_Receive+0x258>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004604:	f7fc fe10 	bl	8001228 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d002      	beq.n	800461c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004616:	2302      	movs	r3, #2
 8004618:	75fb      	strb	r3, [r7, #23]
    goto error;
 800461a:	e0e9      	b.n	80047f0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_SPI_Receive+0x7e>
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800462c:	e0e0      	b.n	80047f0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2204      	movs	r2, #4
 8004632:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	88fa      	ldrh	r2, [r7, #6]
 8004646:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	88fa      	ldrh	r2, [r7, #6]
 800464e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004678:	d908      	bls.n	800468c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	e007      	b.n	800469c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800469a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a4:	d10f      	bne.n	80046c6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b40      	cmp	r3, #64	; 0x40
 80046d2:	d007      	beq.n	80046e4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046ec:	d867      	bhi.n	80047be <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046ee:	e030      	b.n	8004752 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d117      	bne.n	800472e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f103 020c 	add.w	r2, r3, #12
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	7812      	ldrb	r2, [r2, #0]
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800472c:	e011      	b.n	8004752 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472e:	f7fc fd7b 	bl	8001228 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d803      	bhi.n	8004746 <HAL_SPI_Receive+0x19c>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004744:	d102      	bne.n	800474c <HAL_SPI_Receive+0x1a2>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004750:	e04e      	b.n	80047f0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1c8      	bne.n	80046f0 <HAL_SPI_Receive+0x146>
 800475e:	e034      	b.n	80047ca <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b01      	cmp	r3, #1
 800476c:	d115      	bne.n	800479a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	b292      	uxth	r2, r2
 800477a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	1c9a      	adds	r2, r3, #2
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004798:	e011      	b.n	80047be <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800479a:	f7fc fd45 	bl	8001228 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d803      	bhi.n	80047b2 <HAL_SPI_Receive+0x208>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b0:	d102      	bne.n	80047b8 <HAL_SPI_Receive+0x20e>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047bc:	e018      	b.n	80047f0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1ca      	bne.n	8004760 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fb44 	bl	8004e5c <SPI_EndRxTransaction>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	75fb      	strb	r3, [r7, #23]
 80047ec:	e000      	b.n	80047f0 <HAL_SPI_Receive+0x246>
  }

error :
 80047ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004800:	7dfb      	ldrb	r3, [r7, #23]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b08a      	sub	sp, #40	; 0x28
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004818:	2301      	movs	r3, #1
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_SPI_TransmitReceive+0x26>
 800482c:	2302      	movs	r3, #2
 800482e:	e1fb      	b.n	8004c28 <HAL_SPI_TransmitReceive+0x41e>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004838:	f7fc fcf6 	bl	8001228 <HAL_GetTick>
 800483c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004844:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800484c:	887b      	ldrh	r3, [r7, #2]
 800484e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004854:	7efb      	ldrb	r3, [r7, #27]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d00e      	beq.n	8004878 <HAL_SPI_TransmitReceive+0x6e>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004860:	d106      	bne.n	8004870 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <HAL_SPI_TransmitReceive+0x66>
 800486a:	7efb      	ldrb	r3, [r7, #27]
 800486c:	2b04      	cmp	r3, #4
 800486e:	d003      	beq.n	8004878 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004870:	2302      	movs	r3, #2
 8004872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004876:	e1cd      	b.n	8004c14 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <HAL_SPI_TransmitReceive+0x80>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <HAL_SPI_TransmitReceive+0x80>
 8004884:	887b      	ldrh	r3, [r7, #2]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d103      	bne.n	8004892 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004890:	e1c0      	b.n	8004c14 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b04      	cmp	r3, #4
 800489c:	d003      	beq.n	80048a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2205      	movs	r2, #5
 80048a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	887a      	ldrh	r2, [r7, #2]
 80048b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	887a      	ldrh	r2, [r7, #2]
 80048be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	887a      	ldrh	r2, [r7, #2]
 80048cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	887a      	ldrh	r2, [r7, #2]
 80048d2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048e8:	d802      	bhi.n	80048f0 <HAL_SPI_TransmitReceive+0xe6>
 80048ea:	8a3b      	ldrh	r3, [r7, #16]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d908      	bls.n	8004902 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	e007      	b.n	8004912 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004910:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d007      	beq.n	8004930 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800492e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004938:	d97c      	bls.n	8004a34 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <HAL_SPI_TransmitReceive+0x13e>
 8004942:	8a7b      	ldrh	r3, [r7, #18]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d169      	bne.n	8004a1c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	881a      	ldrh	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	1c9a      	adds	r2, r3, #2
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800496c:	e056      	b.n	8004a1c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b02      	cmp	r3, #2
 800497a:	d11b      	bne.n	80049b4 <HAL_SPI_TransmitReceive+0x1aa>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d016      	beq.n	80049b4 <HAL_SPI_TransmitReceive+0x1aa>
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	2b01      	cmp	r3, #1
 800498a:	d113      	bne.n	80049b4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	881a      	ldrh	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	1c9a      	adds	r2, r3, #2
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d11c      	bne.n	80049fc <HAL_SPI_TransmitReceive+0x1f2>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d016      	beq.n	80049fc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	b292      	uxth	r2, r2
 80049da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	1c9a      	adds	r2, r3, #2
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049f8:	2301      	movs	r3, #1
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049fc:	f7fc fc14 	bl	8001228 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d807      	bhi.n	8004a1c <HAL_SPI_TransmitReceive+0x212>
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a12:	d003      	beq.n	8004a1c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a1a:	e0fb      	b.n	8004c14 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1a3      	bne.n	800496e <HAL_SPI_TransmitReceive+0x164>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d19d      	bne.n	800496e <HAL_SPI_TransmitReceive+0x164>
 8004a32:	e0df      	b.n	8004bf4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_SPI_TransmitReceive+0x23a>
 8004a3c:	8a7b      	ldrh	r3, [r7, #18]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	f040 80cb 	bne.w	8004bda <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d912      	bls.n	8004a74 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	881a      	ldrh	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	1c9a      	adds	r2, r3, #2
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b02      	subs	r3, #2
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a72:	e0b2      	b.n	8004bda <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	7812      	ldrb	r2, [r2, #0]
 8004a80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a9a:	e09e      	b.n	8004bda <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d134      	bne.n	8004b14 <HAL_SPI_TransmitReceive+0x30a>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d02f      	beq.n	8004b14 <HAL_SPI_TransmitReceive+0x30a>
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d12c      	bne.n	8004b14 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d912      	bls.n	8004aea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	881a      	ldrh	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	1c9a      	adds	r2, r3, #2
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b02      	subs	r3, #2
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ae8:	e012      	b.n	8004b10 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	330c      	adds	r3, #12
 8004af4:	7812      	ldrb	r2, [r2, #0]
 8004af6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d148      	bne.n	8004bb4 <HAL_SPI_TransmitReceive+0x3aa>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d042      	beq.n	8004bb4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d923      	bls.n	8004b82 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	b292      	uxth	r2, r2
 8004b46:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	1c9a      	adds	r2, r3, #2
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3b02      	subs	r3, #2
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d81f      	bhi.n	8004bb0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b7e:	605a      	str	r2, [r3, #4]
 8004b80:	e016      	b.n	8004bb0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f103 020c 	add.w	r2, r3, #12
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	7812      	ldrb	r2, [r2, #0]
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bb4:	f7fc fb38 	bl	8001228 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d803      	bhi.n	8004bcc <HAL_SPI_TransmitReceive+0x3c2>
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bca:	d102      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x3c8>
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d103      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004bd8:	e01c      	b.n	8004c14 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f47f af5b 	bne.w	8004a9c <HAL_SPI_TransmitReceive+0x292>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f47f af54 	bne.w	8004a9c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f987 	bl	8004f0c <SPI_EndRxTxTransaction>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	661a      	str	r2, [r3, #96]	; 0x60
 8004c10:	e000      	b.n	8004c14 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004c12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3728      	adds	r7, #40	; 0x28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c40:	f7fc faf2 	bl	8001228 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c50:	f7fc faea 	bl	8001228 <HAL_GetTick>
 8004c54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c56:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	015b      	lsls	r3, r3, #5
 8004c5c:	0d1b      	lsrs	r3, r3, #20
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	fb02 f303 	mul.w	r3, r2, r3
 8004c64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c66:	e054      	b.n	8004d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c6e:	d050      	beq.n	8004d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c70:	f7fc fada 	bl	8001228 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d902      	bls.n	8004c86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d13d      	bne.n	8004d02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c9e:	d111      	bne.n	8004cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca8:	d004      	beq.n	8004cb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb2:	d107      	bne.n	8004cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ccc:	d10f      	bne.n	8004cee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e017      	b.n	8004d32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	bf0c      	ite	eq
 8004d22:	2301      	moveq	r3, #1
 8004d24:	2300      	movne	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d19b      	bne.n	8004c68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000000 	.word	0x20000000

08004d40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d4e:	f7fc fa6b 	bl	8001228 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d5e:	f7fc fa63 	bl	8001228 <HAL_GetTick>
 8004d62:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d64:	4b3c      	ldr	r3, [pc, #240]	; (8004e58 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	00da      	lsls	r2, r3, #3
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	0d1b      	lsrs	r3, r3, #20
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d7c:	e05f      	b.n	8004e3e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d84:	d106      	bne.n	8004d94 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d103      	bne.n	8004d94 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	330c      	adds	r3, #12
 8004d92:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d9a:	d050      	beq.n	8004e3e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d9c:	f7fc fa44 	bl	8001228 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d902      	bls.n	8004db2 <SPI_WaitFifoStateUntilTimeout+0x72>
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d13d      	bne.n	8004e2e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dca:	d111      	bne.n	8004df0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd4:	d004      	beq.n	8004de0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dde:	d107      	bne.n	8004df0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df8:	d10f      	bne.n	8004e1a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e010      	b.n	8004e50 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4013      	ands	r3, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d197      	bne.n	8004d7e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3720      	adds	r7, #32
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000000 	.word	0x20000000

08004e5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e70:	d111      	bne.n	8004e96 <SPI_EndRxTransaction+0x3a>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7a:	d004      	beq.n	8004e86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e84:	d107      	bne.n	8004e96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e94:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2180      	movs	r1, #128	; 0x80
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff fec5 	bl	8004c30 <SPI_WaitFlagStateUntilTimeout>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d007      	beq.n	8004ebc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb0:	f043 0220 	orr.w	r2, r3, #32
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e023      	b.n	8004f04 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ec4:	d11d      	bne.n	8004f02 <SPI_EndRxTransaction+0xa6>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ece:	d004      	beq.n	8004eda <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	d113      	bne.n	8004f02 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7ff ff2a 	bl	8004d40 <SPI_WaitFifoStateUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef6:	f043 0220 	orr.w	r2, r3, #32
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e000      	b.n	8004f04 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff ff0b 	bl	8004d40 <SPI_WaitFifoStateUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f34:	f043 0220 	orr.w	r2, r3, #32
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e027      	b.n	8004f90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2200      	movs	r2, #0
 8004f48:	2180      	movs	r1, #128	; 0x80
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7ff fe70 	bl	8004c30 <SPI_WaitFlagStateUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5a:	f043 0220 	orr.w	r2, r3, #32
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e014      	b.n	8004f90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff fee4 	bl	8004d40 <SPI_WaitFifoStateUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d007      	beq.n	8004f8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f82:	f043 0220 	orr.w	r2, r3, #32
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e000      	b.n	8004f90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f98:	b084      	sub	sp, #16
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	f107 0014 	add.w	r0, r7, #20
 8004fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	b004      	add	sp, #16
 8004fb8:	4770      	bx	lr

08004fba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fca:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004fce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ff0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004ff4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	b29b      	uxth	r3, r3
 8005002:	43db      	mvns	r3, r3
 8005004:	b29b      	uxth	r3, r3
 8005006:	4013      	ands	r3, r2
 8005008:	b29a      	uxth	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	460b      	mov	r3, r1
 8005028:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005038:	b084      	sub	sp, #16
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	f107 0014 	add.w	r0, r7, #20
 8005046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	b004      	add	sp, #16
 8005078:	4770      	bx	lr
	...

0800507c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800507c:	b480      	push	{r7}
 800507e:	b09b      	sub	sp, #108	; 0x6c
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	78db      	ldrb	r3, [r3, #3]
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d81f      	bhi.n	80050ee <USB_ActivateEndpoint+0x72>
 80050ae:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <USB_ActivateEndpoint+0x38>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080050e1 	.word	0x080050e1
 80050bc:	080050f7 	.word	0x080050f7
 80050c0:	080050d3 	.word	0x080050d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80050c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80050d0:	e012      	b.n	80050f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80050d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80050da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80050de:	e00b      	b.n	80050f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80050e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80050ec:	e004      	b.n	80050f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80050f4:	e000      	b.n	80050f8 <USB_ActivateEndpoint+0x7c>
      break;
 80050f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800510a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800510e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005116:	b29b      	uxth	r3, r3
 8005118:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	b21b      	sxth	r3, r3
 800512a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	b21a      	sxth	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	b21b      	sxth	r3, r3
 800513a:	4313      	orrs	r3, r2
 800513c:	b21b      	sxth	r3, r3
 800513e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	441a      	add	r2, r3
 800514c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005160:	b29b      	uxth	r3, r3
 8005162:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	7b1b      	ldrb	r3, [r3, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	f040 8149 	bne.w	8005400 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 8084 	beq.w	8005280 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005182:	b29b      	uxth	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	4413      	add	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	00da      	lsls	r2, r3, #3
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	88db      	ldrh	r3, [r3, #6]
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	81fb      	strh	r3, [r7, #14]
 80051ba:	89fb      	ldrh	r3, [r7, #14]
 80051bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01b      	beq.n	80051fc <USB_ActivateEndpoint+0x180>
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	81bb      	strh	r3, [r7, #12]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	441a      	add	r2, r3
 80051e6:	89bb      	ldrh	r3, [r7, #12]
 80051e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	78db      	ldrb	r3, [r3, #3]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d020      	beq.n	8005246 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800521a:	813b      	strh	r3, [r7, #8]
 800521c:	893b      	ldrh	r3, [r7, #8]
 800521e:	f083 0320 	eor.w	r3, r3, #32
 8005222:	813b      	strh	r3, [r7, #8]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	441a      	add	r2, r3
 800522e:	893b      	ldrh	r3, [r7, #8]
 8005230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005240:	b29b      	uxth	r3, r3
 8005242:	8013      	strh	r3, [r2, #0]
 8005244:	e27f      	b.n	8005746 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525c:	817b      	strh	r3, [r7, #10]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	441a      	add	r2, r3
 8005268:	897b      	ldrh	r3, [r7, #10]
 800526a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800527a:	b29b      	uxth	r3, r3
 800527c:	8013      	strh	r3, [r2, #0]
 800527e:	e262      	b.n	8005746 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800528a:	b29b      	uxth	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	4413      	add	r3, r2
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	00da      	lsls	r2, r3, #3
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	4413      	add	r3, r2
 800529e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	88db      	ldrh	r3, [r3, #6]
 80052a8:	085b      	lsrs	r3, r3, #1
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052be:	b29b      	uxth	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	4413      	add	r3, r2
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	00da      	lsls	r2, r3, #3
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	4413      	add	r3, r2
 80052d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d112      	bne.n	8005306 <USB_ActivateEndpoint+0x28a>
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fe:	b29a      	uxth	r2, r3
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	e02f      	b.n	8005366 <USB_ActivateEndpoint+0x2ea>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b3e      	cmp	r3, #62	; 0x3e
 800530c:	d813      	bhi.n	8005336 <USB_ActivateEndpoint+0x2ba>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	663b      	str	r3, [r7, #96]	; 0x60
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <USB_ActivateEndpoint+0x2ac>
 8005322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005324:	3301      	adds	r3, #1
 8005326:	663b      	str	r3, [r7, #96]	; 0x60
 8005328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800532a:	b29b      	uxth	r3, r3
 800532c:	029b      	lsls	r3, r3, #10
 800532e:	b29a      	uxth	r2, r3
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	801a      	strh	r2, [r3, #0]
 8005334:	e017      	b.n	8005366 <USB_ActivateEndpoint+0x2ea>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	663b      	str	r3, [r7, #96]	; 0x60
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <USB_ActivateEndpoint+0x2d4>
 800534a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800534c:	3b01      	subs	r3, #1
 800534e:	663b      	str	r3, [r7, #96]	; 0x60
 8005350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005352:	b29b      	uxth	r3, r3
 8005354:	029b      	lsls	r3, r3, #10
 8005356:	b29b      	uxth	r3, r3
 8005358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005360:	b29a      	uxth	r2, r3
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	83fb      	strh	r3, [r7, #30]
 8005374:	8bfb      	ldrh	r3, [r7, #30]
 8005376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01b      	beq.n	80053b6 <USB_ActivateEndpoint+0x33a>
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	b29b      	uxth	r3, r3
 800538c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005394:	83bb      	strh	r3, [r7, #28]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	441a      	add	r2, r3
 80053a0:	8bbb      	ldrh	r3, [r7, #28]
 80053a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053cc:	837b      	strh	r3, [r7, #26]
 80053ce:	8b7b      	ldrh	r3, [r7, #26]
 80053d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053d4:	837b      	strh	r3, [r7, #26]
 80053d6:	8b7b      	ldrh	r3, [r7, #26]
 80053d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053dc:	837b      	strh	r3, [r7, #26]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	441a      	add	r2, r3
 80053e8:	8b7b      	ldrh	r3, [r7, #26]
 80053ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	8013      	strh	r3, [r2, #0]
 80053fe:	e1a2      	b.n	8005746 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	b29b      	uxth	r3, r3
 800540e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005416:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	441a      	add	r2, r3
 8005424:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005430:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005438:	b29b      	uxth	r3, r3
 800543a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005446:	b29b      	uxth	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800544c:	4413      	add	r3, r2
 800544e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	00da      	lsls	r2, r3, #3
 8005456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005458:	4413      	add	r3, r2
 800545a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545e:	657b      	str	r3, [r7, #84]	; 0x54
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	891b      	ldrh	r3, [r3, #8]
 8005464:	085b      	lsrs	r3, r3, #1
 8005466:	b29b      	uxth	r3, r3
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546e:	801a      	strh	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	653b      	str	r3, [r7, #80]	; 0x50
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547a:	b29b      	uxth	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005480:	4413      	add	r3, r2
 8005482:	653b      	str	r3, [r7, #80]	; 0x50
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	00da      	lsls	r2, r3, #3
 800548a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548c:	4413      	add	r3, r2
 800548e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	895b      	ldrh	r3, [r3, #10]
 8005498:	085b      	lsrs	r3, r3, #1
 800549a:	b29b      	uxth	r3, r3
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	785b      	ldrb	r3, [r3, #1]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f040 8091 	bne.w	80055d0 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80054bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80054be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01b      	beq.n	80054fe <USB_ActivateEndpoint+0x482>
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054dc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	441a      	add	r2, r3
 80054e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80054ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	873b      	strh	r3, [r7, #56]	; 0x38
 800550c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800550e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d01b      	beq.n	800554e <USB_ActivateEndpoint+0x4d2>
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b29b      	uxth	r3, r3
 8005524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	441a      	add	r2, r3
 8005538:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800553a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005546:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800554a:	b29b      	uxth	r3, r3
 800554c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	b29b      	uxth	r3, r3
 800555c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005564:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005566:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005568:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800556c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800556e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005570:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005574:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	441a      	add	r2, r3
 8005580:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005592:	b29b      	uxth	r3, r3
 8005594:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ac:	867b      	strh	r3, [r7, #50]	; 0x32
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	441a      	add	r2, r3
 80055b8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80055ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	8013      	strh	r3, [r2, #0]
 80055ce:	e0ba      	b.n	8005746 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80055e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80055e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01d      	beq.n	8005628 <USB_ActivateEndpoint+0x5ac>
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	441a      	add	r2, r3
 8005610:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005624:	b29b      	uxth	r3, r3
 8005626:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005638:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800563c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01d      	beq.n	8005680 <USB_ActivateEndpoint+0x604>
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800566c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005678:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800567c:	b29b      	uxth	r3, r3
 800567e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	78db      	ldrb	r3, [r3, #3]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d024      	beq.n	80056d2 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800569e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80056a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80056a6:	f083 0320 	eor.w	r3, r3, #32
 80056aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80056bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	8013      	strh	r3, [r2, #0]
 80056d0:	e01d      	b.n	800570e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	441a      	add	r2, r3
 80056f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80056fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570a:	b29b      	uxth	r3, r3
 800570c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005724:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	441a      	add	r2, r3
 8005730:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005742:	b29b      	uxth	r3, r3
 8005744:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005746:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800574a:	4618      	mov	r0, r3
 800574c:	376c      	adds	r7, #108	; 0x6c
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop

08005758 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005758:	b480      	push	{r7}
 800575a:	b08d      	sub	sp, #52	; 0x34
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	7b1b      	ldrb	r3, [r3, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f040 808e 	bne.w	8005888 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d044      	beq.n	80057fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	81bb      	strh	r3, [r7, #12]
 8005782:	89bb      	ldrh	r3, [r7, #12]
 8005784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01b      	beq.n	80057c4 <USB_DeactivateEndpoint+0x6c>
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a2:	817b      	strh	r3, [r7, #10]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	897b      	ldrh	r3, [r7, #10]
 80057b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057da:	813b      	strh	r3, [r7, #8]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	441a      	add	r2, r3
 80057e6:	893b      	ldrh	r3, [r7, #8]
 80057e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	8013      	strh	r3, [r2, #0]
 80057fc:	e192      	b.n	8005b24 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	827b      	strh	r3, [r7, #18]
 800580c:	8a7b      	ldrh	r3, [r7, #18]
 800580e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01b      	beq.n	800584e <USB_DeactivateEndpoint+0xf6>
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	b29b      	uxth	r3, r3
 8005824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582c:	823b      	strh	r3, [r7, #16]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	441a      	add	r2, r3
 8005838:	8a3b      	ldrh	r3, [r7, #16]
 800583a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800583e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005842:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584a:	b29b      	uxth	r3, r3
 800584c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005864:	81fb      	strh	r3, [r7, #14]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	441a      	add	r2, r3
 8005870:	89fb      	ldrh	r3, [r7, #14]
 8005872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800587e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005882:	b29b      	uxth	r3, r3
 8005884:	8013      	strh	r3, [r2, #0]
 8005886:	e14d      	b.n	8005b24 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f040 80a5 	bne.w	80059dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	843b      	strh	r3, [r7, #32]
 80058a0:	8c3b      	ldrh	r3, [r7, #32]
 80058a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01b      	beq.n	80058e2 <USB_DeactivateEndpoint+0x18a>
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c0:	83fb      	strh	r3, [r7, #30]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	441a      	add	r2, r3
 80058cc:	8bfb      	ldrh	r3, [r7, #30]
 80058ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058de:	b29b      	uxth	r3, r3
 80058e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	83bb      	strh	r3, [r7, #28]
 80058f0:	8bbb      	ldrh	r3, [r7, #28]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d01b      	beq.n	8005932 <USB_DeactivateEndpoint+0x1da>
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	b29b      	uxth	r3, r3
 8005908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005910:	837b      	strh	r3, [r7, #26]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	441a      	add	r2, r3
 800591c:	8b7b      	ldrh	r3, [r7, #26]
 800591e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800592e:	b29b      	uxth	r3, r3
 8005930:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005948:	833b      	strh	r3, [r7, #24]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	441a      	add	r2, r3
 8005954:	8b3b      	ldrh	r3, [r7, #24]
 8005956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800595a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800595e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005962:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005966:	b29b      	uxth	r3, r3
 8005968:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800597c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005980:	82fb      	strh	r3, [r7, #22]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	441a      	add	r2, r3
 800598c:	8afb      	ldrh	r3, [r7, #22]
 800598e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599e:	b29b      	uxth	r3, r3
 80059a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b8:	82bb      	strh	r3, [r7, #20]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	441a      	add	r2, r3
 80059c4:	8abb      	ldrh	r3, [r7, #20]
 80059c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	8013      	strh	r3, [r2, #0]
 80059da:	e0a3      	b.n	8005b24 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80059ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01b      	beq.n	8005a2c <USB_DeactivateEndpoint+0x2d4>
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005a3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01b      	beq.n	8005a7c <USB_DeactivateEndpoint+0x324>
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	853b      	strh	r3, [r7, #40]	; 0x28
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	441a      	add	r2, r3
 8005a66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a92:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	441a      	add	r2, r3
 8005a9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aca:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	441a      	add	r2, r3
 8005ad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b02:	847b      	strh	r3, [r7, #34]	; 0x22
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	441a      	add	r2, r3
 8005b0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3734      	adds	r7, #52	; 0x34
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b0c4      	sub	sp, #272	; 0x110
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	1d3b      	adds	r3, r7, #4
 8005b3a:	6018      	str	r0, [r3, #0]
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b40:	463b      	mov	r3, r7
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	f040 8566 	bne.w	8006618 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	463b      	mov	r3, r7
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d905      	bls.n	8005b68 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005b66:	e004      	b.n	8005b72 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005b68:	463b      	mov	r3, r7
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005b72:	463b      	mov	r3, r7
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	7b1b      	ldrb	r3, [r3, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d12c      	bne.n	8005bd6 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6959      	ldr	r1, [r3, #20]
 8005b82:	463b      	mov	r3, r7
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	88da      	ldrh	r2, [r3, #6]
 8005b88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	1d38      	adds	r0, r7, #4
 8005b90:	6800      	ldr	r0, [r0, #0]
 8005b92:	f001 fa58 	bl	8007046 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b96:	1d3b      	adds	r3, r7, #4
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	463b      	mov	r3, r7
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	00da      	lsls	r2, r3, #3
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005bbe:	f107 0310 	add.w	r3, r7, #16
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	f107 0310 	add.w	r3, r7, #16
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	f000 bcec 	b.w	80065ae <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	78db      	ldrb	r3, [r3, #3]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	f040 8356 	bne.w	800628e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005be2:	463b      	mov	r3, r7
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6a1a      	ldr	r2, [r3, #32]
 8005be8:	463b      	mov	r3, r7
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	f240 82fa 	bls.w	80061e8 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005bf4:	1d3b      	adds	r3, r7, #4
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005c12:	1d3b      	adds	r3, r7, #4
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	463b      	mov	r3, r7
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	441a      	add	r2, r3
 8005c20:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c2c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8005c38:	463b      	mov	r3, r7
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005c42:	463b      	mov	r3, r7
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6a1a      	ldr	r2, [r3, #32]
 8005c48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c4c:	1ad2      	subs	r2, r2, r3
 8005c4e:	463b      	mov	r3, r7
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c54:	1d3b      	adds	r3, r7, #4
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	463b      	mov	r3, r7
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 815e 	beq.w	8005f2c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c70:	1d3b      	adds	r3, r7, #4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
 8005c76:	463b      	mov	r3, r7
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	785b      	ldrb	r3, [r3, #1]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d164      	bne.n	8005d4a <USB_EPStartXfer+0x218>
 8005c80:	1d3b      	adds	r3, r7, #4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c86:	1d3b      	adds	r3, r7, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	4413      	add	r3, r2
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c98:	463b      	mov	r3, r7
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	00da      	lsls	r2, r3, #3
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005caa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d112      	bne.n	8005cd8 <USB_EPStartXfer+0x1a6>
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	801a      	strh	r2, [r3, #0]
 8005cd6:	e054      	b.n	8005d82 <USB_EPStartXfer+0x250>
 8005cd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8005cde:	d817      	bhi.n	8005d10 <USB_EPStartXfer+0x1de>
 8005ce0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ce4:	085b      	lsrs	r3, r3, #1
 8005ce6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005cea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <USB_EPStartXfer+0x1ce>
 8005cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	029b      	lsls	r3, r3, #10
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	801a      	strh	r2, [r3, #0]
 8005d0e:	e038      	b.n	8005d82 <USB_EPStartXfer+0x250>
 8005d10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d14:	095b      	lsrs	r3, r3, #5
 8005d16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d1e:	f003 031f 	and.w	r3, r3, #31
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <USB_EPStartXfer+0x1fe>
 8005d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	029b      	lsls	r3, r3, #10
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	801a      	strh	r2, [r3, #0]
 8005d48:	e01b      	b.n	8005d82 <USB_EPStartXfer+0x250>
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	785b      	ldrb	r3, [r3, #1]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d116      	bne.n	8005d82 <USB_EPStartXfer+0x250>
 8005d54:	1d3b      	adds	r3, r7, #4
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d62:	4413      	add	r3, r2
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
 8005d66:	463b      	mov	r3, r7
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	00da      	lsls	r2, r3, #3
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d70:	4413      	add	r3, r2
 8005d72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d76:	633b      	str	r3, [r7, #48]	; 0x30
 8005d78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d82:	463b      	mov	r3, r7
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	895b      	ldrh	r3, [r3, #10]
 8005d88:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6959      	ldr	r1, [r3, #20]
 8005d92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005d9c:	1d38      	adds	r0, r7, #4
 8005d9e:	6800      	ldr	r0, [r0, #0]
 8005da0:	f001 f951 	bl	8007046 <USB_WritePMA>
            ep->xfer_buff += len;
 8005da4:	463b      	mov	r3, r7
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dae:	441a      	add	r2, r3
 8005db0:	463b      	mov	r3, r7
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005db6:	463b      	mov	r3, r7
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6a1a      	ldr	r2, [r3, #32]
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d90e      	bls.n	8005de4 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8005dc6:	463b      	mov	r3, r7
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005dd0:	463b      	mov	r3, r7
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6a1a      	ldr	r2, [r3, #32]
 8005dd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dda:	1ad2      	subs	r2, r2, r3
 8005ddc:	463b      	mov	r3, r7
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	621a      	str	r2, [r3, #32]
 8005de2:	e008      	b.n	8005df6 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005de4:	463b      	mov	r3, r7
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005dee:	463b      	mov	r3, r7
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005df6:	463b      	mov	r3, r7
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	785b      	ldrb	r3, [r3, #1]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d164      	bne.n	8005eca <USB_EPStartXfer+0x398>
 8005e00:	1d3b      	adds	r3, r7, #4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	61fb      	str	r3, [r7, #28]
 8005e06:	1d3b      	adds	r3, r7, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	463b      	mov	r3, r7
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	00da      	lsls	r2, r3, #3
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e28:	61bb      	str	r3, [r7, #24]
 8005e2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d112      	bne.n	8005e58 <USB_EPStartXfer+0x326>
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	801a      	strh	r2, [r3, #0]
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	801a      	strh	r2, [r3, #0]
 8005e56:	e057      	b.n	8005f08 <USB_EPStartXfer+0x3d6>
 8005e58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e5e:	d817      	bhi.n	8005e90 <USB_EPStartXfer+0x35e>
 8005e60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e64:	085b      	lsrs	r3, r3, #1
 8005e66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d004      	beq.n	8005e80 <USB_EPStartXfer+0x34e>
 8005e76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	029b      	lsls	r3, r3, #10
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	e03b      	b.n	8005f08 <USB_EPStartXfer+0x3d6>
 8005e90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e9e:	f003 031f 	and.w	r3, r3, #31
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d104      	bne.n	8005eb0 <USB_EPStartXfer+0x37e>
 8005ea6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005eb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	029b      	lsls	r3, r3, #10
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	801a      	strh	r2, [r3, #0]
 8005ec8:	e01e      	b.n	8005f08 <USB_EPStartXfer+0x3d6>
 8005eca:	463b      	mov	r3, r7
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d119      	bne.n	8005f08 <USB_EPStartXfer+0x3d6>
 8005ed4:	1d3b      	adds	r3, r7, #4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	4413      	add	r3, r2
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
 8005eec:	463b      	mov	r3, r7
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	00da      	lsls	r2, r3, #3
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f08:	463b      	mov	r3, r7
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	891b      	ldrh	r3, [r3, #8]
 8005f0e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f12:	463b      	mov	r3, r7
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6959      	ldr	r1, [r3, #20]
 8005f18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005f22:	1d38      	adds	r0, r7, #4
 8005f24:	6800      	ldr	r0, [r0, #0]
 8005f26:	f001 f88e 	bl	8007046 <USB_WritePMA>
 8005f2a:	e340      	b.n	80065ae <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d164      	bne.n	8006000 <USB_EPStartXfer+0x4ce>
 8005f36:	1d3b      	adds	r3, r7, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f3c:	1d3b      	adds	r3, r7, #4
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4a:	4413      	add	r3, r2
 8005f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f4e:	463b      	mov	r3, r7
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	00da      	lsls	r2, r3, #3
 8005f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f58:	4413      	add	r3, r2
 8005f5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d112      	bne.n	8005f8e <USB_EPStartXfer+0x45c>
 8005f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f76:	801a      	strh	r2, [r3, #0]
 8005f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	e057      	b.n	800603e <USB_EPStartXfer+0x50c>
 8005f8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f92:	2b3e      	cmp	r3, #62	; 0x3e
 8005f94:	d817      	bhi.n	8005fc6 <USB_EPStartXfer+0x494>
 8005f96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d004      	beq.n	8005fb6 <USB_EPStartXfer+0x484>
 8005fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	029b      	lsls	r3, r3, #10
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	e03b      	b.n	800603e <USB_EPStartXfer+0x50c>
 8005fc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d104      	bne.n	8005fe6 <USB_EPStartXfer+0x4b4>
 8005fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	029b      	lsls	r3, r3, #10
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ffc:	801a      	strh	r2, [r3, #0]
 8005ffe:	e01e      	b.n	800603e <USB_EPStartXfer+0x50c>
 8006000:	463b      	mov	r3, r7
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d119      	bne.n	800603e <USB_EPStartXfer+0x50c>
 800600a:	1d3b      	adds	r3, r7, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	657b      	str	r3, [r7, #84]	; 0x54
 8006010:	1d3b      	adds	r3, r7, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006018:	b29b      	uxth	r3, r3
 800601a:	461a      	mov	r2, r3
 800601c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601e:	4413      	add	r3, r2
 8006020:	657b      	str	r3, [r7, #84]	; 0x54
 8006022:	463b      	mov	r3, r7
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	00da      	lsls	r2, r3, #3
 800602a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800602c:	4413      	add	r3, r2
 800602e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006032:	653b      	str	r3, [r7, #80]	; 0x50
 8006034:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006038:	b29a      	uxth	r2, r3
 800603a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800603c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800603e:	463b      	mov	r3, r7
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	891b      	ldrh	r3, [r3, #8]
 8006044:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006048:	463b      	mov	r3, r7
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6959      	ldr	r1, [r3, #20]
 800604e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006052:	b29b      	uxth	r3, r3
 8006054:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006058:	1d38      	adds	r0, r7, #4
 800605a:	6800      	ldr	r0, [r0, #0]
 800605c:	f000 fff3 	bl	8007046 <USB_WritePMA>
            ep->xfer_buff += len;
 8006060:	463b      	mov	r3, r7
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695a      	ldr	r2, [r3, #20]
 8006066:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800606a:	441a      	add	r2, r3
 800606c:	463b      	mov	r3, r7
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006072:	463b      	mov	r3, r7
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6a1a      	ldr	r2, [r3, #32]
 8006078:	463b      	mov	r3, r7
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	429a      	cmp	r2, r3
 8006080:	d90e      	bls.n	80060a0 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006082:	463b      	mov	r3, r7
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6a1a      	ldr	r2, [r3, #32]
 8006092:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006096:	1ad2      	subs	r2, r2, r3
 8006098:	463b      	mov	r3, r7
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	621a      	str	r2, [r3, #32]
 800609e:	e008      	b.n	80060b2 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 80060a0:	463b      	mov	r3, r7
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80060aa:	463b      	mov	r3, r7
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2200      	movs	r2, #0
 80060b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	647b      	str	r3, [r7, #68]	; 0x44
 80060b8:	463b      	mov	r3, r7
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	785b      	ldrb	r3, [r3, #1]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d164      	bne.n	800618c <USB_EPStartXfer+0x65a>
 80060c2:	1d3b      	adds	r3, r7, #4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c8:	1d3b      	adds	r3, r7, #4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d6:	4413      	add	r3, r2
 80060d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060da:	463b      	mov	r3, r7
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	00da      	lsls	r2, r3, #3
 80060e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e4:	4413      	add	r3, r2
 80060e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80060ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d112      	bne.n	800611a <USB_EPStartXfer+0x5e8>
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060fe:	b29a      	uxth	r2, r3
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	801a      	strh	r2, [r3, #0]
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800610e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006112:	b29a      	uxth	r2, r3
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	e054      	b.n	80061c4 <USB_EPStartXfer+0x692>
 800611a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800611e:	2b3e      	cmp	r3, #62	; 0x3e
 8006120:	d817      	bhi.n	8006152 <USB_EPStartXfer+0x620>
 8006122:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800612c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <USB_EPStartXfer+0x610>
 8006138:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800613c:	3301      	adds	r3, #1
 800613e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006142:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006146:	b29b      	uxth	r3, r3
 8006148:	029b      	lsls	r3, r3, #10
 800614a:	b29a      	uxth	r2, r3
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	e038      	b.n	80061c4 <USB_EPStartXfer+0x692>
 8006152:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800615c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	2b00      	cmp	r3, #0
 8006166:	d104      	bne.n	8006172 <USB_EPStartXfer+0x640>
 8006168:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800616c:	3b01      	subs	r3, #1
 800616e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006176:	b29b      	uxth	r3, r3
 8006178:	029b      	lsls	r3, r3, #10
 800617a:	b29b      	uxth	r3, r3
 800617c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006184:	b29a      	uxth	r2, r3
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	801a      	strh	r2, [r3, #0]
 800618a:	e01b      	b.n	80061c4 <USB_EPStartXfer+0x692>
 800618c:	463b      	mov	r3, r7
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	785b      	ldrb	r3, [r3, #1]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d116      	bne.n	80061c4 <USB_EPStartXfer+0x692>
 8006196:	1d3b      	adds	r3, r7, #4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800619e:	b29b      	uxth	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061a4:	4413      	add	r3, r2
 80061a6:	647b      	str	r3, [r7, #68]	; 0x44
 80061a8:	463b      	mov	r3, r7
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	00da      	lsls	r2, r3, #3
 80061b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061b2:	4413      	add	r3, r2
 80061b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061b8:	643b      	str	r3, [r7, #64]	; 0x40
 80061ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061be:	b29a      	uxth	r2, r3
 80061c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80061c4:	463b      	mov	r3, r7
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	895b      	ldrh	r3, [r3, #10]
 80061ca:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061ce:	463b      	mov	r3, r7
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6959      	ldr	r1, [r3, #20]
 80061d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80061de:	1d38      	adds	r0, r7, #4
 80061e0:	6800      	ldr	r0, [r0, #0]
 80061e2:	f000 ff30 	bl	8007046 <USB_WritePMA>
 80061e6:	e1e2      	b.n	80065ae <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80061e8:	463b      	mov	r3, r7
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80061f2:	1d3b      	adds	r3, r7, #4
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	463b      	mov	r3, r7
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006210:	1d3b      	adds	r3, r7, #4
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	463b      	mov	r3, r7
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	441a      	add	r2, r3
 800621e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006232:	b29b      	uxth	r3, r3
 8006234:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006236:	1d3b      	adds	r3, r7, #4
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	663b      	str	r3, [r7, #96]	; 0x60
 800623c:	1d3b      	adds	r3, r7, #4
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006244:	b29b      	uxth	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800624a:	4413      	add	r3, r2
 800624c:	663b      	str	r3, [r7, #96]	; 0x60
 800624e:	463b      	mov	r3, r7
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	00da      	lsls	r2, r3, #3
 8006256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006258:	4413      	add	r3, r2
 800625a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800625e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006260:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006264:	b29a      	uxth	r2, r3
 8006266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006268:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800626a:	463b      	mov	r3, r7
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	891b      	ldrh	r3, [r3, #8]
 8006270:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006274:	463b      	mov	r3, r7
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6959      	ldr	r1, [r3, #20]
 800627a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800627e:	b29b      	uxth	r3, r3
 8006280:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006284:	1d38      	adds	r0, r7, #4
 8006286:	6800      	ldr	r0, [r0, #0]
 8006288:	f000 fedd 	bl	8007046 <USB_WritePMA>
 800628c:	e18f      	b.n	80065ae <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800628e:	1d3b      	adds	r3, r7, #4
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	463b      	mov	r3, r7
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 808f 	beq.w	80063c8 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062aa:	1d3b      	adds	r3, r7, #4
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80062b0:	463b      	mov	r3, r7
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	785b      	ldrb	r3, [r3, #1]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d164      	bne.n	8006384 <USB_EPStartXfer+0x852>
 80062ba:	1d3b      	adds	r3, r7, #4
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	673b      	str	r3, [r7, #112]	; 0x70
 80062c0:	1d3b      	adds	r3, r7, #4
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062ce:	4413      	add	r3, r2
 80062d0:	673b      	str	r3, [r7, #112]	; 0x70
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	00da      	lsls	r2, r3, #3
 80062da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062dc:	4413      	add	r3, r2
 80062de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d112      	bne.n	8006312 <USB_EPStartXfer+0x7e0>
 80062ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800630a:	b29a      	uxth	r2, r3
 800630c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	e054      	b.n	80063bc <USB_EPStartXfer+0x88a>
 8006312:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006316:	2b3e      	cmp	r3, #62	; 0x3e
 8006318:	d817      	bhi.n	800634a <USB_EPStartXfer+0x818>
 800631a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006324:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d004      	beq.n	800633a <USB_EPStartXfer+0x808>
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006334:	3301      	adds	r3, #1
 8006336:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800633a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633e:	b29b      	uxth	r3, r3
 8006340:	029b      	lsls	r3, r3, #10
 8006342:	b29a      	uxth	r2, r3
 8006344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	e038      	b.n	80063bc <USB_EPStartXfer+0x88a>
 800634a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006354:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006358:	f003 031f 	and.w	r3, r3, #31
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <USB_EPStartXfer+0x838>
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006364:	3b01      	subs	r3, #1
 8006366:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800636a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636e:	b29b      	uxth	r3, r3
 8006370:	029b      	lsls	r3, r3, #10
 8006372:	b29b      	uxth	r3, r3
 8006374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637c:	b29a      	uxth	r2, r3
 800637e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006380:	801a      	strh	r2, [r3, #0]
 8006382:	e01b      	b.n	80063bc <USB_EPStartXfer+0x88a>
 8006384:	463b      	mov	r3, r7
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	785b      	ldrb	r3, [r3, #1]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d116      	bne.n	80063bc <USB_EPStartXfer+0x88a>
 800638e:	1d3b      	adds	r3, r7, #4
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006396:	b29b      	uxth	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800639c:	4413      	add	r3, r2
 800639e:	67bb      	str	r3, [r7, #120]	; 0x78
 80063a0:	463b      	mov	r3, r7
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	00da      	lsls	r2, r3, #3
 80063a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063aa:	4413      	add	r3, r2
 80063ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063b0:	677b      	str	r3, [r7, #116]	; 0x74
 80063b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80063bc:	463b      	mov	r3, r7
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	895b      	ldrh	r3, [r3, #10]
 80063c2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 80063c6:	e097      	b.n	80064f8 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063c8:	463b      	mov	r3, r7
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	785b      	ldrb	r3, [r3, #1]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d168      	bne.n	80064a4 <USB_EPStartXfer+0x972>
 80063d2:	1d3b      	adds	r3, r7, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063da:	1d3b      	adds	r3, r7, #4
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063ea:	4413      	add	r3, r2
 80063ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063f0:	463b      	mov	r3, r7
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	00da      	lsls	r2, r3, #3
 80063f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063fc:	4413      	add	r3, r2
 80063fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006402:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006408:	2b00      	cmp	r3, #0
 800640a:	d112      	bne.n	8006432 <USB_EPStartXfer+0x900>
 800640c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	b29b      	uxth	r3, r3
 8006412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006416:	b29a      	uxth	r2, r3
 8006418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800641a:	801a      	strh	r2, [r3, #0]
 800641c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642a:	b29a      	uxth	r2, r3
 800642c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800642e:	801a      	strh	r2, [r3, #0]
 8006430:	e05d      	b.n	80064ee <USB_EPStartXfer+0x9bc>
 8006432:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006436:	2b3e      	cmp	r3, #62	; 0x3e
 8006438:	d817      	bhi.n	800646a <USB_EPStartXfer+0x938>
 800643a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006444:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d004      	beq.n	800645a <USB_EPStartXfer+0x928>
 8006450:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006454:	3301      	adds	r3, #1
 8006456:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800645a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800645e:	b29b      	uxth	r3, r3
 8006460:	029b      	lsls	r3, r3, #10
 8006462:	b29a      	uxth	r2, r3
 8006464:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e041      	b.n	80064ee <USB_EPStartXfer+0x9bc>
 800646a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006474:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006478:	f003 031f 	and.w	r3, r3, #31
 800647c:	2b00      	cmp	r3, #0
 800647e:	d104      	bne.n	800648a <USB_EPStartXfer+0x958>
 8006480:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006484:	3b01      	subs	r3, #1
 8006486:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800648a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800648e:	b29b      	uxth	r3, r3
 8006490:	029b      	lsls	r3, r3, #10
 8006492:	b29b      	uxth	r3, r3
 8006494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649c:	b29a      	uxth	r2, r3
 800649e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	e024      	b.n	80064ee <USB_EPStartXfer+0x9bc>
 80064a4:	463b      	mov	r3, r7
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	785b      	ldrb	r3, [r3, #1]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d11f      	bne.n	80064ee <USB_EPStartXfer+0x9bc>
 80064ae:	1d3b      	adds	r3, r7, #4
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064b6:	1d3b      	adds	r3, r7, #4
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064be:	b29b      	uxth	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064c6:	4413      	add	r3, r2
 80064c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064cc:	463b      	mov	r3, r7
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	00da      	lsls	r2, r3, #3
 80064d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064d8:	4413      	add	r3, r2
 80064da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064ee:	463b      	mov	r3, r7
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	891b      	ldrh	r3, [r3, #8]
 80064f4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064f8:	463b      	mov	r3, r7
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6959      	ldr	r1, [r3, #20]
 80064fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006502:	b29b      	uxth	r3, r3
 8006504:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006508:	1d38      	adds	r0, r7, #4
 800650a:	6800      	ldr	r0, [r0, #0]
 800650c:	f000 fd9b 	bl	8007046 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006510:	463b      	mov	r3, r7
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d122      	bne.n	8006560 <USB_EPStartXfer+0xa2e>
 800651a:	1d3b      	adds	r3, r7, #4
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	463b      	mov	r3, r7
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006534:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006538:	1d3b      	adds	r3, r7, #4
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	463b      	mov	r3, r7
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	441a      	add	r2, r3
 8006546:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800654a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006556:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800655a:	b29b      	uxth	r3, r3
 800655c:	8013      	strh	r3, [r2, #0]
 800655e:	e026      	b.n	80065ae <USB_EPStartXfer+0xa7c>
 8006560:	463b      	mov	r3, r7
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	785b      	ldrb	r3, [r3, #1]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d121      	bne.n	80065ae <USB_EPStartXfer+0xa7c>
 800656a:	1d3b      	adds	r3, r7, #4
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	463b      	mov	r3, r7
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	b29b      	uxth	r3, r3
 800657c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006584:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006588:	1d3b      	adds	r3, r7, #4
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	463b      	mov	r3, r7
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	441a      	add	r2, r3
 8006596:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800659a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800659e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80065ae:	1d3b      	adds	r3, r7, #4
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	463b      	mov	r3, r7
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f107 020e 	add.w	r2, r7, #14
 80065c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065cc:	8013      	strh	r3, [r2, #0]
 80065ce:	f107 030e 	add.w	r3, r7, #14
 80065d2:	f107 020e 	add.w	r2, r7, #14
 80065d6:	8812      	ldrh	r2, [r2, #0]
 80065d8:	f082 0210 	eor.w	r2, r2, #16
 80065dc:	801a      	strh	r2, [r3, #0]
 80065de:	f107 030e 	add.w	r3, r7, #14
 80065e2:	f107 020e 	add.w	r2, r7, #14
 80065e6:	8812      	ldrh	r2, [r2, #0]
 80065e8:	f082 0220 	eor.w	r2, r2, #32
 80065ec:	801a      	strh	r2, [r3, #0]
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	463b      	mov	r3, r7
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	441a      	add	r2, r3
 80065fc:	f107 030e 	add.w	r3, r7, #14
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800660e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006612:	b29b      	uxth	r3, r3
 8006614:	8013      	strh	r3, [r2, #0]
 8006616:	e3b5      	b.n	8006d84 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006618:	463b      	mov	r3, r7
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	7b1b      	ldrb	r3, [r3, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f040 8090 	bne.w	8006744 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006624:	463b      	mov	r3, r7
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	463b      	mov	r3, r7
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	429a      	cmp	r2, r3
 8006632:	d90e      	bls.n	8006652 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006634:	463b      	mov	r3, r7
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800663e:	463b      	mov	r3, r7
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699a      	ldr	r2, [r3, #24]
 8006644:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006648:	1ad2      	subs	r2, r2, r3
 800664a:	463b      	mov	r3, r7
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	619a      	str	r2, [r3, #24]
 8006650:	e008      	b.n	8006664 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800665c:	463b      	mov	r3, r7
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2200      	movs	r2, #0
 8006662:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006664:	1d3b      	adds	r3, r7, #4
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800666c:	1d3b      	adds	r3, r7, #4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006674:	b29b      	uxth	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800667c:	4413      	add	r3, r2
 800667e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006682:	463b      	mov	r3, r7
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	00da      	lsls	r2, r3, #3
 800668a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800668e:	4413      	add	r3, r2
 8006690:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006694:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006698:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800669c:	2b00      	cmp	r3, #0
 800669e:	d116      	bne.n	80066ce <USB_EPStartXfer+0xb9c>
 80066a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066b2:	801a      	strh	r2, [r3, #0]
 80066b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	e32c      	b.n	8006d28 <USB_EPStartXfer+0x11f6>
 80066ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066d2:	2b3e      	cmp	r3, #62	; 0x3e
 80066d4:	d818      	bhi.n	8006708 <USB_EPStartXfer+0xbd6>
 80066d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066da:	085b      	lsrs	r3, r3, #1
 80066dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d004      	beq.n	80066f6 <USB_EPStartXfer+0xbc4>
 80066ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066f0:	3301      	adds	r3, #1
 80066f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	029b      	lsls	r3, r3, #10
 80066fe:	b29a      	uxth	r2, r3
 8006700:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	e30f      	b.n	8006d28 <USB_EPStartXfer+0x11f6>
 8006708:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800670c:	095b      	lsrs	r3, r3, #5
 800670e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006712:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	2b00      	cmp	r3, #0
 800671c:	d104      	bne.n	8006728 <USB_EPStartXfer+0xbf6>
 800671e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006722:	3b01      	subs	r3, #1
 8006724:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006728:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800672c:	b29b      	uxth	r3, r3
 800672e:	029b      	lsls	r3, r3, #10
 8006730:	b29b      	uxth	r3, r3
 8006732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800673a:	b29a      	uxth	r2, r3
 800673c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006740:	801a      	strh	r2, [r3, #0]
 8006742:	e2f1      	b.n	8006d28 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006744:	463b      	mov	r3, r7
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	78db      	ldrb	r3, [r3, #3]
 800674a:	2b02      	cmp	r3, #2
 800674c:	f040 818f 	bne.w	8006a6e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006750:	463b      	mov	r3, r7
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	785b      	ldrb	r3, [r3, #1]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d175      	bne.n	8006846 <USB_EPStartXfer+0xd14>
 800675a:	1d3b      	adds	r3, r7, #4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006762:	1d3b      	adds	r3, r7, #4
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800676a:	b29b      	uxth	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006772:	4413      	add	r3, r2
 8006774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006778:	463b      	mov	r3, r7
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	00da      	lsls	r2, r3, #3
 8006780:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006784:	4413      	add	r3, r2
 8006786:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800678a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800678e:	463b      	mov	r3, r7
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d116      	bne.n	80067c6 <USB_EPStartXfer+0xc94>
 8006798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067bc:	b29a      	uxth	r2, r3
 80067be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	e065      	b.n	8006892 <USB_EPStartXfer+0xd60>
 80067c6:	463b      	mov	r3, r7
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	2b3e      	cmp	r3, #62	; 0x3e
 80067ce:	d81a      	bhi.n	8006806 <USB_EPStartXfer+0xcd4>
 80067d0:	463b      	mov	r3, r7
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	085b      	lsrs	r3, r3, #1
 80067d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067dc:	463b      	mov	r3, r7
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d004      	beq.n	80067f4 <USB_EPStartXfer+0xcc2>
 80067ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067ee:	3301      	adds	r3, #1
 80067f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	029b      	lsls	r3, r3, #10
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006802:	801a      	strh	r2, [r3, #0]
 8006804:	e045      	b.n	8006892 <USB_EPStartXfer+0xd60>
 8006806:	463b      	mov	r3, r7
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006812:	463b      	mov	r3, r7
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f003 031f 	and.w	r3, r3, #31
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <USB_EPStartXfer+0xcf8>
 8006820:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006824:	3b01      	subs	r3, #1
 8006826:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800682a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800682e:	b29b      	uxth	r3, r3
 8006830:	029b      	lsls	r3, r3, #10
 8006832:	b29b      	uxth	r3, r3
 8006834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683c:	b29a      	uxth	r2, r3
 800683e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006842:	801a      	strh	r2, [r3, #0]
 8006844:	e025      	b.n	8006892 <USB_EPStartXfer+0xd60>
 8006846:	463b      	mov	r3, r7
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	785b      	ldrb	r3, [r3, #1]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d120      	bne.n	8006892 <USB_EPStartXfer+0xd60>
 8006850:	1d3b      	adds	r3, r7, #4
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006858:	1d3b      	adds	r3, r7, #4
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006860:	b29b      	uxth	r3, r3
 8006862:	461a      	mov	r2, r3
 8006864:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006868:	4413      	add	r3, r2
 800686a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800686e:	463b      	mov	r3, r7
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	00da      	lsls	r2, r3, #3
 8006876:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800687a:	4413      	add	r3, r2
 800687c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006884:	463b      	mov	r3, r7
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	b29a      	uxth	r2, r3
 800688c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	1d3b      	adds	r3, r7, #4
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800689a:	463b      	mov	r3, r7
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	785b      	ldrb	r3, [r3, #1]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d175      	bne.n	8006990 <USB_EPStartXfer+0xe5e>
 80068a4:	1d3b      	adds	r3, r7, #4
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068ac:	1d3b      	adds	r3, r7, #4
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068bc:	4413      	add	r3, r2
 80068be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068c2:	463b      	mov	r3, r7
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	00da      	lsls	r2, r3, #3
 80068ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068ce:	4413      	add	r3, r2
 80068d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068d8:	463b      	mov	r3, r7
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d116      	bne.n	8006910 <USB_EPStartXfer+0xdde>
 80068e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068f4:	801a      	strh	r2, [r3, #0]
 80068f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006906:	b29a      	uxth	r2, r3
 8006908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800690c:	801a      	strh	r2, [r3, #0]
 800690e:	e061      	b.n	80069d4 <USB_EPStartXfer+0xea2>
 8006910:	463b      	mov	r3, r7
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	2b3e      	cmp	r3, #62	; 0x3e
 8006918:	d81a      	bhi.n	8006950 <USB_EPStartXfer+0xe1e>
 800691a:	463b      	mov	r3, r7
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	085b      	lsrs	r3, r3, #1
 8006922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006926:	463b      	mov	r3, r7
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d004      	beq.n	800693e <USB_EPStartXfer+0xe0c>
 8006934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006938:	3301      	adds	r3, #1
 800693a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800693e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006942:	b29b      	uxth	r3, r3
 8006944:	029b      	lsls	r3, r3, #10
 8006946:	b29a      	uxth	r2, r3
 8006948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	e041      	b.n	80069d4 <USB_EPStartXfer+0xea2>
 8006950:	463b      	mov	r3, r7
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	095b      	lsrs	r3, r3, #5
 8006958:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800695c:	463b      	mov	r3, r7
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 031f 	and.w	r3, r3, #31
 8006966:	2b00      	cmp	r3, #0
 8006968:	d104      	bne.n	8006974 <USB_EPStartXfer+0xe42>
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696e:	3b01      	subs	r3, #1
 8006970:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006978:	b29b      	uxth	r3, r3
 800697a:	029b      	lsls	r3, r3, #10
 800697c:	b29b      	uxth	r3, r3
 800697e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006986:	b29a      	uxth	r2, r3
 8006988:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800698c:	801a      	strh	r2, [r3, #0]
 800698e:	e021      	b.n	80069d4 <USB_EPStartXfer+0xea2>
 8006990:	463b      	mov	r3, r7
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	785b      	ldrb	r3, [r3, #1]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d11c      	bne.n	80069d4 <USB_EPStartXfer+0xea2>
 800699a:	1d3b      	adds	r3, r7, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069aa:	4413      	add	r3, r2
 80069ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069b0:	463b      	mov	r3, r7
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	00da      	lsls	r2, r3, #3
 80069b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069bc:	4413      	add	r3, r2
 80069be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80069c6:	463b      	mov	r3, r7
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069d2:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80069d4:	463b      	mov	r3, r7
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 81a4 	beq.w	8006d28 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80069e0:	1d3b      	adds	r3, r7, #4
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	463b      	mov	r3, r7
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069f4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80069f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <USB_EPStartXfer+0xeda>
 8006a00:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10d      	bne.n	8006a28 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a0c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f040 8187 	bne.w	8006d28 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a1a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f040 8180 	bne.w	8006d28 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006a28:	1d3b      	adds	r3, r7, #4
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a42:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006a46:	1d3b      	adds	r3, r7, #4
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	441a      	add	r2, r3
 8006a54:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	8013      	strh	r3, [r2, #0]
 8006a6c:	e15c      	b.n	8006d28 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006a6e:	463b      	mov	r3, r7
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	78db      	ldrb	r3, [r3, #3]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	f040 8155 	bne.w	8006d24 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	699a      	ldr	r2, [r3, #24]
 8006a80:	463b      	mov	r3, r7
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d90e      	bls.n	8006aa8 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8006a94:	463b      	mov	r3, r7
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	463b      	mov	r3, r7
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	619a      	str	r2, [r3, #24]
 8006aa6:	e008      	b.n	8006aba <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8006aa8:	463b      	mov	r3, r7
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8006ab2:	463b      	mov	r3, r7
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006aba:	463b      	mov	r3, r7
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d16f      	bne.n	8006ba4 <USB_EPStartXfer+0x1072>
 8006ac4:	1d3b      	adds	r3, r7, #4
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006acc:	1d3b      	adds	r3, r7, #4
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006adc:	4413      	add	r3, r2
 8006ade:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ae2:	463b      	mov	r3, r7
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	00da      	lsls	r2, r3, #3
 8006aea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006aee:	4413      	add	r3, r2
 8006af0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006af4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006af8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d116      	bne.n	8006b2e <USB_EPStartXfer+0xffc>
 8006b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b12:	801a      	strh	r2, [r3, #0]
 8006b14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e05f      	b.n	8006bee <USB_EPStartXfer+0x10bc>
 8006b2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b32:	2b3e      	cmp	r3, #62	; 0x3e
 8006b34:	d818      	bhi.n	8006b68 <USB_EPStartXfer+0x1036>
 8006b36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d004      	beq.n	8006b56 <USB_EPStartXfer+0x1024>
 8006b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b50:	3301      	adds	r3, #1
 8006b52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	029b      	lsls	r3, r3, #10
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b64:	801a      	strh	r2, [r3, #0]
 8006b66:	e042      	b.n	8006bee <USB_EPStartXfer+0x10bc>
 8006b68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d104      	bne.n	8006b88 <USB_EPStartXfer+0x1056>
 8006b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b82:	3b01      	subs	r3, #1
 8006b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	029b      	lsls	r3, r3, #10
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ba0:	801a      	strh	r2, [r3, #0]
 8006ba2:	e024      	b.n	8006bee <USB_EPStartXfer+0x10bc>
 8006ba4:	463b      	mov	r3, r7
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d11f      	bne.n	8006bee <USB_EPStartXfer+0x10bc>
 8006bae:	1d3b      	adds	r3, r7, #4
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bb6:	1d3b      	adds	r3, r7, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bcc:	463b      	mov	r3, r7
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	00da      	lsls	r2, r3, #3
 8006bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bd8:	4413      	add	r3, r2
 8006bda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006be2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bec:	801a      	strh	r2, [r3, #0]
 8006bee:	1d3b      	adds	r3, r7, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	785b      	ldrb	r3, [r3, #1]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d16f      	bne.n	8006ce0 <USB_EPStartXfer+0x11ae>
 8006c00:	1d3b      	adds	r3, r7, #4
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c08:	1d3b      	adds	r3, r7, #4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	461a      	mov	r2, r3
 8006c14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c18:	4413      	add	r3, r2
 8006c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c1e:	463b      	mov	r3, r7
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	00da      	lsls	r2, r3, #3
 8006c26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d116      	bne.n	8006c6a <USB_EPStartXfer+0x1138>
 8006c3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c4e:	801a      	strh	r2, [r3, #0]
 8006c50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	e05e      	b.n	8006d28 <USB_EPStartXfer+0x11f6>
 8006c6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c6e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c70:	d818      	bhi.n	8006ca4 <USB_EPStartXfer+0x1172>
 8006c72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c76:	085b      	lsrs	r3, r3, #1
 8006c78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d004      	beq.n	8006c92 <USB_EPStartXfer+0x1160>
 8006c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	029b      	lsls	r3, r3, #10
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	e041      	b.n	8006d28 <USB_EPStartXfer+0x11f6>
 8006ca4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d104      	bne.n	8006cc4 <USB_EPStartXfer+0x1192>
 8006cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	029b      	lsls	r3, r3, #10
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cdc:	801a      	strh	r2, [r3, #0]
 8006cde:	e023      	b.n	8006d28 <USB_EPStartXfer+0x11f6>
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d11e      	bne.n	8006d28 <USB_EPStartXfer+0x11f6>
 8006cea:	1d3b      	adds	r3, r7, #4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d00:	463b      	mov	r3, r7
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	00da      	lsls	r2, r3, #3
 8006d08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d20:	801a      	strh	r2, [r3, #0]
 8006d22:	e001      	b.n	8006d28 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e02e      	b.n	8006d86 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d28:	1d3b      	adds	r3, r7, #4
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	463b      	mov	r3, r7
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d42:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006d46:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006d4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d4e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006d52:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006d56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d5a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006d5e:	1d3b      	adds	r3, r7, #4
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	463b      	mov	r3, r7
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	441a      	add	r2, r3
 8006d6c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	785b      	ldrb	r3, [r3, #1]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d020      	beq.n	8006de4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db8:	81bb      	strh	r3, [r7, #12]
 8006dba:	89bb      	ldrh	r3, [r7, #12]
 8006dbc:	f083 0310 	eor.w	r3, r3, #16
 8006dc0:	81bb      	strh	r3, [r7, #12]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	89bb      	ldrh	r3, [r7, #12]
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]
 8006de2:	e01f      	b.n	8006e24 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfa:	81fb      	strh	r3, [r7, #14]
 8006dfc:	89fb      	ldrh	r3, [r7, #14]
 8006dfe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e02:	81fb      	strh	r3, [r7, #14]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	441a      	add	r2, r3
 8006e0e:	89fb      	ldrh	r3, [r7, #14]
 8006e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b087      	sub	sp, #28
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	7b1b      	ldrb	r3, [r3, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f040 809d 	bne.w	8006f80 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	785b      	ldrb	r3, [r3, #1]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d04c      	beq.n	8006ee8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	823b      	strh	r3, [r7, #16]
 8006e5c:	8a3b      	ldrh	r3, [r7, #16]
 8006e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d01b      	beq.n	8006e9e <USB_EPClearStall+0x6c>
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7c:	81fb      	strh	r3, [r7, #14]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	441a      	add	r2, r3
 8006e88:	89fb      	ldrh	r3, [r7, #14]
 8006e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	78db      	ldrb	r3, [r3, #3]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d06c      	beq.n	8006f80 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ebc:	81bb      	strh	r3, [r7, #12]
 8006ebe:	89bb      	ldrh	r3, [r7, #12]
 8006ec0:	f083 0320 	eor.w	r3, r3, #32
 8006ec4:	81bb      	strh	r3, [r7, #12]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	441a      	add	r2, r3
 8006ed0:	89bb      	ldrh	r3, [r7, #12]
 8006ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	8013      	strh	r3, [r2, #0]
 8006ee6:	e04b      	b.n	8006f80 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	82fb      	strh	r3, [r7, #22]
 8006ef6:	8afb      	ldrh	r3, [r7, #22]
 8006ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01b      	beq.n	8006f38 <USB_EPClearStall+0x106>
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f16:	82bb      	strh	r3, [r7, #20]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	441a      	add	r2, r3
 8006f22:	8abb      	ldrh	r3, [r7, #20]
 8006f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4e:	827b      	strh	r3, [r7, #18]
 8006f50:	8a7b      	ldrh	r3, [r7, #18]
 8006f52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f56:	827b      	strh	r3, [r7, #18]
 8006f58:	8a7b      	ldrh	r3, [r7, #18]
 8006f5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f5e:	827b      	strh	r3, [r7, #18]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	441a      	add	r2, r3
 8006f6a:	8a7b      	ldrh	r3, [r7, #18]
 8006f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	371c      	adds	r7, #28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	460b      	mov	r3, r1
 8006f98:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006f9a:	78fb      	ldrb	r3, [r7, #3]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d103      	bne.n	8006fa8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2280      	movs	r2, #128	; 0x80
 8006fa4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800700e:	b480      	push	{r7}
 8007010:	b085      	sub	sp, #20
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800701c:	b29b      	uxth	r3, r3
 800701e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007020:	68fb      	ldr	r3, [r7, #12]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007046:	b480      	push	{r7}
 8007048:	b08d      	sub	sp, #52	; 0x34
 800704a:	af00      	add	r7, sp, #0
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	4611      	mov	r1, r2
 8007052:	461a      	mov	r2, r3
 8007054:	460b      	mov	r3, r1
 8007056:	80fb      	strh	r3, [r7, #6]
 8007058:	4613      	mov	r3, r2
 800705a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800705c:	88bb      	ldrh	r3, [r7, #4]
 800705e:	3301      	adds	r3, #1
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800706c:	88fa      	ldrh	r2, [r7, #6]
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800707c:	e01b      	b.n	80070b6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	3301      	adds	r3, #1
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	b29b      	uxth	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	4313      	orrs	r3, r2
 800709a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	b29a      	uxth	r2, r3
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	3302      	adds	r3, #2
 80070a8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	3301      	adds	r3, #1
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	3b01      	subs	r3, #1
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e0      	bne.n	800707e <USB_WritePMA+0x38>
  }
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	3734      	adds	r7, #52	; 0x34
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b08b      	sub	sp, #44	; 0x2c
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	4611      	mov	r1, r2
 80070d6:	461a      	mov	r2, r3
 80070d8:	460b      	mov	r3, r1
 80070da:	80fb      	strh	r3, [r7, #6]
 80070dc:	4613      	mov	r3, r2
 80070de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80070e0:	88bb      	ldrh	r3, [r7, #4]
 80070e2:	085b      	lsrs	r3, r3, #1
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070f0:	88fa      	ldrh	r2, [r7, #6]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070fa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007100:	e018      	b.n	8007134 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	b29b      	uxth	r3, r3
 8007108:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	3302      	adds	r3, #2
 800710e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	b2da      	uxtb	r2, r3
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	3301      	adds	r3, #1
 800711c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	0a1b      	lsrs	r3, r3, #8
 8007122:	b2da      	uxtb	r2, r3
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	3301      	adds	r3, #1
 800712c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	3b01      	subs	r3, #1
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e3      	bne.n	8007102 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800713a:	88bb      	ldrh	r3, [r7, #4]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d007      	beq.n	8007156 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	b29b      	uxth	r3, r3
 800714c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	b2da      	uxtb	r2, r3
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	701a      	strb	r2, [r3, #0]
  }
}
 8007156:	bf00      	nop
 8007158:	372c      	adds	r7, #44	; 0x2c
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800716e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007172:	f002 f9bf 	bl	80094f4 <malloc>
 8007176:	4603      	mov	r3, r0
 8007178:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d105      	bne.n	800718c <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007188:	2302      	movs	r3, #2
 800718a:	e066      	b.n	800725a <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	7c1b      	ldrb	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d119      	bne.n	80071d0 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800719c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071a0:	2202      	movs	r2, #2
 80071a2:	2181      	movs	r1, #129	; 0x81
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 ff77 	bl	8009098 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071b4:	2202      	movs	r2, #2
 80071b6:	2101      	movs	r1, #1
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 ff6d 	bl	8009098 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2210      	movs	r2, #16
 80071ca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80071ce:	e016      	b.n	80071fe <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071d0:	2340      	movs	r3, #64	; 0x40
 80071d2:	2202      	movs	r2, #2
 80071d4:	2181      	movs	r1, #129	; 0x81
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 ff5e 	bl	8009098 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071e2:	2340      	movs	r3, #64	; 0x40
 80071e4:	2202      	movs	r2, #2
 80071e6:	2101      	movs	r1, #1
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 ff55 	bl	8009098 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2210      	movs	r2, #16
 80071fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071fe:	2308      	movs	r3, #8
 8007200:	2203      	movs	r2, #3
 8007202:	2182      	movs	r1, #130	; 0x82
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 ff47 	bl	8009098 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	7c1b      	ldrb	r3, [r3, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d109      	bne.n	8007248 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800723a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800723e:	2101      	movs	r1, #1
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f002 f8a5 	bl	8009390 <USBD_LL_PrepareReceive>
 8007246:	e007      	b.n	8007258 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800724e:	2340      	movs	r3, #64	; 0x40
 8007250:	2101      	movs	r1, #1
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f002 f89c 	bl	8009390 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	460b      	mov	r3, r1
 800726c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800726e:	2181      	movs	r1, #129	; 0x81
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 ff4f 	bl	8009114 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800727c:	2101      	movs	r1, #1
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 ff48 	bl	8009114 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800728c:	2182      	movs	r1, #130	; 0x82
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 ff40 	bl	8009114 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00e      	beq.n	80072cc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072be:	4618      	mov	r0, r3
 80072c0:	f002 f920 	bl	8009504 <free>
    pdev->pClassData = NULL;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072e8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d03a      	beq.n	8007378 <USBD_CDC_Setup+0xa0>
 8007302:	2b20      	cmp	r3, #32
 8007304:	f040 8097 	bne.w	8007436 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	88db      	ldrh	r3, [r3, #6]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d029      	beq.n	8007364 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	b25b      	sxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	da11      	bge.n	800733e <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007326:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	88d2      	ldrh	r2, [r2, #6]
 800732c:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800732e:	6939      	ldr	r1, [r7, #16]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	88db      	ldrh	r3, [r3, #6]
 8007334:	461a      	mov	r2, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 fa9c 	bl	8008874 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800733c:	e082      	b.n	8007444 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	785a      	ldrb	r2, [r3, #1]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	88db      	ldrh	r3, [r3, #6]
 800734c:	b2da      	uxtb	r2, r3
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007354:	6939      	ldr	r1, [r7, #16]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	88db      	ldrh	r3, [r3, #6]
 800735a:	461a      	mov	r2, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 fab5 	bl	80088cc <USBD_CtlPrepareRx>
      break;
 8007362:	e06f      	b.n	8007444 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	7850      	ldrb	r0, [r2, #1]
 8007370:	2200      	movs	r2, #0
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	4798      	blx	r3
      break;
 8007376:	e065      	b.n	8007444 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	785b      	ldrb	r3, [r3, #1]
 800737c:	2b0b      	cmp	r3, #11
 800737e:	d84f      	bhi.n	8007420 <USBD_CDC_Setup+0x148>
 8007380:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <USBD_CDC_Setup+0xb0>)
 8007382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007386:	bf00      	nop
 8007388:	080073b9 	.word	0x080073b9
 800738c:	0800742f 	.word	0x0800742f
 8007390:	08007421 	.word	0x08007421
 8007394:	08007421 	.word	0x08007421
 8007398:	08007421 	.word	0x08007421
 800739c:	08007421 	.word	0x08007421
 80073a0:	08007421 	.word	0x08007421
 80073a4:	08007421 	.word	0x08007421
 80073a8:	08007421 	.word	0x08007421
 80073ac:	08007421 	.word	0x08007421
 80073b0:	080073e1 	.word	0x080073e1
 80073b4:	08007409 	.word	0x08007409
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d107      	bne.n	80073d2 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80073c2:	f107 030c 	add.w	r3, r7, #12
 80073c6:	2202      	movs	r2, #2
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 fa52 	bl	8008874 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073d0:	e030      	b.n	8007434 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f9dc 	bl	8008792 <USBD_CtlError>
            ret = USBD_FAIL;
 80073da:	2303      	movs	r3, #3
 80073dc:	75fb      	strb	r3, [r7, #23]
          break;
 80073de:	e029      	b.n	8007434 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d107      	bne.n	80073fa <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073ea:	f107 030f 	add.w	r3, r7, #15
 80073ee:	2201      	movs	r2, #1
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 fa3e 	bl	8008874 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073f8:	e01c      	b.n	8007434 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 f9c8 	bl	8008792 <USBD_CtlError>
            ret = USBD_FAIL;
 8007402:	2303      	movs	r3, #3
 8007404:	75fb      	strb	r3, [r7, #23]
          break;
 8007406:	e015      	b.n	8007434 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800740e:	2b03      	cmp	r3, #3
 8007410:	d00f      	beq.n	8007432 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 f9bc 	bl	8008792 <USBD_CtlError>
            ret = USBD_FAIL;
 800741a:	2303      	movs	r3, #3
 800741c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800741e:	e008      	b.n	8007432 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 f9b5 	bl	8008792 <USBD_CtlError>
          ret = USBD_FAIL;
 8007428:	2303      	movs	r3, #3
 800742a:	75fb      	strb	r3, [r7, #23]
          break;
 800742c:	e002      	b.n	8007434 <USBD_CDC_Setup+0x15c>
          break;
 800742e:	bf00      	nop
 8007430:	e008      	b.n	8007444 <USBD_CDC_Setup+0x16c>
          break;
 8007432:	bf00      	nop
      }
      break;
 8007434:	e006      	b.n	8007444 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f001 f9aa 	bl	8008792 <USBD_CtlError>
      ret = USBD_FAIL;
 800743e:	2303      	movs	r3, #3
 8007440:	75fb      	strb	r3, [r7, #23]
      break;
 8007442:	bf00      	nop
  }

  return (uint8_t)ret;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop

08007450 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007462:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800746e:	2303      	movs	r3, #3
 8007470:	e04f      	b.n	8007512 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007478:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800747a:	78fa      	ldrb	r2, [r7, #3]
 800747c:	6879      	ldr	r1, [r7, #4]
 800747e:	4613      	mov	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	440b      	add	r3, r1
 8007488:	3318      	adds	r3, #24
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d029      	beq.n	80074e4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007490:	78fa      	ldrb	r2, [r7, #3]
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	3318      	adds	r3, #24
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	78f9      	ldrb	r1, [r7, #3]
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	460b      	mov	r3, r1
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	440b      	add	r3, r1
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	4403      	add	r3, r0
 80074b0:	3338      	adds	r3, #56	; 0x38
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80074b8:	fb03 f301 	mul.w	r3, r3, r1
 80074bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d110      	bne.n	80074e4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80074c2:	78fa      	ldrb	r2, [r7, #3]
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	3318      	adds	r3, #24
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074d6:	78f9      	ldrb	r1, [r7, #3]
 80074d8:	2300      	movs	r3, #0
 80074da:	2200      	movs	r2, #0
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 ff1f 	bl	8009320 <USBD_LL_Transmit>
 80074e2:	e015      	b.n	8007510 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00b      	beq.n	8007510 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800750c:	78fa      	ldrb	r2, [r7, #3]
 800750e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800752c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007538:	2303      	movs	r3, #3
 800753a:	e015      	b.n	8007568 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 ff5d 	bl	8009400 <USBD_LL_GetRxDataSize>
 8007546:	4602      	mov	r2, r0
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007562:	4611      	mov	r1, r2
 8007564:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800757e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d015      	beq.n	80075b6 <USBD_CDC_EP0_RxReady+0x46>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007590:	2bff      	cmp	r3, #255	; 0xff
 8007592:	d010      	beq.n	80075b6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80075a2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80075aa:	b292      	uxth	r2, r2
 80075ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	22ff      	movs	r2, #255	; 0xff
 80075b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2243      	movs	r2, #67	; 0x43
 80075cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80075ce:	4b03      	ldr	r3, [pc, #12]	; (80075dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	20000094 	.word	0x20000094

080075e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2243      	movs	r2, #67	; 0x43
 80075ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80075ee:	4b03      	ldr	r3, [pc, #12]	; (80075fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	20000050 	.word	0x20000050

08007600 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2243      	movs	r2, #67	; 0x43
 800760c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800760e:	4b03      	ldr	r3, [pc, #12]	; (800761c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	200000d8 	.word	0x200000d8

08007620 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	220a      	movs	r2, #10
 800762c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800762e:	4b03      	ldr	r3, [pc, #12]	; (800763c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	2000000c 	.word	0x2000000c

08007640 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007650:	2303      	movs	r3, #3
 8007652:	e004      	b.n	800765e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800766a:	b480      	push	{r7}
 800766c:	b087      	sub	sp, #28
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800767c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	371c      	adds	r7, #28
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076ac:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80076d4:	2301      	movs	r3, #1
 80076d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e01a      	b.n	800771c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d114      	bne.n	800771a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800770e:	2181      	movs	r1, #129	; 0x81
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 fe05 	bl	8009320 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007732:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800773e:	2303      	movs	r3, #3
 8007740:	e016      	b.n	8007770 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	7c1b      	ldrb	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007754:	2101      	movs	r1, #1
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fe1a 	bl	8009390 <USBD_LL_PrepareReceive>
 800775c:	e007      	b.n	800776e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007764:	2340      	movs	r3, #64	; 0x40
 8007766:	2101      	movs	r1, #1
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 fe11 	bl	8009390 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800778c:	2303      	movs	r3, #3
 800778e:	e01f      	b.n	80077d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	79fa      	ldrb	r2, [r7, #7]
 80077c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f001 fbd3 	bl	8008f70 <USBD_LL_Init>
 80077ca:	4603      	mov	r3, r0
 80077cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e016      	b.n	800781e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	f107 020e 	add.w	r2, r7, #14
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	4602      	mov	r2, r0
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 fc00 	bl	8009034 <USBD_LL_Start>
 8007834:	4603      	mov	r3, r0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007860:	2303      	movs	r3, #3
 8007862:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	78fa      	ldrb	r2, [r7, #3]
 8007878:	4611      	mov	r1, r2
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	4798      	blx	r3
 800787e:	4603      	mov	r3, r0
 8007880:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007882:	7bfb      	ldrb	r3, [r7, #15]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	78fa      	ldrb	r2, [r7, #3]
 80078ac:	4611      	mov	r1, r2
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	4798      	blx	r3
  }

  return USBD_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 ff25 	bl	800871e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078e2:	461a      	mov	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078f0:	f003 031f 	and.w	r3, r3, #31
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d01a      	beq.n	800792e <USBD_LL_SetupStage+0x72>
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d822      	bhi.n	8007942 <USBD_LL_SetupStage+0x86>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <USBD_LL_SetupStage+0x4a>
 8007900:	2b01      	cmp	r3, #1
 8007902:	d00a      	beq.n	800791a <USBD_LL_SetupStage+0x5e>
 8007904:	e01d      	b.n	8007942 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f9d6 	bl	8007cc0 <USBD_StdDevReq>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
      break;
 8007918:	e020      	b.n	800795c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fa3a 	bl	8007d9c <USBD_StdItfReq>
 8007928:	4603      	mov	r3, r0
 800792a:	73fb      	strb	r3, [r7, #15]
      break;
 800792c:	e016      	b.n	800795c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fa78 	bl	8007e2c <USBD_StdEPReq>
 800793c:	4603      	mov	r3, r0
 800793e:	73fb      	strb	r3, [r7, #15]
      break;
 8007940:	e00c      	b.n	800795c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007948:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800794c:	b2db      	uxtb	r3, r3
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 fc15 	bl	8009180 <USBD_LL_StallEP>
 8007956:	4603      	mov	r3, r0
 8007958:	73fb      	strb	r3, [r7, #15]
      break;
 800795a:	bf00      	nop
  }

  return ret;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b086      	sub	sp, #24
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	460b      	mov	r3, r1
 8007970:	607a      	str	r2, [r7, #4]
 8007972:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007974:	7afb      	ldrb	r3, [r7, #11]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d137      	bne.n	80079ea <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007980:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007988:	2b03      	cmp	r3, #3
 800798a:	d14a      	bne.n	8007a22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	429a      	cmp	r2, r3
 8007996:	d913      	bls.n	80079c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	1ad2      	subs	r2, r2, r3
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	68da      	ldr	r2, [r3, #12]
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	4293      	cmp	r3, r2
 80079b0:	bf28      	it	cs
 80079b2:	4613      	movcs	r3, r2
 80079b4:	461a      	mov	r2, r3
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 ffa4 	bl	8008906 <USBD_CtlContinueRx>
 80079be:	e030      	b.n	8007a22 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d105      	bne.n	80079e2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 ffa0 	bl	8008928 <USBD_CtlSendStatus>
 80079e8:	e01b      	b.n	8007a22 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d013      	beq.n	8007a1e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d10e      	bne.n	8007a1e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	7afa      	ldrb	r2, [r7, #11]
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	4798      	blx	r3
 8007a10:	4603      	mov	r3, r0
 8007a12:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	e002      	b.n	8007a24 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e000      	b.n	8007a24 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	460b      	mov	r3, r1
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d16a      	bne.n	8007b16 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3314      	adds	r3, #20
 8007a44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d155      	bne.n	8007afc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d914      	bls.n	8007a86 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	1ad2      	subs	r2, r2, r3
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 ff19 	bl	80088aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a78:	2300      	movs	r3, #0
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f001 fc86 	bl	8009390 <USBD_LL_PrepareReceive>
 8007a84:	e03a      	b.n	8007afc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d11c      	bne.n	8007acc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d316      	bcc.n	8007acc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d20f      	bcs.n	8007acc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007aac:	2200      	movs	r2, #0
 8007aae:	2100      	movs	r1, #0
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 fefa 	bl	80088aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f001 fc63 	bl	8009390 <USBD_LL_PrepareReceive>
 8007aca:	e017      	b.n	8007afc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d105      	bne.n	8007aee <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aee:	2180      	movs	r1, #128	; 0x80
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f001 fb45 	bl	8009180 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 ff29 	bl	800894e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d123      	bne.n	8007b4e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7ff fe99 	bl	800783e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b14:	e01b      	b.n	8007b4e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d013      	beq.n	8007b4a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d10e      	bne.n	8007b4a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	7afa      	ldrb	r2, [r7, #11]
 8007b36:	4611      	mov	r1, r2
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	4798      	blx	r3
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	e002      	b.n	8007b50 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e000      	b.n	8007b50 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3718      	adds	r7, #24
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d009      	beq.n	8007b9c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6852      	ldr	r2, [r2, #4]
 8007b94:	b2d2      	uxtb	r2, r2
 8007b96:	4611      	mov	r1, r2
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b9c:	2340      	movs	r3, #64	; 0x40
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f001 fa78 	bl	8009098 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2240      	movs	r2, #64	; 0x40
 8007bb4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bb8:	2340      	movs	r3, #64	; 0x40
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2180      	movs	r1, #128	; 0x80
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 fa6a 	bl	8009098 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2240      	movs	r2, #64	; 0x40
 8007bce:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	78fa      	ldrb	r2, [r7, #3]
 8007bea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2204      	movs	r2, #4
 8007c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	d105      	bne.n	8007c42 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d10b      	bne.n	8007c7a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ca2:	8a3b      	ldrh	r3, [r7, #16]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	b21a      	sxth	r2, r3
 8007ca8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	b21b      	sxth	r3, r3
 8007cb0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cb2:	89fb      	ldrh	r3, [r7, #14]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cd6:	2b40      	cmp	r3, #64	; 0x40
 8007cd8:	d005      	beq.n	8007ce6 <USBD_StdDevReq+0x26>
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	d853      	bhi.n	8007d86 <USBD_StdDevReq+0xc6>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00b      	beq.n	8007cfa <USBD_StdDevReq+0x3a>
 8007ce2:	2b20      	cmp	r3, #32
 8007ce4:	d14f      	bne.n	8007d86 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	4798      	blx	r3
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf8:	e04a      	b.n	8007d90 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	785b      	ldrb	r3, [r3, #1]
 8007cfe:	2b09      	cmp	r3, #9
 8007d00:	d83b      	bhi.n	8007d7a <USBD_StdDevReq+0xba>
 8007d02:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <USBD_StdDevReq+0x48>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d5d 	.word	0x08007d5d
 8007d0c:	08007d71 	.word	0x08007d71
 8007d10:	08007d7b 	.word	0x08007d7b
 8007d14:	08007d67 	.word	0x08007d67
 8007d18:	08007d7b 	.word	0x08007d7b
 8007d1c:	08007d3b 	.word	0x08007d3b
 8007d20:	08007d31 	.word	0x08007d31
 8007d24:	08007d7b 	.word	0x08007d7b
 8007d28:	08007d53 	.word	0x08007d53
 8007d2c:	08007d45 	.word	0x08007d45
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f9da 	bl	80080ec <USBD_GetDescriptor>
      break;
 8007d38:	e024      	b.n	8007d84 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fb69 	bl	8008414 <USBD_SetAddress>
      break;
 8007d42:	e01f      	b.n	8007d84 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fba8 	bl	800849c <USBD_SetConfig>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d50:	e018      	b.n	8007d84 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fc45 	bl	80085e4 <USBD_GetConfig>
      break;
 8007d5a:	e013      	b.n	8007d84 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fc75 	bl	800864e <USBD_GetStatus>
      break;
 8007d64:	e00e      	b.n	8007d84 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fca3 	bl	80086b4 <USBD_SetFeature>
      break;
 8007d6e:	e009      	b.n	8007d84 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fcb2 	bl	80086dc <USBD_ClrFeature>
      break;
 8007d78:	e004      	b.n	8007d84 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fd08 	bl	8008792 <USBD_CtlError>
      break;
 8007d82:	bf00      	nop
    }
    break;
 8007d84:	e004      	b.n	8007d90 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fd02 	bl	8008792 <USBD_CtlError>
    break;
 8007d8e:	bf00      	nop
  }

  return ret;
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop

08007d9c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007db2:	2b40      	cmp	r3, #64	; 0x40
 8007db4:	d005      	beq.n	8007dc2 <USBD_StdItfReq+0x26>
 8007db6:	2b40      	cmp	r3, #64	; 0x40
 8007db8:	d82e      	bhi.n	8007e18 <USBD_StdItfReq+0x7c>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <USBD_StdItfReq+0x26>
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d12a      	bne.n	8007e18 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d81d      	bhi.n	8007e0a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	889b      	ldrh	r3, [r3, #4]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d813      	bhi.n	8007e00 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	4798      	blx	r3
 8007de6:	4603      	mov	r3, r0
 8007de8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	88db      	ldrh	r3, [r3, #6]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d110      	bne.n	8007e14 <USBD_StdItfReq+0x78>
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10d      	bne.n	8007e14 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fd95 	bl	8008928 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007dfe:	e009      	b.n	8007e14 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fcc5 	bl	8008792 <USBD_CtlError>
      break;
 8007e08:	e004      	b.n	8007e14 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fcc0 	bl	8008792 <USBD_CtlError>
      break;
 8007e12:	e000      	b.n	8007e16 <USBD_StdItfReq+0x7a>
      break;
 8007e14:	bf00      	nop
    }
    break;
 8007e16:	e004      	b.n	8007e22 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fcb9 	bl	8008792 <USBD_CtlError>
    break;
 8007e20:	bf00      	nop
  }

  return ret;
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	889b      	ldrh	r3, [r3, #4]
 8007e3e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e48:	2b40      	cmp	r3, #64	; 0x40
 8007e4a:	d007      	beq.n	8007e5c <USBD_StdEPReq+0x30>
 8007e4c:	2b40      	cmp	r3, #64	; 0x40
 8007e4e:	f200 8142 	bhi.w	80080d6 <USBD_StdEPReq+0x2aa>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00c      	beq.n	8007e70 <USBD_StdEPReq+0x44>
 8007e56:	2b20      	cmp	r3, #32
 8007e58:	f040 813d 	bne.w	80080d6 <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	4798      	blx	r3
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e6e:	e137      	b.n	80080e0 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	785b      	ldrb	r3, [r3, #1]
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d007      	beq.n	8007e88 <USBD_StdEPReq+0x5c>
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	f300 8126 	bgt.w	80080ca <USBD_StdEPReq+0x29e>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d07d      	beq.n	8007f7e <USBD_StdEPReq+0x152>
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d03b      	beq.n	8007efe <USBD_StdEPReq+0xd2>
 8007e86:	e120      	b.n	80080ca <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d002      	beq.n	8007e98 <USBD_StdEPReq+0x6c>
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d016      	beq.n	8007ec4 <USBD_StdEPReq+0x98>
 8007e96:	e02c      	b.n	8007ef2 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00d      	beq.n	8007eba <USBD_StdEPReq+0x8e>
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	2b80      	cmp	r3, #128	; 0x80
 8007ea2:	d00a      	beq.n	8007eba <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 f969 	bl	8009180 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eae:	2180      	movs	r1, #128	; 0x80
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 f965 	bl	8009180 <USBD_LL_StallEP>
 8007eb6:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007eb8:	e020      	b.n	8007efc <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fc68 	bl	8008792 <USBD_CtlError>
        break;
 8007ec2:	e01b      	b.n	8007efc <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	885b      	ldrh	r3, [r3, #2]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10e      	bne.n	8007eea <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ecc:	7bbb      	ldrb	r3, [r7, #14]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00b      	beq.n	8007eea <USBD_StdEPReq+0xbe>
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	2b80      	cmp	r3, #128	; 0x80
 8007ed6:	d008      	beq.n	8007eea <USBD_StdEPReq+0xbe>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	88db      	ldrh	r3, [r3, #6]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d104      	bne.n	8007eea <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 f94b 	bl	8009180 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fd1c 	bl	8008928 <USBD_CtlSendStatus>

        break;
 8007ef0:	e004      	b.n	8007efc <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fc4c 	bl	8008792 <USBD_CtlError>
        break;
 8007efa:	bf00      	nop
      }
      break;
 8007efc:	e0ea      	b.n	80080d4 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d002      	beq.n	8007f0e <USBD_StdEPReq+0xe2>
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d016      	beq.n	8007f3a <USBD_StdEPReq+0x10e>
 8007f0c:	e030      	b.n	8007f70 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00d      	beq.n	8007f30 <USBD_StdEPReq+0x104>
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	2b80      	cmp	r3, #128	; 0x80
 8007f18:	d00a      	beq.n	8007f30 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 f92e 	bl	8009180 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f24:	2180      	movs	r1, #128	; 0x80
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 f92a 	bl	8009180 <USBD_LL_StallEP>
 8007f2c:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007f2e:	e025      	b.n	8007f7c <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fc2d 	bl	8008792 <USBD_CtlError>
        break;
 8007f38:	e020      	b.n	8007f7c <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	885b      	ldrh	r3, [r3, #2]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d11b      	bne.n	8007f7a <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d004      	beq.n	8007f56 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 f94b 	bl	80091ec <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fce6 	bl	8008928 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f6e:	e004      	b.n	8007f7a <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fc0d 	bl	8008792 <USBD_CtlError>
        break;
 8007f78:	e000      	b.n	8007f7c <USBD_StdEPReq+0x150>
        break;
 8007f7a:	bf00      	nop
      }
      break;
 8007f7c:	e0aa      	b.n	80080d4 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d002      	beq.n	8007f8e <USBD_StdEPReq+0x162>
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d032      	beq.n	8007ff2 <USBD_StdEPReq+0x1c6>
 8007f8c:	e097      	b.n	80080be <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d007      	beq.n	8007fa4 <USBD_StdEPReq+0x178>
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b80      	cmp	r3, #128	; 0x80
 8007f98:	d004      	beq.n	8007fa4 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fbf8 	bl	8008792 <USBD_CtlError>
          break;
 8007fa2:	e091      	b.n	80080c8 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	da0b      	bge.n	8007fc4 <USBD_StdEPReq+0x198>
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	3310      	adds	r3, #16
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	e00b      	b.n	8007fdc <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fca:	4613      	mov	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	4413      	add	r3, r2
 8007fda:	3304      	adds	r3, #4
 8007fdc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fc42 	bl	8008874 <USBD_CtlSendData>
        break;
 8007ff0:	e06a      	b.n	80080c8 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	da11      	bge.n	800801e <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	f003 020f 	and.w	r2, r3, #15
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	4613      	mov	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	440b      	add	r3, r1
 800800c:	3324      	adds	r3, #36	; 0x24
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d117      	bne.n	8008044 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fbbb 	bl	8008792 <USBD_CtlError>
            break;
 800801c:	e054      	b.n	80080c8 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800801e:	7bbb      	ldrb	r3, [r7, #14]
 8008020:	f003 020f 	and.w	r2, r3, #15
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d104      	bne.n	8008044 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fba8 	bl	8008792 <USBD_CtlError>
            break;
 8008042:	e041      	b.n	80080c8 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008048:	2b00      	cmp	r3, #0
 800804a:	da0b      	bge.n	8008064 <USBD_StdEPReq+0x238>
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008052:	4613      	mov	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	3310      	adds	r3, #16
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	4413      	add	r3, r2
 8008060:	3304      	adds	r3, #4
 8008062:	e00b      	b.n	800807c <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800806a:	4613      	mov	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	4413      	add	r3, r2
 800807a:	3304      	adds	r3, #4
 800807c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <USBD_StdEPReq+0x25e>
 8008084:	7bbb      	ldrb	r3, [r7, #14]
 8008086:	2b80      	cmp	r3, #128	; 0x80
 8008088:	d103      	bne.n	8008092 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	e00e      	b.n	80080b0 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 f8de 	bl	8009258 <USBD_LL_IsStallEP>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2201      	movs	r2, #1
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	e002      	b.n	80080b0 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2202      	movs	r2, #2
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fbdc 	bl	8008874 <USBD_CtlSendData>
          break;
 80080bc:	e004      	b.n	80080c8 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fb66 	bl	8008792 <USBD_CtlError>
        break;
 80080c6:	bf00      	nop
      }
      break;
 80080c8:	e004      	b.n	80080d4 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fb60 	bl	8008792 <USBD_CtlError>
      break;
 80080d2:	bf00      	nop
    }
    break;
 80080d4:	e004      	b.n	80080e0 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fb5a 	bl	8008792 <USBD_CtlError>
    break;
 80080de:	bf00      	nop
  }

  return ret;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	885b      	ldrh	r3, [r3, #2]
 8008106:	0a1b      	lsrs	r3, r3, #8
 8008108:	b29b      	uxth	r3, r3
 800810a:	3b01      	subs	r3, #1
 800810c:	2b0e      	cmp	r3, #14
 800810e:	f200 8152 	bhi.w	80083b6 <USBD_GetDescriptor+0x2ca>
 8008112:	a201      	add	r2, pc, #4	; (adr r2, 8008118 <USBD_GetDescriptor+0x2c>)
 8008114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008118:	08008189 	.word	0x08008189
 800811c:	080081a1 	.word	0x080081a1
 8008120:	080081e1 	.word	0x080081e1
 8008124:	080083b7 	.word	0x080083b7
 8008128:	080083b7 	.word	0x080083b7
 800812c:	08008357 	.word	0x08008357
 8008130:	08008383 	.word	0x08008383
 8008134:	080083b7 	.word	0x080083b7
 8008138:	080083b7 	.word	0x080083b7
 800813c:	080083b7 	.word	0x080083b7
 8008140:	080083b7 	.word	0x080083b7
 8008144:	080083b7 	.word	0x080083b7
 8008148:	080083b7 	.word	0x080083b7
 800814c:	080083b7 	.word	0x080083b7
 8008150:	08008155 	.word	0x08008155
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008166:	69db      	ldr	r3, [r3, #28]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	7c12      	ldrb	r2, [r2, #16]
 800816c:	f107 0108 	add.w	r1, r7, #8
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
 8008174:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008176:	e126      	b.n	80083c6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fb09 	bl	8008792 <USBD_CtlError>
      err++;
 8008180:	7afb      	ldrb	r3, [r7, #11]
 8008182:	3301      	adds	r3, #1
 8008184:	72fb      	strb	r3, [r7, #11]
    break;
 8008186:	e11e      	b.n	80083c6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	7c12      	ldrb	r2, [r2, #16]
 8008194:	f107 0108 	add.w	r1, r7, #8
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
 800819c:	60f8      	str	r0, [r7, #12]
    break;
 800819e:	e112      	b.n	80083c6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	7c1b      	ldrb	r3, [r3, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10d      	bne.n	80081c4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	f107 0208 	add.w	r2, r7, #8
 80081b4:	4610      	mov	r0, r2
 80081b6:	4798      	blx	r3
 80081b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3301      	adds	r3, #1
 80081be:	2202      	movs	r2, #2
 80081c0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80081c2:	e100      	b.n	80083c6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	f107 0208 	add.w	r2, r7, #8
 80081d0:	4610      	mov	r0, r2
 80081d2:	4798      	blx	r3
 80081d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3301      	adds	r3, #1
 80081da:	2202      	movs	r2, #2
 80081dc:	701a      	strb	r2, [r3, #0]
    break;
 80081de:	e0f2      	b.n	80083c6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	885b      	ldrh	r3, [r3, #2]
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b05      	cmp	r3, #5
 80081e8:	f200 80ac 	bhi.w	8008344 <USBD_GetDescriptor+0x258>
 80081ec:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <USBD_GetDescriptor+0x108>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	0800820d 	.word	0x0800820d
 80081f8:	08008241 	.word	0x08008241
 80081fc:	08008275 	.word	0x08008275
 8008200:	080082a9 	.word	0x080082a9
 8008204:	080082dd 	.word	0x080082dd
 8008208:	08008311 	.word	0x08008311
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	7c12      	ldrb	r2, [r2, #16]
 8008224:	f107 0108 	add.w	r1, r7, #8
 8008228:	4610      	mov	r0, r2
 800822a:	4798      	blx	r3
 800822c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800822e:	e091      	b.n	8008354 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 faad 	bl	8008792 <USBD_CtlError>
        err++;
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	3301      	adds	r3, #1
 800823c:	72fb      	strb	r3, [r7, #11]
      break;
 800823e:	e089      	b.n	8008354 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00b      	beq.n	8008264 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	7c12      	ldrb	r2, [r2, #16]
 8008258:	f107 0108 	add.w	r1, r7, #8
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
 8008260:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008262:	e077      	b.n	8008354 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa93 	bl	8008792 <USBD_CtlError>
        err++;
 800826c:	7afb      	ldrb	r3, [r7, #11]
 800826e:	3301      	adds	r3, #1
 8008270:	72fb      	strb	r3, [r7, #11]
      break;
 8008272:	e06f      	b.n	8008354 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	7c12      	ldrb	r2, [r2, #16]
 800828c:	f107 0108 	add.w	r1, r7, #8
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3
 8008294:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008296:	e05d      	b.n	8008354 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa79 	bl	8008792 <USBD_CtlError>
        err++;
 80082a0:	7afb      	ldrb	r3, [r7, #11]
 80082a2:	3301      	adds	r3, #1
 80082a4:	72fb      	strb	r3, [r7, #11]
      break;
 80082a6:	e055      	b.n	8008354 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00b      	beq.n	80082cc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	7c12      	ldrb	r2, [r2, #16]
 80082c0:	f107 0108 	add.w	r1, r7, #8
 80082c4:	4610      	mov	r0, r2
 80082c6:	4798      	blx	r3
 80082c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082ca:	e043      	b.n	8008354 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fa5f 	bl	8008792 <USBD_CtlError>
        err++;
 80082d4:	7afb      	ldrb	r3, [r7, #11]
 80082d6:	3301      	adds	r3, #1
 80082d8:	72fb      	strb	r3, [r7, #11]
      break;
 80082da:	e03b      	b.n	8008354 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00b      	beq.n	8008300 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	7c12      	ldrb	r2, [r2, #16]
 80082f4:	f107 0108 	add.w	r1, r7, #8
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
 80082fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082fe:	e029      	b.n	8008354 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa45 	bl	8008792 <USBD_CtlError>
        err++;
 8008308:	7afb      	ldrb	r3, [r7, #11]
 800830a:	3301      	adds	r3, #1
 800830c:	72fb      	strb	r3, [r7, #11]
      break;
 800830e:	e021      	b.n	8008354 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00b      	beq.n	8008334 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	7c12      	ldrb	r2, [r2, #16]
 8008328:	f107 0108 	add.w	r1, r7, #8
 800832c:	4610      	mov	r0, r2
 800832e:	4798      	blx	r3
 8008330:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008332:	e00f      	b.n	8008354 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fa2b 	bl	8008792 <USBD_CtlError>
        err++;
 800833c:	7afb      	ldrb	r3, [r7, #11]
 800833e:	3301      	adds	r3, #1
 8008340:	72fb      	strb	r3, [r7, #11]
      break;
 8008342:	e007      	b.n	8008354 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa23 	bl	8008792 <USBD_CtlError>
      err++;
 800834c:	7afb      	ldrb	r3, [r7, #11]
 800834e:	3301      	adds	r3, #1
 8008350:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008352:	bf00      	nop
    }
    break;
 8008354:	e037      	b.n	80083c6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	7c1b      	ldrb	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d109      	bne.n	8008372 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008366:	f107 0208 	add.w	r2, r7, #8
 800836a:	4610      	mov	r0, r2
 800836c:	4798      	blx	r3
 800836e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008370:	e029      	b.n	80083c6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fa0c 	bl	8008792 <USBD_CtlError>
      err++;
 800837a:	7afb      	ldrb	r3, [r7, #11]
 800837c:	3301      	adds	r3, #1
 800837e:	72fb      	strb	r3, [r7, #11]
    break;
 8008380:	e021      	b.n	80083c6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	7c1b      	ldrb	r3, [r3, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10d      	bne.n	80083a6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008392:	f107 0208 	add.w	r2, r7, #8
 8008396:	4610      	mov	r0, r2
 8008398:	4798      	blx	r3
 800839a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3301      	adds	r3, #1
 80083a0:	2207      	movs	r2, #7
 80083a2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80083a4:	e00f      	b.n	80083c6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f9f2 	bl	8008792 <USBD_CtlError>
      err++;
 80083ae:	7afb      	ldrb	r3, [r7, #11]
 80083b0:	3301      	adds	r3, #1
 80083b2:	72fb      	strb	r3, [r7, #11]
    break;
 80083b4:	e007      	b.n	80083c6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f9ea 	bl	8008792 <USBD_CtlError>
    err++;
 80083be:	7afb      	ldrb	r3, [r7, #11]
 80083c0:	3301      	adds	r3, #1
 80083c2:	72fb      	strb	r3, [r7, #11]
    break;
 80083c4:	bf00      	nop
  }

  if (err != 0U)
 80083c6:	7afb      	ldrb	r3, [r7, #11]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d11e      	bne.n	800840a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	88db      	ldrh	r3, [r3, #6]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d016      	beq.n	8008402 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80083d4:	893b      	ldrh	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00e      	beq.n	80083f8 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	88da      	ldrh	r2, [r3, #6]
 80083de:	893b      	ldrh	r3, [r7, #8]
 80083e0:	4293      	cmp	r3, r2
 80083e2:	bf28      	it	cs
 80083e4:	4613      	movcs	r3, r2
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80083ea:	893b      	ldrh	r3, [r7, #8]
 80083ec:	461a      	mov	r2, r3
 80083ee:	68f9      	ldr	r1, [r7, #12]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fa3f 	bl	8008874 <USBD_CtlSendData>
 80083f6:	e009      	b.n	800840c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f9c9 	bl	8008792 <USBD_CtlError>
 8008400:	e004      	b.n	800840c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa90 	bl	8008928 <USBD_CtlSendStatus>
 8008408:	e000      	b.n	800840c <USBD_GetDescriptor+0x320>
    return;
 800840a:	bf00      	nop
    }
  }
}
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop

08008414 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	889b      	ldrh	r3, [r3, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d130      	bne.n	8008488 <USBD_SetAddress+0x74>
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	88db      	ldrh	r3, [r3, #6]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d12c      	bne.n	8008488 <USBD_SetAddress+0x74>
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	885b      	ldrh	r3, [r3, #2]
 8008432:	2b7f      	cmp	r3, #127	; 0x7f
 8008434:	d828      	bhi.n	8008488 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	885b      	ldrh	r3, [r3, #2]
 800843a:	b2db      	uxtb	r3, r3
 800843c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008440:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008448:	2b03      	cmp	r3, #3
 800844a:	d104      	bne.n	8008456 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f99f 	bl	8008792 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008454:	e01d      	b.n	8008492 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	7bfa      	ldrb	r2, [r7, #15]
 800845a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 ff26 	bl	80092b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fa5d 	bl	8008928 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800846e:	7bfb      	ldrb	r3, [r7, #15]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d004      	beq.n	800847e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847c:	e009      	b.n	8008492 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008486:	e004      	b.n	8008492 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f981 	bl	8008792 <USBD_CtlError>
  }
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	885b      	ldrh	r3, [r3, #2]
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	4b4b      	ldr	r3, [pc, #300]	; (80085e0 <USBD_SetConfig+0x144>)
 80084b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084b4:	4b4a      	ldr	r3, [pc, #296]	; (80085e0 <USBD_SetConfig+0x144>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d905      	bls.n	80084c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f967 	bl	8008792 <USBD_CtlError>
    return USBD_FAIL;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e087      	b.n	80085d8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d002      	beq.n	80084d8 <USBD_SetConfig+0x3c>
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d025      	beq.n	8008522 <USBD_SetConfig+0x86>
 80084d6:	e071      	b.n	80085bc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80084d8:	4b41      	ldr	r3, [pc, #260]	; (80085e0 <USBD_SetConfig+0x144>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01c      	beq.n	800851a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80084e0:	4b3f      	ldr	r3, [pc, #252]	; (80085e0 <USBD_SetConfig+0x144>)
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	461a      	mov	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80084ea:	4b3d      	ldr	r3, [pc, #244]	; (80085e0 <USBD_SetConfig+0x144>)
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7ff f9af 	bl	8007854 <USBD_SetClassConfig>
 80084f6:	4603      	mov	r3, r0
 80084f8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d004      	beq.n	800850a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f945 	bl	8008792 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008508:	e065      	b.n	80085d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fa0c 	bl	8008928 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2203      	movs	r2, #3
 8008514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008518:	e05d      	b.n	80085d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fa04 	bl	8008928 <USBD_CtlSendStatus>
    break;
 8008520:	e059      	b.n	80085d6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008522:	4b2f      	ldr	r3, [pc, #188]	; (80085e0 <USBD_SetConfig+0x144>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d112      	bne.n	8008550 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2202      	movs	r2, #2
 800852e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008532:	4b2b      	ldr	r3, [pc, #172]	; (80085e0 <USBD_SetConfig+0x144>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800853c:	4b28      	ldr	r3, [pc, #160]	; (80085e0 <USBD_SetConfig+0x144>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7ff f9a2 	bl	800788c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f9ed 	bl	8008928 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800854e:	e042      	b.n	80085d6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008550:	4b23      	ldr	r3, [pc, #140]	; (80085e0 <USBD_SetConfig+0x144>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	461a      	mov	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	429a      	cmp	r2, r3
 800855c:	d02a      	beq.n	80085b4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	b2db      	uxtb	r3, r3
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff f990 	bl	800788c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800856c:	4b1c      	ldr	r3, [pc, #112]	; (80085e0 <USBD_SetConfig+0x144>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008576:	4b1a      	ldr	r3, [pc, #104]	; (80085e0 <USBD_SetConfig+0x144>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff f969 	bl	8007854 <USBD_SetClassConfig>
 8008582:	4603      	mov	r3, r0
 8008584:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00f      	beq.n	80085ac <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f8ff 	bl	8008792 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff f975 	bl	800788c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2202      	movs	r2, #2
 80085a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80085aa:	e014      	b.n	80085d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f9bb 	bl	8008928 <USBD_CtlSendStatus>
    break;
 80085b2:	e010      	b.n	80085d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f9b7 	bl	8008928 <USBD_CtlSendStatus>
    break;
 80085ba:	e00c      	b.n	80085d6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f8e7 	bl	8008792 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085c4:	4b06      	ldr	r3, [pc, #24]	; (80085e0 <USBD_SetConfig+0x144>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7ff f95e 	bl	800788c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80085d0:	2303      	movs	r3, #3
 80085d2:	73fb      	strb	r3, [r7, #15]
    break;
 80085d4:	bf00      	nop
  }

  return ret;
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	20000288 	.word	0x20000288

080085e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	88db      	ldrh	r3, [r3, #6]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d004      	beq.n	8008600 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f8ca 	bl	8008792 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80085fe:	e022      	b.n	8008646 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008606:	2b02      	cmp	r3, #2
 8008608:	dc02      	bgt.n	8008610 <USBD_GetConfig+0x2c>
 800860a:	2b00      	cmp	r3, #0
 800860c:	dc03      	bgt.n	8008616 <USBD_GetConfig+0x32>
 800860e:	e015      	b.n	800863c <USBD_GetConfig+0x58>
 8008610:	2b03      	cmp	r3, #3
 8008612:	d00b      	beq.n	800862c <USBD_GetConfig+0x48>
 8008614:	e012      	b.n	800863c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3308      	adds	r3, #8
 8008620:	2201      	movs	r2, #1
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f925 	bl	8008874 <USBD_CtlSendData>
      break;
 800862a:	e00c      	b.n	8008646 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	3304      	adds	r3, #4
 8008630:	2201      	movs	r2, #1
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f91d 	bl	8008874 <USBD_CtlSendData>
      break;
 800863a:	e004      	b.n	8008646 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f8a7 	bl	8008792 <USBD_CtlError>
      break;
 8008644:	bf00      	nop
}
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865e:	3b01      	subs	r3, #1
 8008660:	2b02      	cmp	r3, #2
 8008662:	d81e      	bhi.n	80086a2 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	88db      	ldrh	r3, [r3, #6]
 8008668:	2b02      	cmp	r3, #2
 800866a:	d004      	beq.n	8008676 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f88f 	bl	8008792 <USBD_CtlError>
      break;
 8008674:	e01a      	b.n	80086ac <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008682:	2b00      	cmp	r3, #0
 8008684:	d005      	beq.n	8008692 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f043 0202 	orr.w	r2, r3, #2
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	330c      	adds	r3, #12
 8008696:	2202      	movs	r2, #2
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f8ea 	bl	8008874 <USBD_CtlSendData>
    break;
 80086a0:	e004      	b.n	80086ac <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f874 	bl	8008792 <USBD_CtlError>
    break;
 80086aa:	bf00      	nop
  }
}
 80086ac:	bf00      	nop
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	885b      	ldrh	r3, [r3, #2]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d106      	bne.n	80086d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f92a 	bl	8008928 <USBD_CtlSendStatus>
  }
}
 80086d4:	bf00      	nop
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ec:	3b01      	subs	r3, #1
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d80b      	bhi.n	800870a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	885b      	ldrh	r3, [r3, #2]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d10c      	bne.n	8008714 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f910 	bl	8008928 <USBD_CtlSendStatus>
      }
      break;
 8008708:	e004      	b.n	8008714 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f840 	bl	8008792 <USBD_CtlError>
      break;
 8008712:	e000      	b.n	8008716 <USBD_ClrFeature+0x3a>
      break;
 8008714:	bf00      	nop
  }
}
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b084      	sub	sp, #16
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	781a      	ldrb	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3301      	adds	r3, #1
 8008738:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	781a      	ldrb	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3301      	adds	r3, #1
 8008746:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f7ff fa9b 	bl	8007c84 <SWAPBYTE>
 800874e:	4603      	mov	r3, r0
 8008750:	461a      	mov	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3301      	adds	r3, #1
 800875a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	3301      	adds	r3, #1
 8008760:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7ff fa8e 	bl	8007c84 <SWAPBYTE>
 8008768:	4603      	mov	r3, r0
 800876a:	461a      	mov	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	3301      	adds	r3, #1
 8008774:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3301      	adds	r3, #1
 800877a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f7ff fa81 	bl	8007c84 <SWAPBYTE>
 8008782:	4603      	mov	r3, r0
 8008784:	461a      	mov	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	80da      	strh	r2, [r3, #6]
}
 800878a:	bf00      	nop
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800879c:	2180      	movs	r1, #128	; 0x80
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fcee 	bl	8009180 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087a4:	2100      	movs	r1, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fcea 	bl	8009180 <USBD_LL_StallEP>
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d036      	beq.n	8008838 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80087ce:	6938      	ldr	r0, [r7, #16]
 80087d0:	f000 f836 	bl	8008840 <USBD_GetLen>
 80087d4:	4603      	mov	r3, r0
 80087d6:	3301      	adds	r3, #1
 80087d8:	b29b      	uxth	r3, r3
 80087da:	005b      	lsls	r3, r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80087e2:	7dfb      	ldrb	r3, [r7, #23]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	4413      	add	r3, r2
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	7812      	ldrb	r2, [r2, #0]
 80087ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	3301      	adds	r3, #1
 80087f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	4413      	add	r3, r2
 80087fa:	2203      	movs	r2, #3
 80087fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
 8008800:	3301      	adds	r3, #1
 8008802:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008804:	e013      	b.n	800882e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	4413      	add	r3, r2
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	7812      	ldrb	r2, [r2, #0]
 8008810:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	3301      	adds	r3, #1
 8008816:	613b      	str	r3, [r7, #16]
    idx++;
 8008818:	7dfb      	ldrb	r3, [r7, #23]
 800881a:	3301      	adds	r3, #1
 800881c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	4413      	add	r3, r2
 8008824:	2200      	movs	r2, #0
 8008826:	701a      	strb	r2, [r3, #0]
    idx++;
 8008828:	7dfb      	ldrb	r3, [r7, #23]
 800882a:	3301      	adds	r3, #1
 800882c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e7      	bne.n	8008806 <USBD_GetString+0x52>
 8008836:	e000      	b.n	800883a <USBD_GetString+0x86>
    return;
 8008838:	bf00      	nop
  }
}
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008850:	e005      	b.n	800885e <USBD_GetLen+0x1e>
  {
    len++;
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	3301      	adds	r3, #1
 8008856:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	3301      	adds	r3, #1
 800885c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1f5      	bne.n	8008852 <USBD_GetLen+0x12>
  }

  return len;
 8008866:	7bfb      	ldrb	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2202      	movs	r2, #2
 8008884:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	2100      	movs	r1, #0
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 fd40 	bl	8009320 <USBD_LL_Transmit>

  return USBD_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	2100      	movs	r1, #0
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 fd2f 	bl	8009320 <USBD_LL_Transmit>

  return USBD_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2203      	movs	r2, #3
 80088dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	2100      	movs	r1, #0
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 fd4a 	bl	8009390 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	60f8      	str	r0, [r7, #12]
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	2100      	movs	r1, #0
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 fd39 	bl	8009390 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2204      	movs	r2, #4
 8008934:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008938:	2300      	movs	r3, #0
 800893a:	2200      	movs	r2, #0
 800893c:	2100      	movs	r1, #0
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fcee 	bl	8009320 <USBD_LL_Transmit>

  return USBD_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2205      	movs	r2, #5
 800895a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800895e:	2300      	movs	r3, #0
 8008960:	2200      	movs	r2, #0
 8008962:	2100      	movs	r1, #0
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fd13 	bl	8009390 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008978:	2200      	movs	r2, #0
 800897a:	4912      	ldr	r1, [pc, #72]	; (80089c4 <MX_USB_DEVICE_Init+0x50>)
 800897c:	4812      	ldr	r0, [pc, #72]	; (80089c8 <MX_USB_DEVICE_Init+0x54>)
 800897e:	f7fe fefb 	bl	8007778 <USBD_Init>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008988:	f7f7 fe28 	bl	80005dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800898c:	490f      	ldr	r1, [pc, #60]	; (80089cc <MX_USB_DEVICE_Init+0x58>)
 800898e:	480e      	ldr	r0, [pc, #56]	; (80089c8 <MX_USB_DEVICE_Init+0x54>)
 8008990:	f7fe ff22 	bl	80077d8 <USBD_RegisterClass>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800899a:	f7f7 fe1f 	bl	80005dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800899e:	490c      	ldr	r1, [pc, #48]	; (80089d0 <MX_USB_DEVICE_Init+0x5c>)
 80089a0:	4809      	ldr	r0, [pc, #36]	; (80089c8 <MX_USB_DEVICE_Init+0x54>)
 80089a2:	f7fe fe4d 	bl	8007640 <USBD_CDC_RegisterInterface>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089ac:	f7f7 fe16 	bl	80005dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089b0:	4805      	ldr	r0, [pc, #20]	; (80089c8 <MX_USB_DEVICE_Init+0x54>)
 80089b2:	f7fe ff38 	bl	8007826 <USBD_Start>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089bc:	f7f7 fe0e 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089c0:	bf00      	nop
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20000130 	.word	0x20000130
 80089c8:	2000037c 	.word	0x2000037c
 80089cc:	20000018 	.word	0x20000018
 80089d0:	2000011c 	.word	0x2000011c

080089d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80089d8:	2200      	movs	r2, #0
 80089da:	4905      	ldr	r1, [pc, #20]	; (80089f0 <CDC_Init_FS+0x1c>)
 80089dc:	4805      	ldr	r0, [pc, #20]	; (80089f4 <CDC_Init_FS+0x20>)
 80089de:	f7fe fe44 	bl	800766a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80089e2:	4905      	ldr	r1, [pc, #20]	; (80089f8 <CDC_Init_FS+0x24>)
 80089e4:	4803      	ldr	r0, [pc, #12]	; (80089f4 <CDC_Init_FS+0x20>)
 80089e6:	f7fe fe59 	bl	800769c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80089ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	20000a34 	.word	0x20000a34
 80089f4:	2000037c 	.word	0x2000037c
 80089f8:	2000064c 	.word	0x2000064c

080089fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	6039      	str	r1, [r7, #0]
 8008a16:	71fb      	strb	r3, [r7, #7]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	2b23      	cmp	r3, #35	; 0x23
 8008a20:	d84a      	bhi.n	8008ab8 <CDC_Control_FS+0xac>
 8008a22:	a201      	add	r2, pc, #4	; (adr r2, 8008a28 <CDC_Control_FS+0x1c>)
 8008a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a28:	08008ab9 	.word	0x08008ab9
 8008a2c:	08008ab9 	.word	0x08008ab9
 8008a30:	08008ab9 	.word	0x08008ab9
 8008a34:	08008ab9 	.word	0x08008ab9
 8008a38:	08008ab9 	.word	0x08008ab9
 8008a3c:	08008ab9 	.word	0x08008ab9
 8008a40:	08008ab9 	.word	0x08008ab9
 8008a44:	08008ab9 	.word	0x08008ab9
 8008a48:	08008ab9 	.word	0x08008ab9
 8008a4c:	08008ab9 	.word	0x08008ab9
 8008a50:	08008ab9 	.word	0x08008ab9
 8008a54:	08008ab9 	.word	0x08008ab9
 8008a58:	08008ab9 	.word	0x08008ab9
 8008a5c:	08008ab9 	.word	0x08008ab9
 8008a60:	08008ab9 	.word	0x08008ab9
 8008a64:	08008ab9 	.word	0x08008ab9
 8008a68:	08008ab9 	.word	0x08008ab9
 8008a6c:	08008ab9 	.word	0x08008ab9
 8008a70:	08008ab9 	.word	0x08008ab9
 8008a74:	08008ab9 	.word	0x08008ab9
 8008a78:	08008ab9 	.word	0x08008ab9
 8008a7c:	08008ab9 	.word	0x08008ab9
 8008a80:	08008ab9 	.word	0x08008ab9
 8008a84:	08008ab9 	.word	0x08008ab9
 8008a88:	08008ab9 	.word	0x08008ab9
 8008a8c:	08008ab9 	.word	0x08008ab9
 8008a90:	08008ab9 	.word	0x08008ab9
 8008a94:	08008ab9 	.word	0x08008ab9
 8008a98:	08008ab9 	.word	0x08008ab9
 8008a9c:	08008ab9 	.word	0x08008ab9
 8008aa0:	08008ab9 	.word	0x08008ab9
 8008aa4:	08008ab9 	.word	0x08008ab9
 8008aa8:	08008ab9 	.word	0x08008ab9
 8008aac:	08008ab9 	.word	0x08008ab9
 8008ab0:	08008ab9 	.word	0x08008ab9
 8008ab4:	08008ab9 	.word	0x08008ab9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ab8:	bf00      	nop
  }

  return (USBD_OK);
 8008aba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	480f      	ldr	r0, [pc, #60]	; (8008b14 <CDC_Receive_FS+0x4c>)
 8008ad6:	f7fe fde1 	bl	800769c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ada:	480e      	ldr	r0, [pc, #56]	; (8008b14 <CDC_Receive_FS+0x4c>)
 8008adc:	f7fe fe22 	bl	8007724 <USBD_CDC_ReceivePacket>


  for(i=0;i<*Len;i++){
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	e00b      	b.n	8008afe <CDC_Receive_FS+0x36>
	  rxBuffer[i] = Buf[i];
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4413      	add	r3, r2
 8008aec:	7819      	ldrb	r1, [r3, #0]
 8008aee:	4a0a      	ldr	r2, [pc, #40]	; (8008b18 <CDC_Receive_FS+0x50>)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4413      	add	r3, r2
 8008af4:	460a      	mov	r2, r1
 8008af6:	701a      	strb	r2, [r3, #0]
  for(i=0;i<*Len;i++){
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3301      	adds	r3, #1
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d3ee      	bcc.n	8008ae6 <CDC_Receive_FS+0x1e>
  }

  //CDC_Transmit_FS((uint8_t *) rxBuffer,strlen(rxBuffer));


  return (USBD_OK);
 8008b08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	2000037c 	.word	0x2000037c
 8008b18:	200002f8 	.word	0x200002f8

08008b1c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b2c:	4b0d      	ldr	r3, [pc, #52]	; (8008b64 <CDC_Transmit_FS+0x48>)
 8008b2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b32:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e00b      	b.n	8008b5a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b42:	887b      	ldrh	r3, [r7, #2]
 8008b44:	461a      	mov	r2, r3
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	4806      	ldr	r0, [pc, #24]	; (8008b64 <CDC_Transmit_FS+0x48>)
 8008b4a:	f7fe fd8e 	bl	800766a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b4e:	4805      	ldr	r0, [pc, #20]	; (8008b64 <CDC_Transmit_FS+0x48>)
 8008b50:	f7fe fdb8 	bl	80076c4 <USBD_CDC_TransmitPacket>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	2000037c 	.word	0x2000037c

08008b68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	4613      	mov	r3, r2
 8008b74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	371c      	adds	r7, #28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
	...

08008b8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	6039      	str	r1, [r7, #0]
 8008b96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2212      	movs	r2, #18
 8008b9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b9e:	4b03      	ldr	r3, [pc, #12]	; (8008bac <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	20000150 	.word	0x20000150

08008bb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	6039      	str	r1, [r7, #0]
 8008bba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2204      	movs	r2, #4
 8008bc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bc2:	4b03      	ldr	r3, [pc, #12]	; (8008bd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	20000170 	.word	0x20000170

08008bd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	6039      	str	r1, [r7, #0]
 8008bde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d105      	bne.n	8008bf2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	4907      	ldr	r1, [pc, #28]	; (8008c08 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bea:	4808      	ldr	r0, [pc, #32]	; (8008c0c <USBD_FS_ProductStrDescriptor+0x38>)
 8008bec:	f7ff fde2 	bl	80087b4 <USBD_GetString>
 8008bf0:	e004      	b.n	8008bfc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	4904      	ldr	r1, [pc, #16]	; (8008c08 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bf6:	4805      	ldr	r0, [pc, #20]	; (8008c0c <USBD_FS_ProductStrDescriptor+0x38>)
 8008bf8:	f7ff fddc 	bl	80087b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bfc:	4b02      	ldr	r3, [pc, #8]	; (8008c08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	20000e1c 	.word	0x20000e1c
 8008c0c:	08009dc0 	.word	0x08009dc0

08008c10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	6039      	str	r1, [r7, #0]
 8008c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	4904      	ldr	r1, [pc, #16]	; (8008c30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c20:	4804      	ldr	r0, [pc, #16]	; (8008c34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c22:	f7ff fdc7 	bl	80087b4 <USBD_GetString>
  return USBD_StrDesc;
 8008c26:	4b02      	ldr	r3, [pc, #8]	; (8008c30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20000e1c 	.word	0x20000e1c
 8008c34:	08009dd8 	.word	0x08009dd8

08008c38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	6039      	str	r1, [r7, #0]
 8008c42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	221a      	movs	r2, #26
 8008c48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c4a:	f000 f855 	bl	8008cf8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c4e:	4b02      	ldr	r3, [pc, #8]	; (8008c58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	20000174 	.word	0x20000174

08008c5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	4603      	mov	r3, r0
 8008c64:	6039      	str	r1, [r7, #0]
 8008c66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c68:	79fb      	ldrb	r3, [r7, #7]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d105      	bne.n	8008c7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	4907      	ldr	r1, [pc, #28]	; (8008c90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c72:	4808      	ldr	r0, [pc, #32]	; (8008c94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c74:	f7ff fd9e 	bl	80087b4 <USBD_GetString>
 8008c78:	e004      	b.n	8008c84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	4904      	ldr	r1, [pc, #16]	; (8008c90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c7e:	4805      	ldr	r0, [pc, #20]	; (8008c94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c80:	f7ff fd98 	bl	80087b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c84:	4b02      	ldr	r3, [pc, #8]	; (8008c90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20000e1c 	.word	0x20000e1c
 8008c94:	08009dec 	.word	0x08009dec

08008c98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	6039      	str	r1, [r7, #0]
 8008ca2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d105      	bne.n	8008cb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	4907      	ldr	r1, [pc, #28]	; (8008ccc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cae:	4808      	ldr	r0, [pc, #32]	; (8008cd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cb0:	f7ff fd80 	bl	80087b4 <USBD_GetString>
 8008cb4:	e004      	b.n	8008cc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	4904      	ldr	r1, [pc, #16]	; (8008ccc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cba:	4805      	ldr	r0, [pc, #20]	; (8008cd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cbc:	f7ff fd7a 	bl	80087b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cc0:	4b02      	ldr	r3, [pc, #8]	; (8008ccc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20000e1c 	.word	0x20000e1c
 8008cd0:	08009df8 	.word	0x08009df8

08008cd4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	6039      	str	r1, [r7, #0]
 8008cde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	220c      	movs	r2, #12
 8008ce4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008ce6:	4b03      	ldr	r3, [pc, #12]	; (8008cf4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	20000164 	.word	0x20000164

08008cf8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cfe:	4b0f      	ldr	r3, [pc, #60]	; (8008d3c <Get_SerialNum+0x44>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d04:	4b0e      	ldr	r3, [pc, #56]	; (8008d40 <Get_SerialNum+0x48>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d0a:	4b0e      	ldr	r3, [pc, #56]	; (8008d44 <Get_SerialNum+0x4c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4413      	add	r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d009      	beq.n	8008d32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d1e:	2208      	movs	r2, #8
 8008d20:	4909      	ldr	r1, [pc, #36]	; (8008d48 <Get_SerialNum+0x50>)
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 f814 	bl	8008d50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d28:	2204      	movs	r2, #4
 8008d2a:	4908      	ldr	r1, [pc, #32]	; (8008d4c <Get_SerialNum+0x54>)
 8008d2c:	68b8      	ldr	r0, [r7, #8]
 8008d2e:	f000 f80f 	bl	8008d50 <IntToUnicode>
  }
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	1fff7590 	.word	0x1fff7590
 8008d40:	1fff7594 	.word	0x1fff7594
 8008d44:	1fff7598 	.word	0x1fff7598
 8008d48:	20000176 	.word	0x20000176
 8008d4c:	20000186 	.word	0x20000186

08008d50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d62:	2300      	movs	r3, #0
 8008d64:	75fb      	strb	r3, [r7, #23]
 8008d66:	e027      	b.n	8008db8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	0f1b      	lsrs	r3, r3, #28
 8008d6c:	2b09      	cmp	r3, #9
 8008d6e:	d80b      	bhi.n	8008d88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	0f1b      	lsrs	r3, r3, #28
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	7dfb      	ldrb	r3, [r7, #23]
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	440b      	add	r3, r1
 8008d80:	3230      	adds	r2, #48	; 0x30
 8008d82:	b2d2      	uxtb	r2, r2
 8008d84:	701a      	strb	r2, [r3, #0]
 8008d86:	e00a      	b.n	8008d9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	0f1b      	lsrs	r3, r3, #28
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	4619      	mov	r1, r3
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	440b      	add	r3, r1
 8008d98:	3237      	adds	r2, #55	; 0x37
 8008d9a:	b2d2      	uxtb	r2, r2
 8008d9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	011b      	lsls	r3, r3, #4
 8008da2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008da4:	7dfb      	ldrb	r3, [r7, #23]
 8008da6:	005b      	lsls	r3, r3, #1
 8008da8:	3301      	adds	r3, #1
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	4413      	add	r3, r2
 8008dae:	2200      	movs	r2, #0
 8008db0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	3301      	adds	r3, #1
 8008db6:	75fb      	strb	r3, [r7, #23]
 8008db8:	7dfa      	ldrb	r2, [r7, #23]
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d3d3      	bcc.n	8008d68 <IntToUnicode+0x18>
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	bf00      	nop
 8008dc4:	371c      	adds	r7, #28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
	...

08008dd0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a0d      	ldr	r2, [pc, #52]	; (8008e14 <HAL_PCD_MspInit+0x44>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d113      	bne.n	8008e0a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008de2:	4b0d      	ldr	r3, [pc, #52]	; (8008e18 <HAL_PCD_MspInit+0x48>)
 8008de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de6:	4a0c      	ldr	r2, [pc, #48]	; (8008e18 <HAL_PCD_MspInit+0x48>)
 8008de8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008dec:	6593      	str	r3, [r2, #88]	; 0x58
 8008dee:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <HAL_PCD_MspInit+0x48>)
 8008df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	2043      	movs	r0, #67	; 0x43
 8008e00:	f7f8 fb1d 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008e04:	2043      	movs	r0, #67	; 0x43
 8008e06:	f7f8 fb36 	bl	8001476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008e0a:	bf00      	nop
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	40006800 	.word	0x40006800
 8008e18:	40021000 	.word	0x40021000

08008e1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008e30:	4619      	mov	r1, r3
 8008e32:	4610      	mov	r0, r2
 8008e34:	f7fe fd42 	bl	80078bc <USBD_LL_SetupStage>
}
 8008e38:	bf00      	nop
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	460b      	mov	r3, r1
 8008e4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008e52:	78fa      	ldrb	r2, [r7, #3]
 8008e54:	6879      	ldr	r1, [r7, #4]
 8008e56:	4613      	mov	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	00db      	lsls	r3, r3, #3
 8008e5e:	440b      	add	r3, r1
 8008e60:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	78fb      	ldrb	r3, [r7, #3]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	f7fe fd7c 	bl	8007966 <USBD_LL_DataOutStage>
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008e88:	78fa      	ldrb	r2, [r7, #3]
 8008e8a:	6879      	ldr	r1, [r7, #4]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	440b      	add	r3, r1
 8008e96:	333c      	adds	r3, #60	; 0x3c
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	78fb      	ldrb	r3, [r7, #3]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	f7fe fdc5 	bl	8007a2c <USBD_LL_DataInStage>
}
 8008ea2:	bf00      	nop
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fe fec9 	bl	8007c50 <USBD_LL_SOF>
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d001      	beq.n	8008ede <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008eda:	f7f7 fb7f 	bl	80005dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008ee4:	7bfa      	ldrb	r2, [r7, #15]
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fe fe76 	bl	8007bda <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe fe2f 	bl	8007b58 <USBD_LL_Reset>
}
 8008efa:	bf00      	nop
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7fe fe71 	bl	8007bfa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d005      	beq.n	8008f2c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f20:	4b04      	ldr	r3, [pc, #16]	; (8008f34 <HAL_PCD_SuspendCallback+0x30>)
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	4a03      	ldr	r2, [pc, #12]	; (8008f34 <HAL_PCD_SuspendCallback+0x30>)
 8008f26:	f043 0306 	orr.w	r3, r3, #6
 8008f2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	e000ed00 	.word	0xe000ed00

08008f38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d007      	beq.n	8008f58 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f48:	4b08      	ldr	r3, [pc, #32]	; (8008f6c <HAL_PCD_ResumeCallback+0x34>)
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	4a07      	ldr	r2, [pc, #28]	; (8008f6c <HAL_PCD_ResumeCallback+0x34>)
 8008f4e:	f023 0306 	bic.w	r3, r3, #6
 8008f52:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008f54:	f000 fa9e 	bl	8009494 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fe fe60 	bl	8007c24 <USBD_LL_Resume>
}
 8008f64:	bf00      	nop
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	e000ed00 	.word	0xe000ed00

08008f70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008f78:	f7fa f822 	bl	8002fc0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008f7c:	4a2b      	ldr	r2, [pc, #172]	; (800902c <USBD_LL_Init+0xbc>)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a29      	ldr	r2, [pc, #164]	; (800902c <USBD_LL_Init+0xbc>)
 8008f88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008f8c:	4b27      	ldr	r3, [pc, #156]	; (800902c <USBD_LL_Init+0xbc>)
 8008f8e:	4a28      	ldr	r2, [pc, #160]	; (8009030 <USBD_LL_Init+0xc0>)
 8008f90:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008f92:	4b26      	ldr	r3, [pc, #152]	; (800902c <USBD_LL_Init+0xbc>)
 8008f94:	2208      	movs	r2, #8
 8008f96:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008f98:	4b24      	ldr	r3, [pc, #144]	; (800902c <USBD_LL_Init+0xbc>)
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f9e:	4b23      	ldr	r3, [pc, #140]	; (800902c <USBD_LL_Init+0xbc>)
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008fa4:	4b21      	ldr	r3, [pc, #132]	; (800902c <USBD_LL_Init+0xbc>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008faa:	4b20      	ldr	r3, [pc, #128]	; (800902c <USBD_LL_Init+0xbc>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008fb0:	4b1e      	ldr	r3, [pc, #120]	; (800902c <USBD_LL_Init+0xbc>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008fb6:	4b1d      	ldr	r3, [pc, #116]	; (800902c <USBD_LL_Init+0xbc>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008fbc:	481b      	ldr	r0, [pc, #108]	; (800902c <USBD_LL_Init+0xbc>)
 8008fbe:	f7f8 fbf7 	bl	80017b0 <HAL_PCD_Init>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008fc8:	f7f7 fb08 	bl	80005dc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008fd2:	2318      	movs	r3, #24
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	f7f9 ff20 	bl	8002e1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008fe2:	2358      	movs	r3, #88	; 0x58
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2180      	movs	r1, #128	; 0x80
 8008fe8:	f7f9 ff18 	bl	8002e1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ff2:	23c0      	movs	r3, #192	; 0xc0
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2181      	movs	r1, #129	; 0x81
 8008ff8:	f7f9 ff10 	bl	8002e1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009002:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009006:	2200      	movs	r2, #0
 8009008:	2101      	movs	r1, #1
 800900a:	f7f9 ff07 	bl	8002e1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009018:	2200      	movs	r2, #0
 800901a:	2182      	movs	r1, #130	; 0x82
 800901c:	f7f9 fefe 	bl	8002e1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	2000101c 	.word	0x2000101c
 8009030:	40006800 	.word	0x40006800

08009034 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800904a:	4618      	mov	r0, r3
 800904c:	f7f8 fcc2 	bl	80019d4 <HAL_PCD_Start>
 8009050:	4603      	mov	r3, r0
 8009052:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009054:	7bbb      	ldrb	r3, [r7, #14]
 8009056:	2b03      	cmp	r3, #3
 8009058:	d816      	bhi.n	8009088 <USBD_LL_Start+0x54>
 800905a:	a201      	add	r2, pc, #4	; (adr r2, 8009060 <USBD_LL_Start+0x2c>)
 800905c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009060:	08009071 	.word	0x08009071
 8009064:	08009077 	.word	0x08009077
 8009068:	0800907d 	.word	0x0800907d
 800906c:	08009083 	.word	0x08009083
    case HAL_OK :
      usb_status = USBD_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	73fb      	strb	r3, [r7, #15]
    break;
 8009074:	e00b      	b.n	800908e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009076:	2303      	movs	r3, #3
 8009078:	73fb      	strb	r3, [r7, #15]
    break;
 800907a:	e008      	b.n	800908e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800907c:	2301      	movs	r3, #1
 800907e:	73fb      	strb	r3, [r7, #15]
    break;
 8009080:	e005      	b.n	800908e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009082:	2303      	movs	r3, #3
 8009084:	73fb      	strb	r3, [r7, #15]
    break;
 8009086:	e002      	b.n	800908e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009088:	2303      	movs	r3, #3
 800908a:	73fb      	strb	r3, [r7, #15]
    break;
 800908c:	bf00      	nop
  }
  return usb_status;
 800908e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	4608      	mov	r0, r1
 80090a2:	4611      	mov	r1, r2
 80090a4:	461a      	mov	r2, r3
 80090a6:	4603      	mov	r3, r0
 80090a8:	70fb      	strb	r3, [r7, #3]
 80090aa:	460b      	mov	r3, r1
 80090ac:	70bb      	strb	r3, [r7, #2]
 80090ae:	4613      	mov	r3, r2
 80090b0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090c0:	78bb      	ldrb	r3, [r7, #2]
 80090c2:	883a      	ldrh	r2, [r7, #0]
 80090c4:	78f9      	ldrb	r1, [r7, #3]
 80090c6:	f7f8 fe1a 	bl	8001cfe <HAL_PCD_EP_Open>
 80090ca:	4603      	mov	r3, r0
 80090cc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
 80090d0:	2b03      	cmp	r3, #3
 80090d2:	d817      	bhi.n	8009104 <USBD_LL_OpenEP+0x6c>
 80090d4:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <USBD_LL_OpenEP+0x44>)
 80090d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090da:	bf00      	nop
 80090dc:	080090ed 	.word	0x080090ed
 80090e0:	080090f3 	.word	0x080090f3
 80090e4:	080090f9 	.word	0x080090f9
 80090e8:	080090ff 	.word	0x080090ff
    case HAL_OK :
      usb_status = USBD_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	73fb      	strb	r3, [r7, #15]
    break;
 80090f0:	e00b      	b.n	800910a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090f2:	2303      	movs	r3, #3
 80090f4:	73fb      	strb	r3, [r7, #15]
    break;
 80090f6:	e008      	b.n	800910a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090f8:	2301      	movs	r3, #1
 80090fa:	73fb      	strb	r3, [r7, #15]
    break;
 80090fc:	e005      	b.n	800910a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090fe:	2303      	movs	r3, #3
 8009100:	73fb      	strb	r3, [r7, #15]
    break;
 8009102:	e002      	b.n	800910a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009104:	2303      	movs	r3, #3
 8009106:	73fb      	strb	r3, [r7, #15]
    break;
 8009108:	bf00      	nop
  }
  return usb_status;
 800910a:	7bfb      	ldrb	r3, [r7, #15]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800912e:	78fa      	ldrb	r2, [r7, #3]
 8009130:	4611      	mov	r1, r2
 8009132:	4618      	mov	r0, r3
 8009134:	f7f8 fe49 	bl	8001dca <HAL_PCD_EP_Close>
 8009138:	4603      	mov	r3, r0
 800913a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	2b03      	cmp	r3, #3
 8009140:	d816      	bhi.n	8009170 <USBD_LL_CloseEP+0x5c>
 8009142:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <USBD_LL_CloseEP+0x34>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	08009159 	.word	0x08009159
 800914c:	0800915f 	.word	0x0800915f
 8009150:	08009165 	.word	0x08009165
 8009154:	0800916b 	.word	0x0800916b
    case HAL_OK :
      usb_status = USBD_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73fb      	strb	r3, [r7, #15]
    break;
 800915c:	e00b      	b.n	8009176 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800915e:	2303      	movs	r3, #3
 8009160:	73fb      	strb	r3, [r7, #15]
    break;
 8009162:	e008      	b.n	8009176 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009164:	2301      	movs	r3, #1
 8009166:	73fb      	strb	r3, [r7, #15]
    break;
 8009168:	e005      	b.n	8009176 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800916a:	2303      	movs	r3, #3
 800916c:	73fb      	strb	r3, [r7, #15]
    break;
 800916e:	e002      	b.n	8009176 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009170:	2303      	movs	r3, #3
 8009172:	73fb      	strb	r3, [r7, #15]
    break;
 8009174:	bf00      	nop
  }
  return usb_status;
 8009176:	7bfb      	ldrb	r3, [r7, #15]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	460b      	mov	r3, r1
 800918a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800919a:	78fa      	ldrb	r2, [r7, #3]
 800919c:	4611      	mov	r1, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	f7f8 fef3 	bl	8001f8a <HAL_PCD_EP_SetStall>
 80091a4:	4603      	mov	r3, r0
 80091a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d816      	bhi.n	80091dc <USBD_LL_StallEP+0x5c>
 80091ae:	a201      	add	r2, pc, #4	; (adr r2, 80091b4 <USBD_LL_StallEP+0x34>)
 80091b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b4:	080091c5 	.word	0x080091c5
 80091b8:	080091cb 	.word	0x080091cb
 80091bc:	080091d1 	.word	0x080091d1
 80091c0:	080091d7 	.word	0x080091d7
    case HAL_OK :
      usb_status = USBD_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
    break;
 80091c8:	e00b      	b.n	80091e2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091ca:	2303      	movs	r3, #3
 80091cc:	73fb      	strb	r3, [r7, #15]
    break;
 80091ce:	e008      	b.n	80091e2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091d0:	2301      	movs	r3, #1
 80091d2:	73fb      	strb	r3, [r7, #15]
    break;
 80091d4:	e005      	b.n	80091e2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091d6:	2303      	movs	r3, #3
 80091d8:	73fb      	strb	r3, [r7, #15]
    break;
 80091da:	e002      	b.n	80091e2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80091dc:	2303      	movs	r3, #3
 80091de:	73fb      	strb	r3, [r7, #15]
    break;
 80091e0:	bf00      	nop
  }
  return usb_status;
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009206:	78fa      	ldrb	r2, [r7, #3]
 8009208:	4611      	mov	r1, r2
 800920a:	4618      	mov	r0, r3
 800920c:	f7f8 ff1d 	bl	800204a <HAL_PCD_EP_ClrStall>
 8009210:	4603      	mov	r3, r0
 8009212:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009214:	7bbb      	ldrb	r3, [r7, #14]
 8009216:	2b03      	cmp	r3, #3
 8009218:	d816      	bhi.n	8009248 <USBD_LL_ClearStallEP+0x5c>
 800921a:	a201      	add	r2, pc, #4	; (adr r2, 8009220 <USBD_LL_ClearStallEP+0x34>)
 800921c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009220:	08009231 	.word	0x08009231
 8009224:	08009237 	.word	0x08009237
 8009228:	0800923d 	.word	0x0800923d
 800922c:	08009243 	.word	0x08009243
    case HAL_OK :
      usb_status = USBD_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	73fb      	strb	r3, [r7, #15]
    break;
 8009234:	e00b      	b.n	800924e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009236:	2303      	movs	r3, #3
 8009238:	73fb      	strb	r3, [r7, #15]
    break;
 800923a:	e008      	b.n	800924e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800923c:	2301      	movs	r3, #1
 800923e:	73fb      	strb	r3, [r7, #15]
    break;
 8009240:	e005      	b.n	800924e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009242:	2303      	movs	r3, #3
 8009244:	73fb      	strb	r3, [r7, #15]
    break;
 8009246:	e002      	b.n	800924e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009248:	2303      	movs	r3, #3
 800924a:	73fb      	strb	r3, [r7, #15]
    break;
 800924c:	bf00      	nop
  }
  return usb_status;
 800924e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800926a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800926c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009270:	2b00      	cmp	r3, #0
 8009272:	da0c      	bge.n	800928e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009274:	78fb      	ldrb	r3, [r7, #3]
 8009276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800927a:	68f9      	ldr	r1, [r7, #12]
 800927c:	1c5a      	adds	r2, r3, #1
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	440b      	add	r3, r1
 8009288:	3302      	adds	r3, #2
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	e00b      	b.n	80092a6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800928e:	78fb      	ldrb	r3, [r7, #3]
 8009290:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009294:	68f9      	ldr	r1, [r7, #12]
 8009296:	4613      	mov	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	440b      	add	r3, r1
 80092a0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80092a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
	...

080092b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092ce:	78fa      	ldrb	r2, [r7, #3]
 80092d0:	4611      	mov	r1, r2
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7f8 fcee 	bl	8001cb4 <HAL_PCD_SetAddress>
 80092d8:	4603      	mov	r3, r0
 80092da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80092dc:	7bbb      	ldrb	r3, [r7, #14]
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d816      	bhi.n	8009310 <USBD_LL_SetUSBAddress+0x5c>
 80092e2:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <USBD_LL_SetUSBAddress+0x34>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	080092f9 	.word	0x080092f9
 80092ec:	080092ff 	.word	0x080092ff
 80092f0:	08009305 	.word	0x08009305
 80092f4:	0800930b 	.word	0x0800930b
    case HAL_OK :
      usb_status = USBD_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
    break;
 80092fc:	e00b      	b.n	8009316 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092fe:	2303      	movs	r3, #3
 8009300:	73fb      	strb	r3, [r7, #15]
    break;
 8009302:	e008      	b.n	8009316 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009304:	2301      	movs	r3, #1
 8009306:	73fb      	strb	r3, [r7, #15]
    break;
 8009308:	e005      	b.n	8009316 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800930a:	2303      	movs	r3, #3
 800930c:	73fb      	strb	r3, [r7, #15]
    break;
 800930e:	e002      	b.n	8009316 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009310:	2303      	movs	r3, #3
 8009312:	73fb      	strb	r3, [r7, #15]
    break;
 8009314:	bf00      	nop
  }
  return usb_status;
 8009316:	7bfb      	ldrb	r3, [r7, #15]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	607a      	str	r2, [r7, #4]
 800932a:	603b      	str	r3, [r7, #0]
 800932c:	460b      	mov	r3, r1
 800932e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800933e:	7af9      	ldrb	r1, [r7, #11]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	f7f8 fdde 	bl	8001f04 <HAL_PCD_EP_Transmit>
 8009348:	4603      	mov	r3, r0
 800934a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800934c:	7dbb      	ldrb	r3, [r7, #22]
 800934e:	2b03      	cmp	r3, #3
 8009350:	d816      	bhi.n	8009380 <USBD_LL_Transmit+0x60>
 8009352:	a201      	add	r2, pc, #4	; (adr r2, 8009358 <USBD_LL_Transmit+0x38>)
 8009354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009358:	08009369 	.word	0x08009369
 800935c:	0800936f 	.word	0x0800936f
 8009360:	08009375 	.word	0x08009375
 8009364:	0800937b 	.word	0x0800937b
    case HAL_OK :
      usb_status = USBD_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	75fb      	strb	r3, [r7, #23]
    break;
 800936c:	e00b      	b.n	8009386 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800936e:	2303      	movs	r3, #3
 8009370:	75fb      	strb	r3, [r7, #23]
    break;
 8009372:	e008      	b.n	8009386 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009374:	2301      	movs	r3, #1
 8009376:	75fb      	strb	r3, [r7, #23]
    break;
 8009378:	e005      	b.n	8009386 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800937a:	2303      	movs	r3, #3
 800937c:	75fb      	strb	r3, [r7, #23]
    break;
 800937e:	e002      	b.n	8009386 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009380:	2303      	movs	r3, #3
 8009382:	75fb      	strb	r3, [r7, #23]
    break;
 8009384:	bf00      	nop
  }
  return usb_status;
 8009386:	7dfb      	ldrb	r3, [r7, #23]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	607a      	str	r2, [r7, #4]
 800939a:	603b      	str	r3, [r7, #0]
 800939c:	460b      	mov	r3, r1
 800939e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093ae:	7af9      	ldrb	r1, [r7, #11]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	f7f8 fd51 	bl	8001e5a <HAL_PCD_EP_Receive>
 80093b8:	4603      	mov	r3, r0
 80093ba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80093bc:	7dbb      	ldrb	r3, [r7, #22]
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d816      	bhi.n	80093f0 <USBD_LL_PrepareReceive+0x60>
 80093c2:	a201      	add	r2, pc, #4	; (adr r2, 80093c8 <USBD_LL_PrepareReceive+0x38>)
 80093c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c8:	080093d9 	.word	0x080093d9
 80093cc:	080093df 	.word	0x080093df
 80093d0:	080093e5 	.word	0x080093e5
 80093d4:	080093eb 	.word	0x080093eb
    case HAL_OK :
      usb_status = USBD_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	75fb      	strb	r3, [r7, #23]
    break;
 80093dc:	e00b      	b.n	80093f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093de:	2303      	movs	r3, #3
 80093e0:	75fb      	strb	r3, [r7, #23]
    break;
 80093e2:	e008      	b.n	80093f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093e4:	2301      	movs	r3, #1
 80093e6:	75fb      	strb	r3, [r7, #23]
    break;
 80093e8:	e005      	b.n	80093f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093ea:	2303      	movs	r3, #3
 80093ec:	75fb      	strb	r3, [r7, #23]
    break;
 80093ee:	e002      	b.n	80093f6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80093f0:	2303      	movs	r3, #3
 80093f2:	75fb      	strb	r3, [r7, #23]
    break;
 80093f4:	bf00      	nop
  }
  return usb_status;
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009412:	78fa      	ldrb	r2, [r7, #3]
 8009414:	4611      	mov	r1, r2
 8009416:	4618      	mov	r0, r3
 8009418:	f7f8 fd5c 	bl	8001ed4 <HAL_PCD_EP_GetRxCount>
 800941c:	4603      	mov	r3, r0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009434:	78fb      	ldrb	r3, [r7, #3]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d002      	beq.n	8009440 <HAL_PCDEx_LPM_Callback+0x18>
 800943a:	2b01      	cmp	r3, #1
 800943c:	d013      	beq.n	8009466 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800943e:	e023      	b.n	8009488 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d007      	beq.n	8009458 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009448:	f000 f824 	bl	8009494 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800944c:	4b10      	ldr	r3, [pc, #64]	; (8009490 <HAL_PCDEx_LPM_Callback+0x68>)
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	4a0f      	ldr	r2, [pc, #60]	; (8009490 <HAL_PCDEx_LPM_Callback+0x68>)
 8009452:	f023 0306 	bic.w	r3, r3, #6
 8009456:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800945e:	4618      	mov	r0, r3
 8009460:	f7fe fbe0 	bl	8007c24 <USBD_LL_Resume>
    break;
 8009464:	e010      	b.n	8009488 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800946c:	4618      	mov	r0, r3
 800946e:	f7fe fbc4 	bl	8007bfa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d005      	beq.n	8009486 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800947a:	4b05      	ldr	r3, [pc, #20]	; (8009490 <HAL_PCDEx_LPM_Callback+0x68>)
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	4a04      	ldr	r2, [pc, #16]	; (8009490 <HAL_PCDEx_LPM_Callback+0x68>)
 8009480:	f043 0306 	orr.w	r3, r3, #6
 8009484:	6113      	str	r3, [r2, #16]
    break;
 8009486:	bf00      	nop
}
 8009488:	bf00      	nop
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	e000ed00 	.word	0xe000ed00

08009494 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009498:	f7f6 ff94 	bl	80003c4 <SystemClock_Config>
}
 800949c:	bf00      	nop
 800949e:	bd80      	pop	{r7, pc}

080094a0 <__errno>:
 80094a0:	4b01      	ldr	r3, [pc, #4]	; (80094a8 <__errno+0x8>)
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	20000190 	.word	0x20000190

080094ac <__libc_init_array>:
 80094ac:	b570      	push	{r4, r5, r6, lr}
 80094ae:	4d0d      	ldr	r5, [pc, #52]	; (80094e4 <__libc_init_array+0x38>)
 80094b0:	4c0d      	ldr	r4, [pc, #52]	; (80094e8 <__libc_init_array+0x3c>)
 80094b2:	1b64      	subs	r4, r4, r5
 80094b4:	10a4      	asrs	r4, r4, #2
 80094b6:	2600      	movs	r6, #0
 80094b8:	42a6      	cmp	r6, r4
 80094ba:	d109      	bne.n	80094d0 <__libc_init_array+0x24>
 80094bc:	4d0b      	ldr	r5, [pc, #44]	; (80094ec <__libc_init_array+0x40>)
 80094be:	4c0c      	ldr	r4, [pc, #48]	; (80094f0 <__libc_init_array+0x44>)
 80094c0:	f000 fc5e 	bl	8009d80 <_init>
 80094c4:	1b64      	subs	r4, r4, r5
 80094c6:	10a4      	asrs	r4, r4, #2
 80094c8:	2600      	movs	r6, #0
 80094ca:	42a6      	cmp	r6, r4
 80094cc:	d105      	bne.n	80094da <__libc_init_array+0x2e>
 80094ce:	bd70      	pop	{r4, r5, r6, pc}
 80094d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d4:	4798      	blx	r3
 80094d6:	3601      	adds	r6, #1
 80094d8:	e7ee      	b.n	80094b8 <__libc_init_array+0xc>
 80094da:	f855 3b04 	ldr.w	r3, [r5], #4
 80094de:	4798      	blx	r3
 80094e0:	3601      	adds	r6, #1
 80094e2:	e7f2      	b.n	80094ca <__libc_init_array+0x1e>
 80094e4:	08009e7c 	.word	0x08009e7c
 80094e8:	08009e7c 	.word	0x08009e7c
 80094ec:	08009e7c 	.word	0x08009e7c
 80094f0:	08009e80 	.word	0x08009e80

080094f4 <malloc>:
 80094f4:	4b02      	ldr	r3, [pc, #8]	; (8009500 <malloc+0xc>)
 80094f6:	4601      	mov	r1, r0
 80094f8:	6818      	ldr	r0, [r3, #0]
 80094fa:	f000 b871 	b.w	80095e0 <_malloc_r>
 80094fe:	bf00      	nop
 8009500:	20000190 	.word	0x20000190

08009504 <free>:
 8009504:	4b02      	ldr	r3, [pc, #8]	; (8009510 <free+0xc>)
 8009506:	4601      	mov	r1, r0
 8009508:	6818      	ldr	r0, [r3, #0]
 800950a:	f000 b819 	b.w	8009540 <_free_r>
 800950e:	bf00      	nop
 8009510:	20000190 	.word	0x20000190

08009514 <memcpy>:
 8009514:	440a      	add	r2, r1
 8009516:	4291      	cmp	r1, r2
 8009518:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800951c:	d100      	bne.n	8009520 <memcpy+0xc>
 800951e:	4770      	bx	lr
 8009520:	b510      	push	{r4, lr}
 8009522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800952a:	4291      	cmp	r1, r2
 800952c:	d1f9      	bne.n	8009522 <memcpy+0xe>
 800952e:	bd10      	pop	{r4, pc}

08009530 <memset>:
 8009530:	4402      	add	r2, r0
 8009532:	4603      	mov	r3, r0
 8009534:	4293      	cmp	r3, r2
 8009536:	d100      	bne.n	800953a <memset+0xa>
 8009538:	4770      	bx	lr
 800953a:	f803 1b01 	strb.w	r1, [r3], #1
 800953e:	e7f9      	b.n	8009534 <memset+0x4>

08009540 <_free_r>:
 8009540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009542:	2900      	cmp	r1, #0
 8009544:	d048      	beq.n	80095d8 <_free_r+0x98>
 8009546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800954a:	9001      	str	r0, [sp, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f1a1 0404 	sub.w	r4, r1, #4
 8009552:	bfb8      	it	lt
 8009554:	18e4      	addlt	r4, r4, r3
 8009556:	f000 f8cd 	bl	80096f4 <__malloc_lock>
 800955a:	4a20      	ldr	r2, [pc, #128]	; (80095dc <_free_r+0x9c>)
 800955c:	9801      	ldr	r0, [sp, #4]
 800955e:	6813      	ldr	r3, [r2, #0]
 8009560:	4615      	mov	r5, r2
 8009562:	b933      	cbnz	r3, 8009572 <_free_r+0x32>
 8009564:	6063      	str	r3, [r4, #4]
 8009566:	6014      	str	r4, [r2, #0]
 8009568:	b003      	add	sp, #12
 800956a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800956e:	f000 b8c7 	b.w	8009700 <__malloc_unlock>
 8009572:	42a3      	cmp	r3, r4
 8009574:	d90b      	bls.n	800958e <_free_r+0x4e>
 8009576:	6821      	ldr	r1, [r4, #0]
 8009578:	1862      	adds	r2, r4, r1
 800957a:	4293      	cmp	r3, r2
 800957c:	bf04      	itt	eq
 800957e:	681a      	ldreq	r2, [r3, #0]
 8009580:	685b      	ldreq	r3, [r3, #4]
 8009582:	6063      	str	r3, [r4, #4]
 8009584:	bf04      	itt	eq
 8009586:	1852      	addeq	r2, r2, r1
 8009588:	6022      	streq	r2, [r4, #0]
 800958a:	602c      	str	r4, [r5, #0]
 800958c:	e7ec      	b.n	8009568 <_free_r+0x28>
 800958e:	461a      	mov	r2, r3
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	b10b      	cbz	r3, 8009598 <_free_r+0x58>
 8009594:	42a3      	cmp	r3, r4
 8009596:	d9fa      	bls.n	800958e <_free_r+0x4e>
 8009598:	6811      	ldr	r1, [r2, #0]
 800959a:	1855      	adds	r5, r2, r1
 800959c:	42a5      	cmp	r5, r4
 800959e:	d10b      	bne.n	80095b8 <_free_r+0x78>
 80095a0:	6824      	ldr	r4, [r4, #0]
 80095a2:	4421      	add	r1, r4
 80095a4:	1854      	adds	r4, r2, r1
 80095a6:	42a3      	cmp	r3, r4
 80095a8:	6011      	str	r1, [r2, #0]
 80095aa:	d1dd      	bne.n	8009568 <_free_r+0x28>
 80095ac:	681c      	ldr	r4, [r3, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	6053      	str	r3, [r2, #4]
 80095b2:	4421      	add	r1, r4
 80095b4:	6011      	str	r1, [r2, #0]
 80095b6:	e7d7      	b.n	8009568 <_free_r+0x28>
 80095b8:	d902      	bls.n	80095c0 <_free_r+0x80>
 80095ba:	230c      	movs	r3, #12
 80095bc:	6003      	str	r3, [r0, #0]
 80095be:	e7d3      	b.n	8009568 <_free_r+0x28>
 80095c0:	6825      	ldr	r5, [r4, #0]
 80095c2:	1961      	adds	r1, r4, r5
 80095c4:	428b      	cmp	r3, r1
 80095c6:	bf04      	itt	eq
 80095c8:	6819      	ldreq	r1, [r3, #0]
 80095ca:	685b      	ldreq	r3, [r3, #4]
 80095cc:	6063      	str	r3, [r4, #4]
 80095ce:	bf04      	itt	eq
 80095d0:	1949      	addeq	r1, r1, r5
 80095d2:	6021      	streq	r1, [r4, #0]
 80095d4:	6054      	str	r4, [r2, #4]
 80095d6:	e7c7      	b.n	8009568 <_free_r+0x28>
 80095d8:	b003      	add	sp, #12
 80095da:	bd30      	pop	{r4, r5, pc}
 80095dc:	2000028c 	.word	0x2000028c

080095e0 <_malloc_r>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	1ccd      	adds	r5, r1, #3
 80095e4:	f025 0503 	bic.w	r5, r5, #3
 80095e8:	3508      	adds	r5, #8
 80095ea:	2d0c      	cmp	r5, #12
 80095ec:	bf38      	it	cc
 80095ee:	250c      	movcc	r5, #12
 80095f0:	2d00      	cmp	r5, #0
 80095f2:	4606      	mov	r6, r0
 80095f4:	db01      	blt.n	80095fa <_malloc_r+0x1a>
 80095f6:	42a9      	cmp	r1, r5
 80095f8:	d903      	bls.n	8009602 <_malloc_r+0x22>
 80095fa:	230c      	movs	r3, #12
 80095fc:	6033      	str	r3, [r6, #0]
 80095fe:	2000      	movs	r0, #0
 8009600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009602:	f000 f877 	bl	80096f4 <__malloc_lock>
 8009606:	4921      	ldr	r1, [pc, #132]	; (800968c <_malloc_r+0xac>)
 8009608:	680a      	ldr	r2, [r1, #0]
 800960a:	4614      	mov	r4, r2
 800960c:	b99c      	cbnz	r4, 8009636 <_malloc_r+0x56>
 800960e:	4f20      	ldr	r7, [pc, #128]	; (8009690 <_malloc_r+0xb0>)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	b923      	cbnz	r3, 800961e <_malloc_r+0x3e>
 8009614:	4621      	mov	r1, r4
 8009616:	4630      	mov	r0, r6
 8009618:	f000 f83c 	bl	8009694 <_sbrk_r>
 800961c:	6038      	str	r0, [r7, #0]
 800961e:	4629      	mov	r1, r5
 8009620:	4630      	mov	r0, r6
 8009622:	f000 f837 	bl	8009694 <_sbrk_r>
 8009626:	1c43      	adds	r3, r0, #1
 8009628:	d123      	bne.n	8009672 <_malloc_r+0x92>
 800962a:	230c      	movs	r3, #12
 800962c:	6033      	str	r3, [r6, #0]
 800962e:	4630      	mov	r0, r6
 8009630:	f000 f866 	bl	8009700 <__malloc_unlock>
 8009634:	e7e3      	b.n	80095fe <_malloc_r+0x1e>
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	1b5b      	subs	r3, r3, r5
 800963a:	d417      	bmi.n	800966c <_malloc_r+0x8c>
 800963c:	2b0b      	cmp	r3, #11
 800963e:	d903      	bls.n	8009648 <_malloc_r+0x68>
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	441c      	add	r4, r3
 8009644:	6025      	str	r5, [r4, #0]
 8009646:	e004      	b.n	8009652 <_malloc_r+0x72>
 8009648:	6863      	ldr	r3, [r4, #4]
 800964a:	42a2      	cmp	r2, r4
 800964c:	bf0c      	ite	eq
 800964e:	600b      	streq	r3, [r1, #0]
 8009650:	6053      	strne	r3, [r2, #4]
 8009652:	4630      	mov	r0, r6
 8009654:	f000 f854 	bl	8009700 <__malloc_unlock>
 8009658:	f104 000b 	add.w	r0, r4, #11
 800965c:	1d23      	adds	r3, r4, #4
 800965e:	f020 0007 	bic.w	r0, r0, #7
 8009662:	1ac2      	subs	r2, r0, r3
 8009664:	d0cc      	beq.n	8009600 <_malloc_r+0x20>
 8009666:	1a1b      	subs	r3, r3, r0
 8009668:	50a3      	str	r3, [r4, r2]
 800966a:	e7c9      	b.n	8009600 <_malloc_r+0x20>
 800966c:	4622      	mov	r2, r4
 800966e:	6864      	ldr	r4, [r4, #4]
 8009670:	e7cc      	b.n	800960c <_malloc_r+0x2c>
 8009672:	1cc4      	adds	r4, r0, #3
 8009674:	f024 0403 	bic.w	r4, r4, #3
 8009678:	42a0      	cmp	r0, r4
 800967a:	d0e3      	beq.n	8009644 <_malloc_r+0x64>
 800967c:	1a21      	subs	r1, r4, r0
 800967e:	4630      	mov	r0, r6
 8009680:	f000 f808 	bl	8009694 <_sbrk_r>
 8009684:	3001      	adds	r0, #1
 8009686:	d1dd      	bne.n	8009644 <_malloc_r+0x64>
 8009688:	e7cf      	b.n	800962a <_malloc_r+0x4a>
 800968a:	bf00      	nop
 800968c:	2000028c 	.word	0x2000028c
 8009690:	20000290 	.word	0x20000290

08009694 <_sbrk_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	4d06      	ldr	r5, [pc, #24]	; (80096b0 <_sbrk_r+0x1c>)
 8009698:	2300      	movs	r3, #0
 800969a:	4604      	mov	r4, r0
 800969c:	4608      	mov	r0, r1
 800969e:	602b      	str	r3, [r5, #0]
 80096a0:	f7f7 fcc4 	bl	800102c <_sbrk>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_sbrk_r+0x1a>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_sbrk_r+0x1a>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	20001310 	.word	0x20001310

080096b4 <siprintf>:
 80096b4:	b40e      	push	{r1, r2, r3}
 80096b6:	b500      	push	{lr}
 80096b8:	b09c      	sub	sp, #112	; 0x70
 80096ba:	ab1d      	add	r3, sp, #116	; 0x74
 80096bc:	9002      	str	r0, [sp, #8]
 80096be:	9006      	str	r0, [sp, #24]
 80096c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096c4:	4809      	ldr	r0, [pc, #36]	; (80096ec <siprintf+0x38>)
 80096c6:	9107      	str	r1, [sp, #28]
 80096c8:	9104      	str	r1, [sp, #16]
 80096ca:	4909      	ldr	r1, [pc, #36]	; (80096f0 <siprintf+0x3c>)
 80096cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d0:	9105      	str	r1, [sp, #20]
 80096d2:	6800      	ldr	r0, [r0, #0]
 80096d4:	9301      	str	r3, [sp, #4]
 80096d6:	a902      	add	r1, sp, #8
 80096d8:	f000 f874 	bl	80097c4 <_svfiprintf_r>
 80096dc:	9b02      	ldr	r3, [sp, #8]
 80096de:	2200      	movs	r2, #0
 80096e0:	701a      	strb	r2, [r3, #0]
 80096e2:	b01c      	add	sp, #112	; 0x70
 80096e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e8:	b003      	add	sp, #12
 80096ea:	4770      	bx	lr
 80096ec:	20000190 	.word	0x20000190
 80096f0:	ffff0208 	.word	0xffff0208

080096f4 <__malloc_lock>:
 80096f4:	4801      	ldr	r0, [pc, #4]	; (80096fc <__malloc_lock+0x8>)
 80096f6:	f000 baf9 	b.w	8009cec <__retarget_lock_acquire_recursive>
 80096fa:	bf00      	nop
 80096fc:	20001318 	.word	0x20001318

08009700 <__malloc_unlock>:
 8009700:	4801      	ldr	r0, [pc, #4]	; (8009708 <__malloc_unlock+0x8>)
 8009702:	f000 baf4 	b.w	8009cee <__retarget_lock_release_recursive>
 8009706:	bf00      	nop
 8009708:	20001318 	.word	0x20001318

0800970c <__ssputs_r>:
 800970c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009710:	688e      	ldr	r6, [r1, #8]
 8009712:	429e      	cmp	r6, r3
 8009714:	4682      	mov	sl, r0
 8009716:	460c      	mov	r4, r1
 8009718:	4690      	mov	r8, r2
 800971a:	461f      	mov	r7, r3
 800971c:	d838      	bhi.n	8009790 <__ssputs_r+0x84>
 800971e:	898a      	ldrh	r2, [r1, #12]
 8009720:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009724:	d032      	beq.n	800978c <__ssputs_r+0x80>
 8009726:	6825      	ldr	r5, [r4, #0]
 8009728:	6909      	ldr	r1, [r1, #16]
 800972a:	eba5 0901 	sub.w	r9, r5, r1
 800972e:	6965      	ldr	r5, [r4, #20]
 8009730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009738:	3301      	adds	r3, #1
 800973a:	444b      	add	r3, r9
 800973c:	106d      	asrs	r5, r5, #1
 800973e:	429d      	cmp	r5, r3
 8009740:	bf38      	it	cc
 8009742:	461d      	movcc	r5, r3
 8009744:	0553      	lsls	r3, r2, #21
 8009746:	d531      	bpl.n	80097ac <__ssputs_r+0xa0>
 8009748:	4629      	mov	r1, r5
 800974a:	f7ff ff49 	bl	80095e0 <_malloc_r>
 800974e:	4606      	mov	r6, r0
 8009750:	b950      	cbnz	r0, 8009768 <__ssputs_r+0x5c>
 8009752:	230c      	movs	r3, #12
 8009754:	f8ca 3000 	str.w	r3, [sl]
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800975e:	81a3      	strh	r3, [r4, #12]
 8009760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009768:	6921      	ldr	r1, [r4, #16]
 800976a:	464a      	mov	r2, r9
 800976c:	f7ff fed2 	bl	8009514 <memcpy>
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800977a:	81a3      	strh	r3, [r4, #12]
 800977c:	6126      	str	r6, [r4, #16]
 800977e:	6165      	str	r5, [r4, #20]
 8009780:	444e      	add	r6, r9
 8009782:	eba5 0509 	sub.w	r5, r5, r9
 8009786:	6026      	str	r6, [r4, #0]
 8009788:	60a5      	str	r5, [r4, #8]
 800978a:	463e      	mov	r6, r7
 800978c:	42be      	cmp	r6, r7
 800978e:	d900      	bls.n	8009792 <__ssputs_r+0x86>
 8009790:	463e      	mov	r6, r7
 8009792:	4632      	mov	r2, r6
 8009794:	6820      	ldr	r0, [r4, #0]
 8009796:	4641      	mov	r1, r8
 8009798:	f000 faaa 	bl	8009cf0 <memmove>
 800979c:	68a3      	ldr	r3, [r4, #8]
 800979e:	6822      	ldr	r2, [r4, #0]
 80097a0:	1b9b      	subs	r3, r3, r6
 80097a2:	4432      	add	r2, r6
 80097a4:	60a3      	str	r3, [r4, #8]
 80097a6:	6022      	str	r2, [r4, #0]
 80097a8:	2000      	movs	r0, #0
 80097aa:	e7db      	b.n	8009764 <__ssputs_r+0x58>
 80097ac:	462a      	mov	r2, r5
 80097ae:	f000 fab9 	bl	8009d24 <_realloc_r>
 80097b2:	4606      	mov	r6, r0
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d1e1      	bne.n	800977c <__ssputs_r+0x70>
 80097b8:	6921      	ldr	r1, [r4, #16]
 80097ba:	4650      	mov	r0, sl
 80097bc:	f7ff fec0 	bl	8009540 <_free_r>
 80097c0:	e7c7      	b.n	8009752 <__ssputs_r+0x46>
	...

080097c4 <_svfiprintf_r>:
 80097c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c8:	4698      	mov	r8, r3
 80097ca:	898b      	ldrh	r3, [r1, #12]
 80097cc:	061b      	lsls	r3, r3, #24
 80097ce:	b09d      	sub	sp, #116	; 0x74
 80097d0:	4607      	mov	r7, r0
 80097d2:	460d      	mov	r5, r1
 80097d4:	4614      	mov	r4, r2
 80097d6:	d50e      	bpl.n	80097f6 <_svfiprintf_r+0x32>
 80097d8:	690b      	ldr	r3, [r1, #16]
 80097da:	b963      	cbnz	r3, 80097f6 <_svfiprintf_r+0x32>
 80097dc:	2140      	movs	r1, #64	; 0x40
 80097de:	f7ff feff 	bl	80095e0 <_malloc_r>
 80097e2:	6028      	str	r0, [r5, #0]
 80097e4:	6128      	str	r0, [r5, #16]
 80097e6:	b920      	cbnz	r0, 80097f2 <_svfiprintf_r+0x2e>
 80097e8:	230c      	movs	r3, #12
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097f0:	e0d1      	b.n	8009996 <_svfiprintf_r+0x1d2>
 80097f2:	2340      	movs	r3, #64	; 0x40
 80097f4:	616b      	str	r3, [r5, #20]
 80097f6:	2300      	movs	r3, #0
 80097f8:	9309      	str	r3, [sp, #36]	; 0x24
 80097fa:	2320      	movs	r3, #32
 80097fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009800:	f8cd 800c 	str.w	r8, [sp, #12]
 8009804:	2330      	movs	r3, #48	; 0x30
 8009806:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099b0 <_svfiprintf_r+0x1ec>
 800980a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800980e:	f04f 0901 	mov.w	r9, #1
 8009812:	4623      	mov	r3, r4
 8009814:	469a      	mov	sl, r3
 8009816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800981a:	b10a      	cbz	r2, 8009820 <_svfiprintf_r+0x5c>
 800981c:	2a25      	cmp	r2, #37	; 0x25
 800981e:	d1f9      	bne.n	8009814 <_svfiprintf_r+0x50>
 8009820:	ebba 0b04 	subs.w	fp, sl, r4
 8009824:	d00b      	beq.n	800983e <_svfiprintf_r+0x7a>
 8009826:	465b      	mov	r3, fp
 8009828:	4622      	mov	r2, r4
 800982a:	4629      	mov	r1, r5
 800982c:	4638      	mov	r0, r7
 800982e:	f7ff ff6d 	bl	800970c <__ssputs_r>
 8009832:	3001      	adds	r0, #1
 8009834:	f000 80aa 	beq.w	800998c <_svfiprintf_r+0x1c8>
 8009838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800983a:	445a      	add	r2, fp
 800983c:	9209      	str	r2, [sp, #36]	; 0x24
 800983e:	f89a 3000 	ldrb.w	r3, [sl]
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 80a2 	beq.w	800998c <_svfiprintf_r+0x1c8>
 8009848:	2300      	movs	r3, #0
 800984a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800984e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009852:	f10a 0a01 	add.w	sl, sl, #1
 8009856:	9304      	str	r3, [sp, #16]
 8009858:	9307      	str	r3, [sp, #28]
 800985a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800985e:	931a      	str	r3, [sp, #104]	; 0x68
 8009860:	4654      	mov	r4, sl
 8009862:	2205      	movs	r2, #5
 8009864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009868:	4851      	ldr	r0, [pc, #324]	; (80099b0 <_svfiprintf_r+0x1ec>)
 800986a:	f7f6 fcb9 	bl	80001e0 <memchr>
 800986e:	9a04      	ldr	r2, [sp, #16]
 8009870:	b9d8      	cbnz	r0, 80098aa <_svfiprintf_r+0xe6>
 8009872:	06d0      	lsls	r0, r2, #27
 8009874:	bf44      	itt	mi
 8009876:	2320      	movmi	r3, #32
 8009878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800987c:	0711      	lsls	r1, r2, #28
 800987e:	bf44      	itt	mi
 8009880:	232b      	movmi	r3, #43	; 0x2b
 8009882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009886:	f89a 3000 	ldrb.w	r3, [sl]
 800988a:	2b2a      	cmp	r3, #42	; 0x2a
 800988c:	d015      	beq.n	80098ba <_svfiprintf_r+0xf6>
 800988e:	9a07      	ldr	r2, [sp, #28]
 8009890:	4654      	mov	r4, sl
 8009892:	2000      	movs	r0, #0
 8009894:	f04f 0c0a 	mov.w	ip, #10
 8009898:	4621      	mov	r1, r4
 800989a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800989e:	3b30      	subs	r3, #48	; 0x30
 80098a0:	2b09      	cmp	r3, #9
 80098a2:	d94e      	bls.n	8009942 <_svfiprintf_r+0x17e>
 80098a4:	b1b0      	cbz	r0, 80098d4 <_svfiprintf_r+0x110>
 80098a6:	9207      	str	r2, [sp, #28]
 80098a8:	e014      	b.n	80098d4 <_svfiprintf_r+0x110>
 80098aa:	eba0 0308 	sub.w	r3, r0, r8
 80098ae:	fa09 f303 	lsl.w	r3, r9, r3
 80098b2:	4313      	orrs	r3, r2
 80098b4:	9304      	str	r3, [sp, #16]
 80098b6:	46a2      	mov	sl, r4
 80098b8:	e7d2      	b.n	8009860 <_svfiprintf_r+0x9c>
 80098ba:	9b03      	ldr	r3, [sp, #12]
 80098bc:	1d19      	adds	r1, r3, #4
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	9103      	str	r1, [sp, #12]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	bfbb      	ittet	lt
 80098c6:	425b      	neglt	r3, r3
 80098c8:	f042 0202 	orrlt.w	r2, r2, #2
 80098cc:	9307      	strge	r3, [sp, #28]
 80098ce:	9307      	strlt	r3, [sp, #28]
 80098d0:	bfb8      	it	lt
 80098d2:	9204      	strlt	r2, [sp, #16]
 80098d4:	7823      	ldrb	r3, [r4, #0]
 80098d6:	2b2e      	cmp	r3, #46	; 0x2e
 80098d8:	d10c      	bne.n	80098f4 <_svfiprintf_r+0x130>
 80098da:	7863      	ldrb	r3, [r4, #1]
 80098dc:	2b2a      	cmp	r3, #42	; 0x2a
 80098de:	d135      	bne.n	800994c <_svfiprintf_r+0x188>
 80098e0:	9b03      	ldr	r3, [sp, #12]
 80098e2:	1d1a      	adds	r2, r3, #4
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	9203      	str	r2, [sp, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bfb8      	it	lt
 80098ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80098f0:	3402      	adds	r4, #2
 80098f2:	9305      	str	r3, [sp, #20]
 80098f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099c0 <_svfiprintf_r+0x1fc>
 80098f8:	7821      	ldrb	r1, [r4, #0]
 80098fa:	2203      	movs	r2, #3
 80098fc:	4650      	mov	r0, sl
 80098fe:	f7f6 fc6f 	bl	80001e0 <memchr>
 8009902:	b140      	cbz	r0, 8009916 <_svfiprintf_r+0x152>
 8009904:	2340      	movs	r3, #64	; 0x40
 8009906:	eba0 000a 	sub.w	r0, r0, sl
 800990a:	fa03 f000 	lsl.w	r0, r3, r0
 800990e:	9b04      	ldr	r3, [sp, #16]
 8009910:	4303      	orrs	r3, r0
 8009912:	3401      	adds	r4, #1
 8009914:	9304      	str	r3, [sp, #16]
 8009916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800991a:	4826      	ldr	r0, [pc, #152]	; (80099b4 <_svfiprintf_r+0x1f0>)
 800991c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009920:	2206      	movs	r2, #6
 8009922:	f7f6 fc5d 	bl	80001e0 <memchr>
 8009926:	2800      	cmp	r0, #0
 8009928:	d038      	beq.n	800999c <_svfiprintf_r+0x1d8>
 800992a:	4b23      	ldr	r3, [pc, #140]	; (80099b8 <_svfiprintf_r+0x1f4>)
 800992c:	bb1b      	cbnz	r3, 8009976 <_svfiprintf_r+0x1b2>
 800992e:	9b03      	ldr	r3, [sp, #12]
 8009930:	3307      	adds	r3, #7
 8009932:	f023 0307 	bic.w	r3, r3, #7
 8009936:	3308      	adds	r3, #8
 8009938:	9303      	str	r3, [sp, #12]
 800993a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800993c:	4433      	add	r3, r6
 800993e:	9309      	str	r3, [sp, #36]	; 0x24
 8009940:	e767      	b.n	8009812 <_svfiprintf_r+0x4e>
 8009942:	fb0c 3202 	mla	r2, ip, r2, r3
 8009946:	460c      	mov	r4, r1
 8009948:	2001      	movs	r0, #1
 800994a:	e7a5      	b.n	8009898 <_svfiprintf_r+0xd4>
 800994c:	2300      	movs	r3, #0
 800994e:	3401      	adds	r4, #1
 8009950:	9305      	str	r3, [sp, #20]
 8009952:	4619      	mov	r1, r3
 8009954:	f04f 0c0a 	mov.w	ip, #10
 8009958:	4620      	mov	r0, r4
 800995a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800995e:	3a30      	subs	r2, #48	; 0x30
 8009960:	2a09      	cmp	r2, #9
 8009962:	d903      	bls.n	800996c <_svfiprintf_r+0x1a8>
 8009964:	2b00      	cmp	r3, #0
 8009966:	d0c5      	beq.n	80098f4 <_svfiprintf_r+0x130>
 8009968:	9105      	str	r1, [sp, #20]
 800996a:	e7c3      	b.n	80098f4 <_svfiprintf_r+0x130>
 800996c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009970:	4604      	mov	r4, r0
 8009972:	2301      	movs	r3, #1
 8009974:	e7f0      	b.n	8009958 <_svfiprintf_r+0x194>
 8009976:	ab03      	add	r3, sp, #12
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	462a      	mov	r2, r5
 800997c:	4b0f      	ldr	r3, [pc, #60]	; (80099bc <_svfiprintf_r+0x1f8>)
 800997e:	a904      	add	r1, sp, #16
 8009980:	4638      	mov	r0, r7
 8009982:	f3af 8000 	nop.w
 8009986:	1c42      	adds	r2, r0, #1
 8009988:	4606      	mov	r6, r0
 800998a:	d1d6      	bne.n	800993a <_svfiprintf_r+0x176>
 800998c:	89ab      	ldrh	r3, [r5, #12]
 800998e:	065b      	lsls	r3, r3, #25
 8009990:	f53f af2c 	bmi.w	80097ec <_svfiprintf_r+0x28>
 8009994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009996:	b01d      	add	sp, #116	; 0x74
 8009998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999c:	ab03      	add	r3, sp, #12
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	462a      	mov	r2, r5
 80099a2:	4b06      	ldr	r3, [pc, #24]	; (80099bc <_svfiprintf_r+0x1f8>)
 80099a4:	a904      	add	r1, sp, #16
 80099a6:	4638      	mov	r0, r7
 80099a8:	f000 f87a 	bl	8009aa0 <_printf_i>
 80099ac:	e7eb      	b.n	8009986 <_svfiprintf_r+0x1c2>
 80099ae:	bf00      	nop
 80099b0:	08009e48 	.word	0x08009e48
 80099b4:	08009e52 	.word	0x08009e52
 80099b8:	00000000 	.word	0x00000000
 80099bc:	0800970d 	.word	0x0800970d
 80099c0:	08009e4e 	.word	0x08009e4e

080099c4 <_printf_common>:
 80099c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c8:	4616      	mov	r6, r2
 80099ca:	4699      	mov	r9, r3
 80099cc:	688a      	ldr	r2, [r1, #8]
 80099ce:	690b      	ldr	r3, [r1, #16]
 80099d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099d4:	4293      	cmp	r3, r2
 80099d6:	bfb8      	it	lt
 80099d8:	4613      	movlt	r3, r2
 80099da:	6033      	str	r3, [r6, #0]
 80099dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099e0:	4607      	mov	r7, r0
 80099e2:	460c      	mov	r4, r1
 80099e4:	b10a      	cbz	r2, 80099ea <_printf_common+0x26>
 80099e6:	3301      	adds	r3, #1
 80099e8:	6033      	str	r3, [r6, #0]
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	0699      	lsls	r1, r3, #26
 80099ee:	bf42      	ittt	mi
 80099f0:	6833      	ldrmi	r3, [r6, #0]
 80099f2:	3302      	addmi	r3, #2
 80099f4:	6033      	strmi	r3, [r6, #0]
 80099f6:	6825      	ldr	r5, [r4, #0]
 80099f8:	f015 0506 	ands.w	r5, r5, #6
 80099fc:	d106      	bne.n	8009a0c <_printf_common+0x48>
 80099fe:	f104 0a19 	add.w	sl, r4, #25
 8009a02:	68e3      	ldr	r3, [r4, #12]
 8009a04:	6832      	ldr	r2, [r6, #0]
 8009a06:	1a9b      	subs	r3, r3, r2
 8009a08:	42ab      	cmp	r3, r5
 8009a0a:	dc26      	bgt.n	8009a5a <_printf_common+0x96>
 8009a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a10:	1e13      	subs	r3, r2, #0
 8009a12:	6822      	ldr	r2, [r4, #0]
 8009a14:	bf18      	it	ne
 8009a16:	2301      	movne	r3, #1
 8009a18:	0692      	lsls	r2, r2, #26
 8009a1a:	d42b      	bmi.n	8009a74 <_printf_common+0xb0>
 8009a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a20:	4649      	mov	r1, r9
 8009a22:	4638      	mov	r0, r7
 8009a24:	47c0      	blx	r8
 8009a26:	3001      	adds	r0, #1
 8009a28:	d01e      	beq.n	8009a68 <_printf_common+0xa4>
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	68e5      	ldr	r5, [r4, #12]
 8009a2e:	6832      	ldr	r2, [r6, #0]
 8009a30:	f003 0306 	and.w	r3, r3, #6
 8009a34:	2b04      	cmp	r3, #4
 8009a36:	bf08      	it	eq
 8009a38:	1aad      	subeq	r5, r5, r2
 8009a3a:	68a3      	ldr	r3, [r4, #8]
 8009a3c:	6922      	ldr	r2, [r4, #16]
 8009a3e:	bf0c      	ite	eq
 8009a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a44:	2500      	movne	r5, #0
 8009a46:	4293      	cmp	r3, r2
 8009a48:	bfc4      	itt	gt
 8009a4a:	1a9b      	subgt	r3, r3, r2
 8009a4c:	18ed      	addgt	r5, r5, r3
 8009a4e:	2600      	movs	r6, #0
 8009a50:	341a      	adds	r4, #26
 8009a52:	42b5      	cmp	r5, r6
 8009a54:	d11a      	bne.n	8009a8c <_printf_common+0xc8>
 8009a56:	2000      	movs	r0, #0
 8009a58:	e008      	b.n	8009a6c <_printf_common+0xa8>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	4652      	mov	r2, sl
 8009a5e:	4649      	mov	r1, r9
 8009a60:	4638      	mov	r0, r7
 8009a62:	47c0      	blx	r8
 8009a64:	3001      	adds	r0, #1
 8009a66:	d103      	bne.n	8009a70 <_printf_common+0xac>
 8009a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a70:	3501      	adds	r5, #1
 8009a72:	e7c6      	b.n	8009a02 <_printf_common+0x3e>
 8009a74:	18e1      	adds	r1, r4, r3
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	2030      	movs	r0, #48	; 0x30
 8009a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a7e:	4422      	add	r2, r4
 8009a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a88:	3302      	adds	r3, #2
 8009a8a:	e7c7      	b.n	8009a1c <_printf_common+0x58>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	4622      	mov	r2, r4
 8009a90:	4649      	mov	r1, r9
 8009a92:	4638      	mov	r0, r7
 8009a94:	47c0      	blx	r8
 8009a96:	3001      	adds	r0, #1
 8009a98:	d0e6      	beq.n	8009a68 <_printf_common+0xa4>
 8009a9a:	3601      	adds	r6, #1
 8009a9c:	e7d9      	b.n	8009a52 <_printf_common+0x8e>
	...

08009aa0 <_printf_i>:
 8009aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	4691      	mov	r9, r2
 8009aa8:	7e27      	ldrb	r7, [r4, #24]
 8009aaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009aac:	2f78      	cmp	r7, #120	; 0x78
 8009aae:	4680      	mov	r8, r0
 8009ab0:	469a      	mov	sl, r3
 8009ab2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ab6:	d807      	bhi.n	8009ac8 <_printf_i+0x28>
 8009ab8:	2f62      	cmp	r7, #98	; 0x62
 8009aba:	d80a      	bhi.n	8009ad2 <_printf_i+0x32>
 8009abc:	2f00      	cmp	r7, #0
 8009abe:	f000 80d8 	beq.w	8009c72 <_printf_i+0x1d2>
 8009ac2:	2f58      	cmp	r7, #88	; 0x58
 8009ac4:	f000 80a3 	beq.w	8009c0e <_printf_i+0x16e>
 8009ac8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ad0:	e03a      	b.n	8009b48 <_printf_i+0xa8>
 8009ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ad6:	2b15      	cmp	r3, #21
 8009ad8:	d8f6      	bhi.n	8009ac8 <_printf_i+0x28>
 8009ada:	a001      	add	r0, pc, #4	; (adr r0, 8009ae0 <_printf_i+0x40>)
 8009adc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009ae0:	08009b39 	.word	0x08009b39
 8009ae4:	08009b4d 	.word	0x08009b4d
 8009ae8:	08009ac9 	.word	0x08009ac9
 8009aec:	08009ac9 	.word	0x08009ac9
 8009af0:	08009ac9 	.word	0x08009ac9
 8009af4:	08009ac9 	.word	0x08009ac9
 8009af8:	08009b4d 	.word	0x08009b4d
 8009afc:	08009ac9 	.word	0x08009ac9
 8009b00:	08009ac9 	.word	0x08009ac9
 8009b04:	08009ac9 	.word	0x08009ac9
 8009b08:	08009ac9 	.word	0x08009ac9
 8009b0c:	08009c59 	.word	0x08009c59
 8009b10:	08009b7d 	.word	0x08009b7d
 8009b14:	08009c3b 	.word	0x08009c3b
 8009b18:	08009ac9 	.word	0x08009ac9
 8009b1c:	08009ac9 	.word	0x08009ac9
 8009b20:	08009c7b 	.word	0x08009c7b
 8009b24:	08009ac9 	.word	0x08009ac9
 8009b28:	08009b7d 	.word	0x08009b7d
 8009b2c:	08009ac9 	.word	0x08009ac9
 8009b30:	08009ac9 	.word	0x08009ac9
 8009b34:	08009c43 	.word	0x08009c43
 8009b38:	680b      	ldr	r3, [r1, #0]
 8009b3a:	1d1a      	adds	r2, r3, #4
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	600a      	str	r2, [r1, #0]
 8009b40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e0a3      	b.n	8009c94 <_printf_i+0x1f4>
 8009b4c:	6825      	ldr	r5, [r4, #0]
 8009b4e:	6808      	ldr	r0, [r1, #0]
 8009b50:	062e      	lsls	r6, r5, #24
 8009b52:	f100 0304 	add.w	r3, r0, #4
 8009b56:	d50a      	bpl.n	8009b6e <_printf_i+0xce>
 8009b58:	6805      	ldr	r5, [r0, #0]
 8009b5a:	600b      	str	r3, [r1, #0]
 8009b5c:	2d00      	cmp	r5, #0
 8009b5e:	da03      	bge.n	8009b68 <_printf_i+0xc8>
 8009b60:	232d      	movs	r3, #45	; 0x2d
 8009b62:	426d      	negs	r5, r5
 8009b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b68:	485e      	ldr	r0, [pc, #376]	; (8009ce4 <_printf_i+0x244>)
 8009b6a:	230a      	movs	r3, #10
 8009b6c:	e019      	b.n	8009ba2 <_printf_i+0x102>
 8009b6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009b72:	6805      	ldr	r5, [r0, #0]
 8009b74:	600b      	str	r3, [r1, #0]
 8009b76:	bf18      	it	ne
 8009b78:	b22d      	sxthne	r5, r5
 8009b7a:	e7ef      	b.n	8009b5c <_printf_i+0xbc>
 8009b7c:	680b      	ldr	r3, [r1, #0]
 8009b7e:	6825      	ldr	r5, [r4, #0]
 8009b80:	1d18      	adds	r0, r3, #4
 8009b82:	6008      	str	r0, [r1, #0]
 8009b84:	0628      	lsls	r0, r5, #24
 8009b86:	d501      	bpl.n	8009b8c <_printf_i+0xec>
 8009b88:	681d      	ldr	r5, [r3, #0]
 8009b8a:	e002      	b.n	8009b92 <_printf_i+0xf2>
 8009b8c:	0669      	lsls	r1, r5, #25
 8009b8e:	d5fb      	bpl.n	8009b88 <_printf_i+0xe8>
 8009b90:	881d      	ldrh	r5, [r3, #0]
 8009b92:	4854      	ldr	r0, [pc, #336]	; (8009ce4 <_printf_i+0x244>)
 8009b94:	2f6f      	cmp	r7, #111	; 0x6f
 8009b96:	bf0c      	ite	eq
 8009b98:	2308      	moveq	r3, #8
 8009b9a:	230a      	movne	r3, #10
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ba2:	6866      	ldr	r6, [r4, #4]
 8009ba4:	60a6      	str	r6, [r4, #8]
 8009ba6:	2e00      	cmp	r6, #0
 8009ba8:	bfa2      	ittt	ge
 8009baa:	6821      	ldrge	r1, [r4, #0]
 8009bac:	f021 0104 	bicge.w	r1, r1, #4
 8009bb0:	6021      	strge	r1, [r4, #0]
 8009bb2:	b90d      	cbnz	r5, 8009bb8 <_printf_i+0x118>
 8009bb4:	2e00      	cmp	r6, #0
 8009bb6:	d04d      	beq.n	8009c54 <_printf_i+0x1b4>
 8009bb8:	4616      	mov	r6, r2
 8009bba:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bbe:	fb03 5711 	mls	r7, r3, r1, r5
 8009bc2:	5dc7      	ldrb	r7, [r0, r7]
 8009bc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009bc8:	462f      	mov	r7, r5
 8009bca:	42bb      	cmp	r3, r7
 8009bcc:	460d      	mov	r5, r1
 8009bce:	d9f4      	bls.n	8009bba <_printf_i+0x11a>
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	d10b      	bne.n	8009bec <_printf_i+0x14c>
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	07df      	lsls	r7, r3, #31
 8009bd8:	d508      	bpl.n	8009bec <_printf_i+0x14c>
 8009bda:	6923      	ldr	r3, [r4, #16]
 8009bdc:	6861      	ldr	r1, [r4, #4]
 8009bde:	4299      	cmp	r1, r3
 8009be0:	bfde      	ittt	le
 8009be2:	2330      	movle	r3, #48	; 0x30
 8009be4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009be8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009bec:	1b92      	subs	r2, r2, r6
 8009bee:	6122      	str	r2, [r4, #16]
 8009bf0:	f8cd a000 	str.w	sl, [sp]
 8009bf4:	464b      	mov	r3, r9
 8009bf6:	aa03      	add	r2, sp, #12
 8009bf8:	4621      	mov	r1, r4
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	f7ff fee2 	bl	80099c4 <_printf_common>
 8009c00:	3001      	adds	r0, #1
 8009c02:	d14c      	bne.n	8009c9e <_printf_i+0x1fe>
 8009c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c08:	b004      	add	sp, #16
 8009c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c0e:	4835      	ldr	r0, [pc, #212]	; (8009ce4 <_printf_i+0x244>)
 8009c10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	680e      	ldr	r6, [r1, #0]
 8009c18:	061f      	lsls	r7, r3, #24
 8009c1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009c1e:	600e      	str	r6, [r1, #0]
 8009c20:	d514      	bpl.n	8009c4c <_printf_i+0x1ac>
 8009c22:	07d9      	lsls	r1, r3, #31
 8009c24:	bf44      	itt	mi
 8009c26:	f043 0320 	orrmi.w	r3, r3, #32
 8009c2a:	6023      	strmi	r3, [r4, #0]
 8009c2c:	b91d      	cbnz	r5, 8009c36 <_printf_i+0x196>
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	f023 0320 	bic.w	r3, r3, #32
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	2310      	movs	r3, #16
 8009c38:	e7b0      	b.n	8009b9c <_printf_i+0xfc>
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	f043 0320 	orr.w	r3, r3, #32
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	2378      	movs	r3, #120	; 0x78
 8009c44:	4828      	ldr	r0, [pc, #160]	; (8009ce8 <_printf_i+0x248>)
 8009c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c4a:	e7e3      	b.n	8009c14 <_printf_i+0x174>
 8009c4c:	065e      	lsls	r6, r3, #25
 8009c4e:	bf48      	it	mi
 8009c50:	b2ad      	uxthmi	r5, r5
 8009c52:	e7e6      	b.n	8009c22 <_printf_i+0x182>
 8009c54:	4616      	mov	r6, r2
 8009c56:	e7bb      	b.n	8009bd0 <_printf_i+0x130>
 8009c58:	680b      	ldr	r3, [r1, #0]
 8009c5a:	6826      	ldr	r6, [r4, #0]
 8009c5c:	6960      	ldr	r0, [r4, #20]
 8009c5e:	1d1d      	adds	r5, r3, #4
 8009c60:	600d      	str	r5, [r1, #0]
 8009c62:	0635      	lsls	r5, r6, #24
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	d501      	bpl.n	8009c6c <_printf_i+0x1cc>
 8009c68:	6018      	str	r0, [r3, #0]
 8009c6a:	e002      	b.n	8009c72 <_printf_i+0x1d2>
 8009c6c:	0671      	lsls	r1, r6, #25
 8009c6e:	d5fb      	bpl.n	8009c68 <_printf_i+0x1c8>
 8009c70:	8018      	strh	r0, [r3, #0]
 8009c72:	2300      	movs	r3, #0
 8009c74:	6123      	str	r3, [r4, #16]
 8009c76:	4616      	mov	r6, r2
 8009c78:	e7ba      	b.n	8009bf0 <_printf_i+0x150>
 8009c7a:	680b      	ldr	r3, [r1, #0]
 8009c7c:	1d1a      	adds	r2, r3, #4
 8009c7e:	600a      	str	r2, [r1, #0]
 8009c80:	681e      	ldr	r6, [r3, #0]
 8009c82:	6862      	ldr	r2, [r4, #4]
 8009c84:	2100      	movs	r1, #0
 8009c86:	4630      	mov	r0, r6
 8009c88:	f7f6 faaa 	bl	80001e0 <memchr>
 8009c8c:	b108      	cbz	r0, 8009c92 <_printf_i+0x1f2>
 8009c8e:	1b80      	subs	r0, r0, r6
 8009c90:	6060      	str	r0, [r4, #4]
 8009c92:	6863      	ldr	r3, [r4, #4]
 8009c94:	6123      	str	r3, [r4, #16]
 8009c96:	2300      	movs	r3, #0
 8009c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c9c:	e7a8      	b.n	8009bf0 <_printf_i+0x150>
 8009c9e:	6923      	ldr	r3, [r4, #16]
 8009ca0:	4632      	mov	r2, r6
 8009ca2:	4649      	mov	r1, r9
 8009ca4:	4640      	mov	r0, r8
 8009ca6:	47d0      	blx	sl
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d0ab      	beq.n	8009c04 <_printf_i+0x164>
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	079b      	lsls	r3, r3, #30
 8009cb0:	d413      	bmi.n	8009cda <_printf_i+0x23a>
 8009cb2:	68e0      	ldr	r0, [r4, #12]
 8009cb4:	9b03      	ldr	r3, [sp, #12]
 8009cb6:	4298      	cmp	r0, r3
 8009cb8:	bfb8      	it	lt
 8009cba:	4618      	movlt	r0, r3
 8009cbc:	e7a4      	b.n	8009c08 <_printf_i+0x168>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	4632      	mov	r2, r6
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	4640      	mov	r0, r8
 8009cc6:	47d0      	blx	sl
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d09b      	beq.n	8009c04 <_printf_i+0x164>
 8009ccc:	3501      	adds	r5, #1
 8009cce:	68e3      	ldr	r3, [r4, #12]
 8009cd0:	9903      	ldr	r1, [sp, #12]
 8009cd2:	1a5b      	subs	r3, r3, r1
 8009cd4:	42ab      	cmp	r3, r5
 8009cd6:	dcf2      	bgt.n	8009cbe <_printf_i+0x21e>
 8009cd8:	e7eb      	b.n	8009cb2 <_printf_i+0x212>
 8009cda:	2500      	movs	r5, #0
 8009cdc:	f104 0619 	add.w	r6, r4, #25
 8009ce0:	e7f5      	b.n	8009cce <_printf_i+0x22e>
 8009ce2:	bf00      	nop
 8009ce4:	08009e59 	.word	0x08009e59
 8009ce8:	08009e6a 	.word	0x08009e6a

08009cec <__retarget_lock_acquire_recursive>:
 8009cec:	4770      	bx	lr

08009cee <__retarget_lock_release_recursive>:
 8009cee:	4770      	bx	lr

08009cf0 <memmove>:
 8009cf0:	4288      	cmp	r0, r1
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	eb01 0402 	add.w	r4, r1, r2
 8009cf8:	d902      	bls.n	8009d00 <memmove+0x10>
 8009cfa:	4284      	cmp	r4, r0
 8009cfc:	4623      	mov	r3, r4
 8009cfe:	d807      	bhi.n	8009d10 <memmove+0x20>
 8009d00:	1e43      	subs	r3, r0, #1
 8009d02:	42a1      	cmp	r1, r4
 8009d04:	d008      	beq.n	8009d18 <memmove+0x28>
 8009d06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d0e:	e7f8      	b.n	8009d02 <memmove+0x12>
 8009d10:	4402      	add	r2, r0
 8009d12:	4601      	mov	r1, r0
 8009d14:	428a      	cmp	r2, r1
 8009d16:	d100      	bne.n	8009d1a <memmove+0x2a>
 8009d18:	bd10      	pop	{r4, pc}
 8009d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d22:	e7f7      	b.n	8009d14 <memmove+0x24>

08009d24 <_realloc_r>:
 8009d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d26:	4607      	mov	r7, r0
 8009d28:	4614      	mov	r4, r2
 8009d2a:	460e      	mov	r6, r1
 8009d2c:	b921      	cbnz	r1, 8009d38 <_realloc_r+0x14>
 8009d2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d32:	4611      	mov	r1, r2
 8009d34:	f7ff bc54 	b.w	80095e0 <_malloc_r>
 8009d38:	b922      	cbnz	r2, 8009d44 <_realloc_r+0x20>
 8009d3a:	f7ff fc01 	bl	8009540 <_free_r>
 8009d3e:	4625      	mov	r5, r4
 8009d40:	4628      	mov	r0, r5
 8009d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d44:	f000 f814 	bl	8009d70 <_malloc_usable_size_r>
 8009d48:	42a0      	cmp	r0, r4
 8009d4a:	d20f      	bcs.n	8009d6c <_realloc_r+0x48>
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	4638      	mov	r0, r7
 8009d50:	f7ff fc46 	bl	80095e0 <_malloc_r>
 8009d54:	4605      	mov	r5, r0
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d0f2      	beq.n	8009d40 <_realloc_r+0x1c>
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4622      	mov	r2, r4
 8009d5e:	f7ff fbd9 	bl	8009514 <memcpy>
 8009d62:	4631      	mov	r1, r6
 8009d64:	4638      	mov	r0, r7
 8009d66:	f7ff fbeb 	bl	8009540 <_free_r>
 8009d6a:	e7e9      	b.n	8009d40 <_realloc_r+0x1c>
 8009d6c:	4635      	mov	r5, r6
 8009d6e:	e7e7      	b.n	8009d40 <_realloc_r+0x1c>

08009d70 <_malloc_usable_size_r>:
 8009d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d74:	1f18      	subs	r0, r3, #4
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	bfbc      	itt	lt
 8009d7a:	580b      	ldrlt	r3, [r1, r0]
 8009d7c:	18c0      	addlt	r0, r0, r3
 8009d7e:	4770      	bx	lr

08009d80 <_init>:
 8009d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d82:	bf00      	nop
 8009d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d86:	bc08      	pop	{r3}
 8009d88:	469e      	mov	lr, r3
 8009d8a:	4770      	bx	lr

08009d8c <_fini>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	bf00      	nop
 8009d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d92:	bc08      	pop	{r3}
 8009d94:	469e      	mov	lr, r3
 8009d96:	4770      	bx	lr
