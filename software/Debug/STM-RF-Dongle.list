
STM-RF-Dongle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ed4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08009060  08009060  00019060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f8  080090f8  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  080090f8  080090f8  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090f8  080090f8  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090fc  080090fc  000190fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001080  200001fc  080092fc  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000127c  080092fc  0002127c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbfb  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b1  00000000  00000000  0003ce27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  000406d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00041650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002323a  00000000  00000000  00042440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013162  00000000  00000000  0006567a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c388a  00000000  00000000  000787dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f38  00000000  00000000  0013c0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001fc 	.word	0x200001fc
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009048 	.word	0x08009048

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000200 	.word	0x20000200
 80001c8:	08009048 	.word	0x08009048

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e0:	f000 fc75 	bl	8000ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e4:	f000 f838 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f000 f8f6 	bl	80003d8 <MX_GPIO_Init>
  MX_SPI3_Init();
 80001ec:	f000 f8b6 	bl	800035c <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80001f0:	f008 f896 	bl	8008320 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 80001f4:	f000 fa9a 	bl	800072c <NRF24_Init>


#if MODE == 0
  NRF24_TxMode(address,15);
#else if MODE == 1
  NRF24_RxMode(address, 15);
 80001f8:	210f      	movs	r1, #15
 80001fa:	4814      	ldr	r0, [pc, #80]	; (800024c <main+0x70>)
 80001fc:	f000 fabd 	bl	800077a <NRF24_RxMode>
	  }
	  HAL_Delay(1000);

#else if MODE == 1

	  if(isDataAvailable() == 1)
 8000200:	f000 faf0 	bl	80007e4 <isDataAvailable>
 8000204:	4603      	mov	r3, r0
 8000206:	2b01      	cmp	r3, #1
 8000208:	d11c      	bne.n	8000244 <main+0x68>
	  {
		  //NRF24_Receive(rxBuffer);


		  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 800020a:	2102      	movs	r1, #2
 800020c:	4810      	ldr	r0, [pc, #64]	; (8000250 <main+0x74>)
 800020e:	f000 ff8b 	bl	8001128 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
 8000212:	2200      	movs	r2, #0
 8000214:	2101      	movs	r1, #1
 8000216:	480e      	ldr	r0, [pc, #56]	; (8000250 <main+0x74>)
 8000218:	f000 ff6e 	bl	80010f8 <HAL_GPIO_WritePin>
		  //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,1);
		  NRF24_Receive(RxData);
 800021c:	480d      	ldr	r0, [pc, #52]	; (8000254 <main+0x78>)
 800021e:	f000 fafb 	bl	8000818 <NRF24_Receive>
		  if(CDC_Transmit_FS((uint8_t *) RxData,strlen(RxData)) == 1)
 8000222:	480c      	ldr	r0, [pc, #48]	; (8000254 <main+0x78>)
 8000224:	f7ff ffd2 	bl	80001cc <strlen>
 8000228:	4603      	mov	r3, r0
 800022a:	b29b      	uxth	r3, r3
 800022c:	4619      	mov	r1, r3
 800022e:	4809      	ldr	r0, [pc, #36]	; (8000254 <main+0x78>)
 8000230:	f008 f93e 	bl	80084b0 <CDC_Transmit_FS>
 8000234:	4603      	mov	r3, r0
 8000236:	2b01      	cmp	r3, #1
 8000238:	d104      	bne.n	8000244 <main+0x68>
		  {
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 800023a:	2201      	movs	r2, #1
 800023c:	2101      	movs	r1, #1
 800023e:	4804      	ldr	r0, [pc, #16]	; (8000250 <main+0x74>)
 8000240:	f000 ff5a 	bl	80010f8 <HAL_GPIO_WritePin>
		  }

	  }
	  HAL_Delay(100);
 8000244:	2064      	movs	r0, #100	; 0x64
 8000246:	f000 fcb7 	bl	8000bb8 <HAL_Delay>
	  if(isDataAvailable() == 1)
 800024a:	e7d9      	b.n	8000200 <main+0x24>
 800024c:	20000000 	.word	0x20000000
 8000250:	48000400 	.word	0x48000400
 8000254:	2000028c 	.word	0x2000028c

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b0ac      	sub	sp, #176	; 0xb0
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000262:	2244      	movs	r2, #68	; 0x44
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f008 fe1e 	bl	8008ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2254      	movs	r2, #84	; 0x54
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f008 fe10 	bl	8008ea8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000288:	2310      	movs	r3, #16
 800028a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000298:	2360      	movs	r3, #96	; 0x60
 800029a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029e:	2302      	movs	r3, #2
 80002a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002a4:	2301      	movs	r3, #1
 80002a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002aa:	2301      	movs	r3, #1
 80002ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002b0:	2328      	movs	r3, #40	; 0x28
 80002b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002b6:	2307      	movs	r3, #7
 80002b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002bc:	2302      	movs	r3, #2
 80002be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002c2:	2302      	movs	r3, #2
 80002c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002cc:	4618      	mov	r0, r3
 80002ce:	f002 fb5d 	bl	800298c <HAL_RCC_OscConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002d8:	f000 f8ca 	bl	8000470 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	230f      	movs	r3, #15
 80002de:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e0:	2303      	movs	r3, #3
 80002e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002f4:	2104      	movs	r1, #4
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 ff68 	bl	80031cc <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000302:	f000 f8b5 	bl	8000470 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800030a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800030c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000310:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000312:	2301      	movs	r3, #1
 8000314:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000316:	2301      	movs	r3, #1
 8000318:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800031a:	2318      	movs	r3, #24
 800031c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800031e:	2307      	movs	r3, #7
 8000320:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000322:	2302      	movs	r3, #2
 8000324:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000326:	2302      	movs	r3, #2
 8000328:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800032a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800032e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	4618      	mov	r0, r3
 8000334:	f003 f918 	bl	8003568 <HAL_RCCEx_PeriphCLKConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800033e:	f000 f897 	bl	8000470 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000342:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000346:	f002 fabb 	bl	80028c0 <HAL_PWREx_ControlVoltageScaling>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000350:	f000 f88e 	bl	8000470 <Error_Handler>
  }
}
 8000354:	bf00      	nop
 8000356:	37b0      	adds	r7, #176	; 0xb0
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <MX_SPI3_Init+0x74>)
 8000362:	4a1c      	ldr	r2, [pc, #112]	; (80003d4 <MX_SPI3_Init+0x78>)
 8000364:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <MX_SPI3_Init+0x74>)
 8000368:	f44f 7282 	mov.w	r2, #260	; 0x104
 800036c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800036e:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_SPI3_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000374:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <MX_SPI3_Init+0x74>)
 8000376:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800037a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <MX_SPI3_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000382:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <MX_SPI3_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_SPI3_Init+0x74>)
 800038a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800038e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <MX_SPI3_Init+0x74>)
 8000392:	2218      	movs	r2, #24
 8000394:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_SPI3_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_SPI3_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_SPI3_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_SPI3_Init+0x74>)
 80003aa:	2207      	movs	r2, #7
 80003ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_SPI3_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_SPI3_Init+0x74>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_SPI3_Init+0x74>)
 80003bc:	f003 fbba 	bl	8003b34 <HAL_SPI_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80003c6:	f000 f853 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000228 	.word	0x20000228
 80003d4:	40003c00 	.word	0x40003c00

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 030c 	add.w	r3, r7, #12
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ee:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <MX_GPIO_Init+0x90>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	4a1d      	ldr	r2, [pc, #116]	; (8000468 <MX_GPIO_Init+0x90>)
 80003f4:	f043 0302 	orr.w	r3, r3, #2
 80003f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fa:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <MX_GPIO_Init+0x90>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fe:	f003 0302 	and.w	r3, r3, #2
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b18      	ldr	r3, [pc, #96]	; (8000468 <MX_GPIO_Init+0x90>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	4a17      	ldr	r2, [pc, #92]	; (8000468 <MX_GPIO_Init+0x90>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <MX_GPIO_Init+0x90>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	21c3      	movs	r1, #195	; 0xc3
 8000422:	4812      	ldr	r0, [pc, #72]	; (800046c <MX_GPIO_Init+0x94>)
 8000424:	f000 fe68 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin NRF_CS_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin;
 8000428:	23c3      	movs	r3, #195	; 0xc3
 800042a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	2301      	movs	r3, #1
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000438:	f107 030c 	add.w	r3, r7, #12
 800043c:	4619      	mov	r1, r3
 800043e:	480b      	ldr	r0, [pc, #44]	; (800046c <MX_GPIO_Init+0x94>)
 8000440:	f000 fcf0 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800044a:	2300      	movs	r3, #0
 800044c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000452:	f107 030c 	add.w	r3, r7, #12
 8000456:	4619      	mov	r1, r3
 8000458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045c:	f000 fce2 	bl	8000e24 <HAL_GPIO_Init>

}
 8000460:	bf00      	nop
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40021000 	.word	0x40021000
 800046c:	48000400 	.word	0x48000400

08000470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000478:	e7fe      	b.n	8000478 <Error_Handler+0x8>
	...

0800047c <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_6


void CS_Select (void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	2140      	movs	r1, #64	; 0x40
 8000484:	4802      	ldr	r0, [pc, #8]	; (8000490 <CS_Select+0x14>)
 8000486:	f000 fe37 	bl	80010f8 <HAL_GPIO_WritePin>
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	48000400 	.word	0x48000400

08000494 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	2140      	movs	r1, #64	; 0x40
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <CS_UnSelect+0x14>)
 800049e:	f000 fe2b 	bl	80010f8 <HAL_GPIO_WritePin>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	48000400 	.word	0x48000400

080004ac <CE_Enable>:


void CE_Enable (void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	4802      	ldr	r0, [pc, #8]	; (80004c0 <CE_Enable+0x14>)
 80004b6:	f000 fe1f 	bl	80010f8 <HAL_GPIO_WritePin>
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	48000400 	.word	0x48000400

080004c4 <CE_Disable>:

void CE_Disable (void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2180      	movs	r1, #128	; 0x80
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <CE_Disable+0x14>)
 80004ce:	f000 fe13 	bl	80010f8 <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	48000400 	.word	0x48000400

080004dc <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	f043 0320 	orr.w	r3, r3, #32
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80004f6:	79bb      	ldrb	r3, [r7, #6]
 80004f8:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80004fa:	f7ff ffbf 	bl	800047c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80004fe:	f107 010c 	add.w	r1, r7, #12
 8000502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000506:	2202      	movs	r2, #2
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <nrf24_WriteReg+0x40>)
 800050a:	f003 fbb6 	bl	8003c7a <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800050e:	f7ff ffc1 	bl	8000494 <CS_UnSelect>
}
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000228 	.word	0x20000228

08000520 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
 800052c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000538:	f7ff ffa0 	bl	800047c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800053c:	f107 0114 	add.w	r1, r7, #20
 8000540:	2364      	movs	r3, #100	; 0x64
 8000542:	2201      	movs	r2, #1
 8000544:	4808      	ldr	r0, [pc, #32]	; (8000568 <nrf24_WriteRegMulti+0x48>)
 8000546:	f003 fb98 	bl	8003c7a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	68b9      	ldr	r1, [r7, #8]
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <nrf24_WriteRegMulti+0x48>)
 8000556:	f003 fb90 	bl	8003c7a <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800055a:	f7ff ff9b 	bl	8000494 <CS_UnSelect>
}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000228 	.word	0x20000228

0800056c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800057a:	f7ff ff7f 	bl	800047c <CS_Select>
	//HAL_Delay(50);

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800057e:	1df9      	adds	r1, r7, #7
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	2201      	movs	r2, #1
 8000584:	4808      	ldr	r0, [pc, #32]	; (80005a8 <nrf24_ReadReg+0x3c>)
 8000586:	f003 fb78 	bl	8003c7a <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800058a:	f107 010f 	add.w	r1, r7, #15
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	2201      	movs	r2, #1
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <nrf24_ReadReg+0x3c>)
 8000594:	f003 fcdf 	bl	8003f56 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000598:	f7ff ff7c 	bl	8000494 <CS_UnSelect>

	return data;
 800059c:	7bfb      	ldrb	r3, [r7, #15]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000228 	.word	0x20000228

080005ac <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005b6:	f7ff ff61 	bl	800047c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80005ba:	1df9      	adds	r1, r7, #7
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	2201      	movs	r2, #1
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <nrfsendCmd+0x28>)
 80005c2:	f003 fb5a 	bl	8003c7a <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005c6:	f7ff ff65 	bl	8000494 <CS_UnSelect>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000228 	.word	0x20000228

080005d8 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2b07      	cmp	r3, #7
 80005e6:	d107      	bne.n	80005f8 <nrf24_reset+0x20>
	{
		HAL_Delay(5);
 80005e8:	2005      	movs	r0, #5
 80005ea:	f000 fae5 	bl	8000bb8 <HAL_Delay>
		nrf24_WriteReg(STATUS, 0x00);
 80005ee:	2100      	movs	r1, #0
 80005f0:	2007      	movs	r0, #7
 80005f2:	f7ff ff73 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80005f6:	e090      	b.n	800071a <nrf24_reset+0x142>
	else if (REG == FIFO_STATUS)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b17      	cmp	r3, #23
 80005fc:	d104      	bne.n	8000608 <nrf24_reset+0x30>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80005fe:	2111      	movs	r1, #17
 8000600:	2017      	movs	r0, #23
 8000602:	f7ff ff6b 	bl	80004dc <nrf24_WriteReg>
}
 8000606:	e088      	b.n	800071a <nrf24_reset+0x142>
	nrf24_WriteReg(CONFIG, 0x08);
 8000608:	2108      	movs	r1, #8
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ff66 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000610:	213f      	movs	r1, #63	; 0x3f
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff62 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000618:	2103      	movs	r1, #3
 800061a:	2002      	movs	r0, #2
 800061c:	f7ff ff5e 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000620:	2103      	movs	r1, #3
 8000622:	2003      	movs	r0, #3
 8000624:	f7ff ff5a 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000628:	2103      	movs	r1, #3
 800062a:	2004      	movs	r0, #4
 800062c:	f7ff ff56 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000630:	2102      	movs	r1, #2
 8000632:	2005      	movs	r0, #5
 8000634:	f7ff ff52 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0F);
 8000638:	210f      	movs	r1, #15
 800063a:	2006      	movs	r0, #6
 800063c:	f7ff ff4e 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000640:	2100      	movs	r1, #0
 8000642:	2007      	movs	r0, #7
 8000644:	f7ff ff4a 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000648:	2100      	movs	r1, #0
 800064a:	2008      	movs	r0, #8
 800064c:	f7ff ff46 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000650:	2100      	movs	r1, #0
 8000652:	2009      	movs	r0, #9
 8000654:	f7ff ff42 	bl	80004dc <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000658:	4a32      	ldr	r2, [pc, #200]	; (8000724 <nrf24_reset+0x14c>)
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000662:	6018      	str	r0, [r3, #0]
 8000664:	3304      	adds	r3, #4
 8000666:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000668:	f107 0318 	add.w	r3, r7, #24
 800066c:	2205      	movs	r2, #5
 800066e:	4619      	mov	r1, r3
 8000670:	200a      	movs	r0, #10
 8000672:	f7ff ff55 	bl	8000520 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000676:	4a2c      	ldr	r2, [pc, #176]	; (8000728 <nrf24_reset+0x150>)
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000680:	6018      	str	r0, [r3, #0]
 8000682:	3304      	adds	r3, #4
 8000684:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	2205      	movs	r2, #5
 800068c:	4619      	mov	r1, r3
 800068e:	200b      	movs	r0, #11
 8000690:	f7ff ff46 	bl	8000520 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000694:	21c3      	movs	r1, #195	; 0xc3
 8000696:	200c      	movs	r0, #12
 8000698:	f7ff ff20 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800069c:	21c4      	movs	r1, #196	; 0xc4
 800069e:	200d      	movs	r0, #13
 80006a0:	f7ff ff1c 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80006a4:	21c5      	movs	r1, #197	; 0xc5
 80006a6:	200e      	movs	r0, #14
 80006a8:	f7ff ff18 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80006ac:	21c6      	movs	r1, #198	; 0xc6
 80006ae:	200f      	movs	r0, #15
 80006b0:	f7ff ff14 	bl	80004dc <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <nrf24_reset+0x14c>)
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006be:	6018      	str	r0, [r3, #0]
 80006c0:	3304      	adds	r3, #4
 80006c2:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2205      	movs	r2, #5
 80006ca:	4619      	mov	r1, r3
 80006cc:	2010      	movs	r0, #16
 80006ce:	f7ff ff27 	bl	8000520 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80006d2:	2100      	movs	r1, #0
 80006d4:	2011      	movs	r0, #17
 80006d6:	f7ff ff01 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80006da:	2100      	movs	r1, #0
 80006dc:	2012      	movs	r0, #18
 80006de:	f7ff fefd 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80006e2:	2100      	movs	r1, #0
 80006e4:	2013      	movs	r0, #19
 80006e6:	f7ff fef9 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80006ea:	2100      	movs	r1, #0
 80006ec:	2014      	movs	r0, #20
 80006ee:	f7ff fef5 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80006f2:	2100      	movs	r1, #0
 80006f4:	2015      	movs	r0, #21
 80006f6:	f7ff fef1 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	2016      	movs	r0, #22
 80006fe:	f7ff feed 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000702:	2111      	movs	r1, #17
 8000704:	2017      	movs	r0, #23
 8000706:	f7ff fee9 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 800070a:	2100      	movs	r1, #0
 800070c:	201c      	movs	r0, #28
 800070e:	f7ff fee5 	bl	80004dc <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000712:	2100      	movs	r1, #0
 8000714:	201d      	movs	r0, #29
 8000716:	f7ff fee1 	bl	80004dc <nrf24_WriteReg>
}
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	08009060 	.word	0x08009060
 8000728:	08009068 	.word	0x08009068

0800072c <NRF24_Init>:




void NRF24_Init (void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000730:	f7ff fec8 	bl	80004c4 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff ff4f 	bl	80005d8 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800073a:	2100      	movs	r1, #0
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff fecd 	bl	80004dc <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000742:	2100      	movs	r1, #0
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff fec9 	bl	80004dc <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800074a:	2100      	movs	r1, #0
 800074c:	2002      	movs	r0, #2
 800074e:	f7ff fec5 	bl	80004dc <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000752:	2103      	movs	r1, #3
 8000754:	2003      	movs	r0, #3
 8000756:	f7ff fec1 	bl	80004dc <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800075a:	2100      	movs	r1, #0
 800075c:	2004      	movs	r0, #4
 800075e:	f7ff febd 	bl	80004dc <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000762:	2100      	movs	r1, #0
 8000764:	2005      	movs	r0, #5
 8000766:	f7ff feb9 	bl	80004dc <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x09);   // Power= 0db, data rate = 2Mbps
 800076a:	2109      	movs	r1, #9
 800076c:	2006      	movs	r0, #6
 800076e:	f7ff feb5 	bl	80004dc <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000772:	f7ff fe9b 	bl	80004ac <CE_Enable>

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	460b      	mov	r3, r1
 8000784:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000786:	f7ff fe9d 	bl	80004c4 <CE_Disable>

	nrf24_reset (STATUS);
 800078a:	2007      	movs	r0, #7
 800078c:	f7ff ff24 	bl	80005d8 <nrf24_reset>

	nrf24_WriteReg (RF_SETUP, 0x08);   // Power= 0db, data rate = 2Mbps
 8000790:	2108      	movs	r1, #8
 8000792:	2006      	movs	r0, #6
 8000794:	f7ff fea2 	bl	80004dc <nrf24_WriteReg>


	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff fe9d 	bl	80004dc <nrf24_WriteReg>

	// select data pipe 2
	//uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
	//en_rxaddr = en_rxaddr | (1<<2);
	uint8_t en_rxaddr = 0x03;
 80007a2:	2303      	movs	r3, #3
 80007a4:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4619      	mov	r1, r3
 80007aa:	2002      	movs	r0, #2
 80007ac:	f7ff fe96 	bl	80004dc <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80007b0:	2205      	movs	r2, #5
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	200b      	movs	r0, #11
 80007b6:	f7ff feb3 	bl	8000520 <nrf24_WriteRegMulti>

	//nrf24_WriteReg(RX_ADDR_P1, 0xEF);  // Write the Pipe2 LSB address

	nrf24_WriteReg (RX_PW_P0, 0);   // 32 bit payload size for pipe 2
 80007ba:	2100      	movs	r1, #0
 80007bc:	2011      	movs	r0, #17
 80007be:	f7ff fe8d 	bl	80004dc <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P1, 5);   // 32 bit payload size for pipe 2
 80007c2:	2105      	movs	r1, #5
 80007c4:	2012      	movs	r0, #18
 80007c6:	f7ff fe89 	bl	80004dc <nrf24_WriteReg>
	//nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2


	// power up the device in Rx mode
	//uint8_t config = nrf24_ReadReg(CONFIG);
	uint8_t config = (0xF3);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 80007ca:	23f3      	movs	r3, #243	; 0xf3
 80007cc:	73bb      	strb	r3, [r7, #14]

	//config = config | (1<<1) | (1<<0);
	nrf24_WriteReg (CONFIG, config);
 80007ce:	7bbb      	ldrb	r3, [r7, #14]
 80007d0:	4619      	mov	r1, r3
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff fe82 	bl	80004dc <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80007d8:	f7ff fe68 	bl	80004ac <CE_Enable>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80007ec:	2007      	movs	r0, #7
 80007ee:	f7ff febd 	bl	800056c <nrf24_ReadReg>
 80007f2:	4603      	mov	r3, r0
 80007f4:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6)))//&&(status&(pipenum<<1)))
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d005      	beq.n	800080c <isDataAvailable+0x28>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	2007      	movs	r0, #7
 8000804:	f7ff fe6a 	bl	80004dc <nrf24_WriteReg>

		return 1;
 8000808:	2301      	movs	r3, #1
 800080a:	e000      	b.n	800080e <isDataAvailable+0x2a>
	}

	return 0;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8000824:	f7ff fe2a 	bl	800047c <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000828:	2361      	movs	r3, #97	; 0x61
 800082a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 800082c:	f107 010f 	add.w	r1, r7, #15
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	2201      	movs	r2, #1
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <NRF24_Receive+0x50>)
 8000836:	f003 fa20 	bl	8003c7a <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 5, 1000);
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	2205      	movs	r2, #5
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	4809      	ldr	r0, [pc, #36]	; (8000868 <NRF24_Receive+0x50>)
 8000844:	f003 fb87 	bl	8003f56 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000848:	f7ff fe24 	bl	8000494 <CS_UnSelect>

	HAL_Delay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f000 f9b3 	bl	8000bb8 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000852:	23e2      	movs	r3, #226	; 0xe2
 8000854:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fea7 	bl	80005ac <nrfsendCmd>
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000228 	.word	0x20000228

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <HAL_MspInit+0x44>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <HAL_MspInit+0x44>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6613      	str	r3, [r2, #96]	; 0x60
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_MspInit+0x44>)
 8000880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_MspInit+0x44>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_MspInit+0x44>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6593      	str	r3, [r2, #88]	; 0x58
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_MspInit+0x44>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <HAL_SPI_MspInit+0x7c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d127      	bne.n	8000926 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_SPI_MspInit+0x80>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <HAL_SPI_MspInit+0x80>)
 80008dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e0:	6593      	str	r3, [r2, #88]	; 0x58
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_SPI_MspInit+0x80>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_SPI_MspInit+0x80>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_SPI_MspInit+0x80>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_SPI_MspInit+0x80>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000906:	2338      	movs	r3, #56	; 0x38
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000916:	2306      	movs	r3, #6
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <HAL_SPI_MspInit+0x84>)
 8000922:	f000 fa7f 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40003c00 	.word	0x40003c00
 8000934:	40021000 	.word	0x40021000
 8000938:	48000400 	.word	0x48000400

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <MemManage_Handler+0x4>

0800094e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler+0x4>

0800095a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000988:	f000 f8f6 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <USB_IRQHandler+0x10>)
 8000996:	f000 fd15 	bl	80013c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000f78 	.word	0x20000f78

080009a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ac:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <_sbrk+0x5c>)
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <_sbrk+0x60>)
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d102      	bne.n	80009c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <_sbrk+0x64>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <_sbrk+0x68>)
 80009c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d207      	bcs.n	80009e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d4:	f008 fa2e 	bl	8008e34 <__errno>
 80009d8:	4603      	mov	r3, r0
 80009da:	220c      	movs	r2, #12
 80009dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009e2:	e009      	b.n	80009f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <_sbrk+0x64>)
 80009f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009f6:	68fb      	ldr	r3, [r7, #12]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20010000 	.word	0x20010000
 8000a04:	00000800 	.word	0x00000800
 8000a08:	20000218 	.word	0x20000218
 8000a0c:	20001280 	.word	0x20001280

08000a10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <SystemInit+0x64>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1a:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <SystemInit+0x64>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <SystemInit+0x68>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <SystemInit+0x68>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <SystemInit+0x68>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <SystemInit+0x68>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <SystemInit+0x68>)
 8000a3c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a40:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <SystemInit+0x68>)
 8000a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <SystemInit+0x68>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a09      	ldr	r2, [pc, #36]	; (8000a78 <SystemInit+0x68>)
 8000a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <SystemInit+0x68>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <SystemInit+0x64>)
 8000a62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a66:	609a      	str	r2, [r3, #8]
#endif
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00
 8000a78:	40021000 	.word	0x40021000

08000a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a80:	f7ff ffc6 	bl	8000a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a86:	e003      	b.n	8000a90 <LoopCopyDataInit>

08000a88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a8e:	3104      	adds	r1, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a90:	480a      	ldr	r0, [pc, #40]	; (8000abc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a98:	d3f6      	bcc.n	8000a88 <CopyDataInit>
	ldr	r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a9c:	e002      	b.n	8000aa4 <LoopFillZerobss>

08000a9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000aa0:	f842 3b04 	str.w	r3, [r2], #4

08000aa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <LoopForever+0x16>)
	cmp	r2, r3
 8000aa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000aa8:	d3f9      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f008 f9c9 	bl	8008e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aae:	f7ff fb95 	bl	80001dc <main>

08000ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000ab8:	08009100 	.word	0x08009100
	ldr	r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ac0:	200001fc 	.word	0x200001fc
	ldr	r2, =_sbss
 8000ac4:	200001fc 	.word	0x200001fc
	ldr	r3, = _ebss
 8000ac8:	2000127c 	.word	0x2000127c

08000acc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_IRQHandler>

08000ace <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f961 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 f80e 	bl	8000b00 <HAL_InitTick>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	e001      	b.n	8000af4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af0:	f7ff febc 	bl	800086c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <HAL_InitTick+0x6c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d023      	beq.n	8000b5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <HAL_InitTick+0x70>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <HAL_InitTick+0x6c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f96d 	bl	8000e0a <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10f      	bne.n	8000b56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d809      	bhi.n	8000b50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b44:	f000 f937 	bl	8000db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b48:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_InitTick+0x74>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e007      	b.n	8000b60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	e004      	b.n	8000b60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	e001      	b.n	8000b60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000010 	.word	0x20000010
 8000b70:	20000008 	.word	0x20000008
 8000b74:	2000000c 	.word	0x2000000c

08000b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000010 	.word	0x20000010
 8000b9c:	20000294 	.word	0x20000294

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000294 	.word	0x20000294

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff ffee 	bl	8000ba0 <HAL_GetTick>
 8000bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bd0:	d005      	beq.n	8000bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_Delay+0x44>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bde:	bf00      	nop
 8000be0:	f7ff ffde 	bl	8000ba0 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8f7      	bhi.n	8000be0 <HAL_Delay+0x28>
  {
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000010 	.word	0x20000010

08000c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4907      	ldr	r1, [pc, #28]	; (8000c9c <__NVIC_EnableIRQ+0x38>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d6c:	d301      	bcc.n	8000d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00f      	b.n	8000d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <SysTick_Config+0x40>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d80:	f7ff ff8e 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <SysTick_Config+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SysTick_Config+0x40>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff29 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff3e 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff8e 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5d 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff31 	bl	8000c64 <__NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffa2 	bl	8000d5c <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e32:	e148      	b.n	80010c6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 813a 	beq.w	80010c0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d00b      	beq.n	8000e6c <HAL_GPIO_Init+0x48>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d007      	beq.n	8000e6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e60:	2b11      	cmp	r3, #17
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b12      	cmp	r3, #18
 8000e6a:	d130      	bne.n	8000ece <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	f003 0201 	and.w	r2, r3, #1
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0xea>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b12      	cmp	r3, #18
 8000f0c:	d123      	bne.n	8000f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	6939      	ldr	r1, [r7, #16]
 8000f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0203 	and.w	r2, r3, #3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 8094 	beq.w	80010c0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	4b52      	ldr	r3, [pc, #328]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9c:	4a51      	ldr	r2, [pc, #324]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa4:	4b4f      	ldr	r3, [pc, #316]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8000fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fb0:	4a4d      	ldr	r2, [pc, #308]	; (80010e8 <HAL_GPIO_Init+0x2c4>)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fda:	d00d      	beq.n	8000ff8 <HAL_GPIO_Init+0x1d4>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a43      	ldr	r2, [pc, #268]	; (80010ec <HAL_GPIO_Init+0x2c8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_GPIO_Init+0x1d0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a42      	ldr	r2, [pc, #264]	; (80010f0 <HAL_GPIO_Init+0x2cc>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d101      	bne.n	8000ff0 <HAL_GPIO_Init+0x1cc>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e004      	b.n	8000ffa <HAL_GPIO_Init+0x1d6>
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	e002      	b.n	8000ffa <HAL_GPIO_Init+0x1d6>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_GPIO_Init+0x1d6>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	f002 0203 	and.w	r2, r2, #3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	4093      	lsls	r3, r2
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800100a:	4937      	ldr	r1, [pc, #220]	; (80010e8 <HAL_GPIO_Init+0x2c4>)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800103c:	4a2d      	ldr	r2, [pc, #180]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001042:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001066:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001090:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3301      	adds	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	fa22 f303 	lsr.w	r3, r2, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f47f aeaf 	bne.w	8000e34 <HAL_GPIO_Init+0x10>
  }
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010000 	.word	0x40010000
 80010ec:	48000400 	.word	0x48000400
 80010f0:	48000800 	.word	0x48000800
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001114:	e002      	b.n	800111c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4013      	ands	r3, r2
 8001140:	041a      	lsls	r2, r3, #16
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43d9      	mvns	r1, r3
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	400b      	ands	r3, r1
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	619a      	str	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800115c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115e:	b08b      	sub	sp, #44	; 0x2c
 8001160:	af06      	add	r7, sp, #24
 8001162:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e104      	b.n	8001378 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d106      	bne.n	8001188 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f007 faee 	bl	8008764 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2203      	movs	r2, #3
 800118c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f003 fbfd 	bl	8004994 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	687e      	ldr	r6, [r7, #4]
 80011a2:	466d      	mov	r5, sp
 80011a4:	f106 0410 	add.w	r4, r6, #16
 80011a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	602b      	str	r3, [r5, #0]
 80011b0:	1d33      	adds	r3, r6, #4
 80011b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b4:	6838      	ldr	r0, [r7, #0]
 80011b6:	f003 fbc5 	bl	8004944 <USB_CoreInit>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2202      	movs	r2, #2
 80011c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0d5      	b.n	8001378 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f003 fbf9 	bl	80049ca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e04c      	b.n	8001278 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	440b      	add	r3, r1
 80011ee:	3301      	adds	r3, #1
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	440b      	add	r3, r1
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	b298      	uxth	r0, r3
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	3336      	adds	r3, #54	; 0x36
 800121c:	4602      	mov	r2, r0
 800121e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	440b      	add	r3, r1
 8001230:	3303      	adds	r3, #3
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	3338      	adds	r3, #56	; 0x38
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	440b      	add	r3, r1
 8001258:	333c      	adds	r3, #60	; 0x3c
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	440b      	add	r3, r1
 800126c:	3340      	adds	r3, #64	; 0x40
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	3301      	adds	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	d3ad      	bcc.n	80011de <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e044      	b.n	8001312 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	f203 1369 	addw	r3, r3, #361	; 0x169
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	440b      	add	r3, r1
 80012ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	440b      	add	r3, r1
 80012c2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	440b      	add	r3, r1
 80012d8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	440b      	add	r3, r1
 80012ee:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	3301      	adds	r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	429a      	cmp	r2, r3
 800131a:	d3b5      	bcc.n	8001288 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	687e      	ldr	r6, [r7, #4]
 8001324:	466d      	mov	r5, sp
 8001326:	f106 0410 	add.w	r4, r6, #16
 800132a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	602b      	str	r3, [r5, #0]
 8001332:	1d33      	adds	r3, r6, #4
 8001334:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001336:	6838      	ldr	r0, [r7, #0]
 8001338:	f003 fb54 	bl	80049e4 <USB_DevInit>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2202      	movs	r2, #2
 8001346:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e014      	b.n	8001378 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d102      	bne.n	800136c <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f001 fa71 	bl	800284e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f005 fb0d 	bl	8006990 <USB_DevDisconnect>

  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001380 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_PCD_Start+0x16>
 8001392:	2302      	movs	r3, #2
 8001394:	e012      	b.n	80013bc <HAL_PCD_Start+0x3c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 fadf 	bl	8004966 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f005 fad8 	bl	8006962 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f005 faf2 	bl	80069ba <USB_ReadInterrupts>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013e0:	d102      	bne.n	80013e8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fb5b 	bl	8001a9e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f005 fae4 	bl	80069ba <USB_ReadInterrupts>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fc:	d112      	bne.n	8001424 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001410:	b292      	uxth	r2, r2
 8001412:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f007 fa1f 	bl	800885a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800141c:	2100      	movs	r1, #0
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f91e 	bl	8001660 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f005 fac6 	bl	80069ba <USB_ReadInterrupts>
 800142e:	4603      	mov	r3, r0
 8001430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001438:	d10b      	bne.n	8001452 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001442:	b29a      	uxth	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800144c:	b292      	uxth	r2, r2
 800144e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f005 faaf 	bl	80069ba <USB_ReadInterrupts>
 800145c:	4603      	mov	r3, r0
 800145e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001466:	d10b      	bne.n	8001480 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001470:	b29a      	uxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800147a:	b292      	uxth	r2, r2
 800147c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f005 fa98 	bl	80069ba <USB_ReadInterrupts>
 800148a:	4603      	mov	r3, r0
 800148c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001494:	d133      	bne.n	80014fe <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800149e:	b29a      	uxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0204 	bic.w	r2, r2, #4
 80014a8:	b292      	uxth	r2, r2
 80014aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0208 	bic.w	r2, r2, #8
 80014c0:	b292      	uxth	r2, r2
 80014c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d107      	bne.n	80014e0 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014d8:	2100      	movs	r1, #0
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f007 fc6e 	bl	8008dbc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f007 f9f3 	bl	80088cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014f8:	b292      	uxth	r2, r2
 80014fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f005 fa59 	bl	80069ba <USB_ReadInterrupts>
 8001508:	4603      	mov	r3, r0
 800150a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800150e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001512:	d126      	bne.n	8001562 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800151c:	b29a      	uxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0208 	orr.w	r2, r2, #8
 8001526:	b292      	uxth	r2, r2
 8001528:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001534:	b29a      	uxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800153e:	b292      	uxth	r2, r2
 8001540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800154c:	b29a      	uxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0204 	orr.w	r2, r2, #4
 8001556:	b292      	uxth	r2, r2
 8001558:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f007 f99b 	bl	8008898 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f005 fa27 	bl	80069ba <USB_ReadInterrupts>
 800156c:	4603      	mov	r3, r0
 800156e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001572:	2b80      	cmp	r3, #128	; 0x80
 8001574:	d13f      	bne.n	80015f6 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800157e:	b29a      	uxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001588:	b292      	uxth	r2, r2
 800158a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d12b      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0204 	orr.w	r2, r2, #4
 80015aa:	b292      	uxth	r2, r2
 80015ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0208 	orr.w	r2, r2, #8
 80015c2:	b292      	uxth	r2, r2
 80015c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80015d8:	b29b      	uxth	r3, r3
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80015e6:	2101      	movs	r1, #1
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f007 fbe7 	bl	8008dbc <HAL_PCDEx_LPM_Callback>
 80015ee:	e002      	b.n	80015f6 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f007 f951 	bl	8008898 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f005 f9dd 	bl	80069ba <USB_ReadInterrupts>
 8001600:	4603      	mov	r3, r0
 8001602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800160a:	d10e      	bne.n	800162a <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001614:	b29a      	uxth	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800161e:	b292      	uxth	r2, r2
 8001620:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f007 f90a 	bl	800883e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f005 f9c3 	bl	80069ba <USB_ReadInterrupts>
 8001634:	4603      	mov	r3, r0
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800163e:	d10b      	bne.n	8001658 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001648:	b29a      	uxth	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001652:	b292      	uxth	r2, r2
 8001654:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_PCD_SetAddress+0x1a>
 8001676:	2302      	movs	r3, #2
 8001678:	e013      	b.n	80016a2 <HAL_PCD_SetAddress+0x42>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	78fa      	ldrb	r2, [r7, #3]
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	78fa      	ldrb	r2, [r7, #3]
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f005 f951 	bl	800693a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	4608      	mov	r0, r1
 80016b4:	4611      	mov	r1, r2
 80016b6:	461a      	mov	r2, r3
 80016b8:	4603      	mov	r3, r0
 80016ba:	70fb      	strb	r3, [r7, #3]
 80016bc:	460b      	mov	r3, r1
 80016be:	803b      	strh	r3, [r7, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da0e      	bge.n	80016ee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	705a      	strb	r2, [r3, #1]
 80016ec:	e00e      	b.n	800170c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	f003 0207 	and.w	r2, r3, #7
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	b2da      	uxtb	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001718:	883a      	ldrh	r2, [r7, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	78ba      	ldrb	r2, [r7, #2]
 8001722:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	785b      	ldrb	r3, [r3, #1]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001736:	78bb      	ldrb	r3, [r7, #2]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d102      	bne.n	8001742 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_PCD_EP_Open+0xa6>
 800174c:	2302      	movs	r3, #2
 800174e:	e00e      	b.n	800176e <HAL_PCD_EP_Open+0xc4>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68f9      	ldr	r1, [r7, #12]
 800175e:	4618      	mov	r0, r3
 8001760:	f003 f962 	bl	8004a28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800176c:	7afb      	ldrb	r3, [r7, #11]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001786:	2b00      	cmp	r3, #0
 8001788:	da0e      	bge.n	80017a8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	705a      	strb	r2, [r3, #1]
 80017a6:	e00e      	b.n	80017c6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	f003 0207 	and.w	r2, r3, #7
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_PCD_EP_Close+0x6a>
 80017dc:	2302      	movs	r3, #2
 80017de:	e00e      	b.n	80017fe <HAL_PCD_EP_Close+0x88>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68f9      	ldr	r1, [r7, #12]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 fc88 	bl	8005104 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	460b      	mov	r3, r1
 8001814:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001816:	7afb      	ldrb	r3, [r7, #11]
 8001818:	f003 0207 	and.w	r2, r3, #7
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2200      	movs	r2, #0
 800183e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2200      	movs	r2, #0
 8001844:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001846:	7afb      	ldrb	r3, [r7, #11]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	b2da      	uxtb	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001852:	7afb      	ldrb	r3, [r7, #11]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	2b00      	cmp	r3, #0
 800185a:	d106      	bne.n	800186a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6979      	ldr	r1, [r7, #20]
 8001862:	4618      	mov	r0, r3
 8001864:	f003 fe3b 	bl	80054de <USB_EPStartXfer>
 8001868:	e005      	b.n	8001876 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6979      	ldr	r1, [r7, #20]
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fe34 	bl	80054de <USB_EPStartXfer>
  }

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	f003 0207 	and.w	r2, r3, #7
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	460b      	mov	r3, r1
 80018be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c0:	7afb      	ldrb	r3, [r7, #11]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2201      	movs	r2, #1
 80018fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	b2da      	uxtb	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001908:	7afb      	ldrb	r3, [r7, #11]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6979      	ldr	r1, [r7, #20]
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fde0 	bl	80054de <USB_EPStartXfer>
 800191e:	e005      	b.n	800192c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6979      	ldr	r1, [r7, #20]
 8001926:	4618      	mov	r0, r3
 8001928:	f003 fdd9 	bl	80054de <USB_EPStartXfer>
  }

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	f003 0207 	and.w	r2, r3, #7
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	d901      	bls.n	8001954 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e04c      	b.n	80019ee <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001958:	2b00      	cmp	r3, #0
 800195a:	da0e      	bge.n	800197a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	705a      	strb	r2, [r3, #1]
 8001978:	e00c      	b.n	8001994 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2201      	movs	r2, #1
 8001998:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_PCD_EP_SetStall+0x7e>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e01c      	b.n	80019ee <HAL_PCD_EP_SetStall+0xb8>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68f9      	ldr	r1, [r7, #12]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f004 feba 	bl	800673c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d108      	bne.n	80019e4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80019dc:	4619      	mov	r1, r3
 80019de:	4610      	mov	r0, r2
 80019e0:	f004 fffb 	bl	80069da <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	f003 020f 	and.w	r2, r3, #15
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d901      	bls.n	8001a14 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e040      	b.n	8001a96 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da0e      	bge.n	8001a3a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	705a      	strb	r2, [r3, #1]
 8001a38:	e00e      	b.n	8001a58 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	f003 0207 	and.w	r2, r3, #7
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_PCD_EP_ClrStall+0x82>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e00e      	b.n	8001a96 <HAL_PCD_EP_ClrStall+0xa0>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68f9      	ldr	r1, [r7, #12]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 fea9 	bl	80067de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b08e      	sub	sp, #56	; 0x38
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001aa6:	e2d1      	b.n	800204c <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ab0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ab2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001abe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 8152 	bne.w	8001d6c <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ac8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d150      	bne.n	8001b74 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae2:	81fb      	strh	r3, [r7, #14]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	89fb      	ldrh	r3, [r7, #14]
 8001aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3328      	adds	r3, #40	; 0x28
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	441a      	add	r2, r3
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b32:	2100      	movs	r1, #0
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f006 fe68 	bl	800880a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8282 	beq.w	800204c <PCD_EP_ISR_Handler+0x5ae>
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f040 827d 	bne.w	800204c <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b292      	uxth	r2, r2
 8001b66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b72:	e26b      	b.n	800204c <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d032      	beq.n	8001bf4 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	f004 ff54 	bl	8006a76 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bda:	4013      	ands	r3, r2
 8001bdc:	823b      	strh	r3, [r7, #16]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	8a3a      	ldrh	r2, [r7, #16]
 8001be4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001be8:	b292      	uxth	r2, r2
 8001bea:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f006 fddf 	bl	80087b0 <HAL_PCD_SetupStageCallback>
 8001bf2:	e22b      	b.n	800204c <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bf4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f280 8227 	bge.w	800204c <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	83bb      	strh	r3, [r7, #28]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	8bba      	ldrh	r2, [r7, #28]
 8001c14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c18:	b292      	uxth	r2, r2
 8001c1a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	4413      	add	r3, r2
 8001c36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d019      	beq.n	8001c80 <PCD_EP_ISR_Handler+0x1e2>
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d015      	beq.n	8001c80 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	6959      	ldr	r1, [r3, #20]
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	f004 ff06 	bl	8006a76 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	441a      	add	r2, r3
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c78:	2100      	movs	r1, #0
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f006 fdaa 	bl	80087d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	4413      	add	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d112      	bne.n	8001cce <PCD_EP_ISR_Handler+0x230>
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	801a      	strh	r2, [r3, #0]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	801a      	strh	r2, [r3, #0]
 8001ccc:	e02f      	b.n	8001d2e <PCD_EP_ISR_Handler+0x290>
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b3e      	cmp	r3, #62	; 0x3e
 8001cd4:	d813      	bhi.n	8001cfe <PCD_EP_ISR_Handler+0x260>
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <PCD_EP_ISR_Handler+0x252>
 8001cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cec:	3301      	adds	r3, #1
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	029b      	lsls	r3, r3, #10
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	801a      	strh	r2, [r3, #0]
 8001cfc:	e017      	b.n	8001d2e <PCD_EP_ISR_Handler+0x290>
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <PCD_EP_ISR_Handler+0x27a>
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	3b01      	subs	r3, #1
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	029b      	lsls	r3, r3, #10
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d3e:	827b      	strh	r3, [r7, #18]
 8001d40:	8a7b      	ldrh	r3, [r7, #18]
 8001d42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d46:	827b      	strh	r3, [r7, #18]
 8001d48:	8a7b      	ldrh	r3, [r7, #18]
 8001d4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d4e:	827b      	strh	r3, [r7, #18]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	8a7b      	ldrh	r3, [r7, #18]
 8001d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	8013      	strh	r3, [r2, #0]
 8001d6a:	e16f      	b.n	800204c <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d7e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f280 80e4 	bge.w	8001f50 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d9e:	4013      	ands	r3, r2
 8001da0:	853b      	strh	r3, [r7, #40]	; 0x28
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001db2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001db6:	b292      	uxth	r2, r2
 8001db8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001dba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	7b1b      	ldrb	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d120      	bne.n	8001e1a <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	4413      	add	r3, r2
 8001df2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dfc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001dfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 8083 	beq.w	8001f0c <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	6959      	ldr	r1, [r3, #20]
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	88da      	ldrh	r2, [r3, #6]
 8001e12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e14:	f004 fe2f 	bl	8006a76 <USB_ReadPMA>
 8001e18:	e078      	b.n	8001f0c <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	78db      	ldrb	r3, [r3, #3]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d108      	bne.n	8001e34 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e24:	461a      	mov	r2, r3
 8001e26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f91d 	bl	8002068 <HAL_PCD_EP_DB_Receive>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e32:	e06b      	b.n	8001f0c <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	441a      	add	r2, r3
 8001e5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d01f      	beq.n	8001ece <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001eb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d028      	beq.n	8001f0c <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	6959      	ldr	r1, [r3, #20]
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	891a      	ldrh	r2, [r3, #8]
 8001ec6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ec8:	f004 fdd5 	bl	8006a76 <USB_ReadPMA>
 8001ecc:	e01e      	b.n	8001f0c <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ef2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ef4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d008      	beq.n	8001f0c <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	6959      	ldr	r1, [r3, #20]
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	895a      	ldrh	r2, [r3, #10]
 8001f06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f08:	f004 fdb5 	bl	8006a76 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	69da      	ldr	r2, [r3, #28]
 8001f10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f12:	441a      	add	r2, r3
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f1e:	441a      	add	r2, r3
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <PCD_EP_ISR_Handler+0x498>
 8001f2c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d206      	bcs.n	8001f44 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f006 fc49 	bl	80087d4 <HAL_PCD_DataOutStageCallback>
 8001f42:	e005      	b.n	8001f50 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fac7 	bl	80054de <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d078      	beq.n	800204c <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f88:	843b      	strh	r3, [r7, #32]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	441a      	add	r2, r3
 8001f98:	8c3b      	ldrh	r3, [r7, #32]
 8001f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	78db      	ldrb	r3, [r3, #3]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d108      	bne.n	8001fc0 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d144      	bne.n	8002040 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001fb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d13f      	bne.n	8002040 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d906      	bls.n	8001ffe <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	699a      	ldr	r2, [r3, #24]
 8001ff4:	8bfb      	ldrh	r3, [r7, #30]
 8001ff6:	1ad2      	subs	r2, r2, r3
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	619a      	str	r2, [r3, #24]
 8001ffc:	e002      	b.n	8002004 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d106      	bne.n	800201a <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f006 fbf9 	bl	800880a <HAL_PCD_DataInStageCallback>
 8002018:	e018      	b.n	800204c <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	8bfb      	ldrh	r3, [r7, #30]
 8002020:	441a      	add	r2, r3
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	8bfb      	ldrh	r3, [r7, #30]
 800202c:	441a      	add	r2, r3
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002038:	4618      	mov	r0, r3
 800203a:	f003 fa50 	bl	80054de <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800203e:	e005      	b.n	800204c <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002040:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002042:	461a      	mov	r2, r3
 8002044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f917 	bl	800227a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002054:	b29b      	uxth	r3, r3
 8002056:	b21b      	sxth	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	f6ff ad25 	blt.w	8001aa8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3738      	adds	r7, #56	; 0x38
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	4613      	mov	r3, r2
 8002074:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d07c      	beq.n	800217a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002088:	b29b      	uxth	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	4413      	add	r3, r2
 800209a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	8b7b      	ldrh	r3, [r7, #26]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d306      	bcc.n	80020be <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	699a      	ldr	r2, [r3, #24]
 80020b4:	8b7b      	ldrh	r3, [r7, #26]
 80020b6:	1ad2      	subs	r2, r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	619a      	str	r2, [r3, #24]
 80020bc:	e002      	b.n	80020c4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d123      	bne.n	8002114 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e6:	833b      	strh	r3, [r7, #24]
 80020e8:	8b3b      	ldrh	r3, [r7, #24]
 80020ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020ee:	833b      	strh	r3, [r7, #24]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	441a      	add	r2, r3
 80020fe:	8b3b      	ldrh	r3, [r7, #24]
 8002100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002110:	b29b      	uxth	r3, r3
 8002112:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01f      	beq.n	800215e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002138:	82fb      	strh	r3, [r7, #22]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	441a      	add	r2, r3
 8002148:	8afb      	ldrh	r3, [r7, #22]
 800214a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800214e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002156:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800215a:	b29b      	uxth	r3, r3
 800215c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800215e:	8b7b      	ldrh	r3, [r7, #26]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8085 	beq.w	8002270 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	6959      	ldr	r1, [r3, #20]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	891a      	ldrh	r2, [r3, #8]
 8002172:	8b7b      	ldrh	r3, [r7, #26]
 8002174:	f004 fc7f 	bl	8006a76 <USB_ReadPMA>
 8002178:	e07a      	b.n	8002270 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002182:	b29b      	uxth	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	4413      	add	r3, r2
 8002194:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800219e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	8b7b      	ldrh	r3, [r7, #26]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d306      	bcc.n	80021b8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	8b7b      	ldrh	r3, [r7, #26]
 80021b0:	1ad2      	subs	r2, r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	619a      	str	r2, [r3, #24]
 80021b6:	e002      	b.n	80021be <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2200      	movs	r2, #0
 80021bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d123      	bne.n	800220e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e0:	83fb      	strh	r3, [r7, #30]
 80021e2:	8bfb      	ldrh	r3, [r7, #30]
 80021e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021e8:	83fb      	strh	r3, [r7, #30]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	441a      	add	r2, r3
 80021f8:	8bfb      	ldrh	r3, [r7, #30]
 80021fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220a:	b29b      	uxth	r3, r3
 800220c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d11f      	bne.n	8002258 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800222e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002232:	83bb      	strh	r3, [r7, #28]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	441a      	add	r2, r3
 8002242:	8bbb      	ldrh	r3, [r7, #28]
 8002244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800224c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002250:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002254:	b29b      	uxth	r3, r3
 8002256:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002258:	8b7b      	ldrh	r3, [r7, #26]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d008      	beq.n	8002270 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	6959      	ldr	r1, [r3, #20]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	895a      	ldrh	r2, [r3, #10]
 800226a:	8b7b      	ldrh	r3, [r7, #26]
 800226c:	f004 fc03 	bl	8006a76 <USB_ReadPMA>
    }
  }

  return count;
 8002270:	8b7b      	ldrh	r3, [r7, #26]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b094      	sub	sp, #80	; 0x50
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	4613      	mov	r3, r2
 8002286:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8136 	beq.w	8002500 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229c:	b29b      	uxth	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d907      	bls.n	80022d8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	699a      	ldr	r2, [r3, #24]
 80022cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022d0:	1ad2      	subs	r2, r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	619a      	str	r2, [r3, #24]
 80022d6:	e002      	b.n	80022de <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2200      	movs	r2, #0
 80022dc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d12c      	bne.n	8002340 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f006 fa8c 	bl	800880a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8238 	beq.w	800276e <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002318:	82fb      	strh	r3, [r7, #22]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	441a      	add	r2, r3
 8002328:	8afb      	ldrh	r3, [r7, #22]
 800232a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800232e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800233a:	b29b      	uxth	r3, r3
 800233c:	8013      	strh	r3, [r2, #0]
 800233e:	e216      	b.n	800276e <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d01f      	beq.n	800238a <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002364:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	441a      	add	r2, r3
 8002374:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800237a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800237e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002386:	b29b      	uxth	r3, r3
 8002388:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002390:	2b01      	cmp	r3, #1
 8002392:	f040 81ec 	bne.w	800276e <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800239e:	441a      	add	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023ac:	441a      	add	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	6a1a      	ldr	r2, [r3, #32]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d309      	bcc.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	6a1a      	ldr	r2, [r3, #32]
 80023c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ca:	1ad2      	subs	r2, r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	621a      	str	r2, [r3, #32]
 80023d0:	e015      	b.n	80023fe <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d107      	bne.n	80023ea <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 80023da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023de:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023e8:	e009      	b.n	80023fe <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2200      	movs	r2, #0
 80023fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	785b      	ldrb	r3, [r3, #1]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d155      	bne.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x238>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002414:	b29b      	uxth	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	4413      	add	r3, r2
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	00da      	lsls	r2, r3, #3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	4413      	add	r3, r2
 8002428:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002430:	2b00      	cmp	r3, #0
 8002432:	d112      	bne.n	800245a <HAL_PCD_EP_DB_Transmit+0x1e0>
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800243e:	b29a      	uxth	r2, r3
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	801a      	strh	r2, [r3, #0]
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002452:	b29a      	uxth	r2, r3
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	801a      	strh	r2, [r3, #0]
 8002458:	e047      	b.n	80024ea <HAL_PCD_EP_DB_Transmit+0x270>
 800245a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800245c:	2b3e      	cmp	r3, #62	; 0x3e
 800245e:	d811      	bhi.n	8002484 <HAL_PCD_EP_DB_Transmit+0x20a>
 8002460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002462:	085b      	lsrs	r3, r3, #1
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_PCD_EP_DB_Transmit+0x1fc>
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	3301      	adds	r3, #1
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	b29b      	uxth	r3, r3
 800247a:	029b      	lsls	r3, r3, #10
 800247c:	b29a      	uxth	r2, r3
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	e032      	b.n	80024ea <HAL_PCD_EP_DB_Transmit+0x270>
 8002484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <HAL_PCD_EP_DB_Transmit+0x220>
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	3b01      	subs	r3, #1
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	b29b      	uxth	r3, r3
 800249e:	029b      	lsls	r3, r3, #10
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	801a      	strh	r2, [r3, #0]
 80024b0:	e01b      	b.n	80024ea <HAL_PCD_EP_DB_Transmit+0x270>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	785b      	ldrb	r3, [r3, #1]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d117      	bne.n	80024ea <HAL_PCD_EP_DB_Transmit+0x270>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	4413      	add	r3, r2
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	00da      	lsls	r2, r3, #3
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	4413      	add	r3, r2
 80024dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6959      	ldr	r1, [r3, #20]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	891a      	ldrh	r2, [r3, #8]
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f004 fa7a 	bl	80069f2 <USB_WritePMA>
 80024fe:	e136      	b.n	800276e <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002508:	b29b      	uxth	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	4413      	add	r3, r2
 800251a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002524:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	699a      	ldr	r2, [r3, #24]
 800252c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002530:	429a      	cmp	r2, r3
 8002532:	d307      	bcc.n	8002544 <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800253c:	1ad2      	subs	r2, r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	619a      	str	r2, [r3, #24]
 8002542:	e002      	b.n	800254a <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2200      	movs	r2, #0
 8002548:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d12e      	bne.n	80025b0 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f006 f956 	bl	800880a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002564:	2b00      	cmp	r3, #0
 8002566:	f040 8102 	bne.w	800276e <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002584:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	441a      	add	r2, r3
 8002596:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800259a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800259e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	8013      	strh	r3, [r2, #0]
 80025ae:	e0de      	b.n	800276e <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d11f      	bne.n	80025fa <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d4:	867b      	strh	r3, [r7, #50]	; 0x32
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	441a      	add	r2, r3
 80025e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80025e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002600:	2b01      	cmp	r3, #1
 8002602:	f040 80b4 	bne.w	800276e <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800260e:	441a      	add	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	69da      	ldr	r2, [r3, #28]
 8002618:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800261c:	441a      	add	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	6a1a      	ldr	r2, [r3, #32]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	429a      	cmp	r2, r3
 800262c:	d309      	bcc.n	8002642 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	6a1a      	ldr	r2, [r3, #32]
 8002638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263a:	1ad2      	subs	r2, r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	621a      	str	r2, [r3, #32]
 8002640:	e015      	b.n	800266e <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d107      	bne.n	800265a <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 800264a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800264e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002658:	e009      	b.n	800266e <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2200      	movs	r2, #0
 8002664:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	643b      	str	r3, [r7, #64]	; 0x40
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	785b      	ldrb	r3, [r3, #1]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d155      	bne.n	8002728 <HAL_PCD_EP_DB_Transmit+0x4ae>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	4413      	add	r3, r2
 8002692:	63bb      	str	r3, [r7, #56]	; 0x38
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	00da      	lsls	r2, r3, #3
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	4413      	add	r3, r2
 800269e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026a2:	637b      	str	r3, [r7, #52]	; 0x34
 80026a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d112      	bne.n	80026d0 <HAL_PCD_EP_DB_Transmit+0x456>
 80026aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b8:	801a      	strh	r2, [r3, #0]
 80026ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	e044      	b.n	800275a <HAL_PCD_EP_DB_Transmit+0x4e0>
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	2b3e      	cmp	r3, #62	; 0x3e
 80026d4:	d811      	bhi.n	80026fa <HAL_PCD_EP_DB_Transmit+0x480>
 80026d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_PCD_EP_DB_Transmit+0x472>
 80026e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e8:	3301      	adds	r3, #1
 80026ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	029b      	lsls	r3, r3, #10
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f6:	801a      	strh	r2, [r3, #0]
 80026f8:	e02f      	b.n	800275a <HAL_PCD_EP_DB_Transmit+0x4e0>
 80026fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <HAL_PCD_EP_DB_Transmit+0x496>
 800270a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270c:	3b01      	subs	r3, #1
 800270e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002712:	b29b      	uxth	r3, r3
 8002714:	029b      	lsls	r3, r3, #10
 8002716:	b29b      	uxth	r3, r3
 8002718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800271c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002720:	b29a      	uxth	r2, r3
 8002722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	e018      	b.n	800275a <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d114      	bne.n	800275a <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002738:	b29b      	uxth	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273e:	4413      	add	r3, r2
 8002740:	643b      	str	r3, [r7, #64]	; 0x40
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	00da      	lsls	r2, r3, #3
 8002748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800274a:	4413      	add	r3, r2
 800274c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002754:	b29a      	uxth	r2, r3
 8002756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002758:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	6959      	ldr	r1, [r3, #20]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	895a      	ldrh	r2, [r3, #10]
 8002766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002768:	b29b      	uxth	r3, r3
 800276a:	f004 f942 	bl	80069f2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002788:	82bb      	strh	r3, [r7, #20]
 800278a:	8abb      	ldrh	r3, [r7, #20]
 800278c:	f083 0310 	eor.w	r3, r3, #16
 8002790:	82bb      	strh	r3, [r7, #20]
 8002792:	8abb      	ldrh	r3, [r7, #20]
 8002794:	f083 0320 	eor.w	r3, r3, #32
 8002798:	82bb      	strh	r3, [r7, #20]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	441a      	add	r2, r3
 80027a8:	8abb      	ldrh	r3, [r7, #20]
 80027aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3750      	adds	r7, #80	; 0x50
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	4613      	mov	r3, r2
 80027d8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80027da:	897b      	ldrh	r3, [r7, #10]
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e6:	897b      	ldrh	r3, [r7, #10]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4413      	add	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	e009      	b.n	8002812 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027fe:	897a      	ldrh	r2, [r7, #10]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002812:	893b      	ldrh	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d107      	bne.n	8002828 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2200      	movs	r2, #0
 800281c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	b29a      	uxth	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	80da      	strh	r2, [r3, #6]
 8002826:	e00b      	b.n	8002840 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2201      	movs	r2, #1
 800282c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	b29a      	uxth	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	b29a      	uxth	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002872:	b29b      	uxth	r3, r3
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002886:	b29b      	uxth	r3, r3
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <HAL_PWREx_GetVoltageRange+0x18>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40007000 	.word	0x40007000

080028c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ce:	d130      	bne.n	8002932 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028d0:	4b23      	ldr	r3, [pc, #140]	; (8002960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028dc:	d038      	beq.n	8002950 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028e6:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2232      	movs	r2, #50	; 0x32
 80028f4:	fb02 f303 	mul.w	r3, r2, r3
 80028f8:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	0c9b      	lsrs	r3, r3, #18
 8002900:	3301      	adds	r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002904:	e002      	b.n	800290c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3b01      	subs	r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002918:	d102      	bne.n	8002920 <HAL_PWREx_ControlVoltageScaling+0x60>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f2      	bne.n	8002906 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292c:	d110      	bne.n	8002950 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e00f      	b.n	8002952 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800293a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293e:	d007      	beq.n	8002950 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002948:	4a05      	ldr	r2, [pc, #20]	; (8002960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800294e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40007000 	.word	0x40007000
 8002964:	20000008 	.word	0x20000008
 8002968:	431bde83 	.word	0x431bde83

0800296c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a04      	ldr	r2, [pc, #16]	; (8002988 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800297a:	6053      	str	r3, [r2, #4]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40007000 	.word	0x40007000

0800298c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	f000 bc11 	b.w	80031c2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a0:	4ba0      	ldr	r3, [pc, #640]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029aa:	4b9e      	ldr	r3, [pc, #632]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80e4 	beq.w	8002b8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d007      	beq.n	80029d8 <HAL_RCC_OscConfig+0x4c>
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	f040 808b 	bne.w	8002ae6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	f040 8087 	bne.w	8002ae6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029d8:	4b92      	ldr	r3, [pc, #584]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_OscConfig+0x64>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e3e8      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1a      	ldr	r2, [r3, #32]
 80029f4:	4b8b      	ldr	r3, [pc, #556]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <HAL_RCC_OscConfig+0x7e>
 8002a00:	4b88      	ldr	r3, [pc, #544]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a08:	e005      	b.n	8002a16 <HAL_RCC_OscConfig+0x8a>
 8002a0a:	4b86      	ldr	r3, [pc, #536]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d223      	bcs.n	8002a62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fd42 	bl	80034a8 <RCC_SetFlashLatencyFromMSIRange>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e3c9      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a2e:	4b7d      	ldr	r3, [pc, #500]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a7c      	ldr	r2, [pc, #496]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a34:	f043 0308 	orr.w	r3, r3, #8
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b7a      	ldr	r3, [pc, #488]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4977      	ldr	r1, [pc, #476]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a4c:	4b75      	ldr	r3, [pc, #468]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	021b      	lsls	r3, r3, #8
 8002a5a:	4972      	ldr	r1, [pc, #456]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
 8002a60:	e025      	b.n	8002aae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a62:	4b70      	ldr	r3, [pc, #448]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a6f      	ldr	r2, [pc, #444]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a68:	f043 0308 	orr.w	r3, r3, #8
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b6d      	ldr	r3, [pc, #436]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	496a      	ldr	r1, [pc, #424]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a80:	4b68      	ldr	r3, [pc, #416]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	4965      	ldr	r1, [pc, #404]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fd02 	bl	80034a8 <RCC_SetFlashLatencyFromMSIRange>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e389      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aae:	f000 fc6f 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	4b5b      	ldr	r3, [pc, #364]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	495a      	ldr	r1, [pc, #360]	; (8002c28 <HAL_RCC_OscConfig+0x29c>)
 8002ac0:	5ccb      	ldrb	r3, [r1, r3]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	4a58      	ldr	r2, [pc, #352]	; (8002c2c <HAL_RCC_OscConfig+0x2a0>)
 8002acc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ace:	4b58      	ldr	r3, [pc, #352]	; (8002c30 <HAL_RCC_OscConfig+0x2a4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe f814 	bl	8000b00 <HAL_InitTick>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d052      	beq.n	8002b88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	e36d      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d032      	beq.n	8002b54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002aee:	4b4d      	ldr	r3, [pc, #308]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a4c      	ldr	r2, [pc, #304]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002afa:	f7fe f851 	bl	8000ba0 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b02:	f7fe f84d 	bl	8000ba0 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e356      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b14:	4b43      	ldr	r3, [pc, #268]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b20:	4b40      	ldr	r3, [pc, #256]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a3f      	ldr	r2, [pc, #252]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b26:	f043 0308 	orr.w	r3, r3, #8
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	493a      	ldr	r1, [pc, #232]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	4935      	ldr	r1, [pc, #212]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
 8002b52:	e01a      	b.n	8002b8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b54:	4b33      	ldr	r3, [pc, #204]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a32      	ldr	r2, [pc, #200]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b60:	f7fe f81e 	bl	8000ba0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b68:	f7fe f81a 	bl	8000ba0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e323      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1dc>
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d073      	beq.n	8002c7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x21c>
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d063      	beq.n	8002c7c <HAL_RCC_OscConfig+0x2f0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d15f      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e300      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x24c>
 8002bca:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0x288>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x270>
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0x288>
 8002bfc:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a08      	ldr	r2, [pc, #32]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <HAL_RCC_OscConfig+0x298>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01b      	beq.n	8002c54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fd ffc0 	bl	8000ba0 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c22:	e010      	b.n	8002c46 <HAL_RCC_OscConfig+0x2ba>
 8002c24:	40021000 	.word	0x40021000
 8002c28:	080090b8 	.word	0x080090b8
 8002c2c:	20000008 	.word	0x20000008
 8002c30:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c34:	f7fd ffb4 	bl	8000ba0 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e2bd      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c46:	4baf      	ldr	r3, [pc, #700]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x2a8>
 8002c52:	e014      	b.n	8002c7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fd ffa4 	bl	8000ba0 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fd ffa0 	bl	8000ba0 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e2a9      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c6e:	4ba5      	ldr	r3, [pc, #660]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2d0>
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d060      	beq.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_OscConfig+0x310>
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d119      	bne.n	8002cca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d116      	bne.n	8002cca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c9c:	4b99      	ldr	r3, [pc, #612]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x328>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e286      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b93      	ldr	r3, [pc, #588]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	4990      	ldr	r1, [pc, #576]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc8:	e040      	b.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d023      	beq.n	8002d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd2:	4b8c      	ldr	r3, [pc, #560]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a8b      	ldr	r2, [pc, #556]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fd ff5f 	bl	8000ba0 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7fd ff5b 	bl	8000ba0 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e264      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf8:	4b82      	ldr	r3, [pc, #520]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	497c      	ldr	r1, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
 8002d18:	e018      	b.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1a:	4b7a      	ldr	r3, [pc, #488]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a79      	ldr	r2, [pc, #484]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fd ff3b 	bl	8000ba0 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fd ff37 	bl	8000ba0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e240      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d40:	4b70      	ldr	r3, [pc, #448]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d03c      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01c      	beq.n	8002d9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d60:	4b68      	ldr	r3, [pc, #416]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d66:	4a67      	ldr	r2, [pc, #412]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fd ff16 	bl	8000ba0 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d78:	f7fd ff12 	bl	8000ba0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e21b      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d8a:	4b5e      	ldr	r3, [pc, #376]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ef      	beq.n	8002d78 <HAL_RCC_OscConfig+0x3ec>
 8002d98:	e01b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9a:	4b5a      	ldr	r3, [pc, #360]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da0:	4a58      	ldr	r2, [pc, #352]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002daa:	f7fd fef9 	bl	8000ba0 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db2:	f7fd fef5 	bl	8000ba0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e1fe      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc4:	4b4f      	ldr	r3, [pc, #316]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ef      	bne.n	8002db2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80a6 	beq.w	8002f2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de0:	2300      	movs	r3, #0
 8002de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002de4:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10d      	bne.n	8002e0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df0:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	4a43      	ldr	r2, [pc, #268]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8002dfc:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e0c:	4b3e      	ldr	r3, [pc, #248]	; (8002f08 <HAL_RCC_OscConfig+0x57c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d118      	bne.n	8002e4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e18:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <HAL_RCC_OscConfig+0x57c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <HAL_RCC_OscConfig+0x57c>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e24:	f7fd febc 	bl	8000ba0 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2c:	f7fd feb8 	bl	8000ba0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1c1      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3e:	4b32      	ldr	r3, [pc, #200]	; (8002f08 <HAL_RCC_OscConfig+0x57c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d108      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4d8>
 8002e52:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e58:	4a2a      	ldr	r2, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e62:	e024      	b.n	8002eae <HAL_RCC_OscConfig+0x522>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d110      	bne.n	8002e8e <HAL_RCC_OscConfig+0x502>
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e74:	f043 0304 	orr.w	r3, r3, #4
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e7c:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	4a20      	ldr	r2, [pc, #128]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e8c:	e00f      	b.n	8002eae <HAL_RCC_OscConfig+0x522>
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	4a1b      	ldr	r2, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e9e:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7fd fe73 	bl	8000ba0 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fd fe6f 	bl	8000ba0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e176      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_OscConfig+0x578>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0ed      	beq.n	8002ebe <HAL_RCC_OscConfig+0x532>
 8002ee2:	e01a      	b.n	8002f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fd fe5c 	bl	8000ba0 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eea:	e00f      	b.n	8002f0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7fd fe58 	bl	8000ba0 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d906      	bls.n	8002f0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e15f      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f0c:	4baa      	ldr	r3, [pc, #680]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e8      	bne.n	8002eec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f1a:	7ffb      	ldrb	r3, [r7, #31]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f20:	4ba5      	ldr	r3, [pc, #660]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	4aa4      	ldr	r2, [pc, #656]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8002f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d03c      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01c      	beq.n	8002f7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f40:	4b9d      	ldr	r3, [pc, #628]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8002f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f46:	4a9c      	ldr	r2, [pc, #624]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fd fe26 	bl	8000ba0 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f58:	f7fd fe22 	bl	8000ba0 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e12b      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f6a:	4b93      	ldr	r3, [pc, #588]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8002f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ef      	beq.n	8002f58 <HAL_RCC_OscConfig+0x5cc>
 8002f78:	e01b      	b.n	8002fb2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f7a:	4b8f      	ldr	r3, [pc, #572]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8002f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f80:	4a8d      	ldr	r2, [pc, #564]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fd fe09 	bl	8000ba0 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f92:	f7fd fe05 	bl	8000ba0 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e10e      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fa4:	4b84      	ldr	r3, [pc, #528]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8002fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1ef      	bne.n	8002f92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8102 	beq.w	80031c0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	f040 80c5 	bne.w	8003150 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fc6:	4b7c      	ldr	r3, [pc, #496]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f003 0203 	and.w	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d12c      	bne.n	8003034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d123      	bne.n	8003034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d11b      	bne.n	8003034 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d113      	bne.n	8003034 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	3b01      	subs	r3, #1
 800301a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d109      	bne.n	8003034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	3b01      	subs	r3, #1
 800302e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d067      	beq.n	8003104 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d062      	beq.n	8003100 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800303a:	4b5f      	ldr	r3, [pc, #380]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0bb      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800304a:	4b5b      	ldr	r3, [pc, #364]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5a      	ldr	r2, [pc, #360]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8003050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003054:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003056:	f7fd fda3 	bl	8000ba0 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305e:	f7fd fd9f 	bl	8000ba0 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e0a8      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003070:	4b51      	ldr	r3, [pc, #324]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800307c:	4b4e      	ldr	r3, [pc, #312]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <HAL_RCC_OscConfig+0x830>)
 8003082:	4013      	ands	r3, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800308c:	3a01      	subs	r2, #1
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	4311      	orrs	r1, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003096:	0212      	lsls	r2, r2, #8
 8003098:	4311      	orrs	r1, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800309e:	0852      	lsrs	r2, r2, #1
 80030a0:	3a01      	subs	r2, #1
 80030a2:	0552      	lsls	r2, r2, #21
 80030a4:	4311      	orrs	r1, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030aa:	0852      	lsrs	r2, r2, #1
 80030ac:	3a01      	subs	r2, #1
 80030ae:	0652      	lsls	r2, r2, #25
 80030b0:	4311      	orrs	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030b6:	06d2      	lsls	r2, r2, #27
 80030b8:	430a      	orrs	r2, r1
 80030ba:	493f      	ldr	r1, [pc, #252]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030c0:	4b3d      	ldr	r3, [pc, #244]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a3c      	ldr	r2, [pc, #240]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 80030c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030cc:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4a39      	ldr	r2, [pc, #228]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 80030d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030d8:	f7fd fd62 	bl	8000ba0 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fd fd5e 	bl	8000ba0 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e067      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030fe:	e05f      	b.n	80031c0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e05e      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003104:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d157      	bne.n	80031c0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003110:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a28      	ldr	r2, [pc, #160]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8003116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800311c:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4a25      	ldr	r2, [pc, #148]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003126:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003128:	f7fd fd3a 	bl	8000ba0 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003130:	f7fd fd36 	bl	8000ba0 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e03f      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003142:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x7a4>
 800314e:	e037      	b.n	80031c0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b0c      	cmp	r3, #12
 8003154:	d02d      	beq.n	80031b2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 800315c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003160:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d105      	bne.n	800317a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800316e:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8003174:	f023 0303 	bic.w	r3, r3, #3
 8003178:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800317a:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 8003180:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003188:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318a:	f7fd fd09 	bl	8000ba0 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003192:	f7fd fd05 	bl	8000ba0 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e00e      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a4:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <HAL_RCC_OscConfig+0x82c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCC_OscConfig+0x806>
 80031b0:	e006      	b.n	80031c0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e005      	b.n	80031c2 <HAL_RCC_OscConfig+0x836>
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
 80031bc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop

080031cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0c8      	b.n	8003372 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b66      	ldr	r3, [pc, #408]	; (800337c <HAL_RCC_ClockConfig+0x1b0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d910      	bls.n	8003210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b63      	ldr	r3, [pc, #396]	; (800337c <HAL_RCC_ClockConfig+0x1b0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 0207 	bic.w	r2, r3, #7
 80031f6:	4961      	ldr	r1, [pc, #388]	; (800337c <HAL_RCC_ClockConfig+0x1b0>)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b5f      	ldr	r3, [pc, #380]	; (800337c <HAL_RCC_ClockConfig+0x1b0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0b0      	b.n	8003372 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d04c      	beq.n	80032b6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d107      	bne.n	8003234 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003224:	4b56      	ldr	r3, [pc, #344]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d121      	bne.n	8003274 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e09e      	b.n	8003372 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d107      	bne.n	800324c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800323c:	4b50      	ldr	r3, [pc, #320]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d115      	bne.n	8003274 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e092      	b.n	8003372 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d107      	bne.n	8003264 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003254:	4b4a      	ldr	r3, [pc, #296]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d109      	bne.n	8003274 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e086      	b.n	8003372 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003264:	4b46      	ldr	r3, [pc, #280]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e07e      	b.n	8003372 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003274:	4b42      	ldr	r3, [pc, #264]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f023 0203 	bic.w	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	493f      	ldr	r1, [pc, #252]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003286:	f7fd fc8b 	bl	8000ba0 <HAL_GetTick>
 800328a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328c:	e00a      	b.n	80032a4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328e:	f7fd fc87 	bl	8000ba0 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	; 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e066      	b.n	8003372 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a4:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 020c 	and.w	r2, r3, #12
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d1eb      	bne.n	800328e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c2:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	492c      	ldr	r1, [pc, #176]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d4:	4b29      	ldr	r3, [pc, #164]	; (800337c <HAL_RCC_ClockConfig+0x1b0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d210      	bcs.n	8003304 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <HAL_RCC_ClockConfig+0x1b0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 0207 	bic.w	r2, r3, #7
 80032ea:	4924      	ldr	r1, [pc, #144]	; (800337c <HAL_RCC_ClockConfig+0x1b0>)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b22      	ldr	r3, [pc, #136]	; (800337c <HAL_RCC_ClockConfig+0x1b0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e036      	b.n	8003372 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4918      	ldr	r1, [pc, #96]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4910      	ldr	r1, [pc, #64]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003342:	f000 f825 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 8003346:	4602      	mov	r2, r0
 8003348:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <HAL_RCC_ClockConfig+0x1b4>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	490c      	ldr	r1, [pc, #48]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	5ccb      	ldrb	r3, [r1, r3]
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003362:	4b0a      	ldr	r3, [pc, #40]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd fbca 	bl	8000b00 <HAL_InitTick>
 800336c:	4603      	mov	r3, r0
 800336e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003370:	7afb      	ldrb	r3, [r7, #11]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40022000 	.word	0x40022000
 8003380:	40021000 	.word	0x40021000
 8003384:	080090b8 	.word	0x080090b8
 8003388:	20000008 	.word	0x20000008
 800338c:	2000000c 	.word	0x2000000c

08003390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339e:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a8:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <HAL_RCC_GetSysClockFreq+0x108>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0x34>
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d121      	bne.n	8003402 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d11e      	bne.n	8003402 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033c4:	4b34      	ldr	r3, [pc, #208]	; (8003498 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d107      	bne.n	80033e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033d0:	4b31      	ldr	r3, [pc, #196]	; (8003498 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	e005      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033e0:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033ec:	4a2b      	ldr	r2, [pc, #172]	; (800349c <HAL_RCC_GetSysClockFreq+0x10c>)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10d      	bne.n	8003418 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b04      	cmp	r3, #4
 8003406:	d102      	bne.n	800340e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	e004      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b08      	cmp	r3, #8
 8003412:	d101      	bne.n	8003418 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003414:	4b23      	ldr	r3, [pc, #140]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003416:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b0c      	cmp	r3, #12
 800341c:	d134      	bne.n	8003488 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800341e:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <HAL_RCC_GetSysClockFreq+0x108>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d003      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0xa6>
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b03      	cmp	r3, #3
 8003432:	d003      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0xac>
 8003434:	e005      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003436:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003438:	617b      	str	r3, [r7, #20]
      break;
 800343a:	e005      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800343e:	617b      	str	r3, [r7, #20]
      break;
 8003440:	e002      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	617b      	str	r3, [r7, #20]
      break;
 8003446:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003448:	4b13      	ldr	r3, [pc, #76]	; (8003498 <HAL_RCC_GetSysClockFreq+0x108>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	3301      	adds	r3, #1
 8003454:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <HAL_RCC_GetSysClockFreq+0x108>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	fb02 f203 	mul.w	r2, r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <HAL_RCC_GetSysClockFreq+0x108>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	0e5b      	lsrs	r3, r3, #25
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	3301      	adds	r3, #1
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	fbb2 f3f3 	udiv	r3, r2, r3
 8003486:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003488:	69bb      	ldr	r3, [r7, #24]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	; 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	080090c8 	.word	0x080090c8
 80034a0:	00f42400 	.word	0x00f42400
 80034a4:	007a1200 	.word	0x007a1200

080034a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034b4:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034c0:	f7ff f9f0 	bl	80028a4 <HAL_PWREx_GetVoltageRange>
 80034c4:	6178      	str	r0, [r7, #20]
 80034c6:	e014      	b.n	80034f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034c8:	4b25      	ldr	r3, [pc, #148]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	4a24      	ldr	r2, [pc, #144]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d2:	6593      	str	r3, [r2, #88]	; 0x58
 80034d4:	4b22      	ldr	r3, [pc, #136]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034e0:	f7ff f9e0 	bl	80028a4 <HAL_PWREx_GetVoltageRange>
 80034e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034e6:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ea:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f8:	d10b      	bne.n	8003512 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d919      	bls.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2ba0      	cmp	r3, #160	; 0xa0
 8003504:	d902      	bls.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003506:	2302      	movs	r3, #2
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	e013      	b.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800350c:	2301      	movs	r3, #1
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	e010      	b.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b80      	cmp	r3, #128	; 0x80
 8003516:	d902      	bls.n	800351e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003518:	2303      	movs	r3, #3
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	e00a      	b.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b80      	cmp	r3, #128	; 0x80
 8003522:	d102      	bne.n	800352a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003524:	2302      	movs	r3, #2
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	e004      	b.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b70      	cmp	r3, #112	; 0x70
 800352e:	d101      	bne.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003530:	2301      	movs	r3, #1
 8003532:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 0207 	bic.w	r2, r3, #7
 800353c:	4909      	ldr	r1, [pc, #36]	; (8003564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003544:	4b07      	ldr	r3, [pc, #28]	; (8003564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	429a      	cmp	r2, r3
 8003550:	d001      	beq.n	8003556 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	40022000 	.word	0x40022000

08003568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003570:	2300      	movs	r3, #0
 8003572:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003574:	2300      	movs	r3, #0
 8003576:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003580:	2b00      	cmp	r3, #0
 8003582:	d031      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800358c:	d01a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800358e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003592:	d814      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003598:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800359c:	d10f      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800359e:	4bac      	ldr	r3, [pc, #688]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	4aab      	ldr	r2, [pc, #684]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035aa:	e00c      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f9cc 	bl	8003950 <RCCEx_PLLSAI1_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035bc:	e003      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	74fb      	strb	r3, [r7, #19]
      break;
 80035c2:	e000      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80035c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035cc:	4ba0      	ldr	r3, [pc, #640]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035da:	499d      	ldr	r1, [pc, #628]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035e2:	e001      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8099 	beq.w	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035fa:	4b95      	ldr	r3, [pc, #596]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003610:	4b8f      	ldr	r3, [pc, #572]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	4a8e      	ldr	r2, [pc, #568]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361a:	6593      	str	r3, [r2, #88]	; 0x58
 800361c:	4b8c      	ldr	r3, [pc, #560]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003628:	2301      	movs	r3, #1
 800362a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800362c:	4b89      	ldr	r3, [pc, #548]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a88      	ldr	r2, [pc, #544]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003636:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003638:	f7fd fab2 	bl	8000ba0 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800363e:	e009      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003640:	f7fd faae 	bl	8000ba0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d902      	bls.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	74fb      	strb	r3, [r7, #19]
        break;
 8003652:	e005      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003654:	4b7f      	ldr	r3, [pc, #508]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ef      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d155      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003666:	4b7a      	ldr	r3, [pc, #488]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003670:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01e      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	429a      	cmp	r2, r3
 8003680:	d019      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003682:	4b73      	ldr	r3, [pc, #460]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800368e:	4b70      	ldr	r3, [pc, #448]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003694:	4a6e      	ldr	r2, [pc, #440]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800369e:	4b6c      	ldr	r3, [pc, #432]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a4:	4a6a      	ldr	r2, [pc, #424]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036ae:	4a68      	ldr	r2, [pc, #416]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d016      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fd fa6e 	bl	8000ba0 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c6:	e00b      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fd fa6a 	bl	8000ba0 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d902      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	74fb      	strb	r3, [r7, #19]
            break;
 80036de:	e006      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e0:	4b5b      	ldr	r3, [pc, #364]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ec      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036f4:	4b56      	ldr	r3, [pc, #344]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003702:	4953      	ldr	r1, [pc, #332]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800370a:	e004      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
 8003710:	e001      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003716:	7c7b      	ldrb	r3, [r7, #17]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371c:	4b4c      	ldr	r3, [pc, #304]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800371e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003720:	4a4b      	ldr	r2, [pc, #300]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003726:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003734:	4b46      	ldr	r3, [pc, #280]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f023 0203 	bic.w	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4943      	ldr	r1, [pc, #268]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003756:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f023 020c 	bic.w	r2, r3, #12
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	493a      	ldr	r1, [pc, #232]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003778:	4b35      	ldr	r3, [pc, #212]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	4932      	ldr	r1, [pc, #200]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800379a:	4b2d      	ldr	r3, [pc, #180]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a8:	4929      	ldr	r1, [pc, #164]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037bc:	4b24      	ldr	r3, [pc, #144]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	4921      	ldr	r1, [pc, #132]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	4918      	ldr	r1, [pc, #96]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003800:	4b13      	ldr	r3, [pc, #76]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4910      	ldr	r1, [pc, #64]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d02c      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	4907      	ldr	r1, [pc, #28]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003840:	d10a      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003842:	4b03      	ldr	r3, [pc, #12]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4a02      	ldr	r2, [pc, #8]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800384c:	60d3      	str	r3, [r2, #12]
 800384e:	e015      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003850:	40021000 	.word	0x40021000
 8003854:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003860:	d10c      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3304      	adds	r3, #4
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f000 f871 	bl	8003950 <RCCEx_PLLSAI1_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003872:	7cfb      	ldrb	r3, [r7, #19]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d028      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003888:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	492d      	ldr	r1, [pc, #180]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a6:	d106      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a8:	4b28      	ldr	r3, [pc, #160]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a27      	ldr	r2, [pc, #156]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038b2:	60d3      	str	r3, [r2, #12]
 80038b4:	e011      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038be:	d10c      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	2101      	movs	r1, #1
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f842 	bl	8003950 <RCCEx_PLLSAI1_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01c      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038e6:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f4:	4915      	ldr	r1, [pc, #84]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003904:	d10c      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	2102      	movs	r1, #2
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f81f 	bl	8003950 <RCCEx_PLLSAI1_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003916:	7cfb      	ldrb	r3, [r7, #19]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800392c:	4b07      	ldr	r3, [pc, #28]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393a:	4904      	ldr	r1, [pc, #16]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003942:	7cbb      	ldrb	r3, [r7, #18]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40021000 	.word	0x40021000

08003950 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800395e:	4b74      	ldr	r3, [pc, #464]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d018      	beq.n	800399c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800396a:	4b71      	ldr	r3, [pc, #452]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0203 	and.w	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d10d      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
       ||
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003982:	4b6b      	ldr	r3, [pc, #428]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
       ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d047      	beq.n	8003a26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
 800399a:	e044      	b.n	8003a26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d018      	beq.n	80039d6 <RCCEx_PLLSAI1_Config+0x86>
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d825      	bhi.n	80039f4 <RCCEx_PLLSAI1_Config+0xa4>
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d002      	beq.n	80039b2 <RCCEx_PLLSAI1_Config+0x62>
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d009      	beq.n	80039c4 <RCCEx_PLLSAI1_Config+0x74>
 80039b0:	e020      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039b2:	4b5f      	ldr	r3, [pc, #380]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d11d      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c2:	e01a      	b.n	80039fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039c4:	4b5a      	ldr	r3, [pc, #360]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d116      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d4:	e013      	b.n	80039fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039d6:	4b56      	ldr	r3, [pc, #344]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10f      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039e2:	4b53      	ldr	r3, [pc, #332]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039f2:	e006      	b.n	8003a02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      break;
 80039f8:	e004      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039fa:	bf00      	nop
 80039fc:	e002      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a02:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10d      	bne.n	8003a26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a0a:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6819      	ldr	r1, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	4943      	ldr	r1, [pc, #268]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d17c      	bne.n	8003b26 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a2c:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a3f      	ldr	r2, [pc, #252]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a38:	f7fd f8b2 	bl	8000ba0 <HAL_GetTick>
 8003a3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a3e:	e009      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a40:	f7fd f8ae 	bl	8000ba0 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d902      	bls.n	8003a54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	73fb      	strb	r3, [r7, #15]
        break;
 8003a52:	e005      	b.n	8003a60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a54:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1ef      	bne.n	8003a40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d15f      	bne.n	8003b26 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d110      	bne.n	8003a8e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a6c:	4b30      	ldr	r3, [pc, #192]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6892      	ldr	r2, [r2, #8]
 8003a7c:	0211      	lsls	r1, r2, #8
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68d2      	ldr	r2, [r2, #12]
 8003a82:	06d2      	lsls	r2, r2, #27
 8003a84:	430a      	orrs	r2, r1
 8003a86:	492a      	ldr	r1, [pc, #168]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	610b      	str	r3, [r1, #16]
 8003a8c:	e027      	b.n	8003ade <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d112      	bne.n	8003aba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a94:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6892      	ldr	r2, [r2, #8]
 8003aa4:	0211      	lsls	r1, r2, #8
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6912      	ldr	r2, [r2, #16]
 8003aaa:	0852      	lsrs	r2, r2, #1
 8003aac:	3a01      	subs	r2, #1
 8003aae:	0552      	lsls	r2, r2, #21
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	491f      	ldr	r1, [pc, #124]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	610b      	str	r3, [r1, #16]
 8003ab8:	e011      	b.n	8003ade <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aba:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ac2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6892      	ldr	r2, [r2, #8]
 8003aca:	0211      	lsls	r1, r2, #8
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6952      	ldr	r2, [r2, #20]
 8003ad0:	0852      	lsrs	r2, r2, #1
 8003ad2:	3a01      	subs	r2, #1
 8003ad4:	0652      	lsls	r2, r2, #25
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	4915      	ldr	r1, [pc, #84]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ae8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aea:	f7fd f859 	bl	8000ba0 <HAL_GetTick>
 8003aee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003af0:	e009      	b.n	8003b06 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003af2:	f7fd f855 	bl	8000ba0 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d902      	bls.n	8003b06 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	73fb      	strb	r3, [r7, #15]
          break;
 8003b04:	e005      	b.n	8003b12 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0ef      	beq.n	8003af2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	4903      	ldr	r1, [pc, #12]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000

08003b34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e095      	b.n	8003c72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d108      	bne.n	8003b60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b56:	d009      	beq.n	8003b6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61da      	str	r2, [r3, #28]
 8003b5e:	e005      	b.n	8003b6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fc fe94 	bl	80008b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bac:	d902      	bls.n	8003bb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	e002      	b.n	8003bba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bc2:	d007      	beq.n	8003bd4 <HAL_SPI_Init+0xa0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bcc:	d002      	beq.n	8003bd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	ea42 0103 	orr.w	r1, r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	f003 0204 	and.w	r2, r3, #4
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c50:	ea42 0103 	orr.w	r1, r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b088      	sub	sp, #32
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_SPI_Transmit+0x22>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e158      	b.n	8003f4e <HAL_SPI_Transmit+0x2d4>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ca4:	f7fc ff7c 	bl	8000ba0 <HAL_GetTick>
 8003ca8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d002      	beq.n	8003cc0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cbe:	e13d      	b.n	8003f3c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_SPI_Transmit+0x52>
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d102      	bne.n	8003cd2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cd0:	e134      	b.n	8003f3c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	88fa      	ldrh	r2, [r7, #6]
 8003cea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	88fa      	ldrh	r2, [r7, #6]
 8003cf0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1c:	d10f      	bne.n	8003d3e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d48:	2b40      	cmp	r3, #64	; 0x40
 8003d4a:	d007      	beq.n	8003d5c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d64:	d94b      	bls.n	8003dfe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_SPI_Transmit+0xfa>
 8003d6e:	8afb      	ldrh	r3, [r7, #22]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d13e      	bne.n	8003df2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	881a      	ldrh	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	1c9a      	adds	r2, r3, #2
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d98:	e02b      	b.n	8003df2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d112      	bne.n	8003dce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	881a      	ldrh	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	1c9a      	adds	r2, r3, #2
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dcc:	e011      	b.n	8003df2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dce:	f7fc fee7 	bl	8000ba0 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d803      	bhi.n	8003de6 <HAL_SPI_Transmit+0x16c>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de4:	d102      	bne.n	8003dec <HAL_SPI_Transmit+0x172>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003df0:	e0a4      	b.n	8003f3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ce      	bne.n	8003d9a <HAL_SPI_Transmit+0x120>
 8003dfc:	e07c      	b.n	8003ef8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_SPI_Transmit+0x192>
 8003e06:	8afb      	ldrh	r3, [r7, #22]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d170      	bne.n	8003eee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d912      	bls.n	8003e3c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	881a      	ldrh	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b02      	subs	r3, #2
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e3a:	e058      	b.n	8003eee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	7812      	ldrb	r2, [r2, #0]
 8003e48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e62:	e044      	b.n	8003eee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d12b      	bne.n	8003eca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d912      	bls.n	8003ea2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	881a      	ldrh	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	1c9a      	adds	r2, r3, #2
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b02      	subs	r3, #2
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ea0:	e025      	b.n	8003eee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	7812      	ldrb	r2, [r2, #0]
 8003eae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ec8:	e011      	b.n	8003eee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eca:	f7fc fe69 	bl	8000ba0 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d803      	bhi.n	8003ee2 <HAL_SPI_Transmit+0x268>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee0:	d102      	bne.n	8003ee8 <HAL_SPI_Transmit+0x26e>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003eec:	e026      	b.n	8003f3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1b5      	bne.n	8003e64 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	6839      	ldr	r1, [r7, #0]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 fcdb 	bl	80048b8 <SPI_EndRxTxTransaction>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f16:	2300      	movs	r3, #0
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	77fb      	strb	r3, [r7, #31]
 8003f38:	e000      	b.n	8003f3c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003f3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3720      	adds	r7, #32
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b088      	sub	sp, #32
 8003f5a:	af02      	add	r7, sp, #8
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f72:	d112      	bne.n	8003f9a <HAL_SPI_Receive+0x44>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10e      	bne.n	8003f9a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2204      	movs	r2, #4
 8003f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f84:	88fa      	ldrh	r2, [r7, #6]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f910 	bl	80041b6 <HAL_SPI_TransmitReceive>
 8003f96:	4603      	mov	r3, r0
 8003f98:	e109      	b.n	80041ae <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_SPI_Receive+0x52>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e102      	b.n	80041ae <HAL_SPI_Receive+0x258>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fb0:	f7fc fdf6 	bl	8000ba0 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d002      	beq.n	8003fc8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fc6:	e0e9      	b.n	800419c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_SPI_Receive+0x7e>
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d102      	bne.n	8003fda <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fd8:	e0e0      	b.n	800419c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2204      	movs	r2, #4
 8003fde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004024:	d908      	bls.n	8004038 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	e007      	b.n	8004048 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004046:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004050:	d10f      	bne.n	8004072 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004060:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d007      	beq.n	8004090 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800408e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004098:	d867      	bhi.n	800416a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800409a:	e030      	b.n	80040fe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d117      	bne.n	80040da <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f103 020c 	add.w	r2, r3, #12
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	7812      	ldrb	r2, [r2, #0]
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80040d8:	e011      	b.n	80040fe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040da:	f7fc fd61 	bl	8000ba0 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d803      	bhi.n	80040f2 <HAL_SPI_Receive+0x19c>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f0:	d102      	bne.n	80040f8 <HAL_SPI_Receive+0x1a2>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040fc:	e04e      	b.n	800419c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1c8      	bne.n	800409c <HAL_SPI_Receive+0x146>
 800410a:	e034      	b.n	8004176 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b01      	cmp	r3, #1
 8004118:	d115      	bne.n	8004146 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	b292      	uxth	r2, r2
 8004126:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	1c9a      	adds	r2, r3, #2
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004144:	e011      	b.n	800416a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004146:	f7fc fd2b 	bl	8000ba0 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d803      	bhi.n	800415e <HAL_SPI_Receive+0x208>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800415c:	d102      	bne.n	8004164 <HAL_SPI_Receive+0x20e>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004168:	e018      	b.n	800419c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1ca      	bne.n	800410c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	6839      	ldr	r1, [r7, #0]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fb44 	bl	8004808 <SPI_EndRxTransaction>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	75fb      	strb	r3, [r7, #23]
 8004198:	e000      	b.n	800419c <HAL_SPI_Receive+0x246>
  }

error :
 800419a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b08a      	sub	sp, #40	; 0x28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041c4:	2301      	movs	r3, #1
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x26>
 80041d8:	2302      	movs	r3, #2
 80041da:	e1fb      	b.n	80045d4 <HAL_SPI_TransmitReceive+0x41e>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041e4:	f7fc fcdc 	bl	8000ba0 <HAL_GetTick>
 80041e8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041f0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80041f8:	887b      	ldrh	r3, [r7, #2]
 80041fa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004200:	7efb      	ldrb	r3, [r7, #27]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d00e      	beq.n	8004224 <HAL_SPI_TransmitReceive+0x6e>
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800420c:	d106      	bne.n	800421c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <HAL_SPI_TransmitReceive+0x66>
 8004216:	7efb      	ldrb	r3, [r7, #27]
 8004218:	2b04      	cmp	r3, #4
 800421a:	d003      	beq.n	8004224 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800421c:	2302      	movs	r3, #2
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004222:	e1cd      	b.n	80045c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_SPI_TransmitReceive+0x80>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_SPI_TransmitReceive+0x80>
 8004230:	887b      	ldrh	r3, [r7, #2]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d103      	bne.n	800423e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800423c:	e1c0      	b.n	80045c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b04      	cmp	r3, #4
 8004248:	d003      	beq.n	8004252 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2205      	movs	r2, #5
 800424e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	887a      	ldrh	r2, [r7, #2]
 8004262:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	887a      	ldrh	r2, [r7, #2]
 800426a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	887a      	ldrh	r2, [r7, #2]
 8004278:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	887a      	ldrh	r2, [r7, #2]
 800427e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004294:	d802      	bhi.n	800429c <HAL_SPI_TransmitReceive+0xe6>
 8004296:	8a3b      	ldrh	r3, [r7, #16]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d908      	bls.n	80042ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042aa:	605a      	str	r2, [r3, #4]
 80042ac:	e007      	b.n	80042be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	d007      	beq.n	80042dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042e4:	d97c      	bls.n	80043e0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_SPI_TransmitReceive+0x13e>
 80042ee:	8a7b      	ldrh	r3, [r7, #18]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d169      	bne.n	80043c8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	881a      	ldrh	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	1c9a      	adds	r2, r3, #2
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004318:	e056      	b.n	80043c8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b02      	cmp	r3, #2
 8004326:	d11b      	bne.n	8004360 <HAL_SPI_TransmitReceive+0x1aa>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x1aa>
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	2b01      	cmp	r3, #1
 8004336:	d113      	bne.n	8004360 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	881a      	ldrh	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	1c9a      	adds	r2, r3, #2
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d11c      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x1f2>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	b292      	uxth	r2, r2
 8004386:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	1c9a      	adds	r2, r3, #2
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043a4:	2301      	movs	r3, #1
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043a8:	f7fc fbfa 	bl	8000ba0 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d807      	bhi.n	80043c8 <HAL_SPI_TransmitReceive+0x212>
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043be:	d003      	beq.n	80043c8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043c6:	e0fb      	b.n	80045c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1a3      	bne.n	800431a <HAL_SPI_TransmitReceive+0x164>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d19d      	bne.n	800431a <HAL_SPI_TransmitReceive+0x164>
 80043de:	e0df      	b.n	80045a0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_SPI_TransmitReceive+0x23a>
 80043e8:	8a7b      	ldrh	r3, [r7, #18]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	f040 80cb 	bne.w	8004586 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d912      	bls.n	8004420 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	881a      	ldrh	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	1c9a      	adds	r2, r3, #2
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b02      	subs	r3, #2
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800441e:	e0b2      	b.n	8004586 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	7812      	ldrb	r2, [r2, #0]
 800442c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004446:	e09e      	b.n	8004586 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d134      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x30a>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d02f      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x30a>
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	2b01      	cmp	r3, #1
 8004464:	d12c      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b01      	cmp	r3, #1
 800446e:	d912      	bls.n	8004496 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	881a      	ldrh	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	1c9a      	adds	r2, r3, #2
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b02      	subs	r3, #2
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004494:	e012      	b.n	80044bc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	7812      	ldrb	r2, [r2, #0]
 80044a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d148      	bne.n	8004560 <HAL_SPI_TransmitReceive+0x3aa>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d042      	beq.n	8004560 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d923      	bls.n	800452e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	b292      	uxth	r2, r2
 80044f2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	1c9a      	adds	r2, r3, #2
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b02      	subs	r3, #2
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d81f      	bhi.n	800455c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	e016      	b.n	800455c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f103 020c 	add.w	r2, r3, #12
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	7812      	ldrb	r2, [r2, #0]
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800455c:	2301      	movs	r3, #1
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004560:	f7fc fb1e 	bl	8000ba0 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800456c:	429a      	cmp	r2, r3
 800456e:	d803      	bhi.n	8004578 <HAL_SPI_TransmitReceive+0x3c2>
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004576:	d102      	bne.n	800457e <HAL_SPI_TransmitReceive+0x3c8>
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	2b00      	cmp	r3, #0
 800457c:	d103      	bne.n	8004586 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004584:	e01c      	b.n	80045c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	f47f af5b 	bne.w	8004448 <HAL_SPI_TransmitReceive+0x292>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	f47f af54 	bne.w	8004448 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f987 	bl	80048b8 <SPI_EndRxTxTransaction>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d006      	beq.n	80045be <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	661a      	str	r2, [r3, #96]	; 0x60
 80045bc:	e000      	b.n	80045c0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80045be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3728      	adds	r7, #40	; 0x28
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	4613      	mov	r3, r2
 80045ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045ec:	f7fc fad8 	bl	8000ba0 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	4413      	add	r3, r2
 80045fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045fc:	f7fc fad0 	bl	8000ba0 <HAL_GetTick>
 8004600:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004602:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	015b      	lsls	r3, r3, #5
 8004608:	0d1b      	lsrs	r3, r3, #20
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	fb02 f303 	mul.w	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004612:	e054      	b.n	80046be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800461a:	d050      	beq.n	80046be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800461c:	f7fc fac0 	bl	8000ba0 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	429a      	cmp	r2, r3
 800462a:	d902      	bls.n	8004632 <SPI_WaitFlagStateUntilTimeout+0x56>
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d13d      	bne.n	80046ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004640:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800464a:	d111      	bne.n	8004670 <SPI_WaitFlagStateUntilTimeout+0x94>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004654:	d004      	beq.n	8004660 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465e:	d107      	bne.n	8004670 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800466e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004678:	d10f      	bne.n	800469a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004698:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e017      	b.n	80046de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4013      	ands	r3, r2
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	bf0c      	ite	eq
 80046ce:	2301      	moveq	r3, #1
 80046d0:	2300      	movne	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d19b      	bne.n	8004614 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000008 	.word	0x20000008

080046ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046fa:	f7fc fa51 	bl	8000ba0 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	4413      	add	r3, r2
 8004708:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800470a:	f7fc fa49 	bl	8000ba0 <HAL_GetTick>
 800470e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004710:	4b3c      	ldr	r3, [pc, #240]	; (8004804 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	00da      	lsls	r2, r3, #3
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	0d1b      	lsrs	r3, r3, #20
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004728:	e05f      	b.n	80047ea <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004730:	d106      	bne.n	8004740 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	330c      	adds	r3, #12
 800473e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004746:	d050      	beq.n	80047ea <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004748:	f7fc fa2a 	bl	8000ba0 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	429a      	cmp	r2, r3
 8004756:	d902      	bls.n	800475e <SPI_WaitFifoStateUntilTimeout+0x72>
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d13d      	bne.n	80047da <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800476c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004776:	d111      	bne.n	800479c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004780:	d004      	beq.n	800478c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478a:	d107      	bne.n	800479c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a4:	d10f      	bne.n	80047c6 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e010      	b.n	80047fc <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4013      	ands	r3, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d197      	bne.n	800472a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000008 	.word	0x20000008

08004808 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800481c:	d111      	bne.n	8004842 <SPI_EndRxTransaction+0x3a>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004826:	d004      	beq.n	8004832 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004830:	d107      	bne.n	8004842 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004840:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2200      	movs	r2, #0
 800484a:	2180      	movs	r1, #128	; 0x80
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f7ff fec5 	bl	80045dc <SPI_WaitFlagStateUntilTimeout>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e023      	b.n	80048b0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004870:	d11d      	bne.n	80048ae <SPI_EndRxTransaction+0xa6>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800487a:	d004      	beq.n	8004886 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004884:	d113      	bne.n	80048ae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2200      	movs	r2, #0
 800488e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7ff ff2a 	bl	80046ec <SPI_WaitFifoStateUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a2:	f043 0220 	orr.w	r2, r3, #32
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e000      	b.n	80048b0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af02      	add	r7, sp, #8
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff ff0b 	bl	80046ec <SPI_WaitFifoStateUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e0:	f043 0220 	orr.w	r2, r3, #32
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e027      	b.n	800493c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2200      	movs	r2, #0
 80048f4:	2180      	movs	r1, #128	; 0x80
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff fe70 	bl	80045dc <SPI_WaitFlagStateUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d007      	beq.n	8004912 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004906:	f043 0220 	orr.w	r2, r3, #32
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e014      	b.n	800493c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2200      	movs	r2, #0
 800491a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7ff fee4 	bl	80046ec <SPI_WaitFifoStateUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492e:	f043 0220 	orr.w	r2, r3, #32
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e000      	b.n	800493c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004944:	b084      	sub	sp, #16
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	f107 0014 	add.w	r0, r7, #20
 8004952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	b004      	add	sp, #16
 8004964:	4770      	bx	lr

08004966 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004966:	b480      	push	{r7}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004976:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800497a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	b29a      	uxth	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800499c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80049a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	4013      	ands	r3, r2
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	460b      	mov	r3, r1
 80049d4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049e4:	b084      	sub	sp, #16
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	f107 0014 	add.w	r0, r7, #20
 80049f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	b004      	add	sp, #16
 8004a24:	4770      	bx	lr
	...

08004a28 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b09b      	sub	sp, #108	; 0x6c
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	78db      	ldrb	r3, [r3, #3]
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d81f      	bhi.n	8004a9a <USB_ActivateEndpoint+0x72>
 8004a5a:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <USB_ActivateEndpoint+0x38>)
 8004a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a60:	08004a71 	.word	0x08004a71
 8004a64:	08004a8d 	.word	0x08004a8d
 8004a68:	08004aa3 	.word	0x08004aa3
 8004a6c:	08004a7f 	.word	0x08004a7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004a70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a7c:	e012      	b.n	8004aa4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a82:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004a86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a8a:	e00b      	b.n	8004aa4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004a8c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a94:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a98:	e004      	b.n	8004aa4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004aa0:	e000      	b.n	8004aa4 <USB_ActivateEndpoint+0x7c>
      break;
 8004aa2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	441a      	add	r2, r3
 8004aae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	b21b      	sxth	r3, r3
 8004ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ade:	b21a      	sxth	r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	b21b      	sxth	r3, r3
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	b21b      	sxth	r3, r3
 8004aea:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	441a      	add	r2, r3
 8004af8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	7b1b      	ldrb	r3, [r3, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f040 8149 	bne.w	8004dac <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	785b      	ldrb	r3, [r3, #1]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8084 	beq.w	8004c2c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	4413      	add	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	00da      	lsls	r2, r3, #3
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	88db      	ldrh	r3, [r3, #6]
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	81fb      	strh	r3, [r7, #14]
 8004b66:	89fb      	ldrh	r3, [r7, #14]
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01b      	beq.n	8004ba8 <USB_ActivateEndpoint+0x180>
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	81bb      	strh	r3, [r7, #12]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	441a      	add	r2, r3
 8004b92:	89bb      	ldrh	r3, [r7, #12]
 8004b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	78db      	ldrb	r3, [r3, #3]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d020      	beq.n	8004bf2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc6:	813b      	strh	r3, [r7, #8]
 8004bc8:	893b      	ldrh	r3, [r7, #8]
 8004bca:	f083 0320 	eor.w	r3, r3, #32
 8004bce:	813b      	strh	r3, [r7, #8]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	441a      	add	r2, r3
 8004bda:	893b      	ldrh	r3, [r7, #8]
 8004bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	8013      	strh	r3, [r2, #0]
 8004bf0:	e27f      	b.n	80050f2 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c08:	817b      	strh	r3, [r7, #10]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	441a      	add	r2, r3
 8004c14:	897b      	ldrh	r3, [r7, #10]
 8004c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	8013      	strh	r3, [r2, #0]
 8004c2a:	e262      	b.n	80050f2 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	4413      	add	r3, r2
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	00da      	lsls	r2, r3, #3
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	4413      	add	r3, r2
 8004c4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	88db      	ldrh	r3, [r3, #6]
 8004c54:	085b      	lsrs	r3, r3, #1
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	4413      	add	r3, r2
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	00da      	lsls	r2, r3, #3
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c82:	623b      	str	r3, [r7, #32]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d112      	bne.n	8004cb2 <USB_ActivateEndpoint+0x28a>
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	801a      	strh	r2, [r3, #0]
 8004cb0:	e02f      	b.n	8004d12 <USB_ActivateEndpoint+0x2ea>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004cb8:	d813      	bhi.n	8004ce2 <USB_ActivateEndpoint+0x2ba>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	085b      	lsrs	r3, r3, #1
 8004cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <USB_ActivateEndpoint+0x2ac>
 8004cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	663b      	str	r3, [r7, #96]	; 0x60
 8004cd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	029b      	lsls	r3, r3, #10
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	e017      	b.n	8004d12 <USB_ActivateEndpoint+0x2ea>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <USB_ActivateEndpoint+0x2d4>
 8004cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	663b      	str	r3, [r7, #96]	; 0x60
 8004cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	029b      	lsls	r3, r3, #10
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	83fb      	strh	r3, [r7, #30]
 8004d20:	8bfb      	ldrh	r3, [r7, #30]
 8004d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01b      	beq.n	8004d62 <USB_ActivateEndpoint+0x33a>
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d40:	83bb      	strh	r3, [r7, #28]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	441a      	add	r2, r3
 8004d4c:	8bbb      	ldrh	r3, [r7, #28]
 8004d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d78:	837b      	strh	r3, [r7, #26]
 8004d7a:	8b7b      	ldrh	r3, [r7, #26]
 8004d7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d80:	837b      	strh	r3, [r7, #26]
 8004d82:	8b7b      	ldrh	r3, [r7, #26]
 8004d84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d88:	837b      	strh	r3, [r7, #26]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	8b7b      	ldrh	r3, [r7, #26]
 8004d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	8013      	strh	r3, [r2, #0]
 8004daa:	e1a2      	b.n	80050f2 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	441a      	add	r2, r3
 8004dd0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ddc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df8:	4413      	add	r3, r2
 8004dfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	00da      	lsls	r2, r3, #3
 8004e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	891b      	ldrh	r3, [r3, #8]
 8004e10:	085b      	lsrs	r3, r3, #1
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e2c:	4413      	add	r3, r2
 8004e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	00da      	lsls	r2, r3, #3
 8004e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e38:	4413      	add	r3, r2
 8004e3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	895b      	ldrh	r3, [r3, #10]
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f040 8091 	bne.w	8004f7c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004e68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d01b      	beq.n	8004eaa <USB_ActivateEndpoint+0x482>
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e88:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	441a      	add	r2, r3
 8004e94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	873b      	strh	r3, [r7, #56]	; 0x38
 8004eb8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d01b      	beq.n	8004efa <USB_ActivateEndpoint+0x4d2>
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	441a      	add	r2, r3
 8004ee4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f10:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f18:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f20:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f58:	867b      	strh	r3, [r7, #50]	; 0x32
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]
 8004f7a:	e0ba      	b.n	80050f2 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004f8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01d      	beq.n	8004fd4 <USB_ActivateEndpoint+0x5ac>
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	441a      	add	r2, r3
 8004fbc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004fe4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01d      	beq.n	800502c <USB_ActivateEndpoint+0x604>
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	441a      	add	r2, r3
 8005014:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005024:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005028:	b29b      	uxth	r3, r3
 800502a:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	78db      	ldrb	r3, [r3, #3]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d024      	beq.n	800507e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800504a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800504e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005052:	f083 0320 	eor.w	r3, r3, #32
 8005056:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	441a      	add	r2, r3
 8005064:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005078:	b29b      	uxth	r3, r3
 800507a:	8013      	strh	r3, [r2, #0]
 800507c:	e01d      	b.n	80050ba <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005094:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	441a      	add	r2, r3
 80050a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80050a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	441a      	add	r2, r3
 80050dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80050de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80050f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	376c      	adds	r7, #108	; 0x6c
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop

08005104 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005104:	b480      	push	{r7}
 8005106:	b08d      	sub	sp, #52	; 0x34
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	7b1b      	ldrb	r3, [r3, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	f040 808e 	bne.w	8005234 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d044      	beq.n	80051aa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	81bb      	strh	r3, [r7, #12]
 800512e:	89bb      	ldrh	r3, [r7, #12]
 8005130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01b      	beq.n	8005170 <USB_DeactivateEndpoint+0x6c>
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	817b      	strh	r3, [r7, #10]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	441a      	add	r2, r3
 800515a:	897b      	ldrh	r3, [r7, #10]
 800515c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005168:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800516c:	b29b      	uxth	r3, r3
 800516e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005186:	813b      	strh	r3, [r7, #8]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	441a      	add	r2, r3
 8005192:	893b      	ldrh	r3, [r7, #8]
 8005194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800519c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	8013      	strh	r3, [r2, #0]
 80051a8:	e192      	b.n	80054d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	827b      	strh	r3, [r7, #18]
 80051b8:	8a7b      	ldrh	r3, [r7, #18]
 80051ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01b      	beq.n	80051fa <USB_DeactivateEndpoint+0xf6>
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	823b      	strh	r3, [r7, #16]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	8a3b      	ldrh	r3, [r7, #16]
 80051e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005210:	81fb      	strh	r3, [r7, #14]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	89fb      	ldrh	r3, [r7, #14]
 800521e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522e:	b29b      	uxth	r3, r3
 8005230:	8013      	strh	r3, [r2, #0]
 8005232:	e14d      	b.n	80054d0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	2b00      	cmp	r3, #0
 800523a:	f040 80a5 	bne.w	8005388 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	843b      	strh	r3, [r7, #32]
 800524c:	8c3b      	ldrh	r3, [r7, #32]
 800524e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01b      	beq.n	800528e <USB_DeactivateEndpoint+0x18a>
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526c:	83fb      	strh	r3, [r7, #30]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	441a      	add	r2, r3
 8005278:	8bfb      	ldrh	r3, [r7, #30]
 800527a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528a:	b29b      	uxth	r3, r3
 800528c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	83bb      	strh	r3, [r7, #28]
 800529c:	8bbb      	ldrh	r3, [r7, #28]
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01b      	beq.n	80052de <USB_DeactivateEndpoint+0x1da>
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052bc:	837b      	strh	r3, [r7, #26]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	8b7b      	ldrh	r3, [r7, #26]
 80052ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052da:	b29b      	uxth	r3, r3
 80052dc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f4:	833b      	strh	r3, [r7, #24]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	441a      	add	r2, r3
 8005300:	8b3b      	ldrh	r3, [r7, #24]
 8005302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005312:	b29b      	uxth	r3, r3
 8005314:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532c:	82fb      	strh	r3, [r7, #22]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	441a      	add	r2, r3
 8005338:	8afb      	ldrh	r3, [r7, #22]
 800533a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534a:	b29b      	uxth	r3, r3
 800534c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005364:	82bb      	strh	r3, [r7, #20]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	441a      	add	r2, r3
 8005370:	8abb      	ldrh	r3, [r7, #20]
 8005372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005382:	b29b      	uxth	r3, r3
 8005384:	8013      	strh	r3, [r2, #0]
 8005386:	e0a3      	b.n	80054d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005396:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01b      	beq.n	80053d8 <USB_DeactivateEndpoint+0x2d4>
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	441a      	add	r2, r3
 80053c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80053c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80053e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01b      	beq.n	8005428 <USB_DeactivateEndpoint+0x324>
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	853b      	strh	r3, [r7, #40]	; 0x28
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	441a      	add	r2, r3
 8005412:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005420:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005424:	b29b      	uxth	r3, r3
 8005426:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	441a      	add	r2, r3
 800544a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800544c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005454:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545c:	b29b      	uxth	r3, r3
 800545e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005476:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	441a      	add	r2, r3
 8005482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005494:	b29b      	uxth	r3, r3
 8005496:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	441a      	add	r2, r3
 80054ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3734      	adds	r7, #52	; 0x34
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b0c4      	sub	sp, #272	; 0x110
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	1d3b      	adds	r3, r7, #4
 80054e6:	6018      	str	r0, [r3, #0]
 80054e8:	463b      	mov	r3, r7
 80054ea:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054ec:	463b      	mov	r3, r7
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	785b      	ldrb	r3, [r3, #1]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	f040 8566 	bne.w	8005fc4 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80054f8:	463b      	mov	r3, r7
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	463b      	mov	r3, r7
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	429a      	cmp	r2, r3
 8005506:	d905      	bls.n	8005514 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005508:	463b      	mov	r3, r7
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005512:	e004      	b.n	800551e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005514:	463b      	mov	r3, r7
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800551e:	463b      	mov	r3, r7
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	7b1b      	ldrb	r3, [r3, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d12c      	bne.n	8005582 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005528:	463b      	mov	r3, r7
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6959      	ldr	r1, [r3, #20]
 800552e:	463b      	mov	r3, r7
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	88da      	ldrh	r2, [r3, #6]
 8005534:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005538:	b29b      	uxth	r3, r3
 800553a:	1d38      	adds	r0, r7, #4
 800553c:	6800      	ldr	r0, [r0, #0]
 800553e:	f001 fa58 	bl	80069f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	1d3b      	adds	r3, r7, #4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005550:	b29b      	uxth	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	4413      	add	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	463b      	mov	r3, r7
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	00da      	lsls	r2, r3, #3
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	4413      	add	r3, r2
 8005566:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800556a:	f107 0310 	add.w	r3, r7, #16
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005574:	b29a      	uxth	r2, r3
 8005576:	f107 0310 	add.w	r3, r7, #16
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	f000 bcec 	b.w	8005f5a <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005582:	463b      	mov	r3, r7
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	78db      	ldrb	r3, [r3, #3]
 8005588:	2b02      	cmp	r3, #2
 800558a:	f040 8356 	bne.w	8005c3a <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800558e:	463b      	mov	r3, r7
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	429a      	cmp	r2, r3
 800559c:	f240 82fa 	bls.w	8005b94 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80055a0:	1d3b      	adds	r3, r7, #4
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	463b      	mov	r3, r7
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80055be:	1d3b      	adds	r3, r7, #4
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	463b      	mov	r3, r7
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	441a      	add	r2, r3
 80055cc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80055d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80055dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80055e4:	463b      	mov	r3, r7
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80055ee:	463b      	mov	r3, r7
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6a1a      	ldr	r2, [r3, #32]
 80055f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055f8:	1ad2      	subs	r2, r2, r3
 80055fa:	463b      	mov	r3, r7
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005600:	1d3b      	adds	r3, r7, #4
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	463b      	mov	r3, r7
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	b29b      	uxth	r3, r3
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 815e 	beq.w	80058d8 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800561c:	1d3b      	adds	r3, r7, #4
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
 8005622:	463b      	mov	r3, r7
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d164      	bne.n	80056f6 <USB_EPStartXfer+0x218>
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005632:	1d3b      	adds	r3, r7, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563a:	b29b      	uxth	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	4413      	add	r3, r2
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005644:	463b      	mov	r3, r7
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	00da      	lsls	r2, r3, #3
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	4413      	add	r3, r2
 8005650:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
 8005656:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800565a:	2b00      	cmp	r3, #0
 800565c:	d112      	bne.n	8005684 <USB_EPStartXfer+0x1a6>
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005668:	b29a      	uxth	r2, r3
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567c:	b29a      	uxth	r2, r3
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e054      	b.n	800572e <USB_EPStartXfer+0x250>
 8005684:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005688:	2b3e      	cmp	r3, #62	; 0x3e
 800568a:	d817      	bhi.n	80056bc <USB_EPStartXfer+0x1de>
 800568c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005696:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d004      	beq.n	80056ac <USB_EPStartXfer+0x1ce>
 80056a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a6:	3301      	adds	r3, #1
 80056a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	029b      	lsls	r3, r3, #10
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	801a      	strh	r2, [r3, #0]
 80056ba:	e038      	b.n	800572e <USB_EPStartXfer+0x250>
 80056bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d104      	bne.n	80056dc <USB_EPStartXfer+0x1fe>
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d6:	3b01      	subs	r3, #1
 80056d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	029b      	lsls	r3, r3, #10
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	e01b      	b.n	800572e <USB_EPStartXfer+0x250>
 80056f6:	463b      	mov	r3, r7
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d116      	bne.n	800572e <USB_EPStartXfer+0x250>
 8005700:	1d3b      	adds	r3, r7, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005708:	b29b      	uxth	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	4413      	add	r3, r2
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
 8005712:	463b      	mov	r3, r7
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	00da      	lsls	r2, r3, #3
 800571a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571c:	4413      	add	r3, r2
 800571e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005722:	633b      	str	r3, [r7, #48]	; 0x30
 8005724:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005728:	b29a      	uxth	r2, r3
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800572e:	463b      	mov	r3, r7
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	895b      	ldrh	r3, [r3, #10]
 8005734:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005738:	463b      	mov	r3, r7
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6959      	ldr	r1, [r3, #20]
 800573e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005742:	b29b      	uxth	r3, r3
 8005744:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005748:	1d38      	adds	r0, r7, #4
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	f001 f951 	bl	80069f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005750:	463b      	mov	r3, r7
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695a      	ldr	r2, [r3, #20]
 8005756:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800575a:	441a      	add	r2, r3
 800575c:	463b      	mov	r3, r7
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005762:	463b      	mov	r3, r7
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6a1a      	ldr	r2, [r3, #32]
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	429a      	cmp	r2, r3
 8005770:	d90e      	bls.n	8005790 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8005772:	463b      	mov	r3, r7
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800577c:	463b      	mov	r3, r7
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6a1a      	ldr	r2, [r3, #32]
 8005782:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005786:	1ad2      	subs	r2, r2, r3
 8005788:	463b      	mov	r3, r7
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	621a      	str	r2, [r3, #32]
 800578e:	e008      	b.n	80057a2 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005790:	463b      	mov	r3, r7
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800579a:	463b      	mov	r3, r7
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2200      	movs	r2, #0
 80057a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	785b      	ldrb	r3, [r3, #1]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d164      	bne.n	8005876 <USB_EPStartXfer+0x398>
 80057ac:	1d3b      	adds	r3, r7, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	1d3b      	adds	r3, r7, #4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	61fb      	str	r3, [r7, #28]
 80057c4:	463b      	mov	r3, r7
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	00da      	lsls	r2, r3, #3
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	4413      	add	r3, r2
 80057d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d112      	bne.n	8005804 <USB_EPStartXfer+0x326>
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	e057      	b.n	80058b4 <USB_EPStartXfer+0x3d6>
 8005804:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005808:	2b3e      	cmp	r3, #62	; 0x3e
 800580a:	d817      	bhi.n	800583c <USB_EPStartXfer+0x35e>
 800580c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005810:	085b      	lsrs	r3, r3, #1
 8005812:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005816:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d004      	beq.n	800582c <USB_EPStartXfer+0x34e>
 8005822:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005826:	3301      	adds	r3, #1
 8005828:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800582c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005830:	b29b      	uxth	r3, r3
 8005832:	029b      	lsls	r3, r3, #10
 8005834:	b29a      	uxth	r2, r3
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	e03b      	b.n	80058b4 <USB_EPStartXfer+0x3d6>
 800583c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005846:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	2b00      	cmp	r3, #0
 8005850:	d104      	bne.n	800585c <USB_EPStartXfer+0x37e>
 8005852:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005856:	3b01      	subs	r3, #1
 8005858:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800585c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005860:	b29b      	uxth	r3, r3
 8005862:	029b      	lsls	r3, r3, #10
 8005864:	b29b      	uxth	r3, r3
 8005866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800586a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586e:	b29a      	uxth	r2, r3
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	e01e      	b.n	80058b4 <USB_EPStartXfer+0x3d6>
 8005876:	463b      	mov	r3, r7
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d119      	bne.n	80058b4 <USB_EPStartXfer+0x3d6>
 8005880:	1d3b      	adds	r3, r7, #4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
 8005886:	1d3b      	adds	r3, r7, #4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800588e:	b29b      	uxth	r3, r3
 8005890:	461a      	mov	r2, r3
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	4413      	add	r3, r2
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
 8005898:	463b      	mov	r3, r7
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	00da      	lsls	r2, r3, #3
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	4413      	add	r3, r2
 80058a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058a8:	623b      	str	r3, [r7, #32]
 80058aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058b4:	463b      	mov	r3, r7
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	891b      	ldrh	r3, [r3, #8]
 80058ba:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058be:	463b      	mov	r3, r7
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6959      	ldr	r1, [r3, #20]
 80058c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80058ce:	1d38      	adds	r0, r7, #4
 80058d0:	6800      	ldr	r0, [r0, #0]
 80058d2:	f001 f88e 	bl	80069f2 <USB_WritePMA>
 80058d6:	e340      	b.n	8005f5a <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058d8:	463b      	mov	r3, r7
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d164      	bne.n	80059ac <USB_EPStartXfer+0x4ce>
 80058e2:	1d3b      	adds	r3, r7, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058e8:	1d3b      	adds	r3, r7, #4
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f6:	4413      	add	r3, r2
 80058f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058fa:	463b      	mov	r3, r7
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	00da      	lsls	r2, r3, #3
 8005902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005904:	4413      	add	r3, r2
 8005906:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800590a:	64bb      	str	r3, [r7, #72]	; 0x48
 800590c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005910:	2b00      	cmp	r3, #0
 8005912:	d112      	bne.n	800593a <USB_EPStartXfer+0x45c>
 8005914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800591e:	b29a      	uxth	r2, r3
 8005920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005932:	b29a      	uxth	r2, r3
 8005934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	e057      	b.n	80059ea <USB_EPStartXfer+0x50c>
 800593a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800593e:	2b3e      	cmp	r3, #62	; 0x3e
 8005940:	d817      	bhi.n	8005972 <USB_EPStartXfer+0x494>
 8005942:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005946:	085b      	lsrs	r3, r3, #1
 8005948:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800594c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d004      	beq.n	8005962 <USB_EPStartXfer+0x484>
 8005958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800595c:	3301      	adds	r3, #1
 800595e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005966:	b29b      	uxth	r3, r3
 8005968:	029b      	lsls	r3, r3, #10
 800596a:	b29a      	uxth	r2, r3
 800596c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	e03b      	b.n	80059ea <USB_EPStartXfer+0x50c>
 8005972:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800597c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005980:	f003 031f 	and.w	r3, r3, #31
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <USB_EPStartXfer+0x4b4>
 8005988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800598c:	3b01      	subs	r3, #1
 800598e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005996:	b29b      	uxth	r3, r3
 8005998:	029b      	lsls	r3, r3, #10
 800599a:	b29b      	uxth	r3, r3
 800599c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	e01e      	b.n	80059ea <USB_EPStartXfer+0x50c>
 80059ac:	463b      	mov	r3, r7
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d119      	bne.n	80059ea <USB_EPStartXfer+0x50c>
 80059b6:	1d3b      	adds	r3, r7, #4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	657b      	str	r3, [r7, #84]	; 0x54
 80059bc:	1d3b      	adds	r3, r7, #4
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ca:	4413      	add	r3, r2
 80059cc:	657b      	str	r3, [r7, #84]	; 0x54
 80059ce:	463b      	mov	r3, r7
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	00da      	lsls	r2, r3, #3
 80059d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d8:	4413      	add	r3, r2
 80059da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059de:	653b      	str	r3, [r7, #80]	; 0x50
 80059e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059ea:	463b      	mov	r3, r7
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	891b      	ldrh	r3, [r3, #8]
 80059f0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059f4:	463b      	mov	r3, r7
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6959      	ldr	r1, [r3, #20]
 80059fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005a04:	1d38      	adds	r0, r7, #4
 8005a06:	6800      	ldr	r0, [r0, #0]
 8005a08:	f000 fff3 	bl	80069f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695a      	ldr	r2, [r3, #20]
 8005a12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a16:	441a      	add	r2, r3
 8005a18:	463b      	mov	r3, r7
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a1e:	463b      	mov	r3, r7
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6a1a      	ldr	r2, [r3, #32]
 8005a24:	463b      	mov	r3, r7
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d90e      	bls.n	8005a4c <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005a2e:	463b      	mov	r3, r7
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005a38:	463b      	mov	r3, r7
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6a1a      	ldr	r2, [r3, #32]
 8005a3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a42:	1ad2      	subs	r2, r2, r3
 8005a44:	463b      	mov	r3, r7
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	621a      	str	r2, [r3, #32]
 8005a4a:	e008      	b.n	8005a5e <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005a56:	463b      	mov	r3, r7
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a5e:	1d3b      	adds	r3, r7, #4
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	647b      	str	r3, [r7, #68]	; 0x44
 8005a64:	463b      	mov	r3, r7
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	785b      	ldrb	r3, [r3, #1]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d164      	bne.n	8005b38 <USB_EPStartXfer+0x65a>
 8005a6e:	1d3b      	adds	r3, r7, #4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a74:	1d3b      	adds	r3, r7, #4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a82:	4413      	add	r3, r2
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a86:	463b      	mov	r3, r7
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	00da      	lsls	r2, r3, #3
 8005a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a90:	4413      	add	r3, r2
 8005a92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d112      	bne.n	8005ac6 <USB_EPStartXfer+0x5e8>
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	801a      	strh	r2, [r3, #0]
 8005ac4:	e054      	b.n	8005b70 <USB_EPStartXfer+0x692>
 8005ac6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aca:	2b3e      	cmp	r3, #62	; 0x3e
 8005acc:	d817      	bhi.n	8005afe <USB_EPStartXfer+0x620>
 8005ace:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ad2:	085b      	lsrs	r3, r3, #1
 8005ad4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ad8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <USB_EPStartXfer+0x610>
 8005ae4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ae8:	3301      	adds	r3, #1
 8005aea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005aee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	029b      	lsls	r3, r3, #10
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	801a      	strh	r2, [r3, #0]
 8005afc:	e038      	b.n	8005b70 <USB_EPStartXfer+0x692>
 8005afe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b0c:	f003 031f 	and.w	r3, r3, #31
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d104      	bne.n	8005b1e <USB_EPStartXfer+0x640>
 8005b14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	029b      	lsls	r3, r3, #10
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	e01b      	b.n	8005b70 <USB_EPStartXfer+0x692>
 8005b38:	463b      	mov	r3, r7
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d116      	bne.n	8005b70 <USB_EPStartXfer+0x692>
 8005b42:	1d3b      	adds	r3, r7, #4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b50:	4413      	add	r3, r2
 8005b52:	647b      	str	r3, [r7, #68]	; 0x44
 8005b54:	463b      	mov	r3, r7
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	00da      	lsls	r2, r3, #3
 8005b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b5e:	4413      	add	r3, r2
 8005b60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b64:	643b      	str	r3, [r7, #64]	; 0x40
 8005b66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b70:	463b      	mov	r3, r7
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	895b      	ldrh	r3, [r3, #10]
 8005b76:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6959      	ldr	r1, [r3, #20]
 8005b80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005b8a:	1d38      	adds	r0, r7, #4
 8005b8c:	6800      	ldr	r0, [r0, #0]
 8005b8e:	f000 ff30 	bl	80069f2 <USB_WritePMA>
 8005b92:	e1e2      	b.n	8005f5a <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005b94:	463b      	mov	r3, r7
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005b9e:	1d3b      	adds	r3, r7, #4
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005bbc:	1d3b      	adds	r3, r7, #4
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	463b      	mov	r3, r7
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	441a      	add	r2, r3
 8005bca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005be2:	1d3b      	adds	r3, r7, #4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	663b      	str	r3, [r7, #96]	; 0x60
 8005be8:	1d3b      	adds	r3, r7, #4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf6:	4413      	add	r3, r2
 8005bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8005bfa:	463b      	mov	r3, r7
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	00da      	lsls	r2, r3, #3
 8005c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c04:	4413      	add	r3, r2
 8005c06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c16:	463b      	mov	r3, r7
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	891b      	ldrh	r3, [r3, #8]
 8005c1c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c20:	463b      	mov	r3, r7
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6959      	ldr	r1, [r3, #20]
 8005c26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005c30:	1d38      	adds	r0, r7, #4
 8005c32:	6800      	ldr	r0, [r0, #0]
 8005c34:	f000 fedd 	bl	80069f2 <USB_WritePMA>
 8005c38:	e18f      	b.n	8005f5a <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c3a:	1d3b      	adds	r3, r7, #4
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 808f 	beq.w	8005d74 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c56:	1d3b      	adds	r3, r7, #4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d164      	bne.n	8005d30 <USB_EPStartXfer+0x852>
 8005c66:	1d3b      	adds	r3, r7, #4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c6c:	1d3b      	adds	r3, r7, #4
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	461a      	mov	r2, r3
 8005c78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c7a:	4413      	add	r3, r2
 8005c7c:	673b      	str	r3, [r7, #112]	; 0x70
 8005c7e:	463b      	mov	r3, r7
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	00da      	lsls	r2, r3, #3
 8005c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c88:	4413      	add	r3, r2
 8005c8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d112      	bne.n	8005cbe <USB_EPStartXfer+0x7e0>
 8005c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cba:	801a      	strh	r2, [r3, #0]
 8005cbc:	e054      	b.n	8005d68 <USB_EPStartXfer+0x88a>
 8005cbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cc2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cc4:	d817      	bhi.n	8005cf6 <USB_EPStartXfer+0x818>
 8005cc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005cd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d004      	beq.n	8005ce6 <USB_EPStartXfer+0x808>
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	029b      	lsls	r3, r3, #10
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf2:	801a      	strh	r2, [r3, #0]
 8005cf4:	e038      	b.n	8005d68 <USB_EPStartXfer+0x88a>
 8005cf6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d04:	f003 031f 	and.w	r3, r3, #31
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d104      	bne.n	8005d16 <USB_EPStartXfer+0x838>
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d10:	3b01      	subs	r3, #1
 8005d12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	029b      	lsls	r3, r3, #10
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	e01b      	b.n	8005d68 <USB_EPStartXfer+0x88a>
 8005d30:	463b      	mov	r3, r7
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d116      	bne.n	8005d68 <USB_EPStartXfer+0x88a>
 8005d3a:	1d3b      	adds	r3, r7, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d48:	4413      	add	r3, r2
 8005d4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	00da      	lsls	r2, r3, #3
 8005d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d56:	4413      	add	r3, r2
 8005d58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d5c:	677b      	str	r3, [r7, #116]	; 0x74
 8005d5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005d68:	463b      	mov	r3, r7
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	895b      	ldrh	r3, [r3, #10]
 8005d6e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005d72:	e097      	b.n	8005ea4 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d74:	463b      	mov	r3, r7
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d168      	bne.n	8005e50 <USB_EPStartXfer+0x972>
 8005d7e:	1d3b      	adds	r3, r7, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d86:	1d3b      	adds	r3, r7, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d96:	4413      	add	r3, r2
 8005d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	00da      	lsls	r2, r3, #3
 8005da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005da8:	4413      	add	r3, r2
 8005daa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005dae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005db0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d112      	bne.n	8005dde <USB_EPStartXfer+0x900>
 8005db8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dda:	801a      	strh	r2, [r3, #0]
 8005ddc:	e05d      	b.n	8005e9a <USB_EPStartXfer+0x9bc>
 8005dde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005de2:	2b3e      	cmp	r3, #62	; 0x3e
 8005de4:	d817      	bhi.n	8005e16 <USB_EPStartXfer+0x938>
 8005de6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005df0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d004      	beq.n	8005e06 <USB_EPStartXfer+0x928>
 8005dfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e00:	3301      	adds	r3, #1
 8005e02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	029b      	lsls	r3, r3, #10
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e041      	b.n	8005e9a <USB_EPStartXfer+0x9bc>
 8005e16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e24:	f003 031f 	and.w	r3, r3, #31
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <USB_EPStartXfer+0x958>
 8005e2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e30:	3b01      	subs	r3, #1
 8005e32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	029b      	lsls	r3, r3, #10
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	e024      	b.n	8005e9a <USB_EPStartXfer+0x9bc>
 8005e50:	463b      	mov	r3, r7
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d11f      	bne.n	8005e9a <USB_EPStartXfer+0x9bc>
 8005e5a:	1d3b      	adds	r3, r7, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e62:	1d3b      	adds	r3, r7, #4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e72:	4413      	add	r3, r2
 8005e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e78:	463b      	mov	r3, r7
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	00da      	lsls	r2, r3, #3
 8005e80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	891b      	ldrh	r3, [r3, #8]
 8005ea0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ea4:	463b      	mov	r3, r7
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6959      	ldr	r1, [r3, #20]
 8005eaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005eb4:	1d38      	adds	r0, r7, #4
 8005eb6:	6800      	ldr	r0, [r0, #0]
 8005eb8:	f000 fd9b 	bl	80069f2 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d122      	bne.n	8005f0c <USB_EPStartXfer+0xa2e>
 8005ec6:	1d3b      	adds	r3, r7, #4
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	463b      	mov	r3, r7
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005ee4:	1d3b      	adds	r3, r7, #4
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	463b      	mov	r3, r7
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	441a      	add	r2, r3
 8005ef2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	8013      	strh	r3, [r2, #0]
 8005f0a:	e026      	b.n	8005f5a <USB_EPStartXfer+0xa7c>
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d121      	bne.n	8005f5a <USB_EPStartXfer+0xa7c>
 8005f16:	1d3b      	adds	r3, r7, #4
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f30:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005f34:	1d3b      	adds	r3, r7, #4
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	463b      	mov	r3, r7
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	441a      	add	r2, r3
 8005f42:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f5a:	1d3b      	adds	r3, r7, #4
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	463b      	mov	r3, r7
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f107 020e 	add.w	r2, r7, #14
 8005f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f78:	8013      	strh	r3, [r2, #0]
 8005f7a:	f107 030e 	add.w	r3, r7, #14
 8005f7e:	f107 020e 	add.w	r2, r7, #14
 8005f82:	8812      	ldrh	r2, [r2, #0]
 8005f84:	f082 0210 	eor.w	r2, r2, #16
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	f107 030e 	add.w	r3, r7, #14
 8005f8e:	f107 020e 	add.w	r2, r7, #14
 8005f92:	8812      	ldrh	r2, [r2, #0]
 8005f94:	f082 0220 	eor.w	r2, r2, #32
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	1d3b      	adds	r3, r7, #4
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	441a      	add	r2, r3
 8005fa8:	f107 030e 	add.w	r3, r7, #14
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	8013      	strh	r3, [r2, #0]
 8005fc2:	e3b5      	b.n	8006730 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	7b1b      	ldrb	r3, [r3, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f040 8090 	bne.w	80060f0 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d90e      	bls.n	8005ffe <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8005fea:	463b      	mov	r3, r7
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699a      	ldr	r2, [r3, #24]
 8005ff0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ff4:	1ad2      	subs	r2, r2, r3
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	619a      	str	r2, [r3, #24]
 8005ffc:	e008      	b.n	8006010 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8005ffe:	463b      	mov	r3, r7
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006008:	463b      	mov	r3, r7
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2200      	movs	r2, #0
 800600e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006010:	1d3b      	adds	r3, r7, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006018:	1d3b      	adds	r3, r7, #4
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006020:	b29b      	uxth	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006028:	4413      	add	r3, r2
 800602a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800602e:	463b      	mov	r3, r7
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	00da      	lsls	r2, r3, #3
 8006036:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800603a:	4413      	add	r3, r2
 800603c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006040:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006044:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006048:	2b00      	cmp	r3, #0
 800604a:	d116      	bne.n	800607a <USB_EPStartXfer+0xb9c>
 800604c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006058:	b29a      	uxth	r2, r3
 800605a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006070:	b29a      	uxth	r2, r3
 8006072:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006076:	801a      	strh	r2, [r3, #0]
 8006078:	e32c      	b.n	80066d4 <USB_EPStartXfer+0x11f6>
 800607a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800607e:	2b3e      	cmp	r3, #62	; 0x3e
 8006080:	d818      	bhi.n	80060b4 <USB_EPStartXfer+0xbd6>
 8006082:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800608c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d004      	beq.n	80060a2 <USB_EPStartXfer+0xbc4>
 8006098:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800609c:	3301      	adds	r3, #1
 800609e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	029b      	lsls	r3, r3, #10
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	e30f      	b.n	80066d4 <USB_EPStartXfer+0x11f6>
 80060b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <USB_EPStartXfer+0xbf6>
 80060ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060ce:	3b01      	subs	r3, #1
 80060d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060d8:	b29b      	uxth	r3, r3
 80060da:	029b      	lsls	r3, r3, #10
 80060dc:	b29b      	uxth	r3, r3
 80060de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060ec:	801a      	strh	r2, [r3, #0]
 80060ee:	e2f1      	b.n	80066d4 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80060f0:	463b      	mov	r3, r7
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	78db      	ldrb	r3, [r3, #3]
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	f040 818f 	bne.w	800641a <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060fc:	463b      	mov	r3, r7
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d175      	bne.n	80061f2 <USB_EPStartXfer+0xd14>
 8006106:	1d3b      	adds	r3, r7, #4
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800610e:	1d3b      	adds	r3, r7, #4
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006116:	b29b      	uxth	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800611e:	4413      	add	r3, r2
 8006120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006124:	463b      	mov	r3, r7
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	00da      	lsls	r2, r3, #3
 800612c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006130:	4413      	add	r3, r2
 8006132:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800613a:	463b      	mov	r3, r7
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d116      	bne.n	8006172 <USB_EPStartXfer+0xc94>
 8006144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29b      	uxth	r3, r3
 800614c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006150:	b29a      	uxth	r2, r3
 8006152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006156:	801a      	strh	r2, [r3, #0]
 8006158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	b29b      	uxth	r3, r3
 8006160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006168:	b29a      	uxth	r2, r3
 800616a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800616e:	801a      	strh	r2, [r3, #0]
 8006170:	e065      	b.n	800623e <USB_EPStartXfer+0xd60>
 8006172:	463b      	mov	r3, r7
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b3e      	cmp	r3, #62	; 0x3e
 800617a:	d81a      	bhi.n	80061b2 <USB_EPStartXfer+0xcd4>
 800617c:	463b      	mov	r3, r7
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006188:	463b      	mov	r3, r7
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d004      	beq.n	80061a0 <USB_EPStartXfer+0xcc2>
 8006196:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800619a:	3301      	adds	r3, #1
 800619c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	029b      	lsls	r3, r3, #10
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061ae:	801a      	strh	r2, [r3, #0]
 80061b0:	e045      	b.n	800623e <USB_EPStartXfer+0xd60>
 80061b2:	463b      	mov	r3, r7
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061be:	463b      	mov	r3, r7
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d104      	bne.n	80061d6 <USB_EPStartXfer+0xcf8>
 80061cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061d0:	3b01      	subs	r3, #1
 80061d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061da:	b29b      	uxth	r3, r3
 80061dc:	029b      	lsls	r3, r3, #10
 80061de:	b29b      	uxth	r3, r3
 80061e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061ee:	801a      	strh	r2, [r3, #0]
 80061f0:	e025      	b.n	800623e <USB_EPStartXfer+0xd60>
 80061f2:	463b      	mov	r3, r7
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d120      	bne.n	800623e <USB_EPStartXfer+0xd60>
 80061fc:	1d3b      	adds	r3, r7, #4
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006204:	1d3b      	adds	r3, r7, #4
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620c:	b29b      	uxth	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006214:	4413      	add	r3, r2
 8006216:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800621a:	463b      	mov	r3, r7
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	00da      	lsls	r2, r3, #3
 8006222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006226:	4413      	add	r3, r2
 8006228:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800622c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006230:	463b      	mov	r3, r7
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	b29a      	uxth	r2, r3
 8006238:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	1d3b      	adds	r3, r7, #4
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006246:	463b      	mov	r3, r7
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	785b      	ldrb	r3, [r3, #1]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d175      	bne.n	800633c <USB_EPStartXfer+0xe5e>
 8006250:	1d3b      	adds	r3, r7, #4
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006258:	1d3b      	adds	r3, r7, #4
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006260:	b29b      	uxth	r3, r3
 8006262:	461a      	mov	r2, r3
 8006264:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006268:	4413      	add	r3, r2
 800626a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800626e:	463b      	mov	r3, r7
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	00da      	lsls	r2, r3, #3
 8006276:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800627a:	4413      	add	r3, r2
 800627c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006284:	463b      	mov	r3, r7
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d116      	bne.n	80062bc <USB_EPStartXfer+0xdde>
 800628e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800629a:	b29a      	uxth	r2, r3
 800629c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062a0:	801a      	strh	r2, [r3, #0]
 80062a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	e061      	b.n	8006380 <USB_EPStartXfer+0xea2>
 80062bc:	463b      	mov	r3, r7
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b3e      	cmp	r3, #62	; 0x3e
 80062c4:	d81a      	bhi.n	80062fc <USB_EPStartXfer+0xe1e>
 80062c6:	463b      	mov	r3, r7
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	085b      	lsrs	r3, r3, #1
 80062ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d004      	beq.n	80062ea <USB_EPStartXfer+0xe0c>
 80062e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e4:	3301      	adds	r3, #1
 80062e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	029b      	lsls	r3, r3, #10
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e041      	b.n	8006380 <USB_EPStartXfer+0xea2>
 80062fc:	463b      	mov	r3, r7
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006308:	463b      	mov	r3, r7
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	2b00      	cmp	r3, #0
 8006314:	d104      	bne.n	8006320 <USB_EPStartXfer+0xe42>
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631a:	3b01      	subs	r3, #1
 800631c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006324:	b29b      	uxth	r3, r3
 8006326:	029b      	lsls	r3, r3, #10
 8006328:	b29b      	uxth	r3, r3
 800632a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006332:	b29a      	uxth	r2, r3
 8006334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006338:	801a      	strh	r2, [r3, #0]
 800633a:	e021      	b.n	8006380 <USB_EPStartXfer+0xea2>
 800633c:	463b      	mov	r3, r7
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	785b      	ldrb	r3, [r3, #1]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d11c      	bne.n	8006380 <USB_EPStartXfer+0xea2>
 8006346:	1d3b      	adds	r3, r7, #4
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634e:	b29b      	uxth	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006356:	4413      	add	r3, r2
 8006358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800635c:	463b      	mov	r3, r7
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	00da      	lsls	r2, r3, #3
 8006364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006368:	4413      	add	r3, r2
 800636a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800636e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006372:	463b      	mov	r3, r7
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	b29a      	uxth	r2, r3
 800637a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800637e:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8006380:	463b      	mov	r3, r7
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 81a4 	beq.w	80066d4 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800638c:	1d3b      	adds	r3, r7, #4
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	463b      	mov	r3, r7
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063a0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80063a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <USB_EPStartXfer+0xeda>
 80063ac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80063b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10d      	bne.n	80063d4 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063b8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80063bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f040 8187 	bne.w	80066d4 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063c6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f040 8180 	bne.w	80066d4 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80063d4:	1d3b      	adds	r3, r7, #4
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	463b      	mov	r3, r7
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80063f2:	1d3b      	adds	r3, r7, #4
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	463b      	mov	r3, r7
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	441a      	add	r2, r3
 8006400:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006410:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006414:	b29b      	uxth	r3, r3
 8006416:	8013      	strh	r3, [r2, #0]
 8006418:	e15c      	b.n	80066d4 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800641a:	463b      	mov	r3, r7
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	78db      	ldrb	r3, [r3, #3]
 8006420:	2b01      	cmp	r3, #1
 8006422:	f040 8155 	bne.w	80066d0 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8006426:	463b      	mov	r3, r7
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	699a      	ldr	r2, [r3, #24]
 800642c:	463b      	mov	r3, r7
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	429a      	cmp	r2, r3
 8006434:	d90e      	bls.n	8006454 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8006436:	463b      	mov	r3, r7
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8006440:	463b      	mov	r3, r7
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800644a:	1ad2      	subs	r2, r2, r3
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	619a      	str	r2, [r3, #24]
 8006452:	e008      	b.n	8006466 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8006454:	463b      	mov	r3, r7
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800645e:	463b      	mov	r3, r7
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2200      	movs	r2, #0
 8006464:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006466:	463b      	mov	r3, r7
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d16f      	bne.n	8006550 <USB_EPStartXfer+0x1072>
 8006470:	1d3b      	adds	r3, r7, #4
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006478:	1d3b      	adds	r3, r7, #4
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006480:	b29b      	uxth	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006488:	4413      	add	r3, r2
 800648a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800648e:	463b      	mov	r3, r7
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	00da      	lsls	r2, r3, #3
 8006496:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800649a:	4413      	add	r3, r2
 800649c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d116      	bne.n	80064da <USB_EPStartXfer+0xffc>
 80064ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064d6:	801a      	strh	r2, [r3, #0]
 80064d8:	e05f      	b.n	800659a <USB_EPStartXfer+0x10bc>
 80064da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064de:	2b3e      	cmp	r3, #62	; 0x3e
 80064e0:	d818      	bhi.n	8006514 <USB_EPStartXfer+0x1036>
 80064e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d004      	beq.n	8006502 <USB_EPStartXfer+0x1024>
 80064f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064fc:	3301      	adds	r3, #1
 80064fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006506:	b29b      	uxth	r3, r3
 8006508:	029b      	lsls	r3, r3, #10
 800650a:	b29a      	uxth	r2, r3
 800650c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006510:	801a      	strh	r2, [r3, #0]
 8006512:	e042      	b.n	800659a <USB_EPStartXfer+0x10bc>
 8006514:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006518:	095b      	lsrs	r3, r3, #5
 800651a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800651e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	2b00      	cmp	r3, #0
 8006528:	d104      	bne.n	8006534 <USB_EPStartXfer+0x1056>
 800652a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652e:	3b01      	subs	r3, #1
 8006530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006538:	b29b      	uxth	r3, r3
 800653a:	029b      	lsls	r3, r3, #10
 800653c:	b29b      	uxth	r3, r3
 800653e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006546:	b29a      	uxth	r2, r3
 8006548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	e024      	b.n	800659a <USB_EPStartXfer+0x10bc>
 8006550:	463b      	mov	r3, r7
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	785b      	ldrb	r3, [r3, #1]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d11f      	bne.n	800659a <USB_EPStartXfer+0x10bc>
 800655a:	1d3b      	adds	r3, r7, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006562:	1d3b      	adds	r3, r7, #4
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656a:	b29b      	uxth	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006572:	4413      	add	r3, r2
 8006574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006578:	463b      	mov	r3, r7
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	00da      	lsls	r2, r3, #3
 8006580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006584:	4413      	add	r3, r2
 8006586:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800658a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800658e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006592:	b29a      	uxth	r2, r3
 8006594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006598:	801a      	strh	r2, [r3, #0]
 800659a:	1d3b      	adds	r3, r7, #4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065a2:	463b      	mov	r3, r7
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	785b      	ldrb	r3, [r3, #1]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d16f      	bne.n	800668c <USB_EPStartXfer+0x11ae>
 80065ac:	1d3b      	adds	r3, r7, #4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065b4:	1d3b      	adds	r3, r7, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065bc:	b29b      	uxth	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065c4:	4413      	add	r3, r2
 80065c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065ca:	463b      	mov	r3, r7
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	00da      	lsls	r2, r3, #3
 80065d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065d6:	4413      	add	r3, r2
 80065d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80065e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d116      	bne.n	8006616 <USB_EPStartXfer+0x1138>
 80065e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660c:	b29a      	uxth	r2, r3
 800660e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006612:	801a      	strh	r2, [r3, #0]
 8006614:	e05e      	b.n	80066d4 <USB_EPStartXfer+0x11f6>
 8006616:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800661a:	2b3e      	cmp	r3, #62	; 0x3e
 800661c:	d818      	bhi.n	8006650 <USB_EPStartXfer+0x1172>
 800661e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006622:	085b      	lsrs	r3, r3, #1
 8006624:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006628:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d004      	beq.n	800663e <USB_EPStartXfer+0x1160>
 8006634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006638:	3301      	adds	r3, #1
 800663a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800663e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006642:	b29b      	uxth	r3, r3
 8006644:	029b      	lsls	r3, r3, #10
 8006646:	b29a      	uxth	r2, r3
 8006648:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	e041      	b.n	80066d4 <USB_EPStartXfer+0x11f6>
 8006650:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006654:	095b      	lsrs	r3, r3, #5
 8006656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800665a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800665e:	f003 031f 	and.w	r3, r3, #31
 8006662:	2b00      	cmp	r3, #0
 8006664:	d104      	bne.n	8006670 <USB_EPStartXfer+0x1192>
 8006666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800666a:	3b01      	subs	r3, #1
 800666c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006674:	b29b      	uxth	r3, r3
 8006676:	029b      	lsls	r3, r3, #10
 8006678:	b29b      	uxth	r3, r3
 800667a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006682:	b29a      	uxth	r2, r3
 8006684:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	e023      	b.n	80066d4 <USB_EPStartXfer+0x11f6>
 800668c:	463b      	mov	r3, r7
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d11e      	bne.n	80066d4 <USB_EPStartXfer+0x11f6>
 8006696:	1d3b      	adds	r3, r7, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669e:	b29b      	uxth	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066a6:	4413      	add	r3, r2
 80066a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066ac:	463b      	mov	r3, r7
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	00da      	lsls	r2, r3, #3
 80066b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066cc:	801a      	strh	r2, [r3, #0]
 80066ce:	e001      	b.n	80066d4 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e02e      	b.n	8006732 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066d4:	1d3b      	adds	r3, r7, #4
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	463b      	mov	r3, r7
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80066f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80066f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80066fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006702:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006706:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800670a:	1d3b      	adds	r3, r7, #4
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	463b      	mov	r3, r7
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	441a      	add	r2, r3
 8006718:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800671c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800672c:	b29b      	uxth	r3, r3
 800672e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d020      	beq.n	8006790 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006764:	81bb      	strh	r3, [r7, #12]
 8006766:	89bb      	ldrh	r3, [r7, #12]
 8006768:	f083 0310 	eor.w	r3, r3, #16
 800676c:	81bb      	strh	r3, [r7, #12]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	441a      	add	r2, r3
 8006778:	89bb      	ldrh	r3, [r7, #12]
 800677a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800677e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678a:	b29b      	uxth	r3, r3
 800678c:	8013      	strh	r3, [r2, #0]
 800678e:	e01f      	b.n	80067d0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	81fb      	strh	r3, [r7, #14]
 80067a8:	89fb      	ldrh	r3, [r7, #14]
 80067aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067ae:	81fb      	strh	r3, [r7, #14]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	441a      	add	r2, r3
 80067ba:	89fb      	ldrh	r3, [r7, #14]
 80067bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067de:	b480      	push	{r7}
 80067e0:	b087      	sub	sp, #28
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	7b1b      	ldrb	r3, [r3, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f040 809d 	bne.w	800692c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d04c      	beq.n	8006894 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	823b      	strh	r3, [r7, #16]
 8006808:	8a3b      	ldrh	r3, [r7, #16]
 800680a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	d01b      	beq.n	800684a <USB_EPClearStall+0x6c>
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006828:	81fb      	strh	r3, [r7, #14]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	441a      	add	r2, r3
 8006834:	89fb      	ldrh	r3, [r7, #14]
 8006836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006842:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006846:	b29b      	uxth	r3, r3
 8006848:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	78db      	ldrb	r3, [r3, #3]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d06c      	beq.n	800692c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006868:	81bb      	strh	r3, [r7, #12]
 800686a:	89bb      	ldrh	r3, [r7, #12]
 800686c:	f083 0320 	eor.w	r3, r3, #32
 8006870:	81bb      	strh	r3, [r7, #12]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	441a      	add	r2, r3
 800687c:	89bb      	ldrh	r3, [r7, #12]
 800687e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688e:	b29b      	uxth	r3, r3
 8006890:	8013      	strh	r3, [r2, #0]
 8006892:	e04b      	b.n	800692c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	82fb      	strh	r3, [r7, #22]
 80068a2:	8afb      	ldrh	r3, [r7, #22]
 80068a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01b      	beq.n	80068e4 <USB_EPClearStall+0x106>
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c2:	82bb      	strh	r3, [r7, #20]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	441a      	add	r2, r3
 80068ce:	8abb      	ldrh	r3, [r7, #20]
 80068d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fa:	827b      	strh	r3, [r7, #18]
 80068fc:	8a7b      	ldrh	r3, [r7, #18]
 80068fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006902:	827b      	strh	r3, [r7, #18]
 8006904:	8a7b      	ldrh	r3, [r7, #18]
 8006906:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800690a:	827b      	strh	r3, [r7, #18]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	8a7b      	ldrh	r3, [r7, #18]
 8006918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006928:	b29b      	uxth	r3, r3
 800692a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d103      	bne.n	8006954 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2280      	movs	r2, #128	; 0x80
 8006950:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006970:	b29b      	uxth	r3, r3
 8006972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800697a:	b29a      	uxth	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800699e:	b29b      	uxth	r3, r3
 80069a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b085      	sub	sp, #20
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80069cc:	68fb      	ldr	r3, [r7, #12]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b08d      	sub	sp, #52	; 0x34
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	4611      	mov	r1, r2
 80069fe:	461a      	mov	r2, r3
 8006a00:	460b      	mov	r3, r1
 8006a02:	80fb      	strh	r3, [r7, #6]
 8006a04:	4613      	mov	r3, r2
 8006a06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a08:	88bb      	ldrh	r3, [r7, #4]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	085b      	lsrs	r3, r3, #1
 8006a0e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a18:	88fa      	ldrh	r2, [r7, #6]
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a28:	e01b      	b.n	8006a62 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	3301      	adds	r3, #1
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	461a      	mov	r2, r3
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	3302      	adds	r3, #2
 8006a54:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	3301      	adds	r3, #1
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e0      	bne.n	8006a2a <USB_WritePMA+0x38>
  }
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	3734      	adds	r7, #52	; 0x34
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b08b      	sub	sp, #44	; 0x2c
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	4611      	mov	r1, r2
 8006a82:	461a      	mov	r2, r3
 8006a84:	460b      	mov	r3, r1
 8006a86:	80fb      	strh	r3, [r7, #6]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006a8c:	88bb      	ldrh	r3, [r7, #4]
 8006a8e:	085b      	lsrs	r3, r3, #1
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a9c:	88fa      	ldrh	r2, [r7, #6]
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8006aac:	e018      	b.n	8006ae0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	3302      	adds	r3, #2
 8006aba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	0a1b      	lsrs	r3, r3, #8
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	3b01      	subs	r3, #1
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e3      	bne.n	8006aae <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006ae6:	88bb      	ldrh	r3, [r7, #4]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	701a      	strb	r2, [r3, #0]
  }
}
 8006b02:	bf00      	nop
 8006b04:	372c      	adds	r7, #44	; 0x2c
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	460b      	mov	r3, r1
 8006b18:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b1a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b1e:	f002 f9b3 	bl	8008e88 <malloc>
 8006b22:	4603      	mov	r3, r0
 8006b24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006b34:	2302      	movs	r3, #2
 8006b36:	e066      	b.n	8006c06 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	7c1b      	ldrb	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d119      	bne.n	8006b7c <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	2181      	movs	r1, #129	; 0x81
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 ff6b 	bl	8008a2c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b60:	2202      	movs	r2, #2
 8006b62:	2101      	movs	r1, #1
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 ff61 	bl	8008a2c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2210      	movs	r2, #16
 8006b76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006b7a:	e016      	b.n	8006baa <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b7c:	2340      	movs	r3, #64	; 0x40
 8006b7e:	2202      	movs	r2, #2
 8006b80:	2181      	movs	r1, #129	; 0x81
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 ff52 	bl	8008a2c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b8e:	2340      	movs	r3, #64	; 0x40
 8006b90:	2202      	movs	r2, #2
 8006b92:	2101      	movs	r1, #1
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 ff49 	bl	8008a2c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2210      	movs	r2, #16
 8006ba6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006baa:	2308      	movs	r3, #8
 8006bac:	2203      	movs	r2, #3
 8006bae:	2182      	movs	r1, #130	; 0x82
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 ff3b 	bl	8008a2c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	7c1b      	ldrb	r3, [r3, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d109      	bne.n	8006bf4 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bea:	2101      	movs	r1, #1
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f002 f899 	bl	8008d24 <USBD_LL_PrepareReceive>
 8006bf2:	e007      	b.n	8006c04 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bfa:	2340      	movs	r3, #64	; 0x40
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f002 f890 	bl	8008d24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c1a:	2181      	movs	r1, #129	; 0x81
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 ff43 	bl	8008aa8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c28:	2101      	movs	r1, #1
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 ff3c 	bl	8008aa8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c38:	2182      	movs	r1, #130	; 0x82
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 ff34 	bl	8008aa8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00e      	beq.n	8006c78 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f002 f914 	bl	8008e98 <free>
    pdev->pClassData = NULL;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c94:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d03a      	beq.n	8006d24 <USBD_CDC_Setup+0xa0>
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	f040 8097 	bne.w	8006de2 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	88db      	ldrh	r3, [r3, #6]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d029      	beq.n	8006d10 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	b25b      	sxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	da11      	bge.n	8006cea <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006cd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	88d2      	ldrh	r2, [r2, #6]
 8006cd8:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006cda:	6939      	ldr	r1, [r7, #16]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	88db      	ldrh	r3, [r3, #6]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fa9c 	bl	8008220 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006ce8:	e082      	b.n	8006df0 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	785a      	ldrb	r2, [r3, #1]
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	88db      	ldrh	r3, [r3, #6]
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006d00:	6939      	ldr	r1, [r7, #16]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	88db      	ldrh	r3, [r3, #6]
 8006d06:	461a      	mov	r2, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fab5 	bl	8008278 <USBD_CtlPrepareRx>
      break;
 8006d0e:	e06f      	b.n	8006df0 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	7850      	ldrb	r0, [r2, #1]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	4798      	blx	r3
      break;
 8006d22:	e065      	b.n	8006df0 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	785b      	ldrb	r3, [r3, #1]
 8006d28:	2b0b      	cmp	r3, #11
 8006d2a:	d84f      	bhi.n	8006dcc <USBD_CDC_Setup+0x148>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <USBD_CDC_Setup+0xb0>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d65 	.word	0x08006d65
 8006d38:	08006ddb 	.word	0x08006ddb
 8006d3c:	08006dcd 	.word	0x08006dcd
 8006d40:	08006dcd 	.word	0x08006dcd
 8006d44:	08006dcd 	.word	0x08006dcd
 8006d48:	08006dcd 	.word	0x08006dcd
 8006d4c:	08006dcd 	.word	0x08006dcd
 8006d50:	08006dcd 	.word	0x08006dcd
 8006d54:	08006dcd 	.word	0x08006dcd
 8006d58:	08006dcd 	.word	0x08006dcd
 8006d5c:	08006d8d 	.word	0x08006d8d
 8006d60:	08006db5 	.word	0x08006db5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d107      	bne.n	8006d7e <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d6e:	f107 030c 	add.w	r3, r7, #12
 8006d72:	2202      	movs	r2, #2
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 fa52 	bl	8008220 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d7c:	e030      	b.n	8006de0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 f9dc 	bl	800813e <USBD_CtlError>
            ret = USBD_FAIL;
 8006d86:	2303      	movs	r3, #3
 8006d88:	75fb      	strb	r3, [r7, #23]
          break;
 8006d8a:	e029      	b.n	8006de0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d107      	bne.n	8006da6 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d96:	f107 030f 	add.w	r3, r7, #15
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 fa3e 	bl	8008220 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006da4:	e01c      	b.n	8006de0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 f9c8 	bl	800813e <USBD_CtlError>
            ret = USBD_FAIL;
 8006dae:	2303      	movs	r3, #3
 8006db0:	75fb      	strb	r3, [r7, #23]
          break;
 8006db2:	e015      	b.n	8006de0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d00f      	beq.n	8006dde <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 f9bc 	bl	800813e <USBD_CtlError>
            ret = USBD_FAIL;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006dca:	e008      	b.n	8006dde <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 f9b5 	bl	800813e <USBD_CtlError>
          ret = USBD_FAIL;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	75fb      	strb	r3, [r7, #23]
          break;
 8006dd8:	e002      	b.n	8006de0 <USBD_CDC_Setup+0x15c>
          break;
 8006dda:	bf00      	nop
 8006ddc:	e008      	b.n	8006df0 <USBD_CDC_Setup+0x16c>
          break;
 8006dde:	bf00      	nop
      }
      break;
 8006de0:	e006      	b.n	8006df0 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 f9aa 	bl	800813e <USBD_CtlError>
      ret = USBD_FAIL;
 8006dea:	2303      	movs	r3, #3
 8006dec:	75fb      	strb	r3, [r7, #23]
      break;
 8006dee:	bf00      	nop
  }

  return (uint8_t)ret;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop

08006dfc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e04f      	b.n	8006ebe <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006e26:	78fa      	ldrb	r2, [r7, #3]
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	440b      	add	r3, r1
 8006e34:	3318      	adds	r3, #24
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d029      	beq.n	8006e90 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	3318      	adds	r3, #24
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	78f9      	ldrb	r1, [r7, #3]
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	460b      	mov	r3, r1
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	4403      	add	r3, r0
 8006e5c:	3338      	adds	r3, #56	; 0x38
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e64:	fb03 f301 	mul.w	r3, r3, r1
 8006e68:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d110      	bne.n	8006e90 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006e6e:	78fa      	ldrb	r2, [r7, #3]
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	4613      	mov	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	440b      	add	r3, r1
 8006e7c:	3318      	adds	r3, #24
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e82:	78f9      	ldrb	r1, [r7, #3]
 8006e84:	2300      	movs	r3, #0
 8006e86:	2200      	movs	r2, #0
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 ff13 	bl	8008cb4 <USBD_LL_Transmit>
 8006e8e:	e015      	b.n	8006ebc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006eb8:	78fa      	ldrb	r2, [r7, #3]
 8006eba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ed8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e015      	b.n	8006f14 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ee8:	78fb      	ldrb	r3, [r7, #3]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 ff51 	bl	8008d94 <USBD_LL_GetRxDataSize>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f0e:	4611      	mov	r1, r2
 8006f10:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f2a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d015      	beq.n	8006f62 <USBD_CDC_EP0_RxReady+0x46>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f3c:	2bff      	cmp	r3, #255	; 0xff
 8006f3e:	d010      	beq.n	8006f62 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006f4e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f56:	b292      	uxth	r2, r2
 8006f58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	22ff      	movs	r2, #255	; 0xff
 8006f5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2243      	movs	r2, #67	; 0x43
 8006f78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006f7a:	4b03      	ldr	r3, [pc, #12]	; (8006f88 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	2000009c 	.word	0x2000009c

08006f8c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2243      	movs	r2, #67	; 0x43
 8006f98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006f9a:	4b03      	ldr	r3, [pc, #12]	; (8006fa8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	20000058 	.word	0x20000058

08006fac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2243      	movs	r2, #67	; 0x43
 8006fb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006fba:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	200000e0 	.word	0x200000e0

08006fcc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	220a      	movs	r2, #10
 8006fd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006fda:	4b03      	ldr	r3, [pc, #12]	; (8006fe8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	20000014 	.word	0x20000014

08006fec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e004      	b.n	800700a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007016:	b480      	push	{r7}
 8007018:	b087      	sub	sp, #28
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007028:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007058:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800707e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007080:	2301      	movs	r3, #1
 8007082:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800708e:	2303      	movs	r3, #3
 8007090:	e01a      	b.n	80070c8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007098:	2b00      	cmp	r3, #0
 800709a:	d114      	bne.n	80070c6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2201      	movs	r2, #1
 80070a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80070ba:	2181      	movs	r1, #129	; 0x81
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 fdf9 	bl	8008cb4 <USBD_LL_Transmit>

    ret = USBD_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e016      	b.n	800711c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	7c1b      	ldrb	r3, [r3, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007100:	2101      	movs	r1, #1
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 fe0e 	bl	8008d24 <USBD_LL_PrepareReceive>
 8007108:	e007      	b.n	800711a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007110:	2340      	movs	r3, #64	; 0x40
 8007112:	2101      	movs	r1, #1
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 fe05 	bl	8008d24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	4613      	mov	r3, r2
 8007130:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007138:	2303      	movs	r3, #3
 800713a:	e01f      	b.n	800717c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	79fa      	ldrb	r2, [r7, #7]
 800716e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f001 fbc7 	bl	8008904 <USBD_LL_Init>
 8007176:	4603      	mov	r3, r0
 8007178:	75fb      	strb	r3, [r7, #23]

  return ret;
 800717a:	7dfb      	ldrb	r3, [r7, #23]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	e016      	b.n	80071ca <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	f107 020e 	add.w	r2, r7, #14
 80071bc:	4610      	mov	r0, r2
 80071be:	4798      	blx	r3
 80071c0:	4602      	mov	r2, r0
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 fbf4 	bl	80089c8 <USBD_LL_Start>
 80071e0:	4603      	mov	r3, r0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800720c:	2303      	movs	r3, #3
 800720e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d009      	beq.n	800722e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	78fa      	ldrb	r2, [r7, #3]
 8007224:	4611      	mov	r1, r2
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
 800722a:	4603      	mov	r3, r0
 800722c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800724a:	2b00      	cmp	r3, #0
 800724c:	d007      	beq.n	800725e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	78fa      	ldrb	r2, [r7, #3]
 8007258:	4611      	mov	r1, r2
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
  }

  return USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	4618      	mov	r0, r3
 800727c:	f000 ff25 	bl	80080ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800728e:	461a      	mov	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d01a      	beq.n	80072da <USBD_LL_SetupStage+0x72>
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d822      	bhi.n	80072ee <USBD_LL_SetupStage+0x86>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <USBD_LL_SetupStage+0x4a>
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d00a      	beq.n	80072c6 <USBD_LL_SetupStage+0x5e>
 80072b0:	e01d      	b.n	80072ee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f9d6 	bl	800766c <USBD_StdDevReq>
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]
      break;
 80072c4:	e020      	b.n	8007308 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa3a 	bl	8007748 <USBD_StdItfReq>
 80072d4:	4603      	mov	r3, r0
 80072d6:	73fb      	strb	r3, [r7, #15]
      break;
 80072d8:	e016      	b.n	8007308 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa78 	bl	80077d8 <USBD_StdEPReq>
 80072e8:	4603      	mov	r3, r0
 80072ea:	73fb      	strb	r3, [r7, #15]
      break;
 80072ec:	e00c      	b.n	8007308 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 fc09 	bl	8008b14 <USBD_LL_StallEP>
 8007302:	4603      	mov	r3, r0
 8007304:	73fb      	strb	r3, [r7, #15]
      break;
 8007306:	bf00      	nop
  }

  return ret;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b086      	sub	sp, #24
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	460b      	mov	r3, r1
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007320:	7afb      	ldrb	r3, [r7, #11]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d137      	bne.n	8007396 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800732c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007334:	2b03      	cmp	r3, #3
 8007336:	d14a      	bne.n	80073ce <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	429a      	cmp	r2, r3
 8007342:	d913      	bls.n	800736c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	1ad2      	subs	r2, r2, r3
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	4293      	cmp	r3, r2
 800735c:	bf28      	it	cs
 800735e:	4613      	movcs	r3, r2
 8007360:	461a      	mov	r2, r3
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 ffa4 	bl	80082b2 <USBD_CtlContinueRx>
 800736a:	e030      	b.n	80073ce <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800737e:	2b03      	cmp	r3, #3
 8007380:	d105      	bne.n	800738e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 ffa0 	bl	80082d4 <USBD_CtlSendStatus>
 8007394:	e01b      	b.n	80073ce <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d013      	beq.n	80073ca <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d10e      	bne.n	80073ca <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	7afa      	ldrb	r2, [r7, #11]
 80073b6:	4611      	mov	r1, r2
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	4798      	blx	r3
 80073bc:	4603      	mov	r3, r0
 80073be:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
 80073c8:	e002      	b.n	80073d0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e000      	b.n	80073d0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	460b      	mov	r3, r1
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d16a      	bne.n	80074c2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	3314      	adds	r3, #20
 80073f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d155      	bne.n	80074a8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	429a      	cmp	r2, r3
 8007406:	d914      	bls.n	8007432 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	1ad2      	subs	r2, r2, r3
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	461a      	mov	r2, r3
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 ff19 	bl	8008256 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007424:	2300      	movs	r3, #0
 8007426:	2200      	movs	r2, #0
 8007428:	2100      	movs	r1, #0
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f001 fc7a 	bl	8008d24 <USBD_LL_PrepareReceive>
 8007430:	e03a      	b.n	80074a8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	429a      	cmp	r2, r3
 800743c:	d11c      	bne.n	8007478 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007446:	429a      	cmp	r2, r3
 8007448:	d316      	bcc.n	8007478 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007454:	429a      	cmp	r2, r3
 8007456:	d20f      	bcs.n	8007478 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007458:	2200      	movs	r2, #0
 800745a:	2100      	movs	r1, #0
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 fefa 	bl	8008256 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800746a:	2300      	movs	r3, #0
 800746c:	2200      	movs	r2, #0
 800746e:	2100      	movs	r1, #0
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f001 fc57 	bl	8008d24 <USBD_LL_PrepareReceive>
 8007476:	e017      	b.n	80074a8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800748a:	2b03      	cmp	r3, #3
 800748c:	d105      	bne.n	800749a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800749a:	2180      	movs	r1, #128	; 0x80
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f001 fb39 	bl	8008b14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 ff29 	bl	80082fa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d123      	bne.n	80074fa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7ff fe99 	bl	80071ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074c0:	e01b      	b.n	80074fa <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d013      	beq.n	80074f6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d10e      	bne.n	80074f6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	7afa      	ldrb	r2, [r7, #11]
 80074e2:	4611      	mov	r1, r2
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	4798      	blx	r3
 80074e8:	4603      	mov	r3, r0
 80074ea:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	e002      	b.n	80074fc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e000      	b.n	80074fc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007530:	2b00      	cmp	r3, #0
 8007532:	d009      	beq.n	8007548 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6852      	ldr	r2, [r2, #4]
 8007540:	b2d2      	uxtb	r2, r2
 8007542:	4611      	mov	r1, r2
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007548:	2340      	movs	r3, #64	; 0x40
 800754a:	2200      	movs	r2, #0
 800754c:	2100      	movs	r1, #0
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 fa6c 	bl	8008a2c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2240      	movs	r2, #64	; 0x40
 8007560:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007564:	2340      	movs	r3, #64	; 0x40
 8007566:	2200      	movs	r2, #0
 8007568:	2180      	movs	r1, #128	; 0x80
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 fa5e 	bl	8008a2c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2240      	movs	r2, #64	; 0x40
 800757a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007586:	b480      	push	{r7}
 8007588:	b083      	sub	sp, #12
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	460b      	mov	r3, r1
 8007590:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	78fa      	ldrb	r2, [r7, #3]
 8007596:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2204      	movs	r2, #4
 80075be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d105      	bne.n	80075ee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800760a:	2b03      	cmp	r3, #3
 800760c:	d10b      	bne.n	8007626 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d005      	beq.n	8007626 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	3301      	adds	r3, #1
 8007646:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800764e:	8a3b      	ldrh	r3, [r7, #16]
 8007650:	021b      	lsls	r3, r3, #8
 8007652:	b21a      	sxth	r2, r3
 8007654:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007658:	4313      	orrs	r3, r2
 800765a:	b21b      	sxth	r3, r3
 800765c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800765e:	89fb      	ldrh	r3, [r7, #14]
}
 8007660:	4618      	mov	r0, r3
 8007662:	371c      	adds	r7, #28
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d005      	beq.n	8007692 <USBD_StdDevReq+0x26>
 8007686:	2b40      	cmp	r3, #64	; 0x40
 8007688:	d853      	bhi.n	8007732 <USBD_StdDevReq+0xc6>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00b      	beq.n	80076a6 <USBD_StdDevReq+0x3a>
 800768e:	2b20      	cmp	r3, #32
 8007690:	d14f      	bne.n	8007732 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4798      	blx	r3
 80076a0:	4603      	mov	r3, r0
 80076a2:	73fb      	strb	r3, [r7, #15]
    break;
 80076a4:	e04a      	b.n	800773c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	785b      	ldrb	r3, [r3, #1]
 80076aa:	2b09      	cmp	r3, #9
 80076ac:	d83b      	bhi.n	8007726 <USBD_StdDevReq+0xba>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <USBD_StdDevReq+0x48>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	08007709 	.word	0x08007709
 80076b8:	0800771d 	.word	0x0800771d
 80076bc:	08007727 	.word	0x08007727
 80076c0:	08007713 	.word	0x08007713
 80076c4:	08007727 	.word	0x08007727
 80076c8:	080076e7 	.word	0x080076e7
 80076cc:	080076dd 	.word	0x080076dd
 80076d0:	08007727 	.word	0x08007727
 80076d4:	080076ff 	.word	0x080076ff
 80076d8:	080076f1 	.word	0x080076f1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f9da 	bl	8007a98 <USBD_GetDescriptor>
      break;
 80076e4:	e024      	b.n	8007730 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fb69 	bl	8007dc0 <USBD_SetAddress>
      break;
 80076ee:	e01f      	b.n	8007730 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fba8 	bl	8007e48 <USBD_SetConfig>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73fb      	strb	r3, [r7, #15]
      break;
 80076fc:	e018      	b.n	8007730 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fc45 	bl	8007f90 <USBD_GetConfig>
      break;
 8007706:	e013      	b.n	8007730 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fc75 	bl	8007ffa <USBD_GetStatus>
      break;
 8007710:	e00e      	b.n	8007730 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fca3 	bl	8008060 <USBD_SetFeature>
      break;
 800771a:	e009      	b.n	8007730 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fcb2 	bl	8008088 <USBD_ClrFeature>
      break;
 8007724:	e004      	b.n	8007730 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fd08 	bl	800813e <USBD_CtlError>
      break;
 800772e:	bf00      	nop
    }
    break;
 8007730:	e004      	b.n	800773c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fd02 	bl	800813e <USBD_CtlError>
    break;
 800773a:	bf00      	nop
  }

  return ret;
 800773c:	7bfb      	ldrb	r3, [r7, #15]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop

08007748 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800775e:	2b40      	cmp	r3, #64	; 0x40
 8007760:	d005      	beq.n	800776e <USBD_StdItfReq+0x26>
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d82e      	bhi.n	80077c4 <USBD_StdItfReq+0x7c>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <USBD_StdItfReq+0x26>
 800776a:	2b20      	cmp	r3, #32
 800776c:	d12a      	bne.n	80077c4 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007774:	3b01      	subs	r3, #1
 8007776:	2b02      	cmp	r3, #2
 8007778:	d81d      	bhi.n	80077b6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	889b      	ldrh	r3, [r3, #4]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b01      	cmp	r3, #1
 8007782:	d813      	bhi.n	80077ac <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
 8007792:	4603      	mov	r3, r0
 8007794:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	88db      	ldrh	r3, [r3, #6]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d110      	bne.n	80077c0 <USBD_StdItfReq+0x78>
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10d      	bne.n	80077c0 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fd95 	bl	80082d4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80077aa:	e009      	b.n	80077c0 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fcc5 	bl	800813e <USBD_CtlError>
      break;
 80077b4:	e004      	b.n	80077c0 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fcc0 	bl	800813e <USBD_CtlError>
      break;
 80077be:	e000      	b.n	80077c2 <USBD_StdItfReq+0x7a>
      break;
 80077c0:	bf00      	nop
    }
    break;
 80077c2:	e004      	b.n	80077ce <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fcb9 	bl	800813e <USBD_CtlError>
    break;
 80077cc:	bf00      	nop
  }

  return ret;
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	889b      	ldrh	r3, [r3, #4]
 80077ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f4:	2b40      	cmp	r3, #64	; 0x40
 80077f6:	d007      	beq.n	8007808 <USBD_StdEPReq+0x30>
 80077f8:	2b40      	cmp	r3, #64	; 0x40
 80077fa:	f200 8142 	bhi.w	8007a82 <USBD_StdEPReq+0x2aa>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00c      	beq.n	800781c <USBD_StdEPReq+0x44>
 8007802:	2b20      	cmp	r3, #32
 8007804:	f040 813d 	bne.w	8007a82 <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4798      	blx	r3
 8007816:	4603      	mov	r3, r0
 8007818:	73fb      	strb	r3, [r7, #15]
    break;
 800781a:	e137      	b.n	8007a8c <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	785b      	ldrb	r3, [r3, #1]
 8007820:	2b03      	cmp	r3, #3
 8007822:	d007      	beq.n	8007834 <USBD_StdEPReq+0x5c>
 8007824:	2b03      	cmp	r3, #3
 8007826:	f300 8126 	bgt.w	8007a76 <USBD_StdEPReq+0x29e>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d07d      	beq.n	800792a <USBD_StdEPReq+0x152>
 800782e:	2b01      	cmp	r3, #1
 8007830:	d03b      	beq.n	80078aa <USBD_StdEPReq+0xd2>
 8007832:	e120      	b.n	8007a76 <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800783a:	2b02      	cmp	r3, #2
 800783c:	d002      	beq.n	8007844 <USBD_StdEPReq+0x6c>
 800783e:	2b03      	cmp	r3, #3
 8007840:	d016      	beq.n	8007870 <USBD_StdEPReq+0x98>
 8007842:	e02c      	b.n	800789e <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00d      	beq.n	8007866 <USBD_StdEPReq+0x8e>
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b80      	cmp	r3, #128	; 0x80
 800784e:	d00a      	beq.n	8007866 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 f95d 	bl	8008b14 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800785a:	2180      	movs	r1, #128	; 0x80
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 f959 	bl	8008b14 <USBD_LL_StallEP>
 8007862:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007864:	e020      	b.n	80078a8 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fc68 	bl	800813e <USBD_CtlError>
        break;
 800786e:	e01b      	b.n	80078a8 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	885b      	ldrh	r3, [r3, #2]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10e      	bne.n	8007896 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00b      	beq.n	8007896 <USBD_StdEPReq+0xbe>
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	2b80      	cmp	r3, #128	; 0x80
 8007882:	d008      	beq.n	8007896 <USBD_StdEPReq+0xbe>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	88db      	ldrh	r3, [r3, #6]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d104      	bne.n	8007896 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 f93f 	bl	8008b14 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fd1c 	bl	80082d4 <USBD_CtlSendStatus>

        break;
 800789c:	e004      	b.n	80078a8 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fc4c 	bl	800813e <USBD_CtlError>
        break;
 80078a6:	bf00      	nop
      }
      break;
 80078a8:	e0ea      	b.n	8007a80 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d002      	beq.n	80078ba <USBD_StdEPReq+0xe2>
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d016      	beq.n	80078e6 <USBD_StdEPReq+0x10e>
 80078b8:	e030      	b.n	800791c <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00d      	beq.n	80078dc <USBD_StdEPReq+0x104>
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b80      	cmp	r3, #128	; 0x80
 80078c4:	d00a      	beq.n	80078dc <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 f922 	bl	8008b14 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078d0:	2180      	movs	r1, #128	; 0x80
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 f91e 	bl	8008b14 <USBD_LL_StallEP>
 80078d8:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078da:	e025      	b.n	8007928 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fc2d 	bl	800813e <USBD_CtlError>
        break;
 80078e4:	e020      	b.n	8007928 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	885b      	ldrh	r3, [r3, #2]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d11b      	bne.n	8007926 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d004      	beq.n	8007902 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 f93f 	bl	8008b80 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fce6 	bl	80082d4 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
 8007916:	4603      	mov	r3, r0
 8007918:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800791a:	e004      	b.n	8007926 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fc0d 	bl	800813e <USBD_CtlError>
        break;
 8007924:	e000      	b.n	8007928 <USBD_StdEPReq+0x150>
        break;
 8007926:	bf00      	nop
      }
      break;
 8007928:	e0aa      	b.n	8007a80 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007930:	2b02      	cmp	r3, #2
 8007932:	d002      	beq.n	800793a <USBD_StdEPReq+0x162>
 8007934:	2b03      	cmp	r3, #3
 8007936:	d032      	beq.n	800799e <USBD_StdEPReq+0x1c6>
 8007938:	e097      	b.n	8007a6a <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <USBD_StdEPReq+0x178>
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b80      	cmp	r3, #128	; 0x80
 8007944:	d004      	beq.n	8007950 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fbf8 	bl	800813e <USBD_CtlError>
          break;
 800794e:	e091      	b.n	8007a74 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007954:	2b00      	cmp	r3, #0
 8007956:	da0b      	bge.n	8007970 <USBD_StdEPReq+0x198>
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	3310      	adds	r3, #16
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	4413      	add	r3, r2
 800796c:	3304      	adds	r3, #4
 800796e:	e00b      	b.n	8007988 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007976:	4613      	mov	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	4413      	add	r3, r2
 8007986:	3304      	adds	r3, #4
 8007988:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2202      	movs	r2, #2
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fc42 	bl	8008220 <USBD_CtlSendData>
        break;
 800799c:	e06a      	b.n	8007a74 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800799e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	da11      	bge.n	80079ca <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	f003 020f 	and.w	r2, r3, #15
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	3324      	adds	r3, #36	; 0x24
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d117      	bne.n	80079f0 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fbbb 	bl	800813e <USBD_CtlError>
            break;
 80079c8:	e054      	b.n	8007a74 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	f003 020f 	and.w	r2, r3, #15
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d104      	bne.n	80079f0 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fba8 	bl	800813e <USBD_CtlError>
            break;
 80079ee:	e041      	b.n	8007a74 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da0b      	bge.n	8007a10 <USBD_StdEPReq+0x238>
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	3310      	adds	r3, #16
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	e00b      	b.n	8007a28 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a16:	4613      	mov	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	4413      	add	r3, r2
 8007a26:	3304      	adds	r3, #4
 8007a28:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <USBD_StdEPReq+0x25e>
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b80      	cmp	r3, #128	; 0x80
 8007a34:	d103      	bne.n	8007a3e <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e00e      	b.n	8007a5c <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f001 f8d2 	bl	8008bec <USBD_LL_IsStallEP>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2201      	movs	r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	e002      	b.n	8007a5c <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fbdc 	bl	8008220 <USBD_CtlSendData>
          break;
 8007a68:	e004      	b.n	8007a74 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fb66 	bl	800813e <USBD_CtlError>
        break;
 8007a72:	bf00      	nop
      }
      break;
 8007a74:	e004      	b.n	8007a80 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fb60 	bl	800813e <USBD_CtlError>
      break;
 8007a7e:	bf00      	nop
    }
    break;
 8007a80:	e004      	b.n	8007a8c <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fb5a 	bl	800813e <USBD_CtlError>
    break;
 8007a8a:	bf00      	nop
  }

  return ret;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	0a1b      	lsrs	r3, r3, #8
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	2b0e      	cmp	r3, #14
 8007aba:	f200 8152 	bhi.w	8007d62 <USBD_GetDescriptor+0x2ca>
 8007abe:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <USBD_GetDescriptor+0x2c>)
 8007ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac4:	08007b35 	.word	0x08007b35
 8007ac8:	08007b4d 	.word	0x08007b4d
 8007acc:	08007b8d 	.word	0x08007b8d
 8007ad0:	08007d63 	.word	0x08007d63
 8007ad4:	08007d63 	.word	0x08007d63
 8007ad8:	08007d03 	.word	0x08007d03
 8007adc:	08007d2f 	.word	0x08007d2f
 8007ae0:	08007d63 	.word	0x08007d63
 8007ae4:	08007d63 	.word	0x08007d63
 8007ae8:	08007d63 	.word	0x08007d63
 8007aec:	08007d63 	.word	0x08007d63
 8007af0:	08007d63 	.word	0x08007d63
 8007af4:	08007d63 	.word	0x08007d63
 8007af8:	08007d63 	.word	0x08007d63
 8007afc:	08007b01 	.word	0x08007b01
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	7c12      	ldrb	r2, [r2, #16]
 8007b18:	f107 0108 	add.w	r1, r7, #8
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4798      	blx	r3
 8007b20:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007b22:	e126      	b.n	8007d72 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fb09 	bl	800813e <USBD_CtlError>
      err++;
 8007b2c:	7afb      	ldrb	r3, [r7, #11]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	72fb      	strb	r3, [r7, #11]
    break;
 8007b32:	e11e      	b.n	8007d72 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	7c12      	ldrb	r2, [r2, #16]
 8007b40:	f107 0108 	add.w	r1, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
    break;
 8007b4a:	e112      	b.n	8007d72 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7c1b      	ldrb	r3, [r3, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10d      	bne.n	8007b70 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	f107 0208 	add.w	r2, r7, #8
 8007b60:	4610      	mov	r0, r2
 8007b62:	4798      	blx	r3
 8007b64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007b6e:	e100      	b.n	8007d72 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	f107 0208 	add.w	r2, r7, #8
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3301      	adds	r3, #1
 8007b86:	2202      	movs	r2, #2
 8007b88:	701a      	strb	r2, [r3, #0]
    break;
 8007b8a:	e0f2      	b.n	8007d72 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	885b      	ldrh	r3, [r3, #2]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b05      	cmp	r3, #5
 8007b94:	f200 80ac 	bhi.w	8007cf0 <USBD_GetDescriptor+0x258>
 8007b98:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <USBD_GetDescriptor+0x108>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007bb9 	.word	0x08007bb9
 8007ba4:	08007bed 	.word	0x08007bed
 8007ba8:	08007c21 	.word	0x08007c21
 8007bac:	08007c55 	.word	0x08007c55
 8007bb0:	08007c89 	.word	0x08007c89
 8007bb4:	08007cbd 	.word	0x08007cbd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00b      	beq.n	8007bdc <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	7c12      	ldrb	r2, [r2, #16]
 8007bd0:	f107 0108 	add.w	r1, r7, #8
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	4798      	blx	r3
 8007bd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bda:	e091      	b.n	8007d00 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 faad 	bl	800813e <USBD_CtlError>
        err++;
 8007be4:	7afb      	ldrb	r3, [r7, #11]
 8007be6:	3301      	adds	r3, #1
 8007be8:	72fb      	strb	r3, [r7, #11]
      break;
 8007bea:	e089      	b.n	8007d00 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	7c12      	ldrb	r2, [r2, #16]
 8007c04:	f107 0108 	add.w	r1, r7, #8
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
 8007c0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c0e:	e077      	b.n	8007d00 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa93 	bl	800813e <USBD_CtlError>
        err++;
 8007c18:	7afb      	ldrb	r3, [r7, #11]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c1e:	e06f      	b.n	8007d00 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	7c12      	ldrb	r2, [r2, #16]
 8007c38:	f107 0108 	add.w	r1, r7, #8
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c42:	e05d      	b.n	8007d00 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa79 	bl	800813e <USBD_CtlError>
        err++;
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	72fb      	strb	r3, [r7, #11]
      break;
 8007c52:	e055      	b.n	8007d00 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	7c12      	ldrb	r2, [r2, #16]
 8007c6c:	f107 0108 	add.w	r1, r7, #8
 8007c70:	4610      	mov	r0, r2
 8007c72:	4798      	blx	r3
 8007c74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c76:	e043      	b.n	8007d00 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa5f 	bl	800813e <USBD_CtlError>
        err++;
 8007c80:	7afb      	ldrb	r3, [r7, #11]
 8007c82:	3301      	adds	r3, #1
 8007c84:	72fb      	strb	r3, [r7, #11]
      break;
 8007c86:	e03b      	b.n	8007d00 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	7c12      	ldrb	r2, [r2, #16]
 8007ca0:	f107 0108 	add.w	r1, r7, #8
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4798      	blx	r3
 8007ca8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007caa:	e029      	b.n	8007d00 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa45 	bl	800813e <USBD_CtlError>
        err++;
 8007cb4:	7afb      	ldrb	r3, [r7, #11]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	72fb      	strb	r3, [r7, #11]
      break;
 8007cba:	e021      	b.n	8007d00 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7c12      	ldrb	r2, [r2, #16]
 8007cd4:	f107 0108 	add.w	r1, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
 8007cdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cde:	e00f      	b.n	8007d00 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa2b 	bl	800813e <USBD_CtlError>
        err++;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	3301      	adds	r3, #1
 8007cec:	72fb      	strb	r3, [r7, #11]
      break;
 8007cee:	e007      	b.n	8007d00 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fa23 	bl	800813e <USBD_CtlError>
      err++;
 8007cf8:	7afb      	ldrb	r3, [r7, #11]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007cfe:	bf00      	nop
    }
    break;
 8007d00:	e037      	b.n	8007d72 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	7c1b      	ldrb	r3, [r3, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d109      	bne.n	8007d1e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d12:	f107 0208 	add.w	r2, r7, #8
 8007d16:	4610      	mov	r0, r2
 8007d18:	4798      	blx	r3
 8007d1a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d1c:	e029      	b.n	8007d72 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fa0c 	bl	800813e <USBD_CtlError>
      err++;
 8007d26:	7afb      	ldrb	r3, [r7, #11]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	72fb      	strb	r3, [r7, #11]
    break;
 8007d2c:	e021      	b.n	8007d72 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	7c1b      	ldrb	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10d      	bne.n	8007d52 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3e:	f107 0208 	add.w	r2, r7, #8
 8007d42:	4610      	mov	r0, r2
 8007d44:	4798      	blx	r3
 8007d46:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	2207      	movs	r2, #7
 8007d4e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d50:	e00f      	b.n	8007d72 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f9f2 	bl	800813e <USBD_CtlError>
      err++;
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	72fb      	strb	r3, [r7, #11]
    break;
 8007d60:	e007      	b.n	8007d72 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f9ea 	bl	800813e <USBD_CtlError>
    err++;
 8007d6a:	7afb      	ldrb	r3, [r7, #11]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	72fb      	strb	r3, [r7, #11]
    break;
 8007d70:	bf00      	nop
  }

  if (err != 0U)
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d11e      	bne.n	8007db6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	88db      	ldrh	r3, [r3, #6]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d016      	beq.n	8007dae <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007d80:	893b      	ldrh	r3, [r7, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00e      	beq.n	8007da4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	88da      	ldrh	r2, [r3, #6]
 8007d8a:	893b      	ldrh	r3, [r7, #8]
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	bf28      	it	cs
 8007d90:	4613      	movcs	r3, r2
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d96:	893b      	ldrh	r3, [r7, #8]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	68f9      	ldr	r1, [r7, #12]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fa3f 	bl	8008220 <USBD_CtlSendData>
 8007da2:	e009      	b.n	8007db8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f9c9 	bl	800813e <USBD_CtlError>
 8007dac:	e004      	b.n	8007db8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fa90 	bl	80082d4 <USBD_CtlSendStatus>
 8007db4:	e000      	b.n	8007db8 <USBD_GetDescriptor+0x320>
    return;
 8007db6:	bf00      	nop
    }
  }
}
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop

08007dc0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	889b      	ldrh	r3, [r3, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d130      	bne.n	8007e34 <USBD_SetAddress+0x74>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	88db      	ldrh	r3, [r3, #6]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d12c      	bne.n	8007e34 <USBD_SetAddress+0x74>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	885b      	ldrh	r3, [r3, #2]
 8007dde:	2b7f      	cmp	r3, #127	; 0x7f
 8007de0:	d828      	bhi.n	8007e34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	885b      	ldrh	r3, [r3, #2]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d104      	bne.n	8007e02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f99f 	bl	800813e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e00:	e01d      	b.n	8007e3e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7bfa      	ldrb	r2, [r7, #15]
 8007e06:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 ff1a 	bl	8008c48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fa5d 	bl	80082d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e28:	e009      	b.n	8007e3e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e32:	e004      	b.n	8007e3e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f981 	bl	800813e <USBD_CtlError>
  }
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	885b      	ldrh	r3, [r3, #2]
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	4b4b      	ldr	r3, [pc, #300]	; (8007f8c <USBD_SetConfig+0x144>)
 8007e5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e60:	4b4a      	ldr	r3, [pc, #296]	; (8007f8c <USBD_SetConfig+0x144>)
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d905      	bls.n	8007e74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f967 	bl	800813e <USBD_CtlError>
    return USBD_FAIL;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e087      	b.n	8007f84 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d002      	beq.n	8007e84 <USBD_SetConfig+0x3c>
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d025      	beq.n	8007ece <USBD_SetConfig+0x86>
 8007e82:	e071      	b.n	8007f68 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007e84:	4b41      	ldr	r3, [pc, #260]	; (8007f8c <USBD_SetConfig+0x144>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d01c      	beq.n	8007ec6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007e8c:	4b3f      	ldr	r3, [pc, #252]	; (8007f8c <USBD_SetConfig+0x144>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e96:	4b3d      	ldr	r3, [pc, #244]	; (8007f8c <USBD_SetConfig+0x144>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff f9af 	bl	8007200 <USBD_SetClassConfig>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d004      	beq.n	8007eb6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f945 	bl	800813e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007eb4:	e065      	b.n	8007f82 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fa0c 	bl	80082d4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2203      	movs	r2, #3
 8007ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007ec4:	e05d      	b.n	8007f82 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fa04 	bl	80082d4 <USBD_CtlSendStatus>
    break;
 8007ecc:	e059      	b.n	8007f82 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007ece:	4b2f      	ldr	r3, [pc, #188]	; (8007f8c <USBD_SetConfig+0x144>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d112      	bne.n	8007efc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007ede:	4b2b      	ldr	r3, [pc, #172]	; (8007f8c <USBD_SetConfig+0x144>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ee8:	4b28      	ldr	r3, [pc, #160]	; (8007f8c <USBD_SetConfig+0x144>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7ff f9a2 	bl	8007238 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f9ed 	bl	80082d4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007efa:	e042      	b.n	8007f82 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007efc:	4b23      	ldr	r3, [pc, #140]	; (8007f8c <USBD_SetConfig+0x144>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d02a      	beq.n	8007f60 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7ff f990 	bl	8007238 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007f18:	4b1c      	ldr	r3, [pc, #112]	; (8007f8c <USBD_SetConfig+0x144>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f22:	4b1a      	ldr	r3, [pc, #104]	; (8007f8c <USBD_SetConfig+0x144>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff f969 	bl	8007200 <USBD_SetClassConfig>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00f      	beq.n	8007f58 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f8ff 	bl	800813e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff f975 	bl	8007238 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2202      	movs	r2, #2
 8007f52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f56:	e014      	b.n	8007f82 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f9bb 	bl	80082d4 <USBD_CtlSendStatus>
    break;
 8007f5e:	e010      	b.n	8007f82 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f9b7 	bl	80082d4 <USBD_CtlSendStatus>
    break;
 8007f66:	e00c      	b.n	8007f82 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f8e7 	bl	800813e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f70:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <USBD_SetConfig+0x144>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff f95e 	bl	8007238 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f80:	bf00      	nop
  }

  return ret;
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	2000021c 	.word	0x2000021c

08007f90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	88db      	ldrh	r3, [r3, #6]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d004      	beq.n	8007fac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f8ca 	bl	800813e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007faa:	e022      	b.n	8007ff2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	dc02      	bgt.n	8007fbc <USBD_GetConfig+0x2c>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dc03      	bgt.n	8007fc2 <USBD_GetConfig+0x32>
 8007fba:	e015      	b.n	8007fe8 <USBD_GetConfig+0x58>
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d00b      	beq.n	8007fd8 <USBD_GetConfig+0x48>
 8007fc0:	e012      	b.n	8007fe8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3308      	adds	r3, #8
 8007fcc:	2201      	movs	r2, #1
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f925 	bl	8008220 <USBD_CtlSendData>
      break;
 8007fd6:	e00c      	b.n	8007ff2 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3304      	adds	r3, #4
 8007fdc:	2201      	movs	r2, #1
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f91d 	bl	8008220 <USBD_CtlSendData>
      break;
 8007fe6:	e004      	b.n	8007ff2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f8a7 	bl	800813e <USBD_CtlError>
      break;
 8007ff0:	bf00      	nop
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800a:	3b01      	subs	r3, #1
 800800c:	2b02      	cmp	r3, #2
 800800e:	d81e      	bhi.n	800804e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	88db      	ldrh	r3, [r3, #6]
 8008014:	2b02      	cmp	r3, #2
 8008016:	d004      	beq.n	8008022 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f88f 	bl	800813e <USBD_CtlError>
      break;
 8008020:	e01a      	b.n	8008058 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f043 0202 	orr.w	r2, r3, #2
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	330c      	adds	r3, #12
 8008042:	2202      	movs	r2, #2
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f8ea 	bl	8008220 <USBD_CtlSendData>
    break;
 800804c:	e004      	b.n	8008058 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f874 	bl	800813e <USBD_CtlError>
    break;
 8008056:	bf00      	nop
  }
}
 8008058:	bf00      	nop
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	885b      	ldrh	r3, [r3, #2]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d106      	bne.n	8008080 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f92a 	bl	80082d4 <USBD_CtlSendStatus>
  }
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008098:	3b01      	subs	r3, #1
 800809a:	2b02      	cmp	r3, #2
 800809c:	d80b      	bhi.n	80080b6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	885b      	ldrh	r3, [r3, #2]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d10c      	bne.n	80080c0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f910 	bl	80082d4 <USBD_CtlSendStatus>
      }
      break;
 80080b4:	e004      	b.n	80080c0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f840 	bl	800813e <USBD_CtlError>
      break;
 80080be:	e000      	b.n	80080c2 <USBD_ClrFeature+0x3a>
      break;
 80080c0:	bf00      	nop
  }
}
 80080c2:	bf00      	nop
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	781a      	ldrb	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3301      	adds	r3, #1
 80080e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	781a      	ldrb	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3301      	adds	r3, #1
 80080f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff fa9b 	bl	8007630 <SWAPBYTE>
 80080fa:	4603      	mov	r3, r0
 80080fc:	461a      	mov	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3301      	adds	r3, #1
 8008106:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3301      	adds	r3, #1
 800810c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7ff fa8e 	bl	8007630 <SWAPBYTE>
 8008114:	4603      	mov	r3, r0
 8008116:	461a      	mov	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3301      	adds	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3301      	adds	r3, #1
 8008126:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f7ff fa81 	bl	8007630 <SWAPBYTE>
 800812e:	4603      	mov	r3, r0
 8008130:	461a      	mov	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	80da      	strh	r2, [r3, #6]
}
 8008136:	bf00      	nop
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b082      	sub	sp, #8
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008148:	2180      	movs	r1, #128	; 0x80
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fce2 	bl	8008b14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008150:	2100      	movs	r1, #0
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fcde 	bl	8008b14 <USBD_LL_StallEP>
}
 8008158:	bf00      	nop
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d036      	beq.n	80081e4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800817a:	6938      	ldr	r0, [r7, #16]
 800817c:	f000 f836 	bl	80081ec <USBD_GetLen>
 8008180:	4603      	mov	r3, r0
 8008182:	3301      	adds	r3, #1
 8008184:	b29b      	uxth	r3, r3
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	b29a      	uxth	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	4413      	add	r3, r2
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	7812      	ldrb	r2, [r2, #0]
 8008198:	701a      	strb	r2, [r3, #0]
  idx++;
 800819a:	7dfb      	ldrb	r3, [r7, #23]
 800819c:	3301      	adds	r3, #1
 800819e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	4413      	add	r3, r2
 80081a6:	2203      	movs	r2, #3
 80081a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	3301      	adds	r3, #1
 80081ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081b0:	e013      	b.n	80081da <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	4413      	add	r3, r2
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	7812      	ldrb	r2, [r2, #0]
 80081bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	3301      	adds	r3, #1
 80081c2:	613b      	str	r3, [r7, #16]
    idx++;
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	3301      	adds	r3, #1
 80081c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	4413      	add	r3, r2
 80081d0:	2200      	movs	r2, #0
 80081d2:	701a      	strb	r2, [r3, #0]
    idx++;
 80081d4:	7dfb      	ldrb	r3, [r7, #23]
 80081d6:	3301      	adds	r3, #1
 80081d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e7      	bne.n	80081b2 <USBD_GetString+0x52>
 80081e2:	e000      	b.n	80081e6 <USBD_GetString+0x86>
    return;
 80081e4:	bf00      	nop
  }
}
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80081fc:	e005      	b.n	800820a <USBD_GetLen+0x1e>
  {
    len++;
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	3301      	adds	r3, #1
 8008202:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	3301      	adds	r3, #1
 8008208:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1f5      	bne.n	80081fe <USBD_GetLen+0x12>
  }

  return len;
 8008212:	7bfb      	ldrb	r3, [r7, #15]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2202      	movs	r2, #2
 8008230:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	2100      	movs	r1, #0
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 fd34 	bl	8008cb4 <USBD_LL_Transmit>

  return USBD_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	2100      	movs	r1, #0
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 fd23 	bl	8008cb4 <USBD_LL_Transmit>

  return USBD_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2203      	movs	r2, #3
 8008288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	2100      	movs	r1, #0
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 fd3e 	bl	8008d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	2100      	movs	r1, #0
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 fd2d 	bl	8008d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2204      	movs	r2, #4
 80082e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082e4:	2300      	movs	r3, #0
 80082e6:	2200      	movs	r2, #0
 80082e8:	2100      	movs	r1, #0
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fce2 	bl	8008cb4 <USBD_LL_Transmit>

  return USBD_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b082      	sub	sp, #8
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2205      	movs	r2, #5
 8008306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800830a:	2300      	movs	r3, #0
 800830c:	2200      	movs	r2, #0
 800830e:	2100      	movs	r1, #0
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fd07 	bl	8008d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008324:	2200      	movs	r2, #0
 8008326:	4912      	ldr	r1, [pc, #72]	; (8008370 <MX_USB_DEVICE_Init+0x50>)
 8008328:	4812      	ldr	r0, [pc, #72]	; (8008374 <MX_USB_DEVICE_Init+0x54>)
 800832a:	f7fe fefb 	bl	8007124 <USBD_Init>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008334:	f7f8 f89c 	bl	8000470 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008338:	490f      	ldr	r1, [pc, #60]	; (8008378 <MX_USB_DEVICE_Init+0x58>)
 800833a:	480e      	ldr	r0, [pc, #56]	; (8008374 <MX_USB_DEVICE_Init+0x54>)
 800833c:	f7fe ff22 	bl	8007184 <USBD_RegisterClass>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008346:	f7f8 f893 	bl	8000470 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800834a:	490c      	ldr	r1, [pc, #48]	; (800837c <MX_USB_DEVICE_Init+0x5c>)
 800834c:	4809      	ldr	r0, [pc, #36]	; (8008374 <MX_USB_DEVICE_Init+0x54>)
 800834e:	f7fe fe4d 	bl	8006fec <USBD_CDC_RegisterInterface>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008358:	f7f8 f88a 	bl	8000470 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800835c:	4805      	ldr	r0, [pc, #20]	; (8008374 <MX_USB_DEVICE_Init+0x54>)
 800835e:	f7fe ff38 	bl	80071d2 <USBD_Start>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008368:	f7f8 f882 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800836c:	bf00      	nop
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20000138 	.word	0x20000138
 8008374:	20000298 	.word	0x20000298
 8008378:	20000020 	.word	0x20000020
 800837c:	20000124 	.word	0x20000124

08008380 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008384:	2200      	movs	r2, #0
 8008386:	4905      	ldr	r1, [pc, #20]	; (800839c <CDC_Init_FS+0x1c>)
 8008388:	4805      	ldr	r0, [pc, #20]	; (80083a0 <CDC_Init_FS+0x20>)
 800838a:	f7fe fe44 	bl	8007016 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800838e:	4905      	ldr	r1, [pc, #20]	; (80083a4 <CDC_Init_FS+0x24>)
 8008390:	4803      	ldr	r0, [pc, #12]	; (80083a0 <CDC_Init_FS+0x20>)
 8008392:	f7fe fe59 	bl	8007048 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008396:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008398:	4618      	mov	r0, r3
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20000950 	.word	0x20000950
 80083a0:	20000298 	.word	0x20000298
 80083a4:	20000568 	.word	0x20000568

080083a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	6039      	str	r1, [r7, #0]
 80083c2:	71fb      	strb	r3, [r7, #7]
 80083c4:	4613      	mov	r3, r2
 80083c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	2b23      	cmp	r3, #35	; 0x23
 80083cc:	d84a      	bhi.n	8008464 <CDC_Control_FS+0xac>
 80083ce:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <CDC_Control_FS+0x1c>)
 80083d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d4:	08008465 	.word	0x08008465
 80083d8:	08008465 	.word	0x08008465
 80083dc:	08008465 	.word	0x08008465
 80083e0:	08008465 	.word	0x08008465
 80083e4:	08008465 	.word	0x08008465
 80083e8:	08008465 	.word	0x08008465
 80083ec:	08008465 	.word	0x08008465
 80083f0:	08008465 	.word	0x08008465
 80083f4:	08008465 	.word	0x08008465
 80083f8:	08008465 	.word	0x08008465
 80083fc:	08008465 	.word	0x08008465
 8008400:	08008465 	.word	0x08008465
 8008404:	08008465 	.word	0x08008465
 8008408:	08008465 	.word	0x08008465
 800840c:	08008465 	.word	0x08008465
 8008410:	08008465 	.word	0x08008465
 8008414:	08008465 	.word	0x08008465
 8008418:	08008465 	.word	0x08008465
 800841c:	08008465 	.word	0x08008465
 8008420:	08008465 	.word	0x08008465
 8008424:	08008465 	.word	0x08008465
 8008428:	08008465 	.word	0x08008465
 800842c:	08008465 	.word	0x08008465
 8008430:	08008465 	.word	0x08008465
 8008434:	08008465 	.word	0x08008465
 8008438:	08008465 	.word	0x08008465
 800843c:	08008465 	.word	0x08008465
 8008440:	08008465 	.word	0x08008465
 8008444:	08008465 	.word	0x08008465
 8008448:	08008465 	.word	0x08008465
 800844c:	08008465 	.word	0x08008465
 8008450:	08008465 	.word	0x08008465
 8008454:	08008465 	.word	0x08008465
 8008458:	08008465 	.word	0x08008465
 800845c:	08008465 	.word	0x08008465
 8008460:	08008465 	.word	0x08008465
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008464:	bf00      	nop
  }

  return (USBD_OK);
 8008466:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	480a      	ldr	r0, [pc, #40]	; (80084ac <CDC_Receive_FS+0x38>)
 8008482:	f7fe fde1 	bl	8007048 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008486:	4809      	ldr	r0, [pc, #36]	; (80084ac <CDC_Receive_FS+0x38>)
 8008488:	f7fe fe22 	bl	80070d0 <USBD_CDC_ReceivePacket>


  for(i=0;i<*Len;i++){
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	e002      	b.n	8008498 <CDC_Receive_FS+0x24>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3301      	adds	r3, #1
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d3f7      	bcc.n	8008492 <CDC_Receive_FS+0x1e>


  //CDC_Transmit_FS((uint8_t *) rxBuffer,strlen(rxBuffer));


  return (USBD_OK);
 80084a2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20000298 	.word	0x20000298

080084b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084c0:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <CDC_Transmit_FS+0x48>)
 80084c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e00b      	b.n	80084ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80084d6:	887b      	ldrh	r3, [r7, #2]
 80084d8:	461a      	mov	r2, r3
 80084da:	6879      	ldr	r1, [r7, #4]
 80084dc:	4806      	ldr	r0, [pc, #24]	; (80084f8 <CDC_Transmit_FS+0x48>)
 80084de:	f7fe fd9a 	bl	8007016 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80084e2:	4805      	ldr	r0, [pc, #20]	; (80084f8 <CDC_Transmit_FS+0x48>)
 80084e4:	f7fe fdc4 	bl	8007070 <USBD_CDC_TransmitPacket>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20000298 	.word	0x20000298

080084fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	4613      	mov	r3, r2
 8008508:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800850e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008512:	4618      	mov	r0, r3
 8008514:	371c      	adds	r7, #28
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
	...

08008520 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	6039      	str	r1, [r7, #0]
 800852a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2212      	movs	r2, #18
 8008530:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008532:	4b03      	ldr	r3, [pc, #12]	; (8008540 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	20000158 	.word	0x20000158

08008544 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	6039      	str	r1, [r7, #0]
 800854e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2204      	movs	r2, #4
 8008554:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008556:	4b03      	ldr	r3, [pc, #12]	; (8008564 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	20000178 	.word	0x20000178

08008568 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	6039      	str	r1, [r7, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008574:	79fb      	ldrb	r3, [r7, #7]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d105      	bne.n	8008586 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	4907      	ldr	r1, [pc, #28]	; (800859c <USBD_FS_ProductStrDescriptor+0x34>)
 800857e:	4808      	ldr	r0, [pc, #32]	; (80085a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008580:	f7ff fdee 	bl	8008160 <USBD_GetString>
 8008584:	e004      	b.n	8008590 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	4904      	ldr	r1, [pc, #16]	; (800859c <USBD_FS_ProductStrDescriptor+0x34>)
 800858a:	4805      	ldr	r0, [pc, #20]	; (80085a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800858c:	f7ff fde8 	bl	8008160 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008590:	4b02      	ldr	r3, [pc, #8]	; (800859c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000d78 	.word	0x20000d78
 80085a0:	08009070 	.word	0x08009070

080085a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4603      	mov	r3, r0
 80085ac:	6039      	str	r1, [r7, #0]
 80085ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	4904      	ldr	r1, [pc, #16]	; (80085c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085b4:	4804      	ldr	r0, [pc, #16]	; (80085c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085b6:	f7ff fdd3 	bl	8008160 <USBD_GetString>
  return USBD_StrDesc;
 80085ba:	4b02      	ldr	r3, [pc, #8]	; (80085c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	20000d78 	.word	0x20000d78
 80085c8:	08009088 	.word	0x08009088

080085cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	6039      	str	r1, [r7, #0]
 80085d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	221a      	movs	r2, #26
 80085dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085de:	f000 f855 	bl	800868c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085e2:	4b02      	ldr	r3, [pc, #8]	; (80085ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	2000017c 	.word	0x2000017c

080085f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	6039      	str	r1, [r7, #0]
 80085fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d105      	bne.n	800860e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	4907      	ldr	r1, [pc, #28]	; (8008624 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008606:	4808      	ldr	r0, [pc, #32]	; (8008628 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008608:	f7ff fdaa 	bl	8008160 <USBD_GetString>
 800860c:	e004      	b.n	8008618 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	4904      	ldr	r1, [pc, #16]	; (8008624 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008612:	4805      	ldr	r0, [pc, #20]	; (8008628 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008614:	f7ff fda4 	bl	8008160 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008618:	4b02      	ldr	r3, [pc, #8]	; (8008624 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20000d78 	.word	0x20000d78
 8008628:	0800909c 	.word	0x0800909c

0800862c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008638:	79fb      	ldrb	r3, [r7, #7]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d105      	bne.n	800864a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	4907      	ldr	r1, [pc, #28]	; (8008660 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008642:	4808      	ldr	r0, [pc, #32]	; (8008664 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008644:	f7ff fd8c 	bl	8008160 <USBD_GetString>
 8008648:	e004      	b.n	8008654 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	4904      	ldr	r1, [pc, #16]	; (8008660 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800864e:	4805      	ldr	r0, [pc, #20]	; (8008664 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008650:	f7ff fd86 	bl	8008160 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008654:	4b02      	ldr	r3, [pc, #8]	; (8008660 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20000d78 	.word	0x20000d78
 8008664:	080090a8 	.word	0x080090a8

08008668 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	4603      	mov	r3, r0
 8008670:	6039      	str	r1, [r7, #0]
 8008672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	220c      	movs	r2, #12
 8008678:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800867a:	4b03      	ldr	r3, [pc, #12]	; (8008688 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	2000016c 	.word	0x2000016c

0800868c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008692:	4b0f      	ldr	r3, [pc, #60]	; (80086d0 <Get_SerialNum+0x44>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008698:	4b0e      	ldr	r3, [pc, #56]	; (80086d4 <Get_SerialNum+0x48>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800869e:	4b0e      	ldr	r3, [pc, #56]	; (80086d8 <Get_SerialNum+0x4c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4413      	add	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d009      	beq.n	80086c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086b2:	2208      	movs	r2, #8
 80086b4:	4909      	ldr	r1, [pc, #36]	; (80086dc <Get_SerialNum+0x50>)
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f000 f814 	bl	80086e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086bc:	2204      	movs	r2, #4
 80086be:	4908      	ldr	r1, [pc, #32]	; (80086e0 <Get_SerialNum+0x54>)
 80086c0:	68b8      	ldr	r0, [r7, #8]
 80086c2:	f000 f80f 	bl	80086e4 <IntToUnicode>
  }
}
 80086c6:	bf00      	nop
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	1fff7590 	.word	0x1fff7590
 80086d4:	1fff7594 	.word	0x1fff7594
 80086d8:	1fff7598 	.word	0x1fff7598
 80086dc:	2000017e 	.word	0x2000017e
 80086e0:	2000018e 	.word	0x2000018e

080086e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	4613      	mov	r3, r2
 80086f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086f6:	2300      	movs	r3, #0
 80086f8:	75fb      	strb	r3, [r7, #23]
 80086fa:	e027      	b.n	800874c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	0f1b      	lsrs	r3, r3, #28
 8008700:	2b09      	cmp	r3, #9
 8008702:	d80b      	bhi.n	800871c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	0f1b      	lsrs	r3, r3, #28
 8008708:	b2da      	uxtb	r2, r3
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	005b      	lsls	r3, r3, #1
 800870e:	4619      	mov	r1, r3
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	440b      	add	r3, r1
 8008714:	3230      	adds	r2, #48	; 0x30
 8008716:	b2d2      	uxtb	r2, r2
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	e00a      	b.n	8008732 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	0f1b      	lsrs	r3, r3, #28
 8008720:	b2da      	uxtb	r2, r3
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	4619      	mov	r1, r3
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	440b      	add	r3, r1
 800872c:	3237      	adds	r2, #55	; 0x37
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	011b      	lsls	r3, r3, #4
 8008736:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	3301      	adds	r3, #1
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	4413      	add	r3, r2
 8008742:	2200      	movs	r2, #0
 8008744:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	3301      	adds	r3, #1
 800874a:	75fb      	strb	r3, [r7, #23]
 800874c:	7dfa      	ldrb	r2, [r7, #23]
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	429a      	cmp	r2, r3
 8008752:	d3d3      	bcc.n	80086fc <IntToUnicode+0x18>
  }
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
	...

08008764 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a0d      	ldr	r2, [pc, #52]	; (80087a8 <HAL_PCD_MspInit+0x44>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d113      	bne.n	800879e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008776:	4b0d      	ldr	r3, [pc, #52]	; (80087ac <HAL_PCD_MspInit+0x48>)
 8008778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800877a:	4a0c      	ldr	r2, [pc, #48]	; (80087ac <HAL_PCD_MspInit+0x48>)
 800877c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008780:	6593      	str	r3, [r2, #88]	; 0x58
 8008782:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <HAL_PCD_MspInit+0x48>)
 8008784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008786:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800878e:	2200      	movs	r2, #0
 8008790:	2100      	movs	r1, #0
 8008792:	2043      	movs	r0, #67	; 0x43
 8008794:	f7f8 fb0f 	bl	8000db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008798:	2043      	movs	r0, #67	; 0x43
 800879a:	f7f8 fb28 	bl	8000dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	40006800 	.word	0x40006800
 80087ac:	40021000 	.word	0x40021000

080087b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80087c4:	4619      	mov	r1, r3
 80087c6:	4610      	mov	r0, r2
 80087c8:	f7fe fd4e 	bl	8007268 <USBD_LL_SetupStage>
}
 80087cc:	bf00      	nop
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80087e6:	78fa      	ldrb	r2, [r7, #3]
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	440b      	add	r3, r1
 80087f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	4619      	mov	r1, r3
 80087fe:	f7fe fd88 	bl	8007312 <USBD_LL_DataOutStage>
}
 8008802:	bf00      	nop
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b082      	sub	sp, #8
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800881c:	78fa      	ldrb	r2, [r7, #3]
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	4613      	mov	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	440b      	add	r3, r1
 800882a:	333c      	adds	r3, #60	; 0x3c
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	78fb      	ldrb	r3, [r7, #3]
 8008830:	4619      	mov	r1, r3
 8008832:	f7fe fdd1 	bl	80073d8 <USBD_LL_DataInStage>
}
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b082      	sub	sp, #8
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800884c:	4618      	mov	r0, r3
 800884e:	f7fe fed5 	bl	80075fc <USBD_LL_SOF>
}
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008862:	2301      	movs	r3, #1
 8008864:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2b02      	cmp	r3, #2
 800886c:	d001      	beq.n	8008872 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800886e:	f7f7 fdff 	bl	8000470 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008878:	7bfa      	ldrb	r2, [r7, #15]
 800887a:	4611      	mov	r1, r2
 800887c:	4618      	mov	r0, r3
 800887e:	f7fe fe82 	bl	8007586 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008888:	4618      	mov	r0, r3
 800888a:	f7fe fe3b 	bl	8007504 <USBD_LL_Reset>
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe fe7d 	bl	80075a6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d005      	beq.n	80088c0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088b4:	4b04      	ldr	r3, [pc, #16]	; (80088c8 <HAL_PCD_SuspendCallback+0x30>)
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	4a03      	ldr	r2, [pc, #12]	; (80088c8 <HAL_PCD_SuspendCallback+0x30>)
 80088ba:	f043 0306 	orr.w	r3, r3, #6
 80088be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088c0:	bf00      	nop
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	e000ed00 	.word	0xe000ed00

080088cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d007      	beq.n	80088ec <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088dc:	4b08      	ldr	r3, [pc, #32]	; (8008900 <HAL_PCD_ResumeCallback+0x34>)
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	4a07      	ldr	r2, [pc, #28]	; (8008900 <HAL_PCD_ResumeCallback+0x34>)
 80088e2:	f023 0306 	bic.w	r3, r3, #6
 80088e6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80088e8:	f000 fa9e 	bl	8008e28 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fe fe6c 	bl	80075d0 <USBD_LL_Resume>
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	e000ed00 	.word	0xe000ed00

08008904 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800890c:	f7fa f82e 	bl	800296c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008910:	4a2b      	ldr	r2, [pc, #172]	; (80089c0 <USBD_LL_Init+0xbc>)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a29      	ldr	r2, [pc, #164]	; (80089c0 <USBD_LL_Init+0xbc>)
 800891c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008920:	4b27      	ldr	r3, [pc, #156]	; (80089c0 <USBD_LL_Init+0xbc>)
 8008922:	4a28      	ldr	r2, [pc, #160]	; (80089c4 <USBD_LL_Init+0xc0>)
 8008924:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008926:	4b26      	ldr	r3, [pc, #152]	; (80089c0 <USBD_LL_Init+0xbc>)
 8008928:	2208      	movs	r2, #8
 800892a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800892c:	4b24      	ldr	r3, [pc, #144]	; (80089c0 <USBD_LL_Init+0xbc>)
 800892e:	2202      	movs	r2, #2
 8008930:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008932:	4b23      	ldr	r3, [pc, #140]	; (80089c0 <USBD_LL_Init+0xbc>)
 8008934:	2202      	movs	r2, #2
 8008936:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008938:	4b21      	ldr	r3, [pc, #132]	; (80089c0 <USBD_LL_Init+0xbc>)
 800893a:	2200      	movs	r2, #0
 800893c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800893e:	4b20      	ldr	r3, [pc, #128]	; (80089c0 <USBD_LL_Init+0xbc>)
 8008940:	2200      	movs	r2, #0
 8008942:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008944:	4b1e      	ldr	r3, [pc, #120]	; (80089c0 <USBD_LL_Init+0xbc>)
 8008946:	2200      	movs	r2, #0
 8008948:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800894a:	4b1d      	ldr	r3, [pc, #116]	; (80089c0 <USBD_LL_Init+0xbc>)
 800894c:	2200      	movs	r2, #0
 800894e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008950:	481b      	ldr	r0, [pc, #108]	; (80089c0 <USBD_LL_Init+0xbc>)
 8008952:	f7f8 fc03 	bl	800115c <HAL_PCD_Init>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800895c:	f7f7 fd88 	bl	8000470 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008966:	2318      	movs	r3, #24
 8008968:	2200      	movs	r2, #0
 800896a:	2100      	movs	r1, #0
 800896c:	f7f9 ff2c 	bl	80027c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008976:	2358      	movs	r3, #88	; 0x58
 8008978:	2200      	movs	r2, #0
 800897a:	2180      	movs	r1, #128	; 0x80
 800897c:	f7f9 ff24 	bl	80027c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008986:	23c0      	movs	r3, #192	; 0xc0
 8008988:	2200      	movs	r2, #0
 800898a:	2181      	movs	r1, #129	; 0x81
 800898c:	f7f9 ff1c 	bl	80027c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008996:	f44f 7388 	mov.w	r3, #272	; 0x110
 800899a:	2200      	movs	r2, #0
 800899c:	2101      	movs	r1, #1
 800899e:	f7f9 ff13 	bl	80027c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089ac:	2200      	movs	r2, #0
 80089ae:	2182      	movs	r1, #130	; 0x82
 80089b0:	f7f9 ff0a 	bl	80027c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	20000f78 	.word	0x20000f78
 80089c4:	40006800 	.word	0x40006800

080089c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089de:	4618      	mov	r0, r3
 80089e0:	f7f8 fcce 	bl	8001380 <HAL_PCD_Start>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d816      	bhi.n	8008a1c <USBD_LL_Start+0x54>
 80089ee:	a201      	add	r2, pc, #4	; (adr r2, 80089f4 <USBD_LL_Start+0x2c>)
 80089f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f4:	08008a05 	.word	0x08008a05
 80089f8:	08008a0b 	.word	0x08008a0b
 80089fc:	08008a11 	.word	0x08008a11
 8008a00:	08008a17 	.word	0x08008a17
    case HAL_OK :
      usb_status = USBD_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73fb      	strb	r3, [r7, #15]
    break;
 8008a08:	e00b      	b.n	8008a22 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a0e:	e008      	b.n	8008a22 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a10:	2301      	movs	r3, #1
 8008a12:	73fb      	strb	r3, [r7, #15]
    break;
 8008a14:	e005      	b.n	8008a22 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a16:	2303      	movs	r3, #3
 8008a18:	73fb      	strb	r3, [r7, #15]
    break;
 8008a1a:	e002      	b.n	8008a22 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a20:	bf00      	nop
  }
  return usb_status;
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	4608      	mov	r0, r1
 8008a36:	4611      	mov	r1, r2
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	70fb      	strb	r3, [r7, #3]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	70bb      	strb	r3, [r7, #2]
 8008a42:	4613      	mov	r3, r2
 8008a44:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a54:	78bb      	ldrb	r3, [r7, #2]
 8008a56:	883a      	ldrh	r2, [r7, #0]
 8008a58:	78f9      	ldrb	r1, [r7, #3]
 8008a5a:	f7f8 fe26 	bl	80016aa <HAL_PCD_EP_Open>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d817      	bhi.n	8008a98 <USBD_LL_OpenEP+0x6c>
 8008a68:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <USBD_LL_OpenEP+0x44>)
 8008a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6e:	bf00      	nop
 8008a70:	08008a81 	.word	0x08008a81
 8008a74:	08008a87 	.word	0x08008a87
 8008a78:	08008a8d 	.word	0x08008a8d
 8008a7c:	08008a93 	.word	0x08008a93
    case HAL_OK :
      usb_status = USBD_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	73fb      	strb	r3, [r7, #15]
    break;
 8008a84:	e00b      	b.n	8008a9e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a86:	2303      	movs	r3, #3
 8008a88:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8a:	e008      	b.n	8008a9e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a90:	e005      	b.n	8008a9e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a92:	2303      	movs	r3, #3
 8008a94:	73fb      	strb	r3, [r7, #15]
    break;
 8008a96:	e002      	b.n	8008a9e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a9c:	bf00      	nop
  }
  return usb_status;
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ac2:	78fa      	ldrb	r2, [r7, #3]
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7f8 fe55 	bl	8001776 <HAL_PCD_EP_Close>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d816      	bhi.n	8008b04 <USBD_LL_CloseEP+0x5c>
 8008ad6:	a201      	add	r2, pc, #4	; (adr r2, 8008adc <USBD_LL_CloseEP+0x34>)
 8008ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008adc:	08008aed 	.word	0x08008aed
 8008ae0:	08008af3 	.word	0x08008af3
 8008ae4:	08008af9 	.word	0x08008af9
 8008ae8:	08008aff 	.word	0x08008aff
    case HAL_OK :
      usb_status = USBD_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]
    break;
 8008af0:	e00b      	b.n	8008b0a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008af2:	2303      	movs	r3, #3
 8008af4:	73fb      	strb	r3, [r7, #15]
    break;
 8008af6:	e008      	b.n	8008b0a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008af8:	2301      	movs	r3, #1
 8008afa:	73fb      	strb	r3, [r7, #15]
    break;
 8008afc:	e005      	b.n	8008b0a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008afe:	2303      	movs	r3, #3
 8008b00:	73fb      	strb	r3, [r7, #15]
    break;
 8008b02:	e002      	b.n	8008b0a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b04:	2303      	movs	r3, #3
 8008b06:	73fb      	strb	r3, [r7, #15]
    break;
 8008b08:	bf00      	nop
  }
  return usb_status;
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7f8 feff 	bl	8001936 <HAL_PCD_EP_SetStall>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d816      	bhi.n	8008b70 <USBD_LL_StallEP+0x5c>
 8008b42:	a201      	add	r2, pc, #4	; (adr r2, 8008b48 <USBD_LL_StallEP+0x34>)
 8008b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b48:	08008b59 	.word	0x08008b59
 8008b4c:	08008b5f 	.word	0x08008b5f
 8008b50:	08008b65 	.word	0x08008b65
 8008b54:	08008b6b 	.word	0x08008b6b
    case HAL_OK :
      usb_status = USBD_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5c:	e00b      	b.n	8008b76 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	73fb      	strb	r3, [r7, #15]
    break;
 8008b62:	e008      	b.n	8008b76 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b64:	2301      	movs	r3, #1
 8008b66:	73fb      	strb	r3, [r7, #15]
    break;
 8008b68:	e005      	b.n	8008b76 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b6e:	e002      	b.n	8008b76 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b70:	2303      	movs	r3, #3
 8008b72:	73fb      	strb	r3, [r7, #15]
    break;
 8008b74:	bf00      	nop
  }
  return usb_status;
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b9a:	78fa      	ldrb	r2, [r7, #3]
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7f8 ff29 	bl	80019f6 <HAL_PCD_EP_ClrStall>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d816      	bhi.n	8008bdc <USBD_LL_ClearStallEP+0x5c>
 8008bae:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <USBD_LL_ClearStallEP+0x34>)
 8008bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb4:	08008bc5 	.word	0x08008bc5
 8008bb8:	08008bcb 	.word	0x08008bcb
 8008bbc:	08008bd1 	.word	0x08008bd1
 8008bc0:	08008bd7 	.word	0x08008bd7
    case HAL_OK :
      usb_status = USBD_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc8:	e00b      	b.n	8008be2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	73fb      	strb	r3, [r7, #15]
    break;
 8008bce:	e008      	b.n	8008be2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd4:	e005      	b.n	8008be2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008bda:	e002      	b.n	8008be2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	73fb      	strb	r3, [r7, #15]
    break;
 8008be0:	bf00      	nop
  }
  return usb_status;
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	da0c      	bge.n	8008c22 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c0e:	68f9      	ldr	r1, [r7, #12]
 8008c10:	1c5a      	adds	r2, r3, #1
 8008c12:	4613      	mov	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4413      	add	r3, r2
 8008c18:	00db      	lsls	r3, r3, #3
 8008c1a:	440b      	add	r3, r1
 8008c1c:	3302      	adds	r3, #2
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	e00b      	b.n	8008c3a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c22:	78fb      	ldrb	r3, [r7, #3]
 8008c24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c28:	68f9      	ldr	r1, [r7, #12]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	440b      	add	r3, r1
 8008c34:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008c38:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
	...

08008c48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c62:	78fa      	ldrb	r2, [r7, #3]
 8008c64:	4611      	mov	r1, r2
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7f8 fcfa 	bl	8001660 <HAL_PCD_SetAddress>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d816      	bhi.n	8008ca4 <USBD_LL_SetUSBAddress+0x5c>
 8008c76:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <USBD_LL_SetUSBAddress+0x34>)
 8008c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7c:	08008c8d 	.word	0x08008c8d
 8008c80:	08008c93 	.word	0x08008c93
 8008c84:	08008c99 	.word	0x08008c99
 8008c88:	08008c9f 	.word	0x08008c9f
    case HAL_OK :
      usb_status = USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c90:	e00b      	b.n	8008caa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c92:	2303      	movs	r3, #3
 8008c94:	73fb      	strb	r3, [r7, #15]
    break;
 8008c96:	e008      	b.n	8008caa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c9c:	e005      	b.n	8008caa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca2:	e002      	b.n	8008caa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca8:	bf00      	nop
  }
  return usb_status;
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	607a      	str	r2, [r7, #4]
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008cd2:	7af9      	ldrb	r1, [r7, #11]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	f7f8 fdea 	bl	80018b0 <HAL_PCD_EP_Transmit>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008ce0:	7dbb      	ldrb	r3, [r7, #22]
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d816      	bhi.n	8008d14 <USBD_LL_Transmit+0x60>
 8008ce6:	a201      	add	r2, pc, #4	; (adr r2, 8008cec <USBD_LL_Transmit+0x38>)
 8008ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cec:	08008cfd 	.word	0x08008cfd
 8008cf0:	08008d03 	.word	0x08008d03
 8008cf4:	08008d09 	.word	0x08008d09
 8008cf8:	08008d0f 	.word	0x08008d0f
    case HAL_OK :
      usb_status = USBD_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	75fb      	strb	r3, [r7, #23]
    break;
 8008d00:	e00b      	b.n	8008d1a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d02:	2303      	movs	r3, #3
 8008d04:	75fb      	strb	r3, [r7, #23]
    break;
 8008d06:	e008      	b.n	8008d1a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d0c:	e005      	b.n	8008d1a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	75fb      	strb	r3, [r7, #23]
    break;
 8008d12:	e002      	b.n	8008d1a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008d14:	2303      	movs	r3, #3
 8008d16:	75fb      	strb	r3, [r7, #23]
    break;
 8008d18:	bf00      	nop
  }
  return usb_status;
 8008d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	607a      	str	r2, [r7, #4]
 8008d2e:	603b      	str	r3, [r7, #0]
 8008d30:	460b      	mov	r3, r1
 8008d32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d42:	7af9      	ldrb	r1, [r7, #11]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	f7f8 fd5d 	bl	8001806 <HAL_PCD_EP_Receive>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008d50:	7dbb      	ldrb	r3, [r7, #22]
 8008d52:	2b03      	cmp	r3, #3
 8008d54:	d816      	bhi.n	8008d84 <USBD_LL_PrepareReceive+0x60>
 8008d56:	a201      	add	r2, pc, #4	; (adr r2, 8008d5c <USBD_LL_PrepareReceive+0x38>)
 8008d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5c:	08008d6d 	.word	0x08008d6d
 8008d60:	08008d73 	.word	0x08008d73
 8008d64:	08008d79 	.word	0x08008d79
 8008d68:	08008d7f 	.word	0x08008d7f
    case HAL_OK :
      usb_status = USBD_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	75fb      	strb	r3, [r7, #23]
    break;
 8008d70:	e00b      	b.n	8008d8a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d72:	2303      	movs	r3, #3
 8008d74:	75fb      	strb	r3, [r7, #23]
    break;
 8008d76:	e008      	b.n	8008d8a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d7c:	e005      	b.n	8008d8a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	75fb      	strb	r3, [r7, #23]
    break;
 8008d82:	e002      	b.n	8008d8a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008d84:	2303      	movs	r3, #3
 8008d86:	75fb      	strb	r3, [r7, #23]
    break;
 8008d88:	bf00      	nop
  }
  return usb_status;
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008da6:	78fa      	ldrb	r2, [r7, #3]
 8008da8:	4611      	mov	r1, r2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7f8 fd68 	bl	8001880 <HAL_PCD_EP_GetRxCount>
 8008db0:	4603      	mov	r3, r0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
	...

08008dbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <HAL_PCDEx_LPM_Callback+0x18>
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d013      	beq.n	8008dfa <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008dd2:	e023      	b.n	8008e1c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d007      	beq.n	8008dec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008ddc:	f000 f824 	bl	8008e28 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008de0:	4b10      	ldr	r3, [pc, #64]	; (8008e24 <HAL_PCDEx_LPM_Callback+0x68>)
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	4a0f      	ldr	r2, [pc, #60]	; (8008e24 <HAL_PCDEx_LPM_Callback+0x68>)
 8008de6:	f023 0306 	bic.w	r3, r3, #6
 8008dea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fe fbec 	bl	80075d0 <USBD_LL_Resume>
    break;
 8008df8:	e010      	b.n	8008e1c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7fe fbd0 	bl	80075a6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d005      	beq.n	8008e1a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	4a04      	ldr	r2, [pc, #16]	; (8008e24 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e14:	f043 0306 	orr.w	r3, r3, #6
 8008e18:	6113      	str	r3, [r2, #16]
    break;
 8008e1a:	bf00      	nop
}
 8008e1c:	bf00      	nop
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	e000ed00 	.word	0xe000ed00

08008e28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008e2c:	f7f7 fa14 	bl	8000258 <SystemClock_Config>
}
 8008e30:	bf00      	nop
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <__errno>:
 8008e34:	4b01      	ldr	r3, [pc, #4]	; (8008e3c <__errno+0x8>)
 8008e36:	6818      	ldr	r0, [r3, #0]
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	20000198 	.word	0x20000198

08008e40 <__libc_init_array>:
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	4d0d      	ldr	r5, [pc, #52]	; (8008e78 <__libc_init_array+0x38>)
 8008e44:	4c0d      	ldr	r4, [pc, #52]	; (8008e7c <__libc_init_array+0x3c>)
 8008e46:	1b64      	subs	r4, r4, r5
 8008e48:	10a4      	asrs	r4, r4, #2
 8008e4a:	2600      	movs	r6, #0
 8008e4c:	42a6      	cmp	r6, r4
 8008e4e:	d109      	bne.n	8008e64 <__libc_init_array+0x24>
 8008e50:	4d0b      	ldr	r5, [pc, #44]	; (8008e80 <__libc_init_array+0x40>)
 8008e52:	4c0c      	ldr	r4, [pc, #48]	; (8008e84 <__libc_init_array+0x44>)
 8008e54:	f000 f8f8 	bl	8009048 <_init>
 8008e58:	1b64      	subs	r4, r4, r5
 8008e5a:	10a4      	asrs	r4, r4, #2
 8008e5c:	2600      	movs	r6, #0
 8008e5e:	42a6      	cmp	r6, r4
 8008e60:	d105      	bne.n	8008e6e <__libc_init_array+0x2e>
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
 8008e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e68:	4798      	blx	r3
 8008e6a:	3601      	adds	r6, #1
 8008e6c:	e7ee      	b.n	8008e4c <__libc_init_array+0xc>
 8008e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e72:	4798      	blx	r3
 8008e74:	3601      	adds	r6, #1
 8008e76:	e7f2      	b.n	8008e5e <__libc_init_array+0x1e>
 8008e78:	080090f8 	.word	0x080090f8
 8008e7c:	080090f8 	.word	0x080090f8
 8008e80:	080090f8 	.word	0x080090f8
 8008e84:	080090fc 	.word	0x080090fc

08008e88 <malloc>:
 8008e88:	4b02      	ldr	r3, [pc, #8]	; (8008e94 <malloc+0xc>)
 8008e8a:	4601      	mov	r1, r0
 8008e8c:	6818      	ldr	r0, [r3, #0]
 8008e8e:	f000 b863 	b.w	8008f58 <_malloc_r>
 8008e92:	bf00      	nop
 8008e94:	20000198 	.word	0x20000198

08008e98 <free>:
 8008e98:	4b02      	ldr	r3, [pc, #8]	; (8008ea4 <free+0xc>)
 8008e9a:	4601      	mov	r1, r0
 8008e9c:	6818      	ldr	r0, [r3, #0]
 8008e9e:	f000 b80b 	b.w	8008eb8 <_free_r>
 8008ea2:	bf00      	nop
 8008ea4:	20000198 	.word	0x20000198

08008ea8 <memset>:
 8008ea8:	4402      	add	r2, r0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d100      	bne.n	8008eb2 <memset+0xa>
 8008eb0:	4770      	bx	lr
 8008eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8008eb6:	e7f9      	b.n	8008eac <memset+0x4>

08008eb8 <_free_r>:
 8008eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eba:	2900      	cmp	r1, #0
 8008ebc:	d048      	beq.n	8008f50 <_free_r+0x98>
 8008ebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ec2:	9001      	str	r0, [sp, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f1a1 0404 	sub.w	r4, r1, #4
 8008eca:	bfb8      	it	lt
 8008ecc:	18e4      	addlt	r4, r4, r3
 8008ece:	f000 f8ad 	bl	800902c <__malloc_lock>
 8008ed2:	4a20      	ldr	r2, [pc, #128]	; (8008f54 <_free_r+0x9c>)
 8008ed4:	9801      	ldr	r0, [sp, #4]
 8008ed6:	6813      	ldr	r3, [r2, #0]
 8008ed8:	4615      	mov	r5, r2
 8008eda:	b933      	cbnz	r3, 8008eea <_free_r+0x32>
 8008edc:	6063      	str	r3, [r4, #4]
 8008ede:	6014      	str	r4, [r2, #0]
 8008ee0:	b003      	add	sp, #12
 8008ee2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ee6:	f000 b8a7 	b.w	8009038 <__malloc_unlock>
 8008eea:	42a3      	cmp	r3, r4
 8008eec:	d90b      	bls.n	8008f06 <_free_r+0x4e>
 8008eee:	6821      	ldr	r1, [r4, #0]
 8008ef0:	1862      	adds	r2, r4, r1
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	bf04      	itt	eq
 8008ef6:	681a      	ldreq	r2, [r3, #0]
 8008ef8:	685b      	ldreq	r3, [r3, #4]
 8008efa:	6063      	str	r3, [r4, #4]
 8008efc:	bf04      	itt	eq
 8008efe:	1852      	addeq	r2, r2, r1
 8008f00:	6022      	streq	r2, [r4, #0]
 8008f02:	602c      	str	r4, [r5, #0]
 8008f04:	e7ec      	b.n	8008ee0 <_free_r+0x28>
 8008f06:	461a      	mov	r2, r3
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	b10b      	cbz	r3, 8008f10 <_free_r+0x58>
 8008f0c:	42a3      	cmp	r3, r4
 8008f0e:	d9fa      	bls.n	8008f06 <_free_r+0x4e>
 8008f10:	6811      	ldr	r1, [r2, #0]
 8008f12:	1855      	adds	r5, r2, r1
 8008f14:	42a5      	cmp	r5, r4
 8008f16:	d10b      	bne.n	8008f30 <_free_r+0x78>
 8008f18:	6824      	ldr	r4, [r4, #0]
 8008f1a:	4421      	add	r1, r4
 8008f1c:	1854      	adds	r4, r2, r1
 8008f1e:	42a3      	cmp	r3, r4
 8008f20:	6011      	str	r1, [r2, #0]
 8008f22:	d1dd      	bne.n	8008ee0 <_free_r+0x28>
 8008f24:	681c      	ldr	r4, [r3, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	6053      	str	r3, [r2, #4]
 8008f2a:	4421      	add	r1, r4
 8008f2c:	6011      	str	r1, [r2, #0]
 8008f2e:	e7d7      	b.n	8008ee0 <_free_r+0x28>
 8008f30:	d902      	bls.n	8008f38 <_free_r+0x80>
 8008f32:	230c      	movs	r3, #12
 8008f34:	6003      	str	r3, [r0, #0]
 8008f36:	e7d3      	b.n	8008ee0 <_free_r+0x28>
 8008f38:	6825      	ldr	r5, [r4, #0]
 8008f3a:	1961      	adds	r1, r4, r5
 8008f3c:	428b      	cmp	r3, r1
 8008f3e:	bf04      	itt	eq
 8008f40:	6819      	ldreq	r1, [r3, #0]
 8008f42:	685b      	ldreq	r3, [r3, #4]
 8008f44:	6063      	str	r3, [r4, #4]
 8008f46:	bf04      	itt	eq
 8008f48:	1949      	addeq	r1, r1, r5
 8008f4a:	6021      	streq	r1, [r4, #0]
 8008f4c:	6054      	str	r4, [r2, #4]
 8008f4e:	e7c7      	b.n	8008ee0 <_free_r+0x28>
 8008f50:	b003      	add	sp, #12
 8008f52:	bd30      	pop	{r4, r5, pc}
 8008f54:	20000220 	.word	0x20000220

08008f58 <_malloc_r>:
 8008f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5a:	1ccd      	adds	r5, r1, #3
 8008f5c:	f025 0503 	bic.w	r5, r5, #3
 8008f60:	3508      	adds	r5, #8
 8008f62:	2d0c      	cmp	r5, #12
 8008f64:	bf38      	it	cc
 8008f66:	250c      	movcc	r5, #12
 8008f68:	2d00      	cmp	r5, #0
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	db01      	blt.n	8008f72 <_malloc_r+0x1a>
 8008f6e:	42a9      	cmp	r1, r5
 8008f70:	d903      	bls.n	8008f7a <_malloc_r+0x22>
 8008f72:	230c      	movs	r3, #12
 8008f74:	6033      	str	r3, [r6, #0]
 8008f76:	2000      	movs	r0, #0
 8008f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f7a:	f000 f857 	bl	800902c <__malloc_lock>
 8008f7e:	4921      	ldr	r1, [pc, #132]	; (8009004 <_malloc_r+0xac>)
 8008f80:	680a      	ldr	r2, [r1, #0]
 8008f82:	4614      	mov	r4, r2
 8008f84:	b99c      	cbnz	r4, 8008fae <_malloc_r+0x56>
 8008f86:	4f20      	ldr	r7, [pc, #128]	; (8009008 <_malloc_r+0xb0>)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	b923      	cbnz	r3, 8008f96 <_malloc_r+0x3e>
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f000 f83c 	bl	800900c <_sbrk_r>
 8008f94:	6038      	str	r0, [r7, #0]
 8008f96:	4629      	mov	r1, r5
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f000 f837 	bl	800900c <_sbrk_r>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	d123      	bne.n	8008fea <_malloc_r+0x92>
 8008fa2:	230c      	movs	r3, #12
 8008fa4:	6033      	str	r3, [r6, #0]
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f000 f846 	bl	8009038 <__malloc_unlock>
 8008fac:	e7e3      	b.n	8008f76 <_malloc_r+0x1e>
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	1b5b      	subs	r3, r3, r5
 8008fb2:	d417      	bmi.n	8008fe4 <_malloc_r+0x8c>
 8008fb4:	2b0b      	cmp	r3, #11
 8008fb6:	d903      	bls.n	8008fc0 <_malloc_r+0x68>
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	441c      	add	r4, r3
 8008fbc:	6025      	str	r5, [r4, #0]
 8008fbe:	e004      	b.n	8008fca <_malloc_r+0x72>
 8008fc0:	6863      	ldr	r3, [r4, #4]
 8008fc2:	42a2      	cmp	r2, r4
 8008fc4:	bf0c      	ite	eq
 8008fc6:	600b      	streq	r3, [r1, #0]
 8008fc8:	6053      	strne	r3, [r2, #4]
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f000 f834 	bl	8009038 <__malloc_unlock>
 8008fd0:	f104 000b 	add.w	r0, r4, #11
 8008fd4:	1d23      	adds	r3, r4, #4
 8008fd6:	f020 0007 	bic.w	r0, r0, #7
 8008fda:	1ac2      	subs	r2, r0, r3
 8008fdc:	d0cc      	beq.n	8008f78 <_malloc_r+0x20>
 8008fde:	1a1b      	subs	r3, r3, r0
 8008fe0:	50a3      	str	r3, [r4, r2]
 8008fe2:	e7c9      	b.n	8008f78 <_malloc_r+0x20>
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	6864      	ldr	r4, [r4, #4]
 8008fe8:	e7cc      	b.n	8008f84 <_malloc_r+0x2c>
 8008fea:	1cc4      	adds	r4, r0, #3
 8008fec:	f024 0403 	bic.w	r4, r4, #3
 8008ff0:	42a0      	cmp	r0, r4
 8008ff2:	d0e3      	beq.n	8008fbc <_malloc_r+0x64>
 8008ff4:	1a21      	subs	r1, r4, r0
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f000 f808 	bl	800900c <_sbrk_r>
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d1dd      	bne.n	8008fbc <_malloc_r+0x64>
 8009000:	e7cf      	b.n	8008fa2 <_malloc_r+0x4a>
 8009002:	bf00      	nop
 8009004:	20000220 	.word	0x20000220
 8009008:	20000224 	.word	0x20000224

0800900c <_sbrk_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d06      	ldr	r5, [pc, #24]	; (8009028 <_sbrk_r+0x1c>)
 8009010:	2300      	movs	r3, #0
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	602b      	str	r3, [r5, #0]
 8009018:	f7f7 fcc4 	bl	80009a4 <_sbrk>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_sbrk_r+0x1a>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_sbrk_r+0x1a>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	2000126c 	.word	0x2000126c

0800902c <__malloc_lock>:
 800902c:	4801      	ldr	r0, [pc, #4]	; (8009034 <__malloc_lock+0x8>)
 800902e:	f000 b809 	b.w	8009044 <__retarget_lock_acquire_recursive>
 8009032:	bf00      	nop
 8009034:	20001274 	.word	0x20001274

08009038 <__malloc_unlock>:
 8009038:	4801      	ldr	r0, [pc, #4]	; (8009040 <__malloc_unlock+0x8>)
 800903a:	f000 b804 	b.w	8009046 <__retarget_lock_release_recursive>
 800903e:	bf00      	nop
 8009040:	20001274 	.word	0x20001274

08009044 <__retarget_lock_acquire_recursive>:
 8009044:	4770      	bx	lr

08009046 <__retarget_lock_release_recursive>:
 8009046:	4770      	bx	lr

08009048 <_init>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	bf00      	nop
 800904c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904e:	bc08      	pop	{r3}
 8009050:	469e      	mov	lr, r3
 8009052:	4770      	bx	lr

08009054 <_fini>:
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009056:	bf00      	nop
 8009058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905a:	bc08      	pop	{r3}
 800905c:	469e      	mov	lr, r3
 800905e:	4770      	bx	lr
