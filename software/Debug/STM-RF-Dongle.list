
STM-RF-Dongle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f04  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08009090  08009090  00019090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009128  08009128  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  08009128  08009128  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009128  08009128  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009128  08009128  00019128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800912c  0800912c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001078  200001fc  0800932c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20001274  0800932c  00021274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc1b  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b1  00000000  00000000  0003ce47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  000406f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00041670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023243  00000000  00000000  00042460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001318f  00000000  00000000  000656a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c388a  00000000  00000000  00078832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c0bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f38  00000000  00000000  0013c110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001fc 	.word	0x200001fc
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009078 	.word	0x08009078

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000200 	.word	0x20000200
 80001c8:	08009078 	.word	0x08009078

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fcf9 	bl	8000bc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f834 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f8f2 	bl	80003c0 <MX_GPIO_Init>
  MX_SPI3_Init();
 80001dc:	f000 f8b2 	bl	8000344 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80001e0:	f008 f8d0 	bl	8008384 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(50);
 80001e4:	2032      	movs	r0, #50	; 0x32
 80001e6:	f000 fd63 	bl	8000cb0 <HAL_Delay>
  NRF24_Init();
 80001ea:	f000 faaf 	bl	800074c <NRF24_Init>
  HAL_Delay(500);
 80001ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f2:	f000 fd5d 	bl	8000cb0 <HAL_Delay>

#if MODE == 0
  NRF24_TxMode(address,10);
#else if MODE == 1
  NRF24_RxMode(address, 10);
 80001f6:	210a      	movs	r1, #10
 80001f8:	480e      	ldr	r0, [pc, #56]	; (8000234 <main+0x68>)
 80001fa:	f000 face 	bl	800079a <NRF24_RxMode>
  //NRF24_ReadAll(data);
#endif
  HAL_Delay(50);
 80001fe:	2032      	movs	r0, #50	; 0x32
 8000200:	f000 fd56 	bl	8000cb0 <HAL_Delay>
	   	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
	  }

#else if MODE == 1

	  if(isDataAvailable(0) == 1)
 8000204:	2000      	movs	r0, #0
 8000206:	f000 fafd 	bl	8000804 <isDataAvailable>
 800020a:	4603      	mov	r3, r0
 800020c:	2b01      	cmp	r3, #1
 800020e:	d10c      	bne.n	800022a <main+0x5e>
	  {
		  NRF24_Receive(rxBuffer);
 8000210:	4809      	ldr	r0, [pc, #36]	; (8000238 <main+0x6c>)
 8000212:	f000 fb17 	bl	8000844 <NRF24_Receive>
		 /* if(CDC_Transmit_FS((uint8_t *) rxBuffer,strlen(rxBuffer)) == 1)
		  {
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
		  }*/

		   	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000216:	2201      	movs	r2, #1
 8000218:	2101      	movs	r1, #1
 800021a:	4808      	ldr	r0, [pc, #32]	; (800023c <main+0x70>)
 800021c:	f000 ffe8 	bl	80011f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,1);
 8000220:	2201      	movs	r2, #1
 8000222:	2102      	movs	r1, #2
 8000224:	4805      	ldr	r0, [pc, #20]	; (800023c <main+0x70>)
 8000226:	f000 ffe3 	bl	80011f0 <HAL_GPIO_WritePin>
	  }

	  NRF24_ReadAll(&rxBuffer);
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <main+0x6c>)
 800022c:	f000 fb34 	bl	8000898 <NRF24_ReadAll>
	  if(isDataAvailable(0) == 1)
 8000230:	e7e8      	b.n	8000204 <main+0x38>
 8000232:	bf00      	nop
 8000234:	20000000 	.word	0x20000000
 8000238:	2000028c 	.word	0x2000028c
 800023c:	48000400 	.word	0x48000400

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b0ac      	sub	sp, #176	; 0xb0
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800024a:	2244      	movs	r2, #68	; 0x44
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f008 fe42 	bl	8008ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]
 8000262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2254      	movs	r2, #84	; 0x54
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f008 fe34 	bl	8008ed8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000270:	2310      	movs	r3, #16
 8000272:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000280:	2360      	movs	r3, #96	; 0x60
 8000282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000286:	2302      	movs	r3, #2
 8000288:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800028c:	2301      	movs	r3, #1
 800028e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000292:	2301      	movs	r3, #1
 8000294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000298:	2328      	movs	r3, #40	; 0x28
 800029a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800029e:	2307      	movs	r3, #7
 80002a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a4:	2302      	movs	r3, #2
 80002a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002aa:	2302      	movs	r3, #2
 80002ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 fbcb 	bl	8002a50 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002c0:	f000 f8ca 	bl	8000458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2303      	movs	r3, #3
 80002ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002dc:	2104      	movs	r1, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 ffd6 	bl	8003290 <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002ea:	f000 f8b5 	bl	8000458 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80002f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80002f8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002fa:	2301      	movs	r3, #1
 80002fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002fe:	2301      	movs	r3, #1
 8000300:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000302:	2318      	movs	r3, #24
 8000304:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000306:	2307      	movs	r3, #7
 8000308:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800030a:	2302      	movs	r3, #2
 800030c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000312:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000316:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4618      	mov	r0, r3
 800031c:	f003 f986 	bl	800362c <HAL_RCCEx_PeriphCLKConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000326:	f000 f897 	bl	8000458 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800032a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800032e:	f002 fb29 	bl	8002984 <HAL_PWREx_ControlVoltageScaling>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000338:	f000 f88e 	bl	8000458 <Error_Handler>
  }
}
 800033c:	bf00      	nop
 800033e:	37b0      	adds	r7, #176	; 0xb0
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000348:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_SPI3_Init+0x74>)
 800034a:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <MX_SPI3_Init+0x78>)
 800034c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800034e:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <MX_SPI3_Init+0x74>)
 8000350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000354:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000356:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <MX_SPI3_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <MX_SPI3_Init+0x74>)
 800035e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000362:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_SPI3_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800036a:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <MX_SPI3_Init+0x74>)
 800036c:	2200      	movs	r2, #0
 800036e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_SPI3_Init+0x74>)
 8000372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000376:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_SPI3_Init+0x74>)
 800037a:	2220      	movs	r2, #32
 800037c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_SPI3_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_SPI3_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_SPI3_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_SPI3_Init+0x74>)
 8000392:	2207      	movs	r2, #7
 8000394:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_SPI3_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_SPI3_Init+0x74>)
 800039e:	2208      	movs	r2, #8
 80003a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_SPI3_Init+0x74>)
 80003a4:	f003 fc28 	bl	8003bf8 <HAL_SPI_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80003ae:	f000 f853 	bl	8000458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000228 	.word	0x20000228
 80003bc:	40003c00 	.word	0x40003c00

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 030c 	add.w	r3, r7, #12
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d6:	4b1e      	ldr	r3, [pc, #120]	; (8000450 <MX_GPIO_Init+0x90>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	4a1d      	ldr	r2, [pc, #116]	; (8000450 <MX_GPIO_Init+0x90>)
 80003dc:	f043 0302 	orr.w	r3, r3, #2
 80003e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e2:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <MX_GPIO_Init+0x90>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e6:	f003 0302 	and.w	r3, r3, #2
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b18      	ldr	r3, [pc, #96]	; (8000450 <MX_GPIO_Init+0x90>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	4a17      	ldr	r2, [pc, #92]	; (8000450 <MX_GPIO_Init+0x90>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <MX_GPIO_Init+0x90>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	21c3      	movs	r1, #195	; 0xc3
 800040a:	4812      	ldr	r0, [pc, #72]	; (8000454 <MX_GPIO_Init+0x94>)
 800040c:	f000 fef0 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin NRF_CS_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin;
 8000410:	23c3      	movs	r3, #195	; 0xc3
 8000412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000414:	2301      	movs	r3, #1
 8000416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041c:	2300      	movs	r3, #0
 800041e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000420:	f107 030c 	add.w	r3, r7, #12
 8000424:	4619      	mov	r1, r3
 8000426:	480b      	ldr	r0, [pc, #44]	; (8000454 <MX_GPIO_Init+0x94>)
 8000428:	f000 fd78 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800042c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	4619      	mov	r1, r3
 8000440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000444:	f000 fd6a 	bl	8000f1c <HAL_GPIO_Init>

}
 8000448:	bf00      	nop
 800044a:	3720      	adds	r7, #32
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000
 8000454:	48000400 	.word	0x48000400

08000458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045c:	b672      	cpsid	i
}
 800045e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000460:	e7fe      	b.n	8000460 <Error_Handler+0x8>
	...

08000464 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_6


void CS_Select (void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2140      	movs	r1, #64	; 0x40
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <CS_Select+0x14>)
 800046e:	f000 febf 	bl	80011f0 <HAL_GPIO_WritePin>
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	48000400 	.word	0x48000400

0800047c <CS_UnSelect>:

void CS_UnSelect (void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2140      	movs	r1, #64	; 0x40
 8000484:	4802      	ldr	r0, [pc, #8]	; (8000490 <CS_UnSelect+0x14>)
 8000486:	f000 feb3 	bl	80011f0 <HAL_GPIO_WritePin>
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	48000400 	.word	0x48000400

08000494 <CE_Enable>:


void CE_Enable (void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <CE_Enable+0x14>)
 800049e:	f000 fea7 	bl	80011f0 <HAL_GPIO_WritePin>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	48000400 	.word	0x48000400

080004ac <CE_Disable>:

void CE_Disable (void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	4802      	ldr	r0, [pc, #8]	; (80004c0 <CE_Disable+0x14>)
 80004b6:	f000 fe9b 	bl	80011f0 <HAL_GPIO_WritePin>
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	48000400 	.word	0x48000400

080004c4 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	460a      	mov	r2, r1
 80004ce:	71fb      	strb	r3, [r7, #7]
 80004d0:	4613      	mov	r3, r2
 80004d2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	f043 0320 	orr.w	r3, r3, #32
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80004de:	79bb      	ldrb	r3, [r7, #6]
 80004e0:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80004e2:	f7ff ffbf 	bl	8000464 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80004e6:	f107 010c 	add.w	r1, r7, #12
 80004ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ee:	2202      	movs	r2, #2
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <nrf24_WriteReg+0x40>)
 80004f2:	f003 fc24 	bl	8003d3e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80004f6:	f7ff ffc1 	bl	800047c <CS_UnSelect>
}
 80004fa:	bf00      	nop
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000228 	.word	0x20000228

08000508 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
 8000514:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	f043 0320 	orr.w	r3, r3, #32
 800051c:	b2db      	uxtb	r3, r3
 800051e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000520:	f7ff ffa0 	bl	8000464 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000524:	f107 0114 	add.w	r1, r7, #20
 8000528:	2364      	movs	r3, #100	; 0x64
 800052a:	2201      	movs	r2, #1
 800052c:	4808      	ldr	r0, [pc, #32]	; (8000550 <nrf24_WriteRegMulti+0x48>)
 800052e:	f003 fc06 	bl	8003d3e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	b29a      	uxth	r2, r3
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	68b9      	ldr	r1, [r7, #8]
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <nrf24_WriteRegMulti+0x48>)
 800053e:	f003 fbfe 	bl	8003d3e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000542:	f7ff ff9b 	bl	800047c <CS_UnSelect>
}
 8000546:	bf00      	nop
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000228 	.word	0x20000228

08000554 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800055e:	2300      	movs	r3, #0
 8000560:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000562:	f7ff ff7f 	bl	8000464 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000566:	1df9      	adds	r1, r7, #7
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	2201      	movs	r2, #1
 800056c:	4808      	ldr	r0, [pc, #32]	; (8000590 <nrf24_ReadReg+0x3c>)
 800056e:	f003 fbe6 	bl	8003d3e <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000572:	f107 010f 	add.w	r1, r7, #15
 8000576:	2364      	movs	r3, #100	; 0x64
 8000578:	2201      	movs	r2, #1
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <nrf24_ReadReg+0x3c>)
 800057c:	f003 fd4d 	bl	800401a <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000580:	f7ff ff7c 	bl	800047c <CS_UnSelect>

	return data;
 8000584:	7bfb      	ldrb	r3, [r7, #15]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000228 	.word	0x20000228

08000594 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
 80005a0:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005a2:	f7ff ff5f 	bl	8000464 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80005a6:	f107 010f 	add.w	r1, r7, #15
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	2201      	movs	r2, #1
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <nrf24_ReadReg_Multi+0x3c>)
 80005b0:	f003 fbc5 	bl	8003d3e <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005bc:	68b9      	ldr	r1, [r7, #8]
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <nrf24_ReadReg_Multi+0x3c>)
 80005c0:	f003 fd2b 	bl	800401a <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005c4:	f7ff ff5a 	bl	800047c <CS_UnSelect>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000228 	.word	0x20000228

080005d4 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005de:	f7ff ff41 	bl	8000464 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80005e2:	1df9      	adds	r1, r7, #7
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	2201      	movs	r2, #1
 80005e8:	4804      	ldr	r0, [pc, #16]	; (80005fc <nrfsendCmd+0x28>)
 80005ea:	f003 fba8 	bl	8003d3e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005ee:	f7ff ff45 	bl	800047c <CS_UnSelect>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000228 	.word	0x20000228

08000600 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b07      	cmp	r3, #7
 800060e:	d104      	bne.n	800061a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000610:	2100      	movs	r1, #0
 8000612:	2007      	movs	r0, #7
 8000614:	f7ff ff56 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000618:	e090      	b.n	800073c <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b17      	cmp	r3, #23
 800061e:	d104      	bne.n	800062a <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000620:	2111      	movs	r1, #17
 8000622:	2017      	movs	r0, #23
 8000624:	f7ff ff4e 	bl	80004c4 <nrf24_WriteReg>
}
 8000628:	e088      	b.n	800073c <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800062a:	2108      	movs	r1, #8
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff49 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000632:	213f      	movs	r1, #63	; 0x3f
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff ff45 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800063a:	2103      	movs	r1, #3
 800063c:	2002      	movs	r0, #2
 800063e:	f7ff ff41 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000642:	2103      	movs	r1, #3
 8000644:	2003      	movs	r0, #3
 8000646:	f7ff ff3d 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800064a:	2103      	movs	r1, #3
 800064c:	2004      	movs	r0, #4
 800064e:	f7ff ff39 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000652:	2102      	movs	r1, #2
 8000654:	2005      	movs	r0, #5
 8000656:	f7ff ff35 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800065a:	210e      	movs	r1, #14
 800065c:	2006      	movs	r0, #6
 800065e:	f7ff ff31 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000662:	2100      	movs	r1, #0
 8000664:	2007      	movs	r0, #7
 8000666:	f7ff ff2d 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800066a:	2100      	movs	r1, #0
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff29 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000672:	2100      	movs	r1, #0
 8000674:	2009      	movs	r0, #9
 8000676:	f7ff ff25 	bl	80004c4 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800067a:	4a32      	ldr	r2, [pc, #200]	; (8000744 <nrf24_reset+0x144>)
 800067c:	f107 0318 	add.w	r3, r7, #24
 8000680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000684:	6018      	str	r0, [r3, #0]
 8000686:	3304      	adds	r3, #4
 8000688:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	2205      	movs	r2, #5
 8000690:	4619      	mov	r1, r3
 8000692:	200a      	movs	r0, #10
 8000694:	f7ff ff38 	bl	8000508 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000698:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <nrf24_reset+0x148>)
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a2:	6018      	str	r0, [r3, #0]
 80006a4:	3304      	adds	r3, #4
 80006a6:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	2205      	movs	r2, #5
 80006ae:	4619      	mov	r1, r3
 80006b0:	200b      	movs	r0, #11
 80006b2:	f7ff ff29 	bl	8000508 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80006b6:	21c3      	movs	r1, #195	; 0xc3
 80006b8:	200c      	movs	r0, #12
 80006ba:	f7ff ff03 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80006be:	21c4      	movs	r1, #196	; 0xc4
 80006c0:	200d      	movs	r0, #13
 80006c2:	f7ff feff 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80006c6:	21c5      	movs	r1, #197	; 0xc5
 80006c8:	200e      	movs	r0, #14
 80006ca:	f7ff fefb 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80006ce:	21c6      	movs	r1, #198	; 0xc6
 80006d0:	200f      	movs	r0, #15
 80006d2:	f7ff fef7 	bl	80004c4 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006d6:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <nrf24_reset+0x144>)
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e0:	6018      	str	r0, [r3, #0]
 80006e2:	3304      	adds	r3, #4
 80006e4:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2205      	movs	r2, #5
 80006ec:	4619      	mov	r1, r3
 80006ee:	2010      	movs	r0, #16
 80006f0:	f7ff ff0a 	bl	8000508 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80006f4:	2100      	movs	r1, #0
 80006f6:	2011      	movs	r0, #17
 80006f8:	f7ff fee4 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80006fc:	2100      	movs	r1, #0
 80006fe:	2012      	movs	r0, #18
 8000700:	f7ff fee0 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000704:	2100      	movs	r1, #0
 8000706:	2013      	movs	r0, #19
 8000708:	f7ff fedc 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800070c:	2100      	movs	r1, #0
 800070e:	2014      	movs	r0, #20
 8000710:	f7ff fed8 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000714:	2100      	movs	r1, #0
 8000716:	2015      	movs	r0, #21
 8000718:	f7ff fed4 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800071c:	2100      	movs	r1, #0
 800071e:	2016      	movs	r0, #22
 8000720:	f7ff fed0 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000724:	2111      	movs	r1, #17
 8000726:	2017      	movs	r0, #23
 8000728:	f7ff fecc 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 800072c:	2100      	movs	r1, #0
 800072e:	201c      	movs	r0, #28
 8000730:	f7ff fec8 	bl	80004c4 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000734:	2100      	movs	r1, #0
 8000736:	201d      	movs	r0, #29
 8000738:	f7ff fec4 	bl	80004c4 <nrf24_WriteReg>
}
 800073c:	bf00      	nop
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	08009090 	.word	0x08009090
 8000748:	08009098 	.word	0x08009098

0800074c <NRF24_Init>:




void NRF24_Init (void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000750:	f7ff feac 	bl	80004ac <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000754:	2000      	movs	r0, #0
 8000756:	f7ff ff53 	bl	8000600 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff feb1 	bl	80004c4 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000762:	2100      	movs	r1, #0
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff fead 	bl	80004c4 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800076a:	2100      	movs	r1, #0
 800076c:	2002      	movs	r0, #2
 800076e:	f7ff fea9 	bl	80004c4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000772:	2103      	movs	r1, #3
 8000774:	2003      	movs	r0, #3
 8000776:	f7ff fea5 	bl	80004c4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800077a:	2100      	movs	r1, #0
 800077c:	2004      	movs	r0, #4
 800077e:	f7ff fea1 	bl	80004c4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000782:	2100      	movs	r1, #0
 8000784:	2005      	movs	r0, #5
 8000786:	f7ff fe9d 	bl	80004c4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800078a:	210e      	movs	r1, #14
 800078c:	2006      	movs	r0, #6
 800078e:	f7ff fe99 	bl	80004c4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000792:	f7ff fe7f 	bl	8000494 <CE_Enable>

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}

0800079a <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b084      	sub	sp, #16
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	460b      	mov	r3, r1
 80007a4:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80007a6:	f7ff fe81 	bl	80004ac <CE_Disable>

	nrf24_reset (STATUS);
 80007aa:	2007      	movs	r0, #7
 80007ac:	f7ff ff28 	bl	8000600 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	4619      	mov	r1, r3
 80007b4:	2005      	movs	r0, #5
 80007b6:	f7ff fe85 	bl	80004c4 <nrf24_WriteReg>

	// select data pipe 2
	//uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
	//en_rxaddr = en_rxaddr | (1<<2);
	uint8_t en_rxaddr = 0x3F;
 80007ba:	233f      	movs	r3, #63	; 0x3f
 80007bc:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	4619      	mov	r1, r3
 80007c2:	2002      	movs	r0, #2
 80007c4:	f7ff fe7e 	bl	80004c4 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80007c8:	2205      	movs	r2, #5
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	200b      	movs	r0, #11
 80007ce:	f7ff fe9b 	bl	8000508 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80007d2:	21ee      	movs	r1, #238	; 0xee
 80007d4:	200c      	movs	r0, #12
 80007d6:	f7ff fe75 	bl	80004c4 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P1, 32);   // 32 bit payload size for pipe 2
 80007da:	2120      	movs	r1, #32
 80007dc:	2012      	movs	r0, #18
 80007de:	f7ff fe71 	bl	80004c4 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80007e2:	2120      	movs	r1, #32
 80007e4:	2013      	movs	r0, #19
 80007e6:	f7ff fe6d 	bl	80004c4 <nrf24_WriteReg>


	// power up the device in Rx mode
	//uint8_t config = nrf24_ReadReg(CONFIG);
	uint8_t config = (0xF3);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 80007ea:	23f3      	movs	r3, #243	; 0xf3
 80007ec:	73bb      	strb	r3, [r7, #14]

	//config = config | (1<<1) | (1<<0);
	nrf24_WriteReg (CONFIG, config);
 80007ee:	7bbb      	ldrb	r3, [r7, #14]
 80007f0:	4619      	mov	r1, r3
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff fe66 	bl	80004c4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80007f8:	f7ff fe4c 	bl	8000494 <CE_Enable>
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 800080c:	2007      	movs	r0, #7
 800080e:	f7ff fea1 	bl	8000554 <nrf24_ReadReg>
 8000812:	4603      	mov	r3, r0
 8000814:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00b      	beq.n	8000838 <isDataAvailable+0x34>
 8000820:	7bfa      	ldrb	r2, [r7, #15]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4013      	ands	r3, r2
 8000828:	2b00      	cmp	r3, #0
 800082a:	d005      	beq.n	8000838 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	2007      	movs	r0, #7
 8000830:	f7ff fe48 	bl	80004c4 <nrf24_WriteReg>

		return 1;
 8000834:	2301      	movs	r3, #1
 8000836:	e000      	b.n	800083a <isDataAvailable+0x36>
	}

	return 0;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8000850:	f7ff fe08 	bl	8000464 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000854:	2361      	movs	r3, #97	; 0x61
 8000856:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000858:	f107 010f 	add.w	r1, r7, #15
 800085c:	2364      	movs	r3, #100	; 0x64
 800085e:	2201      	movs	r2, #1
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <NRF24_Receive+0x50>)
 8000862:	f003 fa6c 	bl	8003d3e <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	2220      	movs	r2, #32
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	4809      	ldr	r0, [pc, #36]	; (8000894 <NRF24_Receive+0x50>)
 8000870:	f003 fbd3 	bl	800401a <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000874:	f7ff fe02 	bl	800047c <CS_UnSelect>

	HAL_Delay(1);
 8000878:	2001      	movs	r0, #1
 800087a:	f000 fa19 	bl	8000cb0 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800087e:	23e2      	movs	r3, #226	; 0xe2
 8000880:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fea5 	bl	80005d4 <nrfsendCmd>
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000228 	.word	0x20000228

08000898 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	e00c      	b.n	80008c0 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	b2d9      	uxtb	r1, r3
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	18d4      	adds	r4, r2, r3
 80008b0:	4608      	mov	r0, r1
 80008b2:	f7ff fe4f 	bl	8000554 <nrf24_ReadReg>
 80008b6:	4603      	mov	r3, r0
 80008b8:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	3301      	adds	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b09      	cmp	r3, #9
 80008c4:	ddef      	ble.n	80008a6 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	330a      	adds	r3, #10
 80008ca:	2205      	movs	r2, #5
 80008cc:	4619      	mov	r1, r3
 80008ce:	200a      	movs	r0, #10
 80008d0:	f7ff fe60 	bl	8000594 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	330f      	adds	r3, #15
 80008d8:	2205      	movs	r2, #5
 80008da:	4619      	mov	r1, r3
 80008dc:	200b      	movs	r0, #11
 80008de:	f7ff fe59 	bl	8000594 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f103 0414 	add.w	r4, r3, #20
 80008e8:	200c      	movs	r0, #12
 80008ea:	f7ff fe33 	bl	8000554 <nrf24_ReadReg>
 80008ee:	4603      	mov	r3, r0
 80008f0:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f103 0415 	add.w	r4, r3, #21
 80008f8:	200d      	movs	r0, #13
 80008fa:	f7ff fe2b 	bl	8000554 <nrf24_ReadReg>
 80008fe:	4603      	mov	r3, r0
 8000900:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f103 0416 	add.w	r4, r3, #22
 8000908:	200e      	movs	r0, #14
 800090a:	f7ff fe23 	bl	8000554 <nrf24_ReadReg>
 800090e:	4603      	mov	r3, r0
 8000910:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f103 0417 	add.w	r4, r3, #23
 8000918:	200f      	movs	r0, #15
 800091a:	f7ff fe1b 	bl	8000554 <nrf24_ReadReg>
 800091e:	4603      	mov	r3, r0
 8000920:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3318      	adds	r3, #24
 8000926:	2205      	movs	r2, #5
 8000928:	4619      	mov	r1, r3
 800092a:	200a      	movs	r0, #10
 800092c:	f7ff fe32 	bl	8000594 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 8000930:	231d      	movs	r3, #29
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	e00e      	b.n	8000954 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	3b0c      	subs	r3, #12
 800093c:	b2d9      	uxtb	r1, r3
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	18d4      	adds	r4, r2, r3
 8000944:	4608      	mov	r0, r1
 8000946:	f7ff fe05 	bl	8000554 <nrf24_ReadReg>
 800094a:	4603      	mov	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	3301      	adds	r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	2b25      	cmp	r3, #37	; 0x25
 8000958:	dded      	ble.n	8000936 <NRF24_ReadAll+0x9e>
	}

}
 800095a:	bf00      	nop
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	bd90      	pop	{r4, r7, pc}

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x44>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_MspInit+0x44>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6613      	str	r3, [r2, #96]	; 0x60
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x44>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_MspInit+0x44>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6593      	str	r3, [r2, #88]	; 0x58
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <HAL_SPI_MspInit+0x7c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d127      	bne.n	8000a1e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <HAL_SPI_MspInit+0x80>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <HAL_SPI_MspInit+0x80>)
 80009d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009d8:	6593      	str	r3, [r2, #88]	; 0x58
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_SPI_MspInit+0x80>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_SPI_MspInit+0x80>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <HAL_SPI_MspInit+0x80>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_SPI_MspInit+0x80>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009fe:	2338      	movs	r3, #56	; 0x38
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a0e:	2306      	movs	r3, #6
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_SPI_MspInit+0x84>)
 8000a1a:	f000 fa7f 	bl	8000f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40003c00 	.word	0x40003c00
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	48000400 	.word	0x48000400

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f8f6 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <USB_IRQHandler+0x10>)
 8000a8e:	f000 fcfb 	bl	8001488 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000f70 	.word	0x20000f70

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f008 f9ca 	bl	8008e64 <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20010000 	.word	0x20010000
 8000afc:	00000800 	.word	0x00000800
 8000b00:	20000218 	.word	0x20000218
 8000b04:	20001278 	.word	0x20001278

08000b08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <SystemInit+0x64>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <SystemInit+0x64>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <SystemInit+0x68>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <SystemInit+0x68>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <SystemInit+0x68>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <SystemInit+0x68>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <SystemInit+0x68>)
 8000b34:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b38:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <SystemInit+0x68>)
 8000b40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <SystemInit+0x68>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <SystemInit+0x68>)
 8000b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <SystemInit+0x68>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SystemInit+0x64>)
 8000b5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00
 8000b70:	40021000 	.word	0x40021000

08000b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b78:	f7ff ffc6 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b7e:	e003      	b.n	8000b88 <LoopCopyDataInit>

08000b80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b86:	3104      	adds	r1, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b88:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b90:	d3f6      	bcc.n	8000b80 <CopyDataInit>
	ldr	r2, =_sbss
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b94:	e002      	b.n	8000b9c <LoopFillZerobss>

08000b96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b98:	f842 3b04 	str.w	r3, [r2], #4

08000b9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <LoopForever+0x16>)
	cmp	r2, r3
 8000b9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ba0:	d3f9      	bcc.n	8000b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f008 f965 	bl	8008e70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ba6:	f7ff fb11 	bl	80001cc <main>

08000baa <LoopForever>:

LoopForever:
    b LoopForever
 8000baa:	e7fe      	b.n	8000baa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bac:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000bb0:	08009130 	.word	0x08009130
	ldr	r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bb8:	200001fc 	.word	0x200001fc
	ldr	r2, =_sbss
 8000bbc:	200001fc 	.word	0x200001fc
	ldr	r3, = _ebss
 8000bc0:	20001274 	.word	0x20001274

08000bc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC1_IRQHandler>

08000bc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f961 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 f80e 	bl	8000bf8 <HAL_InitTick>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	e001      	b.n	8000bec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be8:	f7ff febc 	bl	8000964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_InitTick+0x6c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d023      	beq.n	8000c54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <HAL_InitTick+0x70>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_InitTick+0x6c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f96d 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10f      	bne.n	8000c4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d809      	bhi.n	8000c48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 f937 	bl	8000eae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_InitTick+0x74>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e007      	b.n	8000c58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e004      	b.n	8000c58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e001      	b.n	8000c58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000010 	.word	0x20000010
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	2000000c 	.word	0x2000000c

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000010 	.word	0x20000010
 8000c94:	200002cc 	.word	0x200002cc

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200002cc 	.word	0x200002cc

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff ffee 	bl	8000c98 <HAL_GetTick>
 8000cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffde 	bl	8000c98 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000010 	.word	0x20000010

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	; (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	; 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e78:	f7ff ff8e 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff29 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff3e 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff8e 	bl	8000dec <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5d 	bl	8000d98 <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff31 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa2 	bl	8000e54 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2a:	e148      	b.n	80011be <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	2101      	movs	r1, #1
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 813a 	beq.w	80011b8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d00b      	beq.n	8000f64 <HAL_GPIO_Init+0x48>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d007      	beq.n	8000f64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f58:	2b11      	cmp	r3, #17
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b12      	cmp	r3, #18
 8000f62:	d130      	bne.n	8000fc6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	f003 0201 	and.w	r2, r3, #1
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0xea>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b12      	cmp	r3, #18
 8001004:	d123      	bne.n	800104e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	691a      	ldr	r2, [r3, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	6939      	ldr	r1, [r7, #16]
 800104a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0203 	and.w	r2, r3, #3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 8094 	beq.w	80011b8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001090:	4b52      	ldr	r3, [pc, #328]	; (80011dc <HAL_GPIO_Init+0x2c0>)
 8001092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001094:	4a51      	ldr	r2, [pc, #324]	; (80011dc <HAL_GPIO_Init+0x2c0>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6613      	str	r3, [r2, #96]	; 0x60
 800109c:	4b4f      	ldr	r3, [pc, #316]	; (80011dc <HAL_GPIO_Init+0x2c0>)
 800109e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010a8:	4a4d      	ldr	r2, [pc, #308]	; (80011e0 <HAL_GPIO_Init+0x2c4>)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010d2:	d00d      	beq.n	80010f0 <HAL_GPIO_Init+0x1d4>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a43      	ldr	r2, [pc, #268]	; (80011e4 <HAL_GPIO_Init+0x2c8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d007      	beq.n	80010ec <HAL_GPIO_Init+0x1d0>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a42      	ldr	r2, [pc, #264]	; (80011e8 <HAL_GPIO_Init+0x2cc>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d101      	bne.n	80010e8 <HAL_GPIO_Init+0x1cc>
 80010e4:	2302      	movs	r3, #2
 80010e6:	e004      	b.n	80010f2 <HAL_GPIO_Init+0x1d6>
 80010e8:	2307      	movs	r3, #7
 80010ea:	e002      	b.n	80010f2 <HAL_GPIO_Init+0x1d6>
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <HAL_GPIO_Init+0x1d6>
 80010f0:	2300      	movs	r3, #0
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	f002 0203 	and.w	r2, r2, #3
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	4093      	lsls	r3, r2
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001102:	4937      	ldr	r1, [pc, #220]	; (80011e0 <HAL_GPIO_Init+0x2c4>)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001110:	4b36      	ldr	r3, [pc, #216]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001134:	4a2d      	ldr	r2, [pc, #180]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800113a:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001188:	4a18      	ldr	r2, [pc, #96]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3301      	adds	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa22 f303 	lsr.w	r3, r2, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f47f aeaf 	bne.w	8000f2c <HAL_GPIO_Init+0x10>
  }
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40010000 	.word	0x40010000
 80011e4:	48000400 	.word	0x48000400
 80011e8:	48000800 	.word	0x48000800
 80011ec:	40010400 	.word	0x40010400

080011f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
 80011fc:	4613      	mov	r3, r2
 80011fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001200:	787b      	ldrb	r3, [r7, #1]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800120c:	e002      	b.n	8001214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001222:	b08b      	sub	sp, #44	; 0x2c
 8001224:	af06      	add	r7, sp, #24
 8001226:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e104      	b.n	800143c <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d106      	bne.n	800124c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f007 faa4 	bl	8008794 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2203      	movs	r2, #3
 8001250:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f003 fbfd 	bl	8004a58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	687e      	ldr	r6, [r7, #4]
 8001266:	466d      	mov	r5, sp
 8001268:	f106 0410 	add.w	r4, r6, #16
 800126c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	602b      	str	r3, [r5, #0]
 8001274:	1d33      	adds	r3, r6, #4
 8001276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001278:	6838      	ldr	r0, [r7, #0]
 800127a:	f003 fbc5 	bl	8004a08 <USB_CoreInit>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2202      	movs	r2, #2
 8001288:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0d5      	b.n	800143c <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f003 fbf9 	bl	8004a8e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129c:	2300      	movs	r3, #0
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	e04c      	b.n	800133c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	3301      	adds	r3, #1
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	440b      	add	r3, r1
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	b298      	uxth	r0, r3
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	440b      	add	r3, r1
 80012de:	3336      	adds	r3, #54	; 0x36
 80012e0:	4602      	mov	r2, r0
 80012e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	3303      	adds	r3, #3
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	440b      	add	r3, r1
 8001308:	3338      	adds	r3, #56	; 0x38
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800130e:	7bfa      	ldrb	r2, [r7, #15]
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	333c      	adds	r3, #60	; 0x3c
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	440b      	add	r3, r1
 8001330:	3340      	adds	r3, #64	; 0x40
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	3301      	adds	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	429a      	cmp	r2, r3
 8001344:	d3ad      	bcc.n	80012a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
 800134a:	e044      	b.n	80013d6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800138e:	7bfa      	ldrb	r2, [r7, #15]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	440b      	add	r3, r1
 800139c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	440b      	add	r3, r1
 80013c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	3301      	adds	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3b5      	bcc.n	800134c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	687e      	ldr	r6, [r7, #4]
 80013e8:	466d      	mov	r5, sp
 80013ea:	f106 0410 	add.w	r4, r6, #16
 80013ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	602b      	str	r3, [r5, #0]
 80013f6:	1d33      	adds	r3, r6, #4
 80013f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013fa:	6838      	ldr	r0, [r7, #0]
 80013fc:	f003 fb54 	bl	8004aa8 <USB_DevInit>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2202      	movs	r2, #2
 800140a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e014      	b.n	800143c <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d102      	bne.n	8001430 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f001 fa71 	bl	8002912 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f005 fb0d 	bl	8006a54 <USB_DevDisconnect>

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001444 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <HAL_PCD_Start+0x16>
 8001456:	2302      	movs	r3, #2
 8001458:	e012      	b.n	8001480 <HAL_PCD_Start+0x3c>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fadf 	bl	8004a2a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f005 fad8 	bl	8006a26 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f005 faf2 	bl	8006a7e <USB_ReadInterrupts>
 800149a:	4603      	mov	r3, r0
 800149c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014a4:	d102      	bne.n	80014ac <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fb5b 	bl	8001b62 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f005 fae4 	bl	8006a7e <USB_ReadInterrupts>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c0:	d112      	bne.n	80014e8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014d4:	b292      	uxth	r2, r2
 80014d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f007 f9d5 	bl	800888a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80014e0:	2100      	movs	r1, #0
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f91e 	bl	8001724 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f005 fac6 	bl	8006a7e <USB_ReadInterrupts>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014fc:	d10b      	bne.n	8001516 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001510:	b292      	uxth	r2, r2
 8001512:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f005 faaf 	bl	8006a7e <USB_ReadInterrupts>
 8001520:	4603      	mov	r3, r0
 8001522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800152a:	d10b      	bne.n	8001544 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001534:	b29a      	uxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800153e:	b292      	uxth	r2, r2
 8001540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f005 fa98 	bl	8006a7e <USB_ReadInterrupts>
 800154e:	4603      	mov	r3, r0
 8001550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001558:	d133      	bne.n	80015c2 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001562:	b29a      	uxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0204 	bic.w	r2, r2, #4
 800156c:	b292      	uxth	r2, r2
 800156e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800157a:	b29a      	uxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0208 	bic.w	r2, r2, #8
 8001584:	b292      	uxth	r2, r2
 8001586:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001590:	2b01      	cmp	r3, #1
 8001592:	d107      	bne.n	80015a4 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800159c:	2100      	movs	r1, #0
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f007 fc24 	bl	8008dec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f007 f9a9 	bl	80088fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015bc:	b292      	uxth	r2, r2
 80015be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f005 fa59 	bl	8006a7e <USB_ReadInterrupts>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015d6:	d126      	bne.n	8001626 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0208 	orr.w	r2, r2, #8
 80015ea:	b292      	uxth	r2, r2
 80015ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001602:	b292      	uxth	r2, r2
 8001604:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0204 	orr.w	r2, r2, #4
 800161a:	b292      	uxth	r2, r2
 800161c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f007 f951 	bl	80088c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f005 fa27 	bl	8006a7e <USB_ReadInterrupts>
 8001630:	4603      	mov	r3, r0
 8001632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001636:	2b80      	cmp	r3, #128	; 0x80
 8001638:	d13f      	bne.n	80016ba <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001642:	b29a      	uxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800164c:	b292      	uxth	r2, r2
 800164e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d12b      	bne.n	80016b4 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001664:	b29a      	uxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0204 	orr.w	r2, r2, #4
 800166e:	b292      	uxth	r2, r2
 8001670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800167c:	b29a      	uxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0208 	orr.w	r2, r2, #8
 8001686:	b292      	uxth	r2, r2
 8001688:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800169c:	b29b      	uxth	r3, r3
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80016aa:	2101      	movs	r1, #1
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f007 fb9d 	bl	8008dec <HAL_PCDEx_LPM_Callback>
 80016b2:	e002      	b.n	80016ba <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f007 f907 	bl	80088c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f005 f9dd 	bl	8006a7e <USB_ReadInterrupts>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ce:	d10e      	bne.n	80016ee <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016d8:	b29a      	uxth	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016e2:	b292      	uxth	r2, r2
 80016e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f007 f8c0 	bl	800886e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f005 f9c3 	bl	8006a7e <USB_ReadInterrupts>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001702:	d10b      	bne.n	800171c <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800170c:	b29a      	uxth	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001716:	b292      	uxth	r2, r2
 8001718:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_PCD_SetAddress+0x1a>
 800173a:	2302      	movs	r3, #2
 800173c:	e013      	b.n	8001766 <HAL_PCD_SetAddress+0x42>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	78fa      	ldrb	r2, [r7, #3]
 800174a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f005 f951 	bl	80069fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	4608      	mov	r0, r1
 8001778:	4611      	mov	r1, r2
 800177a:	461a      	mov	r2, r3
 800177c:	4603      	mov	r3, r0
 800177e:	70fb      	strb	r3, [r7, #3]
 8001780:	460b      	mov	r3, r1
 8001782:	803b      	strh	r3, [r7, #0]
 8001784:	4613      	mov	r3, r2
 8001786:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800178c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001790:	2b00      	cmp	r3, #0
 8001792:	da0e      	bge.n	80017b2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	705a      	strb	r2, [r3, #1]
 80017b0:	e00e      	b.n	80017d0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	f003 0207 	and.w	r2, r3, #7
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80017dc:	883a      	ldrh	r2, [r7, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	78ba      	ldrb	r2, [r7, #2]
 80017e6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017fa:	78bb      	ldrb	r3, [r7, #2]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d102      	bne.n	8001806 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_PCD_EP_Open+0xa6>
 8001810:	2302      	movs	r3, #2
 8001812:	e00e      	b.n	8001832 <HAL_PCD_EP_Open+0xc4>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68f9      	ldr	r1, [r7, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f003 f962 	bl	8004aec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001830:	7afb      	ldrb	r3, [r7, #11]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800184a:	2b00      	cmp	r3, #0
 800184c:	da0e      	bge.n	800186c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2201      	movs	r2, #1
 8001868:	705a      	strb	r2, [r3, #1]
 800186a:	e00e      	b.n	800188a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	f003 0207 	and.w	r2, r3, #7
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	b2da      	uxtb	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_PCD_EP_Close+0x6a>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e00e      	b.n	80018c2 <HAL_PCD_EP_Close+0x88>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 fc88 	bl	80051c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	460b      	mov	r3, r1
 80018d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	f003 0207 	and.w	r2, r3, #7
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2200      	movs	r2, #0
 8001902:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2200      	movs	r2, #0
 8001908:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	b2da      	uxtb	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	2b00      	cmp	r3, #0
 800191e:	d106      	bne.n	800192e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6979      	ldr	r1, [r7, #20]
 8001926:	4618      	mov	r0, r3
 8001928:	f003 fe3b 	bl	80055a2 <USB_EPStartXfer>
 800192c:	e005      	b.n	800193a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6979      	ldr	r1, [r7, #20]
 8001934:	4618      	mov	r0, r3
 8001936:	f003 fe34 	bl	80055a2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	f003 0207 	and.w	r2, r3, #7
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	460b      	mov	r3, r1
 8001982:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001984:	7afb      	ldrb	r3, [r7, #11]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2201      	movs	r2, #1
 80019be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019c0:	7afb      	ldrb	r3, [r7, #11]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019cc:	7afb      	ldrb	r3, [r7, #11]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6979      	ldr	r1, [r7, #20]
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 fde0 	bl	80055a2 <USB_EPStartXfer>
 80019e2:	e005      	b.n	80019f0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6979      	ldr	r1, [r7, #20]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fdd9 	bl	80055a2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	f003 0207 	and.w	r2, r3, #7
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d901      	bls.n	8001a18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e04c      	b.n	8001ab2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da0e      	bge.n	8001a3e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	705a      	strb	r2, [r3, #1]
 8001a3c:	e00c      	b.n	8001a58 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_PCD_EP_SetStall+0x7e>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e01c      	b.n	8001ab2 <HAL_PCD_EP_SetStall+0xb8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68f9      	ldr	r1, [r7, #12]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 feba 	bl	8006800 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d108      	bne.n	8001aa8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	f004 fffb 	bl	8006a9e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	f003 020f 	and.w	r2, r3, #15
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d901      	bls.n	8001ad8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e040      	b.n	8001b5a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	da0e      	bge.n	8001afe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	705a      	strb	r2, [r3, #1]
 8001afc:	e00e      	b.n	8001b1c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	f003 0207 	and.w	r2, r3, #7
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_PCD_EP_ClrStall+0x82>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e00e      	b.n	8001b5a <HAL_PCD_EP_ClrStall+0xa0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f004 fea9 	bl	80068a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b08e      	sub	sp, #56	; 0x38
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b6a:	e2d1      	b.n	8002110 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b74:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 8152 	bne.w	8001e30 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d150      	bne.n	8001c38 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba6:	81fb      	strh	r3, [r7, #14]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	89fb      	ldrh	r3, [r7, #14]
 8001bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3328      	adds	r3, #40	; 0x28
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f006 fe1e 	bl	800883a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8282 	beq.w	8002110 <PCD_EP_ISR_Handler+0x5ae>
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f040 827d 	bne.w	8002110 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	b292      	uxth	r2, r2
 8001c2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c36:	e26b      	b.n	8002110 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d032      	beq.n	8001cb8 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	f004 ff54 	bl	8006b3a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	823b      	strh	r3, [r7, #16]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	8a3a      	ldrh	r2, [r7, #16]
 8001ca8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cac:	b292      	uxth	r2, r2
 8001cae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f006 fd95 	bl	80087e0 <HAL_PCD_SetupStageCallback>
 8001cb6:	e22b      	b.n	8002110 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cb8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f280 8227 	bge.w	8002110 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cce:	4013      	ands	r3, r2
 8001cd0:	83bb      	strh	r3, [r7, #28]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	8bba      	ldrh	r2, [r7, #28]
 8001cd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d019      	beq.n	8001d44 <PCD_EP_ISR_Handler+0x1e2>
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d015      	beq.n	8001d44 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	6959      	ldr	r1, [r3, #20]
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	f004 ff06 	bl	8006b3a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	441a      	add	r2, r3
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f006 fd60 	bl	8008804 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4413      	add	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d112      	bne.n	8001d92 <PCD_EP_ISR_Handler+0x230>
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	801a      	strh	r2, [r3, #0]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	801a      	strh	r2, [r3, #0]
 8001d90:	e02f      	b.n	8001df2 <PCD_EP_ISR_Handler+0x290>
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b3e      	cmp	r3, #62	; 0x3e
 8001d98:	d813      	bhi.n	8001dc2 <PCD_EP_ISR_Handler+0x260>
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	633b      	str	r3, [r7, #48]	; 0x30
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <PCD_EP_ISR_Handler+0x252>
 8001dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db0:	3301      	adds	r3, #1
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	029b      	lsls	r3, r3, #10
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	801a      	strh	r2, [r3, #0]
 8001dc0:	e017      	b.n	8001df2 <PCD_EP_ISR_Handler+0x290>
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <PCD_EP_ISR_Handler+0x27a>
 8001dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
 8001ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	029b      	lsls	r3, r3, #10
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e02:	827b      	strh	r3, [r7, #18]
 8001e04:	8a7b      	ldrh	r3, [r7, #18]
 8001e06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e0a:	827b      	strh	r3, [r7, #18]
 8001e0c:	8a7b      	ldrh	r3, [r7, #18]
 8001e0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e12:	827b      	strh	r3, [r7, #18]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	8a7b      	ldrh	r3, [r7, #18]
 8001e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	8013      	strh	r3, [r2, #0]
 8001e2e:	e16f      	b.n	8002110 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e42:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f280 80e4 	bge.w	8002014 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e62:	4013      	ands	r3, r2
 8001e64:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e7a:	b292      	uxth	r2, r2
 8001e7c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e7e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	7b1b      	ldrb	r3, [r3, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d120      	bne.n	8001ede <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001ec2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 8083 	beq.w	8001fd0 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	6959      	ldr	r1, [r3, #20]
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	88da      	ldrh	r2, [r3, #6]
 8001ed6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ed8:	f004 fe2f 	bl	8006b3a <USB_ReadPMA>
 8001edc:	e078      	b.n	8001fd0 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	78db      	ldrb	r3, [r3, #3]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d108      	bne.n	8001ef8 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ee6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ee8:	461a      	mov	r2, r3
 8001eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f91d 	bl	800212c <HAL_PCD_EP_DB_Receive>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ef6:	e06b      	b.n	8001fd0 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f12:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	441a      	add	r2, r3
 8001f22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01f      	beq.n	8001f92 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f76:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d028      	beq.n	8001fd0 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	6959      	ldr	r1, [r3, #20]
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	891a      	ldrh	r2, [r3, #8]
 8001f8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f8c:	f004 fdd5 	bl	8006b3a <USB_ReadPMA>
 8001f90:	e01e      	b.n	8001fd0 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d008      	beq.n	8001fd0 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	6959      	ldr	r1, [r3, #20]
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	895a      	ldrh	r2, [r3, #10]
 8001fca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fcc:	f004 fdb5 	bl	8006b3a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fd6:	441a      	add	r2, r3
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fe2:	441a      	add	r2, r3
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <PCD_EP_ISR_Handler+0x498>
 8001ff0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d206      	bcs.n	8002008 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	4619      	mov	r1, r3
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f006 fbff 	bl	8008804 <HAL_PCD_DataOutStageCallback>
 8002006:	e005      	b.n	8002014 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800200e:	4618      	mov	r0, r3
 8002010:	f003 fac7 	bl	80055a2 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002014:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201a:	2b00      	cmp	r3, #0
 800201c:	d078      	beq.n	8002110 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 800201e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204c:	843b      	strh	r3, [r7, #32]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	441a      	add	r2, r3
 800205c:	8c3b      	ldrh	r3, [r7, #32]
 800205e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002066:	b29b      	uxth	r3, r3
 8002068:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	78db      	ldrb	r3, [r3, #3]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d108      	bne.n	8002084 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002076:	2b02      	cmp	r3, #2
 8002078:	d144      	bne.n	8002104 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800207a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d13f      	bne.n	8002104 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800208c:	b29b      	uxth	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	4413      	add	r3, r2
 800209e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	8bfb      	ldrh	r3, [r7, #30]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d906      	bls.n	80020c2 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	8bfb      	ldrh	r3, [r7, #30]
 80020ba:	1ad2      	subs	r2, r2, r3
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	619a      	str	r2, [r3, #24]
 80020c0:	e002      	b.n	80020c8 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d106      	bne.n	80020de <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f006 fbaf 	bl	800883a <HAL_PCD_DataInStageCallback>
 80020dc:	e018      	b.n	8002110 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	8bfb      	ldrh	r3, [r7, #30]
 80020e4:	441a      	add	r2, r3
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	8bfb      	ldrh	r3, [r7, #30]
 80020f0:	441a      	add	r2, r3
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020fc:	4618      	mov	r0, r3
 80020fe:	f003 fa50 	bl	80055a2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002102:	e005      	b.n	8002110 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002104:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002106:	461a      	mov	r2, r3
 8002108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f917 	bl	800233e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002118:	b29b      	uxth	r3, r3
 800211a:	b21b      	sxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	f6ff ad25 	blt.w	8001b6c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3738      	adds	r7, #56	; 0x38
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d07c      	beq.n	800223e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214c:	b29b      	uxth	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	4413      	add	r3, r2
 800215e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002168:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	8b7b      	ldrh	r3, [r7, #26]
 8002170:	429a      	cmp	r2, r3
 8002172:	d306      	bcc.n	8002182 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	8b7b      	ldrh	r3, [r7, #26]
 800217a:	1ad2      	subs	r2, r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	619a      	str	r2, [r3, #24]
 8002180:	e002      	b.n	8002188 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d123      	bne.n	80021d8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021aa:	833b      	strh	r3, [r7, #24]
 80021ac:	8b3b      	ldrh	r3, [r7, #24]
 80021ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021b2:	833b      	strh	r3, [r7, #24]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	441a      	add	r2, r3
 80021c2:	8b3b      	ldrh	r3, [r7, #24]
 80021c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d01f      	beq.n	8002222 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fc:	82fb      	strh	r3, [r7, #22]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	441a      	add	r2, r3
 800220c:	8afb      	ldrh	r3, [r7, #22]
 800220e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800221a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800221e:	b29b      	uxth	r3, r3
 8002220:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002222:	8b7b      	ldrh	r3, [r7, #26]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 8085 	beq.w	8002334 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	6959      	ldr	r1, [r3, #20]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	891a      	ldrh	r2, [r3, #8]
 8002236:	8b7b      	ldrh	r3, [r7, #26]
 8002238:	f004 fc7f 	bl	8006b3a <USB_ReadPMA>
 800223c:	e07a      	b.n	8002334 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002246:	b29b      	uxth	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	4413      	add	r3, r2
 8002258:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002262:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	699a      	ldr	r2, [r3, #24]
 8002268:	8b7b      	ldrh	r3, [r7, #26]
 800226a:	429a      	cmp	r2, r3
 800226c:	d306      	bcc.n	800227c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	8b7b      	ldrh	r3, [r7, #26]
 8002274:	1ad2      	subs	r2, r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	619a      	str	r2, [r3, #24]
 800227a:	e002      	b.n	8002282 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d123      	bne.n	80022d2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a4:	83fb      	strh	r3, [r7, #30]
 80022a6:	8bfb      	ldrh	r3, [r7, #30]
 80022a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022ac:	83fb      	strh	r3, [r7, #30]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	441a      	add	r2, r3
 80022bc:	8bfb      	ldrh	r3, [r7, #30]
 80022be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d11f      	bne.n	800231c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f6:	83bb      	strh	r3, [r7, #28]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	441a      	add	r2, r3
 8002306:	8bbb      	ldrh	r3, [r7, #28]
 8002308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800230c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002314:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002318:	b29b      	uxth	r3, r3
 800231a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800231c:	8b7b      	ldrh	r3, [r7, #26]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	6959      	ldr	r1, [r3, #20]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	895a      	ldrh	r2, [r3, #10]
 800232e:	8b7b      	ldrh	r3, [r7, #26]
 8002330:	f004 fc03 	bl	8006b3a <USB_ReadPMA>
    }
  }

  return count;
 8002334:	8b7b      	ldrh	r3, [r7, #26]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b094      	sub	sp, #80	; 0x50
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	4613      	mov	r3, r2
 800234a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8136 	beq.w	80025c4 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4413      	add	r3, r2
 8002372:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	699a      	ldr	r2, [r3, #24]
 8002384:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002388:	429a      	cmp	r2, r3
 800238a:	d907      	bls.n	800239c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	699a      	ldr	r2, [r3, #24]
 8002390:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002394:	1ad2      	subs	r2, r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	619a      	str	r2, [r3, #24]
 800239a:	e002      	b.n	80023a2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2200      	movs	r2, #0
 80023a0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d12c      	bne.n	8002404 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f006 fa42 	bl	800883a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 8238 	beq.w	8002832 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023dc:	82fb      	strh	r3, [r7, #22]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	441a      	add	r2, r3
 80023ec:	8afb      	ldrh	r3, [r7, #22]
 80023ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023fe:	b29b      	uxth	r3, r3
 8002400:	8013      	strh	r3, [r2, #0]
 8002402:	e216      	b.n	8002832 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d01f      	beq.n	800244e <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002428:	857b      	strh	r3, [r7, #42]	; 0x2a
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	441a      	add	r2, r3
 8002438:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800243a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800243e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002442:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800244a:	b29b      	uxth	r3, r3
 800244c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002454:	2b01      	cmp	r3, #1
 8002456:	f040 81ec 	bne.w	8002832 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002462:	441a      	add	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002470:	441a      	add	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	6a1a      	ldr	r2, [r3, #32]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	429a      	cmp	r2, r3
 8002480:	d309      	bcc.n	8002496 <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	6a1a      	ldr	r2, [r3, #32]
 800248c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800248e:	1ad2      	subs	r2, r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	621a      	str	r2, [r3, #32]
 8002494:	e015      	b.n	80024c2 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d107      	bne.n	80024ae <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 800249e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024a2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024ac:	e009      	b.n	80024c2 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2200      	movs	r2, #0
 80024c0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	785b      	ldrb	r3, [r3, #1]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d155      	bne.n	8002576 <HAL_PCD_EP_DB_Transmit+0x238>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	61fb      	str	r3, [r7, #28]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d8:	b29b      	uxth	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	00da      	lsls	r2, r3, #3
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4413      	add	r3, r2
 80024ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d112      	bne.n	800251e <HAL_PCD_EP_DB_Transmit+0x1e0>
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002502:	b29a      	uxth	r2, r3
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	801a      	strh	r2, [r3, #0]
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002516:	b29a      	uxth	r2, r3
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	801a      	strh	r2, [r3, #0]
 800251c:	e047      	b.n	80025ae <HAL_PCD_EP_DB_Transmit+0x270>
 800251e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002520:	2b3e      	cmp	r3, #62	; 0x3e
 8002522:	d811      	bhi.n	8002548 <HAL_PCD_EP_DB_Transmit+0x20a>
 8002524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800252a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_PCD_EP_DB_Transmit+0x1fc>
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	3301      	adds	r3, #1
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	b29b      	uxth	r3, r3
 800253e:	029b      	lsls	r3, r3, #10
 8002540:	b29a      	uxth	r2, r3
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	801a      	strh	r2, [r3, #0]
 8002546:	e032      	b.n	80025ae <HAL_PCD_EP_DB_Transmit+0x270>
 8002548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <HAL_PCD_EP_DB_Transmit+0x220>
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	3b01      	subs	r3, #1
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002560:	b29b      	uxth	r3, r3
 8002562:	029b      	lsls	r3, r3, #10
 8002564:	b29b      	uxth	r3, r3
 8002566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800256a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800256e:	b29a      	uxth	r2, r3
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	801a      	strh	r2, [r3, #0]
 8002574:	e01b      	b.n	80025ae <HAL_PCD_EP_DB_Transmit+0x270>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	785b      	ldrb	r3, [r3, #1]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d117      	bne.n	80025ae <HAL_PCD_EP_DB_Transmit+0x270>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258c:	b29b      	uxth	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	4413      	add	r3, r2
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	00da      	lsls	r2, r3, #3
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	4413      	add	r3, r2
 80025a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025a4:	623b      	str	r3, [r7, #32]
 80025a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	6959      	ldr	r1, [r3, #20]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	891a      	ldrh	r2, [r3, #8]
 80025ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025bc:	b29b      	uxth	r3, r3
 80025be:	f004 fa7a 	bl	8006ab6 <USB_WritePMA>
 80025c2:	e136      	b.n	8002832 <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	4413      	add	r3, r2
 80025de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	699a      	ldr	r2, [r3, #24]
 80025f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d307      	bcc.n	8002608 <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002600:	1ad2      	subs	r2, r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	619a      	str	r2, [r3, #24]
 8002606:	e002      	b.n	800260e <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2200      	movs	r2, #0
 800260c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d12e      	bne.n	8002674 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	4619      	mov	r1, r3
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f006 f90c 	bl	800883a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 8102 	bne.w	8002832 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002648:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	441a      	add	r2, r3
 800265a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800265e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800266a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266e:	b29b      	uxth	r3, r3
 8002670:	8013      	strh	r3, [r2, #0]
 8002672:	e0de      	b.n	8002832 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11f      	bne.n	80026be <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002698:	867b      	strh	r3, [r7, #50]	; 0x32
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	441a      	add	r2, r3
 80026a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80026aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	f040 80b4 	bne.w	8002832 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026d2:	441a      	add	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026e0:	441a      	add	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	6a1a      	ldr	r2, [r3, #32]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d309      	bcc.n	8002706 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fe:	1ad2      	subs	r2, r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	621a      	str	r2, [r3, #32]
 8002704:	e015      	b.n	8002732 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d107      	bne.n	800271e <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 800270e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002712:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800271c:	e009      	b.n	8002732 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2200      	movs	r2, #0
 8002728:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	643b      	str	r3, [r7, #64]	; 0x40
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d155      	bne.n	80027ec <HAL_PCD_EP_DB_Transmit+0x4ae>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	63bb      	str	r3, [r7, #56]	; 0x38
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800274e:	b29b      	uxth	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	4413      	add	r3, r2
 8002756:	63bb      	str	r3, [r7, #56]	; 0x38
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	00da      	lsls	r2, r3, #3
 800275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002760:	4413      	add	r3, r2
 8002762:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
 8002768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276a:	2b00      	cmp	r3, #0
 800276c:	d112      	bne.n	8002794 <HAL_PCD_EP_DB_Transmit+0x456>
 800276e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002778:	b29a      	uxth	r2, r3
 800277a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277c:	801a      	strh	r2, [r3, #0]
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278c:	b29a      	uxth	r2, r3
 800278e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	e044      	b.n	800281e <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002796:	2b3e      	cmp	r3, #62	; 0x3e
 8002798:	d811      	bhi.n	80027be <HAL_PCD_EP_DB_Transmit+0x480>
 800279a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_PCD_EP_DB_Transmit+0x472>
 80027aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ac:	3301      	adds	r3, #1
 80027ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	029b      	lsls	r3, r3, #10
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ba:	801a      	strh	r2, [r3, #0]
 80027bc:	e02f      	b.n	800281e <HAL_PCD_EP_DB_Transmit+0x4e0>
 80027be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x496>
 80027ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d0:	3b01      	subs	r3, #1
 80027d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	029b      	lsls	r3, r3, #10
 80027da:	b29b      	uxth	r3, r3
 80027dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	e018      	b.n	800281e <HAL_PCD_EP_DB_Transmit+0x4e0>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d114      	bne.n	800281e <HAL_PCD_EP_DB_Transmit+0x4e0>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002802:	4413      	add	r3, r2
 8002804:	643b      	str	r3, [r7, #64]	; 0x40
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	00da      	lsls	r2, r3, #3
 800280c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800280e:	4413      	add	r3, r2
 8002810:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002818:	b29a      	uxth	r2, r3
 800281a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	6959      	ldr	r1, [r3, #20]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	895a      	ldrh	r2, [r3, #10]
 800282a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282c:	b29b      	uxth	r3, r3
 800282e:	f004 f942 	bl	8006ab6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800284c:	82bb      	strh	r3, [r7, #20]
 800284e:	8abb      	ldrh	r3, [r7, #20]
 8002850:	f083 0310 	eor.w	r3, r3, #16
 8002854:	82bb      	strh	r3, [r7, #20]
 8002856:	8abb      	ldrh	r3, [r7, #20]
 8002858:	f083 0320 	eor.w	r3, r3, #32
 800285c:	82bb      	strh	r3, [r7, #20]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	441a      	add	r2, r3
 800286c:	8abb      	ldrh	r3, [r7, #20]
 800286e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287e:	b29b      	uxth	r3, r3
 8002880:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3750      	adds	r7, #80	; 0x50
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	817b      	strh	r3, [r7, #10]
 800289a:	4613      	mov	r3, r2
 800289c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800289e:	897b      	ldrh	r3, [r7, #10]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028aa:	897b      	ldrh	r3, [r7, #10]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4413      	add	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	e009      	b.n	80028d6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028c2:	897a      	ldrh	r2, [r7, #10]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028d6:	893b      	ldrh	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2200      	movs	r2, #0
 80028e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	80da      	strh	r2, [r3, #6]
 80028ea:	e00b      	b.n	8002904 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2201      	movs	r2, #1
 80028f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	b29a      	uxth	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002912:	b480      	push	{r7}
 8002914:	b085      	sub	sp, #20
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002936:	b29b      	uxth	r3, r3
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800294a:	b29b      	uxth	r3, r3
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <HAL_PWREx_GetVoltageRange+0x18>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40007000 	.word	0x40007000

08002984 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002992:	d130      	bne.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800299c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a0:	d038      	beq.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029aa:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2232      	movs	r2, #50	; 0x32
 80029b8:	fb02 f303 	mul.w	r3, r2, r3
 80029bc:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0c9b      	lsrs	r3, r3, #18
 80029c4:	3301      	adds	r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029c8:	e002      	b.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029dc:	d102      	bne.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f2      	bne.n	80029ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f0:	d110      	bne.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e00f      	b.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a02:	d007      	beq.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a0c:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40007000 	.word	0x40007000
 8002a28:	20000008 	.word	0x20000008
 8002a2c:	431bde83 	.word	0x431bde83

08002a30 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a3e:	6053      	str	r3, [r2, #4]
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40007000 	.word	0x40007000

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f000 bc11 	b.w	8003286 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a64:	4ba0      	ldr	r3, [pc, #640]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a6e:	4b9e      	ldr	r3, [pc, #632]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80e4 	beq.w	8002c4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4c>
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b0c      	cmp	r3, #12
 8002a90:	f040 808b 	bne.w	8002baa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	f040 8087 	bne.w	8002baa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a9c:	4b92      	ldr	r3, [pc, #584]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x64>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e3e8      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1a      	ldr	r2, [r3, #32]
 8002ab8:	4b8b      	ldr	r3, [pc, #556]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d004      	beq.n	8002ace <HAL_RCC_OscConfig+0x7e>
 8002ac4:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002acc:	e005      	b.n	8002ada <HAL_RCC_OscConfig+0x8a>
 8002ace:	4b86      	ldr	r3, [pc, #536]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d223      	bcs.n	8002b26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fd42 	bl	800356c <RCC_SetFlashLatencyFromMSIRange>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e3c9      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af2:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a7c      	ldr	r2, [pc, #496]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002af8:	f043 0308 	orr.w	r3, r3, #8
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b7a      	ldr	r3, [pc, #488]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4977      	ldr	r1, [pc, #476]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b10:	4b75      	ldr	r3, [pc, #468]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	4972      	ldr	r1, [pc, #456]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
 8002b24:	e025      	b.n	8002b72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b26:	4b70      	ldr	r3, [pc, #448]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a6f      	ldr	r2, [pc, #444]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002b2c:	f043 0308 	orr.w	r3, r3, #8
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	496a      	ldr	r1, [pc, #424]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b44:	4b68      	ldr	r3, [pc, #416]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	4965      	ldr	r1, [pc, #404]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fd02 	bl	800356c <RCC_SetFlashLatencyFromMSIRange>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e389      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b72:	f000 fc6f 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8002b76:	4602      	mov	r2, r0
 8002b78:	4b5b      	ldr	r3, [pc, #364]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	495a      	ldr	r1, [pc, #360]	; (8002cec <HAL_RCC_OscConfig+0x29c>)
 8002b84:	5ccb      	ldrb	r3, [r1, r3]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8e:	4a58      	ldr	r2, [pc, #352]	; (8002cf0 <HAL_RCC_OscConfig+0x2a0>)
 8002b90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b92:	4b58      	ldr	r3, [pc, #352]	; (8002cf4 <HAL_RCC_OscConfig+0x2a4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe f82e 	bl	8000bf8 <HAL_InitTick>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d052      	beq.n	8002c4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	e36d      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d032      	beq.n	8002c18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bb2:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a4c      	ldr	r2, [pc, #304]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe f86b 	bl	8000c98 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bc6:	f7fe f867 	bl	8000c98 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e356      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bd8:	4b43      	ldr	r3, [pc, #268]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002be4:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a3f      	ldr	r2, [pc, #252]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002bea:	f043 0308 	orr.w	r3, r3, #8
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	493a      	ldr	r1, [pc, #232]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c02:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	4935      	ldr	r1, [pc, #212]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
 8002c16:	e01a      	b.n	8002c4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c18:	4b33      	ldr	r3, [pc, #204]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a32      	ldr	r2, [pc, #200]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c24:	f7fe f838 	bl	8000c98 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c2c:	f7fe f834 	bl	8000c98 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e323      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x1dc>
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d073      	beq.n	8002d42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_OscConfig+0x21c>
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b0c      	cmp	r3, #12
 8002c64:	d10e      	bne.n	8002c84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d10b      	bne.n	8002c84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d063      	beq.n	8002d40 <HAL_RCC_OscConfig+0x2f0>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d15f      	bne.n	8002d40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e300      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d106      	bne.n	8002c9c <HAL_RCC_OscConfig+0x24c>
 8002c8e:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a15      	ldr	r2, [pc, #84]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e01d      	b.n	8002cd8 <HAL_RCC_OscConfig+0x288>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x270>
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a0f      	ldr	r2, [pc, #60]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCC_OscConfig+0x288>
 8002cc0:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a08      	ldr	r2, [pc, #32]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <HAL_RCC_OscConfig+0x298>)
 8002cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01b      	beq.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fd ffda 	bl	8000c98 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ce6:	e010      	b.n	8002d0a <HAL_RCC_OscConfig+0x2ba>
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	080090e8 	.word	0x080090e8
 8002cf0:	20000008 	.word	0x20000008
 8002cf4:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fd ffce 	bl	8000c98 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e2bd      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d0a:	4baf      	ldr	r3, [pc, #700]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x2a8>
 8002d16:	e014      	b.n	8002d42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fd ffbe 	bl	8000c98 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fd ffba 	bl	8000c98 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e2a9      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d32:	4ba5      	ldr	r3, [pc, #660]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2d0>
 8002d3e:	e000      	b.n	8002d42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d060      	beq.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_OscConfig+0x310>
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d119      	bne.n	8002d8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d116      	bne.n	8002d8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d60:	4b99      	ldr	r3, [pc, #612]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_OscConfig+0x328>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e286      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b93      	ldr	r3, [pc, #588]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	061b      	lsls	r3, r3, #24
 8002d86:	4990      	ldr	r1, [pc, #576]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8c:	e040      	b.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d023      	beq.n	8002dde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d96:	4b8c      	ldr	r3, [pc, #560]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a8b      	ldr	r2, [pc, #556]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fd ff79 	bl	8000c98 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002daa:	f7fd ff75 	bl	8000c98 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e264      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dbc:	4b82      	ldr	r3, [pc, #520]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc8:	4b7f      	ldr	r3, [pc, #508]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	497c      	ldr	r1, [pc, #496]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
 8002ddc:	e018      	b.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dde:	4b7a      	ldr	r3, [pc, #488]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a79      	ldr	r2, [pc, #484]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fd ff55 	bl	8000c98 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df2:	f7fd ff51 	bl	8000c98 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e240      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e04:	4b70      	ldr	r3, [pc, #448]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d03c      	beq.n	8002e96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01c      	beq.n	8002e5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e24:	4b68      	ldr	r3, [pc, #416]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2a:	4a67      	ldr	r2, [pc, #412]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e34:	f7fd ff30 	bl	8000c98 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7fd ff2c 	bl	8000c98 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e21b      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e4e:	4b5e      	ldr	r3, [pc, #376]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ef      	beq.n	8002e3c <HAL_RCC_OscConfig+0x3ec>
 8002e5c:	e01b      	b.n	8002e96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e5e:	4b5a      	ldr	r3, [pc, #360]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e64:	4a58      	ldr	r2, [pc, #352]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7fd ff13 	bl	8000c98 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e76:	f7fd ff0f 	bl	8000c98 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e1fe      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e88:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1ef      	bne.n	8002e76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80a6 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ea8:	4b47      	ldr	r3, [pc, #284]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb4:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	4a43      	ldr	r2, [pc, #268]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec0:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed0:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <HAL_RCC_OscConfig+0x57c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d118      	bne.n	8002f0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002edc:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <HAL_RCC_OscConfig+0x57c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a3a      	ldr	r2, [pc, #232]	; (8002fcc <HAL_RCC_OscConfig+0x57c>)
 8002ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee8:	f7fd fed6 	bl	8000c98 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef0:	f7fd fed2 	bl	8000c98 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e1c1      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f02:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <HAL_RCC_OscConfig+0x57c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d108      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4d8>
 8002f16:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	4a2a      	ldr	r2, [pc, #168]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f26:	e024      	b.n	8002f72 <HAL_RCC_OscConfig+0x522>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d110      	bne.n	8002f52 <HAL_RCC_OscConfig+0x502>
 8002f30:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	4a24      	ldr	r2, [pc, #144]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f40:	4b21      	ldr	r3, [pc, #132]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	4a20      	ldr	r2, [pc, #128]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f50:	e00f      	b.n	8002f72 <HAL_RCC_OscConfig+0x522>
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f62:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002f6a:	f023 0304 	bic.w	r3, r3, #4
 8002f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d016      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7a:	f7fd fe8d 	bl	8000c98 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fd fe89 	bl	8000c98 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e176      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_OscConfig+0x578>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0ed      	beq.n	8002f82 <HAL_RCC_OscConfig+0x532>
 8002fa6:	e01a      	b.n	8002fde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fd fe76 	bl	8000c98 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fae:	e00f      	b.n	8002fd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb0:	f7fd fe72 	bl	8000c98 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d906      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e15f      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fd0:	4baa      	ldr	r3, [pc, #680]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e8      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fde:	7ffb      	ldrb	r3, [r7, #31]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe4:	4ba5      	ldr	r3, [pc, #660]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	4aa4      	ldr	r2, [pc, #656]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8002fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d03c      	beq.n	8003076 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01c      	beq.n	800303e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003004:	4b9d      	ldr	r3, [pc, #628]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003006:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800300a:	4a9c      	ldr	r2, [pc, #624]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fd fe40 	bl	8000c98 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800301c:	f7fd fe3c 	bl	8000c98 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e12b      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800302e:	4b93      	ldr	r3, [pc, #588]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003030:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0ef      	beq.n	800301c <HAL_RCC_OscConfig+0x5cc>
 800303c:	e01b      	b.n	8003076 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800303e:	4b8f      	ldr	r3, [pc, #572]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003040:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003044:	4a8d      	ldr	r2, [pc, #564]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304e:	f7fd fe23 	bl	8000c98 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003056:	f7fd fe1f 	bl	8000c98 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e10e      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003068:	4b84      	ldr	r3, [pc, #528]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 800306a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ef      	bne.n	8003056 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8102 	beq.w	8003284 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	2b02      	cmp	r3, #2
 8003086:	f040 80c5 	bne.w	8003214 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800308a:	4b7c      	ldr	r3, [pc, #496]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f003 0203 	and.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	429a      	cmp	r2, r3
 800309c:	d12c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	3b01      	subs	r3, #1
 80030aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d123      	bne.n	80030f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d11b      	bne.n	80030f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d113      	bne.n	80030f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	3b01      	subs	r3, #1
 80030de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d109      	bne.n	80030f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	3b01      	subs	r3, #1
 80030f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d067      	beq.n	80031c8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	d062      	beq.n	80031c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030fe:	4b5f      	ldr	r3, [pc, #380]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e0bb      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800310e:	4b5b      	ldr	r3, [pc, #364]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a5a      	ldr	r2, [pc, #360]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003114:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003118:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800311a:	f7fd fdbd 	bl	8000c98 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003122:	f7fd fdb9 	bl	8000c98 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e0a8      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003134:	4b51      	ldr	r3, [pc, #324]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f0      	bne.n	8003122 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003140:	4b4e      	ldr	r3, [pc, #312]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	4b4e      	ldr	r3, [pc, #312]	; (8003280 <HAL_RCC_OscConfig+0x830>)
 8003146:	4013      	ands	r3, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003150:	3a01      	subs	r2, #1
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	4311      	orrs	r1, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800315a:	0212      	lsls	r2, r2, #8
 800315c:	4311      	orrs	r1, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003162:	0852      	lsrs	r2, r2, #1
 8003164:	3a01      	subs	r2, #1
 8003166:	0552      	lsls	r2, r2, #21
 8003168:	4311      	orrs	r1, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800316e:	0852      	lsrs	r2, r2, #1
 8003170:	3a01      	subs	r2, #1
 8003172:	0652      	lsls	r2, r2, #25
 8003174:	4311      	orrs	r1, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800317a:	06d2      	lsls	r2, r2, #27
 800317c:	430a      	orrs	r2, r1
 800317e:	493f      	ldr	r1, [pc, #252]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003180:	4313      	orrs	r3, r2
 8003182:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003184:	4b3d      	ldr	r3, [pc, #244]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a3c      	ldr	r2, [pc, #240]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 800318a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800318e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003190:	4b3a      	ldr	r3, [pc, #232]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a39      	ldr	r2, [pc, #228]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800319c:	f7fd fd7c 	bl	8000c98 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fd fd78 	bl	8000c98 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e067      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b6:	4b31      	ldr	r3, [pc, #196]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c2:	e05f      	b.n	8003284 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e05e      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c8:	4b2c      	ldr	r3, [pc, #176]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d157      	bne.n	8003284 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031d4:	4b29      	ldr	r3, [pc, #164]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a28      	ldr	r2, [pc, #160]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 80031da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031e0:	4b26      	ldr	r3, [pc, #152]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4a25      	ldr	r2, [pc, #148]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 80031e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031ec:	f7fd fd54 	bl	8000c98 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fd fd50 	bl	8000c98 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e03f      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003206:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x7a4>
 8003212:	e037      	b.n	8003284 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d02d      	beq.n	8003276 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321a:	4b18      	ldr	r3, [pc, #96]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a17      	ldr	r2, [pc, #92]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003224:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003226:	4b15      	ldr	r3, [pc, #84]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d105      	bne.n	800323e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	4a11      	ldr	r2, [pc, #68]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003238:	f023 0303 	bic.w	r3, r3, #3
 800323c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800323e:	4b0f      	ldr	r3, [pc, #60]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	4a0e      	ldr	r2, [pc, #56]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 8003244:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324e:	f7fd fd23 	bl	8000c98 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003256:	f7fd fd1f 	bl	8000c98 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e00e      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_RCC_OscConfig+0x82c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f0      	bne.n	8003256 <HAL_RCC_OscConfig+0x806>
 8003274:	e006      	b.n	8003284 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e005      	b.n	8003286 <HAL_RCC_OscConfig+0x836>
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop

08003290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0c8      	b.n	8003436 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032a4:	4b66      	ldr	r3, [pc, #408]	; (8003440 <HAL_RCC_ClockConfig+0x1b0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d910      	bls.n	80032d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HAL_RCC_ClockConfig+0x1b0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 0207 	bic.w	r2, r3, #7
 80032ba:	4961      	ldr	r1, [pc, #388]	; (8003440 <HAL_RCC_ClockConfig+0x1b0>)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b5f      	ldr	r3, [pc, #380]	; (8003440 <HAL_RCC_ClockConfig+0x1b0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0b0      	b.n	8003436 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d04c      	beq.n	800337a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e8:	4b56      	ldr	r3, [pc, #344]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d121      	bne.n	8003338 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e09e      	b.n	8003436 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d107      	bne.n	8003310 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003300:	4b50      	ldr	r3, [pc, #320]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d115      	bne.n	8003338 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e092      	b.n	8003436 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d107      	bne.n	8003328 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003318:	4b4a      	ldr	r3, [pc, #296]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d109      	bne.n	8003338 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e086      	b.n	8003436 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003328:	4b46      	ldr	r3, [pc, #280]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e07e      	b.n	8003436 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003338:	4b42      	ldr	r3, [pc, #264]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f023 0203 	bic.w	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	493f      	ldr	r1, [pc, #252]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334a:	f7fd fca5 	bl	8000c98 <HAL_GetTick>
 800334e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003350:	e00a      	b.n	8003368 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003352:	f7fd fca1 	bl	8000c98 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e066      	b.n	8003436 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003368:	4b36      	ldr	r3, [pc, #216]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 020c 	and.w	r2, r3, #12
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	429a      	cmp	r2, r3
 8003378:	d1eb      	bne.n	8003352 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003386:	4b2f      	ldr	r3, [pc, #188]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	492c      	ldr	r1, [pc, #176]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 8003394:	4313      	orrs	r3, r2
 8003396:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003398:	4b29      	ldr	r3, [pc, #164]	; (8003440 <HAL_RCC_ClockConfig+0x1b0>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d210      	bcs.n	80033c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b26      	ldr	r3, [pc, #152]	; (8003440 <HAL_RCC_ClockConfig+0x1b0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 0207 	bic.w	r2, r3, #7
 80033ae:	4924      	ldr	r1, [pc, #144]	; (8003440 <HAL_RCC_ClockConfig+0x1b0>)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b22      	ldr	r3, [pc, #136]	; (8003440 <HAL_RCC_ClockConfig+0x1b0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e036      	b.n	8003436 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d4:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4918      	ldr	r1, [pc, #96]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f2:	4b14      	ldr	r3, [pc, #80]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4910      	ldr	r1, [pc, #64]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003406:	f000 f825 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 800340a:	4602      	mov	r2, r0
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <HAL_RCC_ClockConfig+0x1b4>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	490c      	ldr	r1, [pc, #48]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	5ccb      	ldrb	r3, [r1, r3]
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	fa22 f303 	lsr.w	r3, r2, r3
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fbe4 	bl	8000bf8 <HAL_InitTick>
 8003430:	4603      	mov	r3, r0
 8003432:	72fb      	strb	r3, [r7, #11]

  return status;
 8003434:	7afb      	ldrb	r3, [r7, #11]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40022000 	.word	0x40022000
 8003444:	40021000 	.word	0x40021000
 8003448:	080090e8 	.word	0x080090e8
 800344c:	20000008 	.word	0x20000008
 8003450:	2000000c 	.word	0x2000000c

08003454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	; 0x24
 8003458:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003462:	4b3e      	ldr	r3, [pc, #248]	; (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346c:	4b3b      	ldr	r3, [pc, #236]	; (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x34>
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d121      	bne.n	80034c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d11e      	bne.n	80034c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003488:	4b34      	ldr	r3, [pc, #208]	; (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003494:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 8003496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	e005      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034a4:	4b2d      	ldr	r3, [pc, #180]	; (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034b0:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10d      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d102      	bne.n	80034d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034cc:	4b25      	ldr	r3, [pc, #148]	; (8003564 <HAL_RCC_GetSysClockFreq+0x110>)
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	e004      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034d8:	4b23      	ldr	r3, [pc, #140]	; (8003568 <HAL_RCC_GetSysClockFreq+0x114>)
 80034da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	d134      	bne.n	800354c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034e2:	4b1e      	ldr	r3, [pc, #120]	; (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0xa6>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d003      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0xac>
 80034f8:	e005      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034fa:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <HAL_RCC_GetSysClockFreq+0x110>)
 80034fc:	617b      	str	r3, [r7, #20]
      break;
 80034fe:	e005      	b.n	800350c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <HAL_RCC_GetSysClockFreq+0x114>)
 8003502:	617b      	str	r3, [r7, #20]
      break;
 8003504:	e002      	b.n	800350c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	617b      	str	r3, [r7, #20]
      break;
 800350a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	3301      	adds	r3, #1
 8003518:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	fb02 f203 	mul.w	r2, r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	0e5b      	lsrs	r3, r3, #25
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	3301      	adds	r3, #1
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800354c:	69bb      	ldr	r3, [r7, #24]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3724      	adds	r7, #36	; 0x24
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	080090f8 	.word	0x080090f8
 8003564:	00f42400 	.word	0x00f42400
 8003568:	007a1200 	.word	0x007a1200

0800356c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003578:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003584:	f7ff f9f0 	bl	8002968 <HAL_PWREx_GetVoltageRange>
 8003588:	6178      	str	r0, [r7, #20]
 800358a:	e014      	b.n	80035b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800358c:	4b25      	ldr	r3, [pc, #148]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	4a24      	ldr	r2, [pc, #144]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003596:	6593      	str	r3, [r2, #88]	; 0x58
 8003598:	4b22      	ldr	r3, [pc, #136]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035a4:	f7ff f9e0 	bl	8002968 <HAL_PWREx_GetVoltageRange>
 80035a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035aa:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ae:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035bc:	d10b      	bne.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b80      	cmp	r3, #128	; 0x80
 80035c2:	d919      	bls.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2ba0      	cmp	r3, #160	; 0xa0
 80035c8:	d902      	bls.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ca:	2302      	movs	r3, #2
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	e013      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d0:	2301      	movs	r3, #1
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	e010      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d902      	bls.n	80035e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035dc:	2303      	movs	r3, #3
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	e00a      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b80      	cmp	r3, #128	; 0x80
 80035e6:	d102      	bne.n	80035ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035e8:	2302      	movs	r3, #2
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	e004      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b70      	cmp	r3, #112	; 0x70
 80035f2:	d101      	bne.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035f4:	2301      	movs	r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 0207 	bic.w	r2, r3, #7
 8003600:	4909      	ldr	r1, [pc, #36]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003608:	4b07      	ldr	r3, [pc, #28]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	429a      	cmp	r2, r3
 8003614:	d001      	beq.n	800361a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	40022000 	.word	0x40022000

0800362c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003634:	2300      	movs	r3, #0
 8003636:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003638:	2300      	movs	r3, #0
 800363a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003644:	2b00      	cmp	r3, #0
 8003646:	d031      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003650:	d01a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003652:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003656:	d814      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800365c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003660:	d10f      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003662:	4bac      	ldr	r3, [pc, #688]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	4aab      	ldr	r2, [pc, #684]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800366e:	e00c      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f9cc 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003680:	e003      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	74fb      	strb	r3, [r7, #19]
      break;
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368a:	7cfb      	ldrb	r3, [r7, #19]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003690:	4ba0      	ldr	r3, [pc, #640]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369e:	499d      	ldr	r1, [pc, #628]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036a6:	e001      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8099 	beq.w	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036be:	4b95      	ldr	r3, [pc, #596]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80036ce:	2300      	movs	r3, #0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d4:	4b8f      	ldr	r3, [pc, #572]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	4a8e      	ldr	r2, [pc, #568]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036de:	6593      	str	r3, [r2, #88]	; 0x58
 80036e0:	4b8c      	ldr	r3, [pc, #560]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ec:	2301      	movs	r3, #1
 80036ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f0:	4b89      	ldr	r3, [pc, #548]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a88      	ldr	r2, [pc, #544]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036fc:	f7fd facc 	bl	8000c98 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003702:	e009      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003704:	f7fd fac8 	bl	8000c98 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d902      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	74fb      	strb	r3, [r7, #19]
        break;
 8003716:	e005      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003718:	4b7f      	ldr	r3, [pc, #508]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ef      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d155      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800372a:	4b7a      	ldr	r3, [pc, #488]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003734:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01e      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	429a      	cmp	r2, r3
 8003744:	d019      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003746:	4b73      	ldr	r3, [pc, #460]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003750:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003752:	4b70      	ldr	r3, [pc, #448]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	4a6e      	ldr	r2, [pc, #440]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800375a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003762:	4b6c      	ldr	r3, [pc, #432]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	4a6a      	ldr	r2, [pc, #424]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800376a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003772:	4a68      	ldr	r2, [pc, #416]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d016      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fd fa88 	bl	8000c98 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378a:	e00b      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7fd fa84 	bl	8000c98 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	; 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d902      	bls.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	74fb      	strb	r3, [r7, #19]
            break;
 80037a2:	e006      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a4:	4b5b      	ldr	r3, [pc, #364]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0ec      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10b      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b8:	4b56      	ldr	r3, [pc, #344]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c6:	4953      	ldr	r1, [pc, #332]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037ce:	e004      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	74bb      	strb	r3, [r7, #18]
 80037d4:	e001      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d6:	7cfb      	ldrb	r3, [r7, #19]
 80037d8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037da:	7c7b      	ldrb	r3, [r7, #17]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d105      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e0:	4b4c      	ldr	r3, [pc, #304]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	4a4b      	ldr	r2, [pc, #300]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037f8:	4b46      	ldr	r3, [pc, #280]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f023 0203 	bic.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4943      	ldr	r1, [pc, #268]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800381a:	4b3e      	ldr	r3, [pc, #248]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f023 020c 	bic.w	r2, r3, #12
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	493a      	ldr	r1, [pc, #232]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800383c:	4b35      	ldr	r3, [pc, #212]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	4932      	ldr	r1, [pc, #200]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800385e:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386c:	4929      	ldr	r1, [pc, #164]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003880:	4b24      	ldr	r3, [pc, #144]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	4921      	ldr	r1, [pc, #132]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	4918      	ldr	r1, [pc, #96]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038c4:	4b13      	ldr	r3, [pc, #76]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	4910      	ldr	r1, [pc, #64]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d02c      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	4907      	ldr	r1, [pc, #28]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003904:	d10a      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003906:	4b03      	ldr	r3, [pc, #12]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	4a02      	ldr	r2, [pc, #8]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800390c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003910:	60d3      	str	r3, [r2, #12]
 8003912:	e015      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003914:	40021000 	.word	0x40021000
 8003918:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003924:	d10c      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	2101      	movs	r1, #1
 800392c:	4618      	mov	r0, r3
 800392e:	f000 f871 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d028      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800394c:	4b30      	ldr	r3, [pc, #192]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	492d      	ldr	r1, [pc, #180]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800396a:	d106      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800396c:	4b28      	ldr	r3, [pc, #160]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003976:	60d3      	str	r3, [r2, #12]
 8003978:	e011      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003982:	d10c      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	2101      	movs	r1, #1
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f842 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003994:	7cfb      	ldrb	r3, [r7, #19]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800399a:	7cfb      	ldrb	r3, [r7, #19]
 800399c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01c      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039aa:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b8:	4915      	ldr	r1, [pc, #84]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2102      	movs	r1, #2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f81f 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039f0:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fe:	4904      	ldr	r1, [pc, #16]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a06:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000

08003a14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a22:	4b74      	ldr	r3, [pc, #464]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d018      	beq.n	8003a60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a2e:	4b71      	ldr	r3, [pc, #452]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0203 	and.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10d      	bne.n	8003a5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
       ||
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a46:	4b6b      	ldr	r3, [pc, #428]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
       ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d047      	beq.n	8003aea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	e044      	b.n	8003aea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d018      	beq.n	8003a9a <RCCEx_PLLSAI1_Config+0x86>
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d825      	bhi.n	8003ab8 <RCCEx_PLLSAI1_Config+0xa4>
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d002      	beq.n	8003a76 <RCCEx_PLLSAI1_Config+0x62>
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d009      	beq.n	8003a88 <RCCEx_PLLSAI1_Config+0x74>
 8003a74:	e020      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a76:	4b5f      	ldr	r3, [pc, #380]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d11d      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a86:	e01a      	b.n	8003abe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a88:	4b5a      	ldr	r3, [pc, #360]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d116      	bne.n	8003ac2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a98:	e013      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a9a:	4b56      	ldr	r3, [pc, #344]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aa6:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ab6:	e006      	b.n	8003ac6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      break;
 8003abc:	e004      	b.n	8003ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e002      	b.n	8003ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ac6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10d      	bne.n	8003aea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ace:	4b49      	ldr	r3, [pc, #292]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	4943      	ldr	r1, [pc, #268]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d17c      	bne.n	8003bea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003af0:	4b40      	ldr	r3, [pc, #256]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a3f      	ldr	r2, [pc, #252]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afc:	f7fd f8cc 	bl	8000c98 <HAL_GetTick>
 8003b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b02:	e009      	b.n	8003b18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b04:	f7fd f8c8 	bl	8000c98 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d902      	bls.n	8003b18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	73fb      	strb	r3, [r7, #15]
        break;
 8003b16:	e005      	b.n	8003b24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b18:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ef      	bne.n	8003b04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d15f      	bne.n	8003bea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d110      	bne.n	8003b52 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b30:	4b30      	ldr	r3, [pc, #192]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6892      	ldr	r2, [r2, #8]
 8003b40:	0211      	lsls	r1, r2, #8
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68d2      	ldr	r2, [r2, #12]
 8003b46:	06d2      	lsls	r2, r2, #27
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	492a      	ldr	r1, [pc, #168]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	610b      	str	r3, [r1, #16]
 8003b50:	e027      	b.n	8003ba2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d112      	bne.n	8003b7e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b58:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6892      	ldr	r2, [r2, #8]
 8003b68:	0211      	lsls	r1, r2, #8
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6912      	ldr	r2, [r2, #16]
 8003b6e:	0852      	lsrs	r2, r2, #1
 8003b70:	3a01      	subs	r2, #1
 8003b72:	0552      	lsls	r2, r2, #21
 8003b74:	430a      	orrs	r2, r1
 8003b76:	491f      	ldr	r1, [pc, #124]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	610b      	str	r3, [r1, #16]
 8003b7c:	e011      	b.n	8003ba2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6892      	ldr	r2, [r2, #8]
 8003b8e:	0211      	lsls	r1, r2, #8
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6952      	ldr	r2, [r2, #20]
 8003b94:	0852      	lsrs	r2, r2, #1
 8003b96:	3a01      	subs	r2, #1
 8003b98:	0652      	lsls	r2, r2, #25
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	4915      	ldr	r1, [pc, #84]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ba2:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bae:	f7fd f873 	bl	8000c98 <HAL_GetTick>
 8003bb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bb4:	e009      	b.n	8003bca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bb6:	f7fd f86f 	bl	8000c98 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d902      	bls.n	8003bca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	73fb      	strb	r3, [r7, #15]
          break;
 8003bc8:	e005      	b.n	8003bd6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0ef      	beq.n	8003bb6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	4903      	ldr	r1, [pc, #12]	; (8003bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000

08003bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e095      	b.n	8003d36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d108      	bne.n	8003c24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1a:	d009      	beq.n	8003c30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	61da      	str	r2, [r3, #28]
 8003c22:	e005      	b.n	8003c30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fc feae 	bl	80009ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c70:	d902      	bls.n	8003c78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e002      	b.n	8003c7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c86:	d007      	beq.n	8003c98 <HAL_SPI_Init+0xa0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c90:	d002      	beq.n	8003c98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	ea42 0103 	orr.w	r1, r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	0c1b      	lsrs	r3, r3, #16
 8003cf4:	f003 0204 	and.w	r2, r3, #4
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d14:	ea42 0103 	orr.w	r1, r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b088      	sub	sp, #32
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_SPI_Transmit+0x22>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e158      	b.n	8004012 <HAL_SPI_Transmit+0x2d4>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d68:	f7fc ff96 	bl	8000c98 <HAL_GetTick>
 8003d6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d002      	beq.n	8003d84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d82:	e13d      	b.n	8004000 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_SPI_Transmit+0x52>
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d94:	e134      	b.n	8004000 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2203      	movs	r2, #3
 8003d9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	88fa      	ldrh	r2, [r7, #6]
 8003dae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de0:	d10f      	bne.n	8003e02 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d007      	beq.n	8003e20 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e28:	d94b      	bls.n	8003ec2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_SPI_Transmit+0xfa>
 8003e32:	8afb      	ldrh	r3, [r7, #22]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d13e      	bne.n	8003eb6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	881a      	ldrh	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	1c9a      	adds	r2, r3, #2
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e5c:	e02b      	b.n	8003eb6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d112      	bne.n	8003e92 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	881a      	ldrh	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	1c9a      	adds	r2, r3, #2
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e90:	e011      	b.n	8003eb6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e92:	f7fc ff01 	bl	8000c98 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d803      	bhi.n	8003eaa <HAL_SPI_Transmit+0x16c>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea8:	d102      	bne.n	8003eb0 <HAL_SPI_Transmit+0x172>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003eb4:	e0a4      	b.n	8004000 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1ce      	bne.n	8003e5e <HAL_SPI_Transmit+0x120>
 8003ec0:	e07c      	b.n	8003fbc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_SPI_Transmit+0x192>
 8003eca:	8afb      	ldrh	r3, [r7, #22]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d170      	bne.n	8003fb2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d912      	bls.n	8003f00 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	881a      	ldrh	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	1c9a      	adds	r2, r3, #2
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b02      	subs	r3, #2
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003efe:	e058      	b.n	8003fb2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	7812      	ldrb	r2, [r2, #0]
 8003f0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f26:	e044      	b.n	8003fb2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d12b      	bne.n	8003f8e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d912      	bls.n	8003f66 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	1c9a      	adds	r2, r3, #2
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b02      	subs	r3, #2
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f64:	e025      	b.n	8003fb2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	7812      	ldrb	r2, [r2, #0]
 8003f72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f8c:	e011      	b.n	8003fb2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f8e:	f7fc fe83 	bl	8000c98 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d803      	bhi.n	8003fa6 <HAL_SPI_Transmit+0x268>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fa4:	d102      	bne.n	8003fac <HAL_SPI_Transmit+0x26e>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fb0:	e026      	b.n	8004000 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1b5      	bne.n	8003f28 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	6839      	ldr	r1, [r7, #0]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fcdb 	bl	800497c <SPI_EndRxTxTransaction>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	77fb      	strb	r3, [r7, #31]
 8003ffc:	e000      	b.n	8004000 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003ffe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004010:	7ffb      	ldrb	r3, [r7, #31]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b088      	sub	sp, #32
 800401e:	af02      	add	r7, sp, #8
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	4613      	mov	r3, r2
 8004028:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004036:	d112      	bne.n	800405e <HAL_SPI_Receive+0x44>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10e      	bne.n	800405e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2204      	movs	r2, #4
 8004044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004048:	88fa      	ldrh	r2, [r7, #6]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	4613      	mov	r3, r2
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f910 	bl	800427a <HAL_SPI_TransmitReceive>
 800405a:	4603      	mov	r3, r0
 800405c:	e109      	b.n	8004272 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_SPI_Receive+0x52>
 8004068:	2302      	movs	r3, #2
 800406a:	e102      	b.n	8004272 <HAL_SPI_Receive+0x258>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004074:	f7fc fe10 	bl	8000c98 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d002      	beq.n	800408c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004086:	2302      	movs	r3, #2
 8004088:	75fb      	strb	r3, [r7, #23]
    goto error;
 800408a:	e0e9      	b.n	8004260 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_SPI_Receive+0x7e>
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d102      	bne.n	800409e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800409c:	e0e0      	b.n	8004260 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2204      	movs	r2, #4
 80040a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040e8:	d908      	bls.n	80040fc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	e007      	b.n	800410c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800410a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004114:	d10f      	bne.n	8004136 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004124:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004134:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d007      	beq.n	8004154 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004152:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800415c:	d867      	bhi.n	800422e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800415e:	e030      	b.n	80041c2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d117      	bne.n	800419e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f103 020c 	add.w	r2, r3, #12
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	7812      	ldrb	r2, [r2, #0]
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800419c:	e011      	b.n	80041c2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800419e:	f7fc fd7b 	bl	8000c98 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d803      	bhi.n	80041b6 <HAL_SPI_Receive+0x19c>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b4:	d102      	bne.n	80041bc <HAL_SPI_Receive+0x1a2>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d102      	bne.n	80041c2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041c0:	e04e      	b.n	8004260 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1c8      	bne.n	8004160 <HAL_SPI_Receive+0x146>
 80041ce:	e034      	b.n	800423a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d115      	bne.n	800420a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	b292      	uxth	r2, r2
 80041ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	1c9a      	adds	r2, r3, #2
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004208:	e011      	b.n	800422e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800420a:	f7fc fd45 	bl	8000c98 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d803      	bhi.n	8004222 <HAL_SPI_Receive+0x208>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004220:	d102      	bne.n	8004228 <HAL_SPI_Receive+0x20e>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800422c:	e018      	b.n	8004260 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ca      	bne.n	80041d0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fb44 	bl	80048cc <SPI_EndRxTransaction>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	75fb      	strb	r3, [r7, #23]
 800425c:	e000      	b.n	8004260 <HAL_SPI_Receive+0x246>
  }

error :
 800425e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004270:	7dfb      	ldrb	r3, [r7, #23]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b08a      	sub	sp, #40	; 0x28
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004288:	2301      	movs	r3, #1
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_SPI_TransmitReceive+0x26>
 800429c:	2302      	movs	r3, #2
 800429e:	e1fb      	b.n	8004698 <HAL_SPI_TransmitReceive+0x41e>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042a8:	f7fc fcf6 	bl	8000c98 <HAL_GetTick>
 80042ac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042b4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80042bc:	887b      	ldrh	r3, [r7, #2]
 80042be:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80042c0:	887b      	ldrh	r3, [r7, #2]
 80042c2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042c4:	7efb      	ldrb	r3, [r7, #27]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d00e      	beq.n	80042e8 <HAL_SPI_TransmitReceive+0x6e>
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d0:	d106      	bne.n	80042e0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <HAL_SPI_TransmitReceive+0x66>
 80042da:	7efb      	ldrb	r3, [r7, #27]
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d003      	beq.n	80042e8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042e6:	e1cd      	b.n	8004684 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_SPI_TransmitReceive+0x80>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_SPI_TransmitReceive+0x80>
 80042f4:	887b      	ldrh	r3, [r7, #2]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d103      	bne.n	8004302 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004300:	e1c0      	b.n	8004684 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b04      	cmp	r3, #4
 800430c:	d003      	beq.n	8004316 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2205      	movs	r2, #5
 8004312:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	887a      	ldrh	r2, [r7, #2]
 8004326:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	887a      	ldrh	r2, [r7, #2]
 800432e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	887a      	ldrh	r2, [r7, #2]
 800433c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	887a      	ldrh	r2, [r7, #2]
 8004342:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004358:	d802      	bhi.n	8004360 <HAL_SPI_TransmitReceive+0xe6>
 800435a:	8a3b      	ldrh	r3, [r7, #16]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d908      	bls.n	8004372 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	e007      	b.n	8004382 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004380:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438c:	2b40      	cmp	r3, #64	; 0x40
 800438e:	d007      	beq.n	80043a0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800439e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043a8:	d97c      	bls.n	80044a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_SPI_TransmitReceive+0x13e>
 80043b2:	8a7b      	ldrh	r3, [r7, #18]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d169      	bne.n	800448c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	881a      	ldrh	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	1c9a      	adds	r2, r3, #2
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043dc:	e056      	b.n	800448c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d11b      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x1aa>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d016      	beq.n	8004424 <HAL_SPI_TransmitReceive+0x1aa>
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d113      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	881a      	ldrh	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	1c9a      	adds	r2, r3, #2
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d11c      	bne.n	800446c <HAL_SPI_TransmitReceive+0x1f2>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	b292      	uxth	r2, r2
 800444a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	1c9a      	adds	r2, r3, #2
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004468:	2301      	movs	r3, #1
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800446c:	f7fc fc14 	bl	8000c98 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004478:	429a      	cmp	r2, r3
 800447a:	d807      	bhi.n	800448c <HAL_SPI_TransmitReceive+0x212>
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004482:	d003      	beq.n	800448c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800448a:	e0fb      	b.n	8004684 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1a3      	bne.n	80043de <HAL_SPI_TransmitReceive+0x164>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d19d      	bne.n	80043de <HAL_SPI_TransmitReceive+0x164>
 80044a2:	e0df      	b.n	8004664 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_SPI_TransmitReceive+0x23a>
 80044ac:	8a7b      	ldrh	r3, [r7, #18]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	f040 80cb 	bne.w	800464a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d912      	bls.n	80044e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	881a      	ldrh	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	1c9a      	adds	r2, r3, #2
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b02      	subs	r3, #2
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044e2:	e0b2      	b.n	800464a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	7812      	ldrb	r2, [r2, #0]
 80044f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800450a:	e09e      	b.n	800464a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	d134      	bne.n	8004584 <HAL_SPI_TransmitReceive+0x30a>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d02f      	beq.n	8004584 <HAL_SPI_TransmitReceive+0x30a>
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	2b01      	cmp	r3, #1
 8004528:	d12c      	bne.n	8004584 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	d912      	bls.n	800455a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	881a      	ldrh	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	1c9a      	adds	r2, r3, #2
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b02      	subs	r3, #2
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004558:	e012      	b.n	8004580 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	7812      	ldrb	r2, [r2, #0]
 8004566:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d148      	bne.n	8004624 <HAL_SPI_TransmitReceive+0x3aa>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d042      	beq.n	8004624 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d923      	bls.n	80045f2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	b292      	uxth	r2, r2
 80045b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	1c9a      	adds	r2, r3, #2
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b02      	subs	r3, #2
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d81f      	bhi.n	8004620 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045ee:	605a      	str	r2, [r3, #4]
 80045f0:	e016      	b.n	8004620 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f103 020c 	add.w	r2, r3, #12
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	7812      	ldrb	r2, [r2, #0]
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004620:	2301      	movs	r3, #1
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004624:	f7fc fb38 	bl	8000c98 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004630:	429a      	cmp	r2, r3
 8004632:	d803      	bhi.n	800463c <HAL_SPI_TransmitReceive+0x3c2>
 8004634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800463a:	d102      	bne.n	8004642 <HAL_SPI_TransmitReceive+0x3c8>
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	2b00      	cmp	r3, #0
 8004640:	d103      	bne.n	800464a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004648:	e01c      	b.n	8004684 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	f47f af5b 	bne.w	800450c <HAL_SPI_TransmitReceive+0x292>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	f47f af54 	bne.w	800450c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f987 	bl	800497c <SPI_EndRxTxTransaction>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d006      	beq.n	8004682 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	661a      	str	r2, [r3, #96]	; 0x60
 8004680:	e000      	b.n	8004684 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004682:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004698:	4618      	mov	r0, r3
 800469a:	3728      	adds	r7, #40	; 0x28
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046b0:	f7fc faf2 	bl	8000c98 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	4413      	add	r3, r2
 80046be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046c0:	f7fc faea 	bl	8000c98 <HAL_GetTick>
 80046c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046c6:	4b39      	ldr	r3, [pc, #228]	; (80047ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	015b      	lsls	r3, r3, #5
 80046cc:	0d1b      	lsrs	r3, r3, #20
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
 80046d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046d6:	e054      	b.n	8004782 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046de:	d050      	beq.n	8004782 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046e0:	f7fc fada 	bl	8000c98 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d902      	bls.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d13d      	bne.n	8004772 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004704:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470e:	d111      	bne.n	8004734 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004718:	d004      	beq.n	8004724 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004722:	d107      	bne.n	8004734 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004732:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473c:	d10f      	bne.n	800475e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800475c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e017      	b.n	80047a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	3b01      	subs	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4013      	ands	r3, r2
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	429a      	cmp	r2, r3
 8004790:	bf0c      	ite	eq
 8004792:	2301      	moveq	r3, #1
 8004794:	2300      	movne	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	429a      	cmp	r2, r3
 800479e:	d19b      	bne.n	80046d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000008 	.word	0x20000008

080047b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80047be:	f7fc fa6b 	bl	8000c98 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	4413      	add	r3, r2
 80047cc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047ce:	f7fc fa63 	bl	8000c98 <HAL_GetTick>
 80047d2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80047d4:	4b3c      	ldr	r3, [pc, #240]	; (80048c8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	00da      	lsls	r2, r3, #3
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	0d1b      	lsrs	r3, r3, #20
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80047ec:	e05f      	b.n	80048ae <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047f4:	d106      	bne.n	8004804 <SPI_WaitFifoStateUntilTimeout+0x54>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d103      	bne.n	8004804 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480a:	d050      	beq.n	80048ae <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800480c:	f7fc fa44 	bl	8000c98 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	429a      	cmp	r2, r3
 800481a:	d902      	bls.n	8004822 <SPI_WaitFifoStateUntilTimeout+0x72>
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d13d      	bne.n	800489e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800483a:	d111      	bne.n	8004860 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004844:	d004      	beq.n	8004850 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484e:	d107      	bne.n	8004860 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004868:	d10f      	bne.n	800488a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004888:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e010      	b.n	80048c0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d197      	bne.n	80047ee <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3720      	adds	r7, #32
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000008 	.word	0x20000008

080048cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e0:	d111      	bne.n	8004906 <SPI_EndRxTransaction+0x3a>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ea:	d004      	beq.n	80048f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f4:	d107      	bne.n	8004906 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004904:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2200      	movs	r2, #0
 800490e:	2180      	movs	r1, #128	; 0x80
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f7ff fec5 	bl	80046a0 <SPI_WaitFlagStateUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d007      	beq.n	800492c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e023      	b.n	8004974 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004934:	d11d      	bne.n	8004972 <SPI_EndRxTransaction+0xa6>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800493e:	d004      	beq.n	800494a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004948:	d113      	bne.n	8004972 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2200      	movs	r2, #0
 8004952:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff ff2a 	bl	80047b0 <SPI_WaitFifoStateUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e000      	b.n	8004974 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2200      	movs	r2, #0
 8004990:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff ff0b 	bl	80047b0 <SPI_WaitFifoStateUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a4:	f043 0220 	orr.w	r2, r3, #32
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e027      	b.n	8004a00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	2180      	movs	r1, #128	; 0x80
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7ff fe70 	bl	80046a0 <SPI_WaitFlagStateUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ca:	f043 0220 	orr.w	r2, r3, #32
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e014      	b.n	8004a00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2200      	movs	r2, #0
 80049de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff fee4 	bl	80047b0 <SPI_WaitFifoStateUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e000      	b.n	8004a00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a08:	b084      	sub	sp, #16
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	f107 0014 	add.w	r0, r7, #20
 8004a16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	b004      	add	sp, #16
 8004a28:	4770      	bx	lr

08004a2a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a3a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a3e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a60:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a64:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	43db      	mvns	r3, r3
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4013      	ands	r3, r2
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	460b      	mov	r3, r1
 8004a98:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	f107 0014 	add.w	r0, r7, #20
 8004ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	b004      	add	sp, #16
 8004ae8:	4770      	bx	lr
	...

08004aec <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b09b      	sub	sp, #108	; 0x6c
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	78db      	ldrb	r3, [r3, #3]
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d81f      	bhi.n	8004b5e <USB_ActivateEndpoint+0x72>
 8004b1e:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <USB_ActivateEndpoint+0x38>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b51 	.word	0x08004b51
 8004b2c:	08004b67 	.word	0x08004b67
 8004b30:	08004b43 	.word	0x08004b43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b3c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b40:	e012      	b.n	8004b68 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b46:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b4a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b4e:	e00b      	b.n	8004b68 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b50:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b58:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b5c:	e004      	b.n	8004b68 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b64:	e000      	b.n	8004b68 <USB_ActivateEndpoint+0x7c>
      break;
 8004b66:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	441a      	add	r2, r3
 8004b72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	b21b      	sxth	r3, r3
 8004b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	b21a      	sxth	r2, r3
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	b21b      	sxth	r3, r3
 8004baa:	4313      	orrs	r3, r2
 8004bac:	b21b      	sxth	r3, r3
 8004bae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	7b1b      	ldrb	r3, [r3, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f040 8149 	bne.w	8004e70 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 8084 	beq.w	8004cf0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	00da      	lsls	r2, r3, #3
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	88db      	ldrh	r3, [r3, #6]
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	81fb      	strh	r3, [r7, #14]
 8004c2a:	89fb      	ldrh	r3, [r7, #14]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01b      	beq.n	8004c6c <USB_ActivateEndpoint+0x180>
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	81bb      	strh	r3, [r7, #12]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	89bb      	ldrh	r3, [r7, #12]
 8004c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	78db      	ldrb	r3, [r3, #3]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d020      	beq.n	8004cb6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c8a:	813b      	strh	r3, [r7, #8]
 8004c8c:	893b      	ldrh	r3, [r7, #8]
 8004c8e:	f083 0320 	eor.w	r3, r3, #32
 8004c92:	813b      	strh	r3, [r7, #8]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	441a      	add	r2, r3
 8004c9e:	893b      	ldrh	r3, [r7, #8]
 8004ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	8013      	strh	r3, [r2, #0]
 8004cb4:	e27f      	b.n	80051b6 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ccc:	817b      	strh	r3, [r7, #10]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	441a      	add	r2, r3
 8004cd8:	897b      	ldrh	r3, [r7, #10]
 8004cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	8013      	strh	r3, [r2, #0]
 8004cee:	e262      	b.n	80051b6 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	4413      	add	r3, r2
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	00da      	lsls	r2, r3, #3
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	88db      	ldrh	r3, [r3, #6]
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	4413      	add	r3, r2
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	00da      	lsls	r2, r3, #3
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	4413      	add	r3, r2
 8004d42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d46:	623b      	str	r3, [r7, #32]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d112      	bne.n	8004d76 <USB_ActivateEndpoint+0x28a>
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	801a      	strh	r2, [r3, #0]
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	801a      	strh	r2, [r3, #0]
 8004d74:	e02f      	b.n	8004dd6 <USB_ActivateEndpoint+0x2ea>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d7c:	d813      	bhi.n	8004da6 <USB_ActivateEndpoint+0x2ba>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	663b      	str	r3, [r7, #96]	; 0x60
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <USB_ActivateEndpoint+0x2ac>
 8004d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d94:	3301      	adds	r3, #1
 8004d96:	663b      	str	r3, [r7, #96]	; 0x60
 8004d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	029b      	lsls	r3, r3, #10
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	e017      	b.n	8004dd6 <USB_ActivateEndpoint+0x2ea>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	663b      	str	r3, [r7, #96]	; 0x60
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <USB_ActivateEndpoint+0x2d4>
 8004dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	663b      	str	r3, [r7, #96]	; 0x60
 8004dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	029b      	lsls	r3, r3, #10
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	83fb      	strh	r3, [r7, #30]
 8004de4:	8bfb      	ldrh	r3, [r7, #30]
 8004de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01b      	beq.n	8004e26 <USB_ActivateEndpoint+0x33a>
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	83bb      	strh	r3, [r7, #28]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	8bbb      	ldrh	r3, [r7, #28]
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3c:	837b      	strh	r3, [r7, #26]
 8004e3e:	8b7b      	ldrh	r3, [r7, #26]
 8004e40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e44:	837b      	strh	r3, [r7, #26]
 8004e46:	8b7b      	ldrh	r3, [r7, #26]
 8004e48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e4c:	837b      	strh	r3, [r7, #26]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	441a      	add	r2, r3
 8004e58:	8b7b      	ldrh	r3, [r7, #26]
 8004e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	8013      	strh	r3, [r2, #0]
 8004e6e:	e1a2      	b.n	80051b6 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	441a      	add	r2, r3
 8004e94:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ebc:	4413      	add	r3, r2
 8004ebe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	00da      	lsls	r2, r3, #3
 8004ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ece:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	891b      	ldrh	r3, [r3, #8]
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ede:	801a      	strh	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef0:	4413      	add	r3, r2
 8004ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	00da      	lsls	r2, r3, #3
 8004efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004efc:	4413      	add	r3, r2
 8004efe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	895b      	ldrh	r3, [r3, #10]
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f12:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f040 8091 	bne.w	8005040 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d01b      	beq.n	8004f6e <USB_ActivateEndpoint+0x482>
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	441a      	add	r2, r3
 8004f58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01b      	beq.n	8004fbe <USB_ActivateEndpoint+0x4d2>
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	441a      	add	r2, r3
 8004fa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fd8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fdc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fe0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fe4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501c:	867b      	strh	r3, [r7, #50]	; 0x32
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800502a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503a:	b29b      	uxth	r3, r3
 800503c:	8013      	strh	r3, [r2, #0]
 800503e:	e0ba      	b.n	80051b6 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005050:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01d      	beq.n	8005098 <USB_ActivateEndpoint+0x5ac>
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	441a      	add	r2, r3
 8005080:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005094:	b29b      	uxth	r3, r3
 8005096:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80050a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01d      	beq.n	80050f0 <USB_ActivateEndpoint+0x604>
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	441a      	add	r2, r3
 80050d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	78db      	ldrb	r3, [r3, #3]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d024      	beq.n	8005142 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005112:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005116:	f083 0320 	eor.w	r3, r3, #32
 800511a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	441a      	add	r2, r3
 8005128:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800512c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513c:	b29b      	uxth	r3, r3
 800513e:	8013      	strh	r3, [r2, #0]
 8005140:	e01d      	b.n	800517e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005158:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	441a      	add	r2, r3
 8005166:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800516a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517a:	b29b      	uxth	r3, r3
 800517c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005194:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	441a      	add	r2, r3
 80051a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80051b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	376c      	adds	r7, #108	; 0x6c
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop

080051c8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b08d      	sub	sp, #52	; 0x34
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	7b1b      	ldrb	r3, [r3, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f040 808e 	bne.w	80052f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d044      	beq.n	800526e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	81bb      	strh	r3, [r7, #12]
 80051f2:	89bb      	ldrh	r3, [r7, #12]
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01b      	beq.n	8005234 <USB_DeactivateEndpoint+0x6c>
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005212:	817b      	strh	r3, [r7, #10]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005230:	b29b      	uxth	r3, r3
 8005232:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	b29b      	uxth	r3, r3
 8005242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524a:	813b      	strh	r3, [r7, #8]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	893b      	ldrh	r3, [r7, #8]
 8005258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005268:	b29b      	uxth	r3, r3
 800526a:	8013      	strh	r3, [r2, #0]
 800526c:	e192      	b.n	8005594 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	827b      	strh	r3, [r7, #18]
 800527c:	8a7b      	ldrh	r3, [r7, #18]
 800527e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01b      	beq.n	80052be <USB_DeactivateEndpoint+0xf6>
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529c:	823b      	strh	r3, [r7, #16]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	441a      	add	r2, r3
 80052a8:	8a3b      	ldrh	r3, [r7, #16]
 80052aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d4:	81fb      	strh	r3, [r7, #14]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	441a      	add	r2, r3
 80052e0:	89fb      	ldrh	r3, [r7, #14]
 80052e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]
 80052f6:	e14d      	b.n	8005594 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f040 80a5 	bne.w	800544c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	843b      	strh	r3, [r7, #32]
 8005310:	8c3b      	ldrh	r3, [r7, #32]
 8005312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01b      	beq.n	8005352 <USB_DeactivateEndpoint+0x18a>
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005330:	83fb      	strh	r3, [r7, #30]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	8bfb      	ldrh	r3, [r7, #30]
 800533e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005346:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800534a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	83bb      	strh	r3, [r7, #28]
 8005360:	8bbb      	ldrh	r3, [r7, #28]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01b      	beq.n	80053a2 <USB_DeactivateEndpoint+0x1da>
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	837b      	strh	r3, [r7, #26]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	441a      	add	r2, r3
 800538c:	8b7b      	ldrh	r3, [r7, #26]
 800538e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800539a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b8:	833b      	strh	r3, [r7, #24]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	8b3b      	ldrh	r3, [r7, #24]
 80053c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f0:	82fb      	strh	r3, [r7, #22]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	441a      	add	r2, r3
 80053fc:	8afb      	ldrh	r3, [r7, #22]
 80053fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540e:	b29b      	uxth	r3, r3
 8005410:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005428:	82bb      	strh	r3, [r7, #20]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	441a      	add	r2, r3
 8005434:	8abb      	ldrh	r3, [r7, #20]
 8005436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005446:	b29b      	uxth	r3, r3
 8005448:	8013      	strh	r3, [r2, #0]
 800544a:	e0a3      	b.n	8005594 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800545a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800545c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01b      	beq.n	800549c <USB_DeactivateEndpoint+0x2d4>
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	441a      	add	r2, r3
 8005486:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005498:	b29b      	uxth	r3, r3
 800549a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01b      	beq.n	80054ec <USB_DeactivateEndpoint+0x324>
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800551c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005520:	b29b      	uxth	r3, r3
 8005522:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005558:	b29b      	uxth	r3, r3
 800555a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	847b      	strh	r3, [r7, #34]	; 0x22
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	441a      	add	r2, r3
 800557e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3734      	adds	r7, #52	; 0x34
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b0c4      	sub	sp, #272	; 0x110
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	1d3b      	adds	r3, r7, #4
 80055aa:	6018      	str	r0, [r3, #0]
 80055ac:	463b      	mov	r3, r7
 80055ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055b0:	463b      	mov	r3, r7
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	f040 8566 	bne.w	8006088 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055bc:	463b      	mov	r3, r7
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	463b      	mov	r3, r7
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d905      	bls.n	80055d8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80055cc:	463b      	mov	r3, r7
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80055d6:	e004      	b.n	80055e2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80055d8:	463b      	mov	r3, r7
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055e2:	463b      	mov	r3, r7
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	7b1b      	ldrb	r3, [r3, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d12c      	bne.n	8005646 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055ec:	463b      	mov	r3, r7
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6959      	ldr	r1, [r3, #20]
 80055f2:	463b      	mov	r3, r7
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	88da      	ldrh	r2, [r3, #6]
 80055f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	1d38      	adds	r0, r7, #4
 8005600:	6800      	ldr	r0, [r0, #0]
 8005602:	f001 fa58 	bl	8006ab6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005606:	1d3b      	adds	r3, r7, #4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	1d3b      	adds	r3, r7, #4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005614:	b29b      	uxth	r3, r3
 8005616:	461a      	mov	r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	4413      	add	r3, r2
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	463b      	mov	r3, r7
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	00da      	lsls	r2, r3, #3
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	4413      	add	r3, r2
 800562a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800562e:	f107 0310 	add.w	r3, r7, #16
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005638:	b29a      	uxth	r2, r3
 800563a:	f107 0310 	add.w	r3, r7, #16
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	f000 bcec 	b.w	800601e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005646:	463b      	mov	r3, r7
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	78db      	ldrb	r3, [r3, #3]
 800564c:	2b02      	cmp	r3, #2
 800564e:	f040 8356 	bne.w	8005cfe <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005652:	463b      	mov	r3, r7
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6a1a      	ldr	r2, [r3, #32]
 8005658:	463b      	mov	r3, r7
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	429a      	cmp	r2, r3
 8005660:	f240 82fa 	bls.w	8005c58 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005664:	1d3b      	adds	r3, r7, #4
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	463b      	mov	r3, r7
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005682:	1d3b      	adds	r3, r7, #4
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	463b      	mov	r3, r7
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	441a      	add	r2, r3
 8005690:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80056a8:	463b      	mov	r3, r7
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80056b2:	463b      	mov	r3, r7
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1a      	ldr	r2, [r3, #32]
 80056b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056bc:	1ad2      	subs	r2, r2, r3
 80056be:	463b      	mov	r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056c4:	1d3b      	adds	r3, r7, #4
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	463b      	mov	r3, r7
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 815e 	beq.w	800599c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	637b      	str	r3, [r7, #52]	; 0x34
 80056e6:	463b      	mov	r3, r7
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d164      	bne.n	80057ba <USB_EPStartXfer+0x218>
 80056f0:	1d3b      	adds	r3, r7, #4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f6:	1d3b      	adds	r3, r7, #4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fe:	b29b      	uxth	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	4413      	add	r3, r2
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005708:	463b      	mov	r3, r7
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	00da      	lsls	r2, r3, #3
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	4413      	add	r3, r2
 8005714:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005718:	62bb      	str	r3, [r7, #40]	; 0x28
 800571a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800571e:	2b00      	cmp	r3, #0
 8005720:	d112      	bne.n	8005748 <USB_EPStartXfer+0x1a6>
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	b29b      	uxth	r3, r3
 8005728:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800572c:	b29a      	uxth	r2, r3
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	801a      	strh	r2, [r3, #0]
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800573c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005740:	b29a      	uxth	r2, r3
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	801a      	strh	r2, [r3, #0]
 8005746:	e054      	b.n	80057f2 <USB_EPStartXfer+0x250>
 8005748:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800574c:	2b3e      	cmp	r3, #62	; 0x3e
 800574e:	d817      	bhi.n	8005780 <USB_EPStartXfer+0x1de>
 8005750:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005754:	085b      	lsrs	r3, r3, #1
 8005756:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800575a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <USB_EPStartXfer+0x1ce>
 8005766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800576a:	3301      	adds	r3, #1
 800576c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005774:	b29b      	uxth	r3, r3
 8005776:	029b      	lsls	r3, r3, #10
 8005778:	b29a      	uxth	r2, r3
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	801a      	strh	r2, [r3, #0]
 800577e:	e038      	b.n	80057f2 <USB_EPStartXfer+0x250>
 8005780:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800578a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	2b00      	cmp	r3, #0
 8005794:	d104      	bne.n	80057a0 <USB_EPStartXfer+0x1fe>
 8005796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579a:	3b01      	subs	r3, #1
 800579c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	029b      	lsls	r3, r3, #10
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	801a      	strh	r2, [r3, #0]
 80057b8:	e01b      	b.n	80057f2 <USB_EPStartXfer+0x250>
 80057ba:	463b      	mov	r3, r7
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	785b      	ldrb	r3, [r3, #1]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d116      	bne.n	80057f2 <USB_EPStartXfer+0x250>
 80057c4:	1d3b      	adds	r3, r7, #4
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d2:	4413      	add	r3, r2
 80057d4:	637b      	str	r3, [r7, #52]	; 0x34
 80057d6:	463b      	mov	r3, r7
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	00da      	lsls	r2, r3, #3
 80057de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e0:	4413      	add	r3, r2
 80057e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057e6:	633b      	str	r3, [r7, #48]	; 0x30
 80057e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057f2:	463b      	mov	r3, r7
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	895b      	ldrh	r3, [r3, #10]
 80057f8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057fc:	463b      	mov	r3, r7
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6959      	ldr	r1, [r3, #20]
 8005802:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005806:	b29b      	uxth	r3, r3
 8005808:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800580c:	1d38      	adds	r0, r7, #4
 800580e:	6800      	ldr	r0, [r0, #0]
 8005810:	f001 f951 	bl	8006ab6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005814:	463b      	mov	r3, r7
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695a      	ldr	r2, [r3, #20]
 800581a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800581e:	441a      	add	r2, r3
 8005820:	463b      	mov	r3, r7
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005826:	463b      	mov	r3, r7
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6a1a      	ldr	r2, [r3, #32]
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	429a      	cmp	r2, r3
 8005834:	d90e      	bls.n	8005854 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8005836:	463b      	mov	r3, r7
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005840:	463b      	mov	r3, r7
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6a1a      	ldr	r2, [r3, #32]
 8005846:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800584a:	1ad2      	subs	r2, r2, r3
 800584c:	463b      	mov	r3, r7
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	621a      	str	r2, [r3, #32]
 8005852:	e008      	b.n	8005866 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005854:	463b      	mov	r3, r7
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800585e:	463b      	mov	r3, r7
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005866:	463b      	mov	r3, r7
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d164      	bne.n	800593a <USB_EPStartXfer+0x398>
 8005870:	1d3b      	adds	r3, r7, #4
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	1d3b      	adds	r3, r7, #4
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587e:	b29b      	uxth	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	463b      	mov	r3, r7
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	00da      	lsls	r2, r3, #3
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	4413      	add	r3, r2
 8005894:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d112      	bne.n	80058c8 <USB_EPStartXfer+0x326>
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	801a      	strh	r2, [r3, #0]
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	e057      	b.n	8005978 <USB_EPStartXfer+0x3d6>
 80058c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058cc:	2b3e      	cmp	r3, #62	; 0x3e
 80058ce:	d817      	bhi.n	8005900 <USB_EPStartXfer+0x35e>
 80058d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058d4:	085b      	lsrs	r3, r3, #1
 80058d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d004      	beq.n	80058f0 <USB_EPStartXfer+0x34e>
 80058e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058ea:	3301      	adds	r3, #1
 80058ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	029b      	lsls	r3, r3, #10
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	801a      	strh	r2, [r3, #0]
 80058fe:	e03b      	b.n	8005978 <USB_EPStartXfer+0x3d6>
 8005900:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800590a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	2b00      	cmp	r3, #0
 8005914:	d104      	bne.n	8005920 <USB_EPStartXfer+0x37e>
 8005916:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800591a:	3b01      	subs	r3, #1
 800591c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005920:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005924:	b29b      	uxth	r3, r3
 8005926:	029b      	lsls	r3, r3, #10
 8005928:	b29b      	uxth	r3, r3
 800592a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005932:	b29a      	uxth	r2, r3
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	e01e      	b.n	8005978 <USB_EPStartXfer+0x3d6>
 800593a:	463b      	mov	r3, r7
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d119      	bne.n	8005978 <USB_EPStartXfer+0x3d6>
 8005944:	1d3b      	adds	r3, r7, #4
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
 800594a:	1d3b      	adds	r3, r7, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005952:	b29b      	uxth	r3, r3
 8005954:	461a      	mov	r2, r3
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	4413      	add	r3, r2
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
 800595c:	463b      	mov	r3, r7
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	00da      	lsls	r2, r3, #3
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	4413      	add	r3, r2
 8005968:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800596c:	623b      	str	r3, [r7, #32]
 800596e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005972:	b29a      	uxth	r2, r3
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005978:	463b      	mov	r3, r7
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	891b      	ldrh	r3, [r3, #8]
 800597e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005982:	463b      	mov	r3, r7
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6959      	ldr	r1, [r3, #20]
 8005988:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800598c:	b29b      	uxth	r3, r3
 800598e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005992:	1d38      	adds	r0, r7, #4
 8005994:	6800      	ldr	r0, [r0, #0]
 8005996:	f001 f88e 	bl	8006ab6 <USB_WritePMA>
 800599a:	e340      	b.n	800601e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d164      	bne.n	8005a70 <USB_EPStartXfer+0x4ce>
 80059a6:	1d3b      	adds	r3, r7, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ac:	1d3b      	adds	r3, r7, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ba:	4413      	add	r3, r2
 80059bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059be:	463b      	mov	r3, r7
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	00da      	lsls	r2, r3, #3
 80059c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c8:	4413      	add	r3, r2
 80059ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d112      	bne.n	80059fe <USB_EPStartXfer+0x45c>
 80059d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e057      	b.n	8005aae <USB_EPStartXfer+0x50c>
 80059fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a02:	2b3e      	cmp	r3, #62	; 0x3e
 8005a04:	d817      	bhi.n	8005a36 <USB_EPStartXfer+0x494>
 8005a06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <USB_EPStartXfer+0x484>
 8005a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a20:	3301      	adds	r3, #1
 8005a22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	029b      	lsls	r3, r3, #10
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	e03b      	b.n	8005aae <USB_EPStartXfer+0x50c>
 8005a36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <USB_EPStartXfer+0x4b4>
 8005a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a50:	3b01      	subs	r3, #1
 8005a52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	029b      	lsls	r3, r3, #10
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	e01e      	b.n	8005aae <USB_EPStartXfer+0x50c>
 8005a70:	463b      	mov	r3, r7
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d119      	bne.n	8005aae <USB_EPStartXfer+0x50c>
 8005a7a:	1d3b      	adds	r3, r7, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a80:	1d3b      	adds	r3, r7, #4
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a8e:	4413      	add	r3, r2
 8005a90:	657b      	str	r3, [r7, #84]	; 0x54
 8005a92:	463b      	mov	r3, r7
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	00da      	lsls	r2, r3, #3
 8005a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8005aa4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005aae:	463b      	mov	r3, r7
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	891b      	ldrh	r3, [r3, #8]
 8005ab4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab8:	463b      	mov	r3, r7
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6959      	ldr	r1, [r3, #20]
 8005abe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005ac8:	1d38      	adds	r0, r7, #4
 8005aca:	6800      	ldr	r0, [r0, #0]
 8005acc:	f000 fff3 	bl	8006ab6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ada:	441a      	add	r2, r3
 8005adc:	463b      	mov	r3, r7
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6a1a      	ldr	r2, [r3, #32]
 8005ae8:	463b      	mov	r3, r7
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d90e      	bls.n	8005b10 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005af2:	463b      	mov	r3, r7
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005afc:	463b      	mov	r3, r7
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6a1a      	ldr	r2, [r3, #32]
 8005b02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b06:	1ad2      	subs	r2, r2, r3
 8005b08:	463b      	mov	r3, r7
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	621a      	str	r2, [r3, #32]
 8005b0e:	e008      	b.n	8005b22 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b10:	463b      	mov	r3, r7
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b22:	1d3b      	adds	r3, r7, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	647b      	str	r3, [r7, #68]	; 0x44
 8005b28:	463b      	mov	r3, r7
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d164      	bne.n	8005bfc <USB_EPStartXfer+0x65a>
 8005b32:	1d3b      	adds	r3, r7, #4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b38:	1d3b      	adds	r3, r7, #4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	461a      	mov	r2, r3
 8005b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b46:	4413      	add	r3, r2
 8005b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	00da      	lsls	r2, r3, #3
 8005b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b54:	4413      	add	r3, r2
 8005b56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d112      	bne.n	8005b8a <USB_EPStartXfer+0x5e8>
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	801a      	strh	r2, [r3, #0]
 8005b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	e054      	b.n	8005c34 <USB_EPStartXfer+0x692>
 8005b8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005b90:	d817      	bhi.n	8005bc2 <USB_EPStartXfer+0x620>
 8005b92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d004      	beq.n	8005bb2 <USB_EPStartXfer+0x610>
 8005ba8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bac:	3301      	adds	r3, #1
 8005bae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	029b      	lsls	r3, r3, #10
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	e038      	b.n	8005c34 <USB_EPStartXfer+0x692>
 8005bc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d104      	bne.n	8005be2 <USB_EPStartXfer+0x640>
 8005bd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	029b      	lsls	r3, r3, #10
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	801a      	strh	r2, [r3, #0]
 8005bfa:	e01b      	b.n	8005c34 <USB_EPStartXfer+0x692>
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d116      	bne.n	8005c34 <USB_EPStartXfer+0x692>
 8005c06:	1d3b      	adds	r3, r7, #4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	461a      	mov	r2, r3
 8005c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c14:	4413      	add	r3, r2
 8005c16:	647b      	str	r3, [r7, #68]	; 0x44
 8005c18:	463b      	mov	r3, r7
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	00da      	lsls	r2, r3, #3
 8005c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c22:	4413      	add	r3, r2
 8005c24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c28:	643b      	str	r3, [r7, #64]	; 0x40
 8005c2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c34:	463b      	mov	r3, r7
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	895b      	ldrh	r3, [r3, #10]
 8005c3a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6959      	ldr	r1, [r3, #20]
 8005c44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005c4e:	1d38      	adds	r0, r7, #4
 8005c50:	6800      	ldr	r0, [r0, #0]
 8005c52:	f000 ff30 	bl	8006ab6 <USB_WritePMA>
 8005c56:	e1e2      	b.n	800601e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005c58:	463b      	mov	r3, r7
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005c62:	1d3b      	adds	r3, r7, #4
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	463b      	mov	r3, r7
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005c80:	1d3b      	adds	r3, r7, #4
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	463b      	mov	r3, r7
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	441a      	add	r2, r3
 8005c8e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ca6:	1d3b      	adds	r3, r7, #4
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	663b      	str	r3, [r7, #96]	; 0x60
 8005cac:	1d3b      	adds	r3, r7, #4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cba:	4413      	add	r3, r2
 8005cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	00da      	lsls	r2, r3, #3
 8005cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc8:	4413      	add	r3, r2
 8005cca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005cda:	463b      	mov	r3, r7
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	891b      	ldrh	r3, [r3, #8]
 8005ce0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6959      	ldr	r1, [r3, #20]
 8005cea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005cf4:	1d38      	adds	r0, r7, #4
 8005cf6:	6800      	ldr	r0, [r0, #0]
 8005cf8:	f000 fedd 	bl	8006ab6 <USB_WritePMA>
 8005cfc:	e18f      	b.n	800601e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cfe:	1d3b      	adds	r3, r7, #4
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	463b      	mov	r3, r7
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 808f 	beq.w	8005e38 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d1a:	1d3b      	adds	r3, r7, #4
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d20:	463b      	mov	r3, r7
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	785b      	ldrb	r3, [r3, #1]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d164      	bne.n	8005df4 <USB_EPStartXfer+0x852>
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	673b      	str	r3, [r7, #112]	; 0x70
 8005d30:	1d3b      	adds	r3, r7, #4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d3e:	4413      	add	r3, r2
 8005d40:	673b      	str	r3, [r7, #112]	; 0x70
 8005d42:	463b      	mov	r3, r7
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	00da      	lsls	r2, r3, #3
 8005d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d112      	bne.n	8005d82 <USB_EPStartXfer+0x7e0>
 8005d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6a:	801a      	strh	r2, [r3, #0]
 8005d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	e054      	b.n	8005e2c <USB_EPStartXfer+0x88a>
 8005d82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d86:	2b3e      	cmp	r3, #62	; 0x3e
 8005d88:	d817      	bhi.n	8005dba <USB_EPStartXfer+0x818>
 8005d8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d004      	beq.n	8005daa <USB_EPStartXfer+0x808>
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da4:	3301      	adds	r3, #1
 8005da6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	029b      	lsls	r3, r3, #10
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db6:	801a      	strh	r2, [r3, #0]
 8005db8:	e038      	b.n	8005e2c <USB_EPStartXfer+0x88a>
 8005dba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dc8:	f003 031f 	and.w	r3, r3, #31
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d104      	bne.n	8005dda <USB_EPStartXfer+0x838>
 8005dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	029b      	lsls	r3, r3, #10
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	e01b      	b.n	8005e2c <USB_EPStartXfer+0x88a>
 8005df4:	463b      	mov	r3, r7
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d116      	bne.n	8005e2c <USB_EPStartXfer+0x88a>
 8005dfe:	1d3b      	adds	r3, r7, #4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e0c:	4413      	add	r3, r2
 8005e0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e10:	463b      	mov	r3, r7
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	00da      	lsls	r2, r3, #3
 8005e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e20:	677b      	str	r3, [r7, #116]	; 0x74
 8005e22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	895b      	ldrh	r3, [r3, #10]
 8005e32:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005e36:	e097      	b.n	8005f68 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e38:	463b      	mov	r3, r7
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d168      	bne.n	8005f14 <USB_EPStartXfer+0x972>
 8005e42:	1d3b      	adds	r3, r7, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e4a:	1d3b      	adds	r3, r7, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e60:	463b      	mov	r3, r7
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	00da      	lsls	r2, r3, #3
 8005e68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d112      	bne.n	8005ea2 <USB_EPStartXfer+0x900>
 8005e7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e8a:	801a      	strh	r2, [r3, #0]
 8005e8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e9e:	801a      	strh	r2, [r3, #0]
 8005ea0:	e05d      	b.n	8005f5e <USB_EPStartXfer+0x9bc>
 8005ea2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ea6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ea8:	d817      	bhi.n	8005eda <USB_EPStartXfer+0x938>
 8005eaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005eae:	085b      	lsrs	r3, r3, #1
 8005eb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005eb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d004      	beq.n	8005eca <USB_EPStartXfer+0x928>
 8005ec0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005eca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	029b      	lsls	r3, r3, #10
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ed6:	801a      	strh	r2, [r3, #0]
 8005ed8:	e041      	b.n	8005f5e <USB_EPStartXfer+0x9bc>
 8005eda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ee4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d104      	bne.n	8005efa <USB_EPStartXfer+0x958>
 8005ef0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005efa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	029b      	lsls	r3, r3, #10
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f10:	801a      	strh	r2, [r3, #0]
 8005f12:	e024      	b.n	8005f5e <USB_EPStartXfer+0x9bc>
 8005f14:	463b      	mov	r3, r7
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d11f      	bne.n	8005f5e <USB_EPStartXfer+0x9bc>
 8005f1e:	1d3b      	adds	r3, r7, #4
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f26:	1d3b      	adds	r3, r7, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f36:	4413      	add	r3, r2
 8005f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	00da      	lsls	r2, r3, #3
 8005f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f48:	4413      	add	r3, r2
 8005f4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f5e:	463b      	mov	r3, r7
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	891b      	ldrh	r3, [r3, #8]
 8005f64:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f68:	463b      	mov	r3, r7
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6959      	ldr	r1, [r3, #20]
 8005f6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005f78:	1d38      	adds	r0, r7, #4
 8005f7a:	6800      	ldr	r0, [r0, #0]
 8005f7c:	f000 fd9b 	bl	8006ab6 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005f80:	463b      	mov	r3, r7
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	785b      	ldrb	r3, [r3, #1]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d122      	bne.n	8005fd0 <USB_EPStartXfer+0xa2e>
 8005f8a:	1d3b      	adds	r3, r7, #4
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	463b      	mov	r3, r7
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005fa8:	1d3b      	adds	r3, r7, #4
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	463b      	mov	r3, r7
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	441a      	add	r2, r3
 8005fb6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	8013      	strh	r3, [r2, #0]
 8005fce:	e026      	b.n	800601e <USB_EPStartXfer+0xa7c>
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d121      	bne.n	800601e <USB_EPStartXfer+0xa7c>
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	463b      	mov	r3, r7
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005ff8:	1d3b      	adds	r3, r7, #4
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	441a      	add	r2, r3
 8006006:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800600a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006012:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601a:	b29b      	uxth	r3, r3
 800601c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800601e:	1d3b      	adds	r3, r7, #4
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	463b      	mov	r3, r7
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f107 020e 	add.w	r2, r7, #14
 8006034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603c:	8013      	strh	r3, [r2, #0]
 800603e:	f107 030e 	add.w	r3, r7, #14
 8006042:	f107 020e 	add.w	r2, r7, #14
 8006046:	8812      	ldrh	r2, [r2, #0]
 8006048:	f082 0210 	eor.w	r2, r2, #16
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	f107 030e 	add.w	r3, r7, #14
 8006052:	f107 020e 	add.w	r2, r7, #14
 8006056:	8812      	ldrh	r2, [r2, #0]
 8006058:	f082 0220 	eor.w	r2, r2, #32
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	1d3b      	adds	r3, r7, #4
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	463b      	mov	r3, r7
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	441a      	add	r2, r3
 800606c:	f107 030e 	add.w	r3, r7, #14
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006082:	b29b      	uxth	r3, r3
 8006084:	8013      	strh	r3, [r2, #0]
 8006086:	e3b5      	b.n	80067f4 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006088:	463b      	mov	r3, r7
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	7b1b      	ldrb	r3, [r3, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f040 8090 	bne.w	80061b4 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006094:	463b      	mov	r3, r7
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	463b      	mov	r3, r7
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d90e      	bls.n	80060c2 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80060a4:	463b      	mov	r3, r7
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80060ae:	463b      	mov	r3, r7
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060b8:	1ad2      	subs	r2, r2, r3
 80060ba:	463b      	mov	r3, r7
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	619a      	str	r2, [r3, #24]
 80060c0:	e008      	b.n	80060d4 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 80060c2:	463b      	mov	r3, r7
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 80060cc:	463b      	mov	r3, r7
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2200      	movs	r2, #0
 80060d2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060dc:	1d3b      	adds	r3, r7, #4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060ec:	4413      	add	r3, r2
 80060ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060f2:	463b      	mov	r3, r7
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	00da      	lsls	r2, r3, #3
 80060fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060fe:	4413      	add	r3, r2
 8006100:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006104:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006108:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800610c:	2b00      	cmp	r3, #0
 800610e:	d116      	bne.n	800613e <USB_EPStartXfer+0xb9c>
 8006110:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800611c:	b29a      	uxth	r2, r3
 800611e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	b29b      	uxth	r3, r3
 800612c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006134:	b29a      	uxth	r2, r3
 8006136:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800613a:	801a      	strh	r2, [r3, #0]
 800613c:	e32c      	b.n	8006798 <USB_EPStartXfer+0x11f6>
 800613e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006142:	2b3e      	cmp	r3, #62	; 0x3e
 8006144:	d818      	bhi.n	8006178 <USB_EPStartXfer+0xbd6>
 8006146:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006150:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <USB_EPStartXfer+0xbc4>
 800615c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006160:	3301      	adds	r3, #1
 8006162:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006166:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800616a:	b29b      	uxth	r3, r3
 800616c:	029b      	lsls	r3, r3, #10
 800616e:	b29a      	uxth	r2, r3
 8006170:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	e30f      	b.n	8006798 <USB_EPStartXfer+0x11f6>
 8006178:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800617c:	095b      	lsrs	r3, r3, #5
 800617e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006182:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006186:	f003 031f 	and.w	r3, r3, #31
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <USB_EPStartXfer+0xbf6>
 800618e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006192:	3b01      	subs	r3, #1
 8006194:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006198:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800619c:	b29b      	uxth	r3, r3
 800619e:	029b      	lsls	r3, r3, #10
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061b0:	801a      	strh	r2, [r3, #0]
 80061b2:	e2f1      	b.n	8006798 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80061b4:	463b      	mov	r3, r7
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	78db      	ldrb	r3, [r3, #3]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	f040 818f 	bne.w	80064de <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061c0:	463b      	mov	r3, r7
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d175      	bne.n	80062b6 <USB_EPStartXfer+0xd14>
 80061ca:	1d3b      	adds	r3, r7, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061d2:	1d3b      	adds	r3, r7, #4
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061da:	b29b      	uxth	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061e2:	4413      	add	r3, r2
 80061e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061e8:	463b      	mov	r3, r7
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	00da      	lsls	r2, r3, #3
 80061f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061f4:	4413      	add	r3, r2
 80061f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061fe:	463b      	mov	r3, r7
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d116      	bne.n	8006236 <USB_EPStartXfer+0xc94>
 8006208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006214:	b29a      	uxth	r2, r3
 8006216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622c:	b29a      	uxth	r2, r3
 800622e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	e065      	b.n	8006302 <USB_EPStartXfer+0xd60>
 8006236:	463b      	mov	r3, r7
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b3e      	cmp	r3, #62	; 0x3e
 800623e:	d81a      	bhi.n	8006276 <USB_EPStartXfer+0xcd4>
 8006240:	463b      	mov	r3, r7
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	085b      	lsrs	r3, r3, #1
 8006248:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800624c:	463b      	mov	r3, r7
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d004      	beq.n	8006264 <USB_EPStartXfer+0xcc2>
 800625a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800625e:	3301      	adds	r3, #1
 8006260:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006264:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006268:	b29b      	uxth	r3, r3
 800626a:	029b      	lsls	r3, r3, #10
 800626c:	b29a      	uxth	r2, r3
 800626e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	e045      	b.n	8006302 <USB_EPStartXfer+0xd60>
 8006276:	463b      	mov	r3, r7
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006282:	463b      	mov	r3, r7
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f003 031f 	and.w	r3, r3, #31
 800628c:	2b00      	cmp	r3, #0
 800628e:	d104      	bne.n	800629a <USB_EPStartXfer+0xcf8>
 8006290:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006294:	3b01      	subs	r3, #1
 8006296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800629a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800629e:	b29b      	uxth	r3, r3
 80062a0:	029b      	lsls	r3, r3, #10
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062b2:	801a      	strh	r2, [r3, #0]
 80062b4:	e025      	b.n	8006302 <USB_EPStartXfer+0xd60>
 80062b6:	463b      	mov	r3, r7
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d120      	bne.n	8006302 <USB_EPStartXfer+0xd60>
 80062c0:	1d3b      	adds	r3, r7, #4
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062c8:	1d3b      	adds	r3, r7, #4
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062d8:	4413      	add	r3, r2
 80062da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062de:	463b      	mov	r3, r7
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	00da      	lsls	r2, r3, #3
 80062e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ea:	4413      	add	r3, r2
 80062ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062f4:	463b      	mov	r3, r7
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006300:	801a      	strh	r2, [r3, #0]
 8006302:	1d3b      	adds	r3, r7, #4
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800630a:	463b      	mov	r3, r7
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d175      	bne.n	8006400 <USB_EPStartXfer+0xe5e>
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800631c:	1d3b      	adds	r3, r7, #4
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006324:	b29b      	uxth	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800632c:	4413      	add	r3, r2
 800632e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006332:	463b      	mov	r3, r7
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	00da      	lsls	r2, r3, #3
 800633a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800633e:	4413      	add	r3, r2
 8006340:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006348:	463b      	mov	r3, r7
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d116      	bne.n	8006380 <USB_EPStartXfer+0xdde>
 8006352:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800635e:	b29a      	uxth	r2, r3
 8006360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29b      	uxth	r3, r3
 800636e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006376:	b29a      	uxth	r2, r3
 8006378:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	e061      	b.n	8006444 <USB_EPStartXfer+0xea2>
 8006380:	463b      	mov	r3, r7
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b3e      	cmp	r3, #62	; 0x3e
 8006388:	d81a      	bhi.n	80063c0 <USB_EPStartXfer+0xe1e>
 800638a:	463b      	mov	r3, r7
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006396:	463b      	mov	r3, r7
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d004      	beq.n	80063ae <USB_EPStartXfer+0xe0c>
 80063a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a8:	3301      	adds	r3, #1
 80063aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	029b      	lsls	r3, r3, #10
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063bc:	801a      	strh	r2, [r3, #0]
 80063be:	e041      	b.n	8006444 <USB_EPStartXfer+0xea2>
 80063c0:	463b      	mov	r3, r7
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063cc:	463b      	mov	r3, r7
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <USB_EPStartXfer+0xe42>
 80063da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063de:	3b01      	subs	r3, #1
 80063e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	029b      	lsls	r3, r3, #10
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063fc:	801a      	strh	r2, [r3, #0]
 80063fe:	e021      	b.n	8006444 <USB_EPStartXfer+0xea2>
 8006400:	463b      	mov	r3, r7
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	785b      	ldrb	r3, [r3, #1]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d11c      	bne.n	8006444 <USB_EPStartXfer+0xea2>
 800640a:	1d3b      	adds	r3, r7, #4
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006412:	b29b      	uxth	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800641a:	4413      	add	r3, r2
 800641c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006420:	463b      	mov	r3, r7
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	00da      	lsls	r2, r3, #3
 8006428:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800642c:	4413      	add	r3, r2
 800642e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006436:	463b      	mov	r3, r7
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	b29a      	uxth	r2, r3
 800643e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006442:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8006444:	463b      	mov	r3, r7
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 81a4 	beq.w	8006798 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006450:	1d3b      	adds	r3, r7, #4
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	463b      	mov	r3, r7
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006464:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <USB_EPStartXfer+0xeda>
 8006470:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10d      	bne.n	8006498 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800647c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 8187 	bne.w	8006798 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800648a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800648e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	f040 8180 	bne.w	8006798 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006498:	1d3b      	adds	r3, r7, #4
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	463b      	mov	r3, r7
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80064b6:	1d3b      	adds	r3, r7, #4
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	463b      	mov	r3, r7
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	441a      	add	r2, r3
 80064c4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80064c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064d8:	b29b      	uxth	r3, r3
 80064da:	8013      	strh	r3, [r2, #0]
 80064dc:	e15c      	b.n	8006798 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064de:	463b      	mov	r3, r7
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	78db      	ldrb	r3, [r3, #3]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	f040 8155 	bne.w	8006794 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80064ea:	463b      	mov	r3, r7
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699a      	ldr	r2, [r3, #24]
 80064f0:	463b      	mov	r3, r7
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d90e      	bls.n	8006518 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80064fa:	463b      	mov	r3, r7
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8006504:	463b      	mov	r3, r7
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800650e:	1ad2      	subs	r2, r2, r3
 8006510:	463b      	mov	r3, r7
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	619a      	str	r2, [r3, #24]
 8006516:	e008      	b.n	800652a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8006518:	463b      	mov	r3, r7
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8006522:	463b      	mov	r3, r7
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2200      	movs	r2, #0
 8006528:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800652a:	463b      	mov	r3, r7
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	785b      	ldrb	r3, [r3, #1]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d16f      	bne.n	8006614 <USB_EPStartXfer+0x1072>
 8006534:	1d3b      	adds	r3, r7, #4
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800653c:	1d3b      	adds	r3, r7, #4
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006544:	b29b      	uxth	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800654c:	4413      	add	r3, r2
 800654e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006552:	463b      	mov	r3, r7
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	00da      	lsls	r2, r3, #3
 800655a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800655e:	4413      	add	r3, r2
 8006560:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006568:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800656c:	2b00      	cmp	r3, #0
 800656e:	d116      	bne.n	800659e <USB_EPStartXfer+0xffc>
 8006570:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800657c:	b29a      	uxth	r2, r3
 800657e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006594:	b29a      	uxth	r2, r3
 8006596:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800659a:	801a      	strh	r2, [r3, #0]
 800659c:	e05f      	b.n	800665e <USB_EPStartXfer+0x10bc>
 800659e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065a2:	2b3e      	cmp	r3, #62	; 0x3e
 80065a4:	d818      	bhi.n	80065d8 <USB_EPStartXfer+0x1036>
 80065a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <USB_EPStartXfer+0x1024>
 80065bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c0:	3301      	adds	r3, #1
 80065c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	029b      	lsls	r3, r3, #10
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	e042      	b.n	800665e <USB_EPStartXfer+0x10bc>
 80065d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065dc:	095b      	lsrs	r3, r3, #5
 80065de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <USB_EPStartXfer+0x1056>
 80065ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f2:	3b01      	subs	r3, #1
 80065f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	029b      	lsls	r3, r3, #10
 8006600:	b29b      	uxth	r3, r3
 8006602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660a:	b29a      	uxth	r2, r3
 800660c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006610:	801a      	strh	r2, [r3, #0]
 8006612:	e024      	b.n	800665e <USB_EPStartXfer+0x10bc>
 8006614:	463b      	mov	r3, r7
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	785b      	ldrb	r3, [r3, #1]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d11f      	bne.n	800665e <USB_EPStartXfer+0x10bc>
 800661e:	1d3b      	adds	r3, r7, #4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006626:	1d3b      	adds	r3, r7, #4
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662e:	b29b      	uxth	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006636:	4413      	add	r3, r2
 8006638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800663c:	463b      	mov	r3, r7
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	00da      	lsls	r2, r3, #3
 8006644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006648:	4413      	add	r3, r2
 800664a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800664e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006652:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006656:	b29a      	uxth	r2, r3
 8006658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	1d3b      	adds	r3, r7, #4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006666:	463b      	mov	r3, r7
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	785b      	ldrb	r3, [r3, #1]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d16f      	bne.n	8006750 <USB_EPStartXfer+0x11ae>
 8006670:	1d3b      	adds	r3, r7, #4
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006678:	1d3b      	adds	r3, r7, #4
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006680:	b29b      	uxth	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006688:	4413      	add	r3, r2
 800668a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800668e:	463b      	mov	r3, r7
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	00da      	lsls	r2, r3, #3
 8006696:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800669a:	4413      	add	r3, r2
 800669c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d116      	bne.n	80066da <USB_EPStartXfer+0x1138>
 80066ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066d6:	801a      	strh	r2, [r3, #0]
 80066d8:	e05e      	b.n	8006798 <USB_EPStartXfer+0x11f6>
 80066da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066de:	2b3e      	cmp	r3, #62	; 0x3e
 80066e0:	d818      	bhi.n	8006714 <USB_EPStartXfer+0x1172>
 80066e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066e6:	085b      	lsrs	r3, r3, #1
 80066e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d004      	beq.n	8006702 <USB_EPStartXfer+0x1160>
 80066f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066fc:	3301      	adds	r3, #1
 80066fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006706:	b29b      	uxth	r3, r3
 8006708:	029b      	lsls	r3, r3, #10
 800670a:	b29a      	uxth	r2, r3
 800670c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	e041      	b.n	8006798 <USB_EPStartXfer+0x11f6>
 8006714:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006718:	095b      	lsrs	r3, r3, #5
 800671a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800671e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006722:	f003 031f 	and.w	r3, r3, #31
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <USB_EPStartXfer+0x1192>
 800672a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800672e:	3b01      	subs	r3, #1
 8006730:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006738:	b29b      	uxth	r3, r3
 800673a:	029b      	lsls	r3, r3, #10
 800673c:	b29b      	uxth	r3, r3
 800673e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006746:	b29a      	uxth	r2, r3
 8006748:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800674c:	801a      	strh	r2, [r3, #0]
 800674e:	e023      	b.n	8006798 <USB_EPStartXfer+0x11f6>
 8006750:	463b      	mov	r3, r7
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	785b      	ldrb	r3, [r3, #1]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d11e      	bne.n	8006798 <USB_EPStartXfer+0x11f6>
 800675a:	1d3b      	adds	r3, r7, #4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006762:	b29b      	uxth	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800676a:	4413      	add	r3, r2
 800676c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006770:	463b      	mov	r3, r7
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	00da      	lsls	r2, r3, #3
 8006778:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800677c:	4413      	add	r3, r2
 800677e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006782:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006786:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800678a:	b29a      	uxth	r2, r3
 800678c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006790:	801a      	strh	r2, [r3, #0]
 8006792:	e001      	b.n	8006798 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e02e      	b.n	80067f6 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006798:	1d3b      	adds	r3, r7, #4
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	463b      	mov	r3, r7
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067ce:	1d3b      	adds	r3, r7, #4
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	463b      	mov	r3, r7
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	441a      	add	r2, r3
 80067dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d020      	beq.n	8006854 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006828:	81bb      	strh	r3, [r7, #12]
 800682a:	89bb      	ldrh	r3, [r7, #12]
 800682c:	f083 0310 	eor.w	r3, r3, #16
 8006830:	81bb      	strh	r3, [r7, #12]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	89bb      	ldrh	r3, [r7, #12]
 800683e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684e:	b29b      	uxth	r3, r3
 8006850:	8013      	strh	r3, [r2, #0]
 8006852:	e01f      	b.n	8006894 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29b      	uxth	r3, r3
 8006862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686a:	81fb      	strh	r3, [r7, #14]
 800686c:	89fb      	ldrh	r3, [r7, #14]
 800686e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006872:	81fb      	strh	r3, [r7, #14]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	441a      	add	r2, r3
 800687e:	89fb      	ldrh	r3, [r7, #14]
 8006880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006890:	b29b      	uxth	r3, r3
 8006892:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b087      	sub	sp, #28
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	7b1b      	ldrb	r3, [r3, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f040 809d 	bne.w	80069f0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d04c      	beq.n	8006958 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	823b      	strh	r3, [r7, #16]
 80068cc:	8a3b      	ldrh	r3, [r7, #16]
 80068ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d01b      	beq.n	800690e <USB_EPClearStall+0x6c>
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ec:	81fb      	strh	r3, [r7, #14]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	441a      	add	r2, r3
 80068f8:	89fb      	ldrh	r3, [r7, #14]
 80068fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800690a:	b29b      	uxth	r3, r3
 800690c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	78db      	ldrb	r3, [r3, #3]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d06c      	beq.n	80069f0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800692c:	81bb      	strh	r3, [r7, #12]
 800692e:	89bb      	ldrh	r3, [r7, #12]
 8006930:	f083 0320 	eor.w	r3, r3, #32
 8006934:	81bb      	strh	r3, [r7, #12]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	441a      	add	r2, r3
 8006940:	89bb      	ldrh	r3, [r7, #12]
 8006942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006952:	b29b      	uxth	r3, r3
 8006954:	8013      	strh	r3, [r2, #0]
 8006956:	e04b      	b.n	80069f0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	82fb      	strh	r3, [r7, #22]
 8006966:	8afb      	ldrh	r3, [r7, #22]
 8006968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01b      	beq.n	80069a8 <USB_EPClearStall+0x106>
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006986:	82bb      	strh	r3, [r7, #20]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	441a      	add	r2, r3
 8006992:	8abb      	ldrh	r3, [r7, #20]
 8006994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069be:	827b      	strh	r3, [r7, #18]
 80069c0:	8a7b      	ldrh	r3, [r7, #18]
 80069c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069c6:	827b      	strh	r3, [r7, #18]
 80069c8:	8a7b      	ldrh	r3, [r7, #18]
 80069ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069ce:	827b      	strh	r3, [r7, #18]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	441a      	add	r2, r3
 80069da:	8a7b      	ldrh	r3, [r7, #18]
 80069dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	460b      	mov	r3, r1
 8006a08:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a0a:	78fb      	ldrb	r3, [r7, #3]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d103      	bne.n	8006a18 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2280      	movs	r2, #128	; 0x80
 8006a14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b085      	sub	sp, #20
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a90:	68fb      	ldr	r3, [r7, #12]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b08d      	sub	sp, #52	; 0x34
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	80fb      	strh	r3, [r7, #6]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006acc:	88bb      	ldrh	r3, [r7, #4]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006adc:	88fa      	ldrh	r2, [r7, #6]
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aec:	e01b      	b.n	8006b26 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	3301      	adds	r3, #1
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	3302      	adds	r3, #2
 8006b18:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b22:	3b01      	subs	r3, #1
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e0      	bne.n	8006aee <USB_WritePMA+0x38>
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	3734      	adds	r7, #52	; 0x34
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b08b      	sub	sp, #44	; 0x2c
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	4611      	mov	r1, r2
 8006b46:	461a      	mov	r2, r3
 8006b48:	460b      	mov	r3, r1
 8006b4a:	80fb      	strh	r3, [r7, #6]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b50:	88bb      	ldrh	r3, [r7, #4]
 8006b52:	085b      	lsrs	r3, r3, #1
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b60:	88fa      	ldrh	r2, [r7, #6]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b6a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b70:	e018      	b.n	8006ba4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	3302      	adds	r3, #2
 8006b7e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	0a1b      	lsrs	r3, r3, #8
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e3      	bne.n	8006b72 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006baa:	88bb      	ldrh	r3, [r7, #4]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d007      	beq.n	8006bc6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	701a      	strb	r2, [r3, #0]
  }
}
 8006bc6:	bf00      	nop
 8006bc8:	372c      	adds	r7, #44	; 0x2c
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bde:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006be2:	f002 f969 	bl	8008eb8 <malloc>
 8006be6:	4603      	mov	r3, r0
 8006be8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d105      	bne.n	8006bfc <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e066      	b.n	8006cca <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	7c1b      	ldrb	r3, [r3, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d119      	bne.n	8006c40 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c10:	2202      	movs	r2, #2
 8006c12:	2181      	movs	r1, #129	; 0x81
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 ff21 	bl	8008a5c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c24:	2202      	movs	r2, #2
 8006c26:	2101      	movs	r1, #1
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 ff17 	bl	8008a5c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2210      	movs	r2, #16
 8006c3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c3e:	e016      	b.n	8006c6e <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c40:	2340      	movs	r3, #64	; 0x40
 8006c42:	2202      	movs	r2, #2
 8006c44:	2181      	movs	r1, #129	; 0x81
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f001 ff08 	bl	8008a5c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c52:	2340      	movs	r3, #64	; 0x40
 8006c54:	2202      	movs	r2, #2
 8006c56:	2101      	movs	r1, #1
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 feff 	bl	8008a5c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2210      	movs	r2, #16
 8006c6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c6e:	2308      	movs	r3, #8
 8006c70:	2203      	movs	r2, #3
 8006c72:	2182      	movs	r1, #130	; 0x82
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fef1 	bl	8008a5c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	7c1b      	ldrb	r3, [r3, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d109      	bne.n	8006cb8 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cae:	2101      	movs	r1, #1
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f002 f84f 	bl	8008d54 <USBD_LL_PrepareReceive>
 8006cb6:	e007      	b.n	8006cc8 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cbe:	2340      	movs	r3, #64	; 0x40
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f002 f846 	bl	8008d54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cde:	2181      	movs	r1, #129	; 0x81
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fef9 	bl	8008ad8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006cec:	2101      	movs	r1, #1
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 fef2 	bl	8008ad8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cfc:	2182      	movs	r1, #130	; 0x82
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 feea 	bl	8008ad8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00e      	beq.n	8006d3c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f002 f8ca 	bl	8008ec8 <free>
    pdev->pClassData = NULL;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d58:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d03a      	beq.n	8006de8 <USBD_CDC_Setup+0xa0>
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	f040 8097 	bne.w	8006ea6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	88db      	ldrh	r3, [r3, #6]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d029      	beq.n	8006dd4 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	b25b      	sxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	da11      	bge.n	8006dae <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006d96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	88d2      	ldrh	r2, [r2, #6]
 8006d9c:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006d9e:	6939      	ldr	r1, [r7, #16]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	88db      	ldrh	r3, [r3, #6]
 8006da4:	461a      	mov	r2, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 fa6c 	bl	8008284 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006dac:	e082      	b.n	8006eb4 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	785a      	ldrb	r2, [r3, #1]
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	88db      	ldrh	r3, [r3, #6]
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006dc4:	6939      	ldr	r1, [r7, #16]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	88db      	ldrh	r3, [r3, #6]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 fa85 	bl	80082dc <USBD_CtlPrepareRx>
      break;
 8006dd2:	e06f      	b.n	8006eb4 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	7850      	ldrb	r0, [r2, #1]
 8006de0:	2200      	movs	r2, #0
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	4798      	blx	r3
      break;
 8006de6:	e065      	b.n	8006eb4 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	2b0b      	cmp	r3, #11
 8006dee:	d84f      	bhi.n	8006e90 <USBD_CDC_Setup+0x148>
 8006df0:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <USBD_CDC_Setup+0xb0>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e29 	.word	0x08006e29
 8006dfc:	08006e9f 	.word	0x08006e9f
 8006e00:	08006e91 	.word	0x08006e91
 8006e04:	08006e91 	.word	0x08006e91
 8006e08:	08006e91 	.word	0x08006e91
 8006e0c:	08006e91 	.word	0x08006e91
 8006e10:	08006e91 	.word	0x08006e91
 8006e14:	08006e91 	.word	0x08006e91
 8006e18:	08006e91 	.word	0x08006e91
 8006e1c:	08006e91 	.word	0x08006e91
 8006e20:	08006e51 	.word	0x08006e51
 8006e24:	08006e79 	.word	0x08006e79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d107      	bne.n	8006e42 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e32:	f107 030c 	add.w	r3, r7, #12
 8006e36:	2202      	movs	r2, #2
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 fa22 	bl	8008284 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e40:	e030      	b.n	8006ea4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 f9ac 	bl	80081a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e4e:	e029      	b.n	8006ea4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d107      	bne.n	8006e6a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e5a:	f107 030f 	add.w	r3, r7, #15
 8006e5e:	2201      	movs	r2, #1
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 fa0e 	bl	8008284 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e68:	e01c      	b.n	8006ea4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 f998 	bl	80081a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e72:	2303      	movs	r3, #3
 8006e74:	75fb      	strb	r3, [r7, #23]
          break;
 8006e76:	e015      	b.n	8006ea4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d00f      	beq.n	8006ea2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 f98c 	bl	80081a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e8e:	e008      	b.n	8006ea2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 f985 	bl	80081a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	75fb      	strb	r3, [r7, #23]
          break;
 8006e9c:	e002      	b.n	8006ea4 <USBD_CDC_Setup+0x15c>
          break;
 8006e9e:	bf00      	nop
 8006ea0:	e008      	b.n	8006eb4 <USBD_CDC_Setup+0x16c>
          break;
 8006ea2:	bf00      	nop
      }
      break;
 8006ea4:	e006      	b.n	8006eb4 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 f97a 	bl	80081a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb2:	bf00      	nop
  }

  return (uint8_t)ret;
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop

08006ec0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ed2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e04f      	b.n	8006f82 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ee8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	3318      	adds	r3, #24
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d029      	beq.n	8006f54 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f00:	78fa      	ldrb	r2, [r7, #3]
 8006f02:	6879      	ldr	r1, [r7, #4]
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	440b      	add	r3, r1
 8006f0e:	3318      	adds	r3, #24
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	78f9      	ldrb	r1, [r7, #3]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	460b      	mov	r3, r1
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	440b      	add	r3, r1
 8006f1c:	00db      	lsls	r3, r3, #3
 8006f1e:	4403      	add	r3, r0
 8006f20:	3338      	adds	r3, #56	; 0x38
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f28:	fb03 f301 	mul.w	r3, r3, r1
 8006f2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d110      	bne.n	8006f54 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f32:	78fa      	ldrb	r2, [r7, #3]
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	3318      	adds	r3, #24
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f46:	78f9      	ldrb	r1, [r7, #3]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 fec9 	bl	8008ce4 <USBD_LL_Transmit>
 8006f52:	e015      	b.n	8006f80 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00b      	beq.n	8006f80 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f7c:	78fa      	ldrb	r2, [r7, #3]
 8006f7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	460b      	mov	r3, r1
 8006f94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e015      	b.n	8006fd8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fac:	78fb      	ldrb	r3, [r7, #3]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f001 ff07 	bl	8008dc4 <USBD_LL_GetRxDataSize>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d015      	beq.n	8007026 <USBD_CDC_EP0_RxReady+0x46>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007000:	2bff      	cmp	r3, #255	; 0xff
 8007002:	d010      	beq.n	8007026 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007012:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800701a:	b292      	uxth	r2, r2
 800701c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	22ff      	movs	r2, #255	; 0xff
 8007022:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2243      	movs	r2, #67	; 0x43
 800703c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800703e:	4b03      	ldr	r3, [pc, #12]	; (800704c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	2000009c 	.word	0x2000009c

08007050 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2243      	movs	r2, #67	; 0x43
 800705c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800705e:	4b03      	ldr	r3, [pc, #12]	; (800706c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	20000058 	.word	0x20000058

08007070 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2243      	movs	r2, #67	; 0x43
 800707c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800707e:	4b03      	ldr	r3, [pc, #12]	; (800708c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007080:	4618      	mov	r0, r3
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	200000e0 	.word	0x200000e0

08007090 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	220a      	movs	r2, #10
 800709c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800709e:	4b03      	ldr	r3, [pc, #12]	; (80070ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20000014 	.word	0x20000014

080070b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e004      	b.n	80070ce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070da:	b480      	push	{r7}
 80070dc:	b087      	sub	sp, #28
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	371c      	adds	r7, #28
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800711c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007142:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800714e:	2303      	movs	r3, #3
 8007150:	e016      	b.n	8007180 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	7c1b      	ldrb	r3, [r3, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d109      	bne.n	800716e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007164:	2101      	movs	r1, #1
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 fdf4 	bl	8008d54 <USBD_LL_PrepareReceive>
 800716c:	e007      	b.n	800717e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007174:	2340      	movs	r3, #64	; 0x40
 8007176:	2101      	movs	r1, #1
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fdeb 	bl	8008d54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	4613      	mov	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800719c:	2303      	movs	r3, #3
 800719e:	e01f      	b.n	80071e0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	79fa      	ldrb	r2, [r7, #7]
 80071d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f001 fbad 	bl	8008934 <USBD_LL_Init>
 80071da:	4603      	mov	r3, r0
 80071dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071de:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e016      	b.n	800722e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721c:	f107 020e 	add.w	r2, r7, #14
 8007220:	4610      	mov	r0, r2
 8007222:	4798      	blx	r3
 8007224:	4602      	mov	r2, r0
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fbda 	bl	80089f8 <USBD_LL_Start>
 8007244:	4603      	mov	r3, r0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800724e:	b480      	push	{r7}
 8007250:	b083      	sub	sp, #12
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007270:	2303      	movs	r3, #3
 8007272:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d009      	beq.n	8007292 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	78fa      	ldrb	r2, [r7, #3]
 8007288:	4611      	mov	r1, r2
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
 800728e:	4603      	mov	r3, r0
 8007290:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007292:	7bfb      	ldrb	r3, [r7, #15]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d007      	beq.n	80072c2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	78fa      	ldrb	r2, [r7, #3]
 80072bc:	4611      	mov	r1, r2
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	4798      	blx	r3
  }

  return USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 ff25 	bl	800812e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80072f2:	461a      	mov	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	2b02      	cmp	r3, #2
 8007306:	d01a      	beq.n	800733e <USBD_LL_SetupStage+0x72>
 8007308:	2b02      	cmp	r3, #2
 800730a:	d822      	bhi.n	8007352 <USBD_LL_SetupStage+0x86>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <USBD_LL_SetupStage+0x4a>
 8007310:	2b01      	cmp	r3, #1
 8007312:	d00a      	beq.n	800732a <USBD_LL_SetupStage+0x5e>
 8007314:	e01d      	b.n	8007352 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f9d6 	bl	80076d0 <USBD_StdDevReq>
 8007324:	4603      	mov	r3, r0
 8007326:	73fb      	strb	r3, [r7, #15]
      break;
 8007328:	e020      	b.n	800736c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fa3a 	bl	80077ac <USBD_StdItfReq>
 8007338:	4603      	mov	r3, r0
 800733a:	73fb      	strb	r3, [r7, #15]
      break;
 800733c:	e016      	b.n	800736c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa78 	bl	800783c <USBD_StdEPReq>
 800734c:	4603      	mov	r3, r0
 800734e:	73fb      	strb	r3, [r7, #15]
      break;
 8007350:	e00c      	b.n	800736c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007358:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800735c:	b2db      	uxtb	r3, r3
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 fbef 	bl	8008b44 <USBD_LL_StallEP>
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]
      break;
 800736a:	bf00      	nop
  }

  return ret;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b086      	sub	sp, #24
 800737a:	af00      	add	r7, sp, #0
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	460b      	mov	r3, r1
 8007380:	607a      	str	r2, [r7, #4]
 8007382:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007384:	7afb      	ldrb	r3, [r7, #11]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d137      	bne.n	80073fa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007390:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007398:	2b03      	cmp	r3, #3
 800739a:	d14a      	bne.n	8007432 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d913      	bls.n	80073d0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	1ad2      	subs	r2, r2, r3
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	4293      	cmp	r3, r2
 80073c0:	bf28      	it	cs
 80073c2:	4613      	movcs	r3, r2
 80073c4:	461a      	mov	r2, r3
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 ffa4 	bl	8008316 <USBD_CtlContinueRx>
 80073ce:	e030      	b.n	8007432 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00a      	beq.n	80073f2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d105      	bne.n	80073f2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 ffa0 	bl	8008338 <USBD_CtlSendStatus>
 80073f8:	e01b      	b.n	8007432 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d013      	beq.n	800742e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800740c:	2b03      	cmp	r3, #3
 800740e:	d10e      	bne.n	800742e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	7afa      	ldrb	r2, [r7, #11]
 800741a:	4611      	mov	r1, r2
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	4798      	blx	r3
 8007420:	4603      	mov	r3, r0
 8007422:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007424:	7dfb      	ldrb	r3, [r7, #23]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800742a:	7dfb      	ldrb	r3, [r7, #23]
 800742c:	e002      	b.n	8007434 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800742e:	2303      	movs	r3, #3
 8007430:	e000      	b.n	8007434 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	460b      	mov	r3, r1
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800744a:	7afb      	ldrb	r3, [r7, #11]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d16a      	bne.n	8007526 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3314      	adds	r3, #20
 8007454:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800745c:	2b02      	cmp	r3, #2
 800745e:	d155      	bne.n	800750c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	429a      	cmp	r2, r3
 800746a:	d914      	bls.n	8007496 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	1ad2      	subs	r2, r2, r3
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	461a      	mov	r2, r3
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 ff19 	bl	80082ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007488:	2300      	movs	r3, #0
 800748a:	2200      	movs	r2, #0
 800748c:	2100      	movs	r1, #0
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f001 fc60 	bl	8008d54 <USBD_LL_PrepareReceive>
 8007494:	e03a      	b.n	800750c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d11c      	bne.n	80074dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d316      	bcc.n	80074dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d20f      	bcs.n	80074dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074bc:	2200      	movs	r2, #0
 80074be:	2100      	movs	r1, #0
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 fefa 	bl	80082ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074ce:	2300      	movs	r3, #0
 80074d0:	2200      	movs	r2, #0
 80074d2:	2100      	movs	r1, #0
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f001 fc3d 	bl	8008d54 <USBD_LL_PrepareReceive>
 80074da:	e017      	b.n	800750c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d105      	bne.n	80074fe <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074fe:	2180      	movs	r1, #128	; 0x80
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f001 fb1f 	bl	8008b44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 ff29 	bl	800835e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007512:	2b01      	cmp	r3, #1
 8007514:	d123      	bne.n	800755e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff fe99 	bl	800724e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007524:	e01b      	b.n	800755e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d013      	beq.n	800755a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007538:	2b03      	cmp	r3, #3
 800753a:	d10e      	bne.n	800755a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	7afa      	ldrb	r2, [r7, #11]
 8007546:	4611      	mov	r1, r2
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	4798      	blx	r3
 800754c:	4603      	mov	r3, r0
 800754e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007556:	7dfb      	ldrb	r3, [r7, #23]
 8007558:	e002      	b.n	8007560 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800755a:	2303      	movs	r3, #3
 800755c:	e000      	b.n	8007560 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007594:	2b00      	cmp	r3, #0
 8007596:	d009      	beq.n	80075ac <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6852      	ldr	r2, [r2, #4]
 80075a4:	b2d2      	uxtb	r2, r2
 80075a6:	4611      	mov	r1, r2
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075ac:	2340      	movs	r3, #64	; 0x40
 80075ae:	2200      	movs	r2, #0
 80075b0:	2100      	movs	r1, #0
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f001 fa52 	bl	8008a5c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2240      	movs	r2, #64	; 0x40
 80075c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075c8:	2340      	movs	r3, #64	; 0x40
 80075ca:	2200      	movs	r2, #0
 80075cc:	2180      	movs	r1, #128	; 0x80
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 fa44 	bl	8008a5c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2240      	movs	r2, #64	; 0x40
 80075de:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2204      	movs	r2, #4
 8007622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007642:	2b04      	cmp	r3, #4
 8007644:	d105      	bne.n	8007652 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800766e:	2b03      	cmp	r3, #3
 8007670:	d10b      	bne.n	800768a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	3301      	adds	r3, #1
 80076aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076b2:	8a3b      	ldrh	r3, [r7, #16]
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	b21a      	sxth	r2, r3
 80076b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076bc:	4313      	orrs	r3, r2
 80076be:	b21b      	sxth	r3, r3
 80076c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076c2:	89fb      	ldrh	r3, [r7, #14]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076e6:	2b40      	cmp	r3, #64	; 0x40
 80076e8:	d005      	beq.n	80076f6 <USBD_StdDevReq+0x26>
 80076ea:	2b40      	cmp	r3, #64	; 0x40
 80076ec:	d853      	bhi.n	8007796 <USBD_StdDevReq+0xc6>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00b      	beq.n	800770a <USBD_StdDevReq+0x3a>
 80076f2:	2b20      	cmp	r3, #32
 80076f4:	d14f      	bne.n	8007796 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	4798      	blx	r3
 8007704:	4603      	mov	r3, r0
 8007706:	73fb      	strb	r3, [r7, #15]
    break;
 8007708:	e04a      	b.n	80077a0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	785b      	ldrb	r3, [r3, #1]
 800770e:	2b09      	cmp	r3, #9
 8007710:	d83b      	bhi.n	800778a <USBD_StdDevReq+0xba>
 8007712:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <USBD_StdDevReq+0x48>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	0800776d 	.word	0x0800776d
 800771c:	08007781 	.word	0x08007781
 8007720:	0800778b 	.word	0x0800778b
 8007724:	08007777 	.word	0x08007777
 8007728:	0800778b 	.word	0x0800778b
 800772c:	0800774b 	.word	0x0800774b
 8007730:	08007741 	.word	0x08007741
 8007734:	0800778b 	.word	0x0800778b
 8007738:	08007763 	.word	0x08007763
 800773c:	08007755 	.word	0x08007755
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f9da 	bl	8007afc <USBD_GetDescriptor>
      break;
 8007748:	e024      	b.n	8007794 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fb69 	bl	8007e24 <USBD_SetAddress>
      break;
 8007752:	e01f      	b.n	8007794 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fba8 	bl	8007eac <USBD_SetConfig>
 800775c:	4603      	mov	r3, r0
 800775e:	73fb      	strb	r3, [r7, #15]
      break;
 8007760:	e018      	b.n	8007794 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fc45 	bl	8007ff4 <USBD_GetConfig>
      break;
 800776a:	e013      	b.n	8007794 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fc75 	bl	800805e <USBD_GetStatus>
      break;
 8007774:	e00e      	b.n	8007794 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fca3 	bl	80080c4 <USBD_SetFeature>
      break;
 800777e:	e009      	b.n	8007794 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fcb2 	bl	80080ec <USBD_ClrFeature>
      break;
 8007788:	e004      	b.n	8007794 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fd08 	bl	80081a2 <USBD_CtlError>
      break;
 8007792:	bf00      	nop
    }
    break;
 8007794:	e004      	b.n	80077a0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fd02 	bl	80081a2 <USBD_CtlError>
    break;
 800779e:	bf00      	nop
  }

  return ret;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop

080077ac <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077c2:	2b40      	cmp	r3, #64	; 0x40
 80077c4:	d005      	beq.n	80077d2 <USBD_StdItfReq+0x26>
 80077c6:	2b40      	cmp	r3, #64	; 0x40
 80077c8:	d82e      	bhi.n	8007828 <USBD_StdItfReq+0x7c>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <USBD_StdItfReq+0x26>
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	d12a      	bne.n	8007828 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d8:	3b01      	subs	r3, #1
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d81d      	bhi.n	800781a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	889b      	ldrh	r3, [r3, #4]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d813      	bhi.n	8007810 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	4798      	blx	r3
 80077f6:	4603      	mov	r3, r0
 80077f8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	88db      	ldrh	r3, [r3, #6]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d110      	bne.n	8007824 <USBD_StdItfReq+0x78>
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10d      	bne.n	8007824 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fd95 	bl	8008338 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800780e:	e009      	b.n	8007824 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fcc5 	bl	80081a2 <USBD_CtlError>
      break;
 8007818:	e004      	b.n	8007824 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fcc0 	bl	80081a2 <USBD_CtlError>
      break;
 8007822:	e000      	b.n	8007826 <USBD_StdItfReq+0x7a>
      break;
 8007824:	bf00      	nop
    }
    break;
 8007826:	e004      	b.n	8007832 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fcb9 	bl	80081a2 <USBD_CtlError>
    break;
 8007830:	bf00      	nop
  }

  return ret;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	889b      	ldrh	r3, [r3, #4]
 800784e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007858:	2b40      	cmp	r3, #64	; 0x40
 800785a:	d007      	beq.n	800786c <USBD_StdEPReq+0x30>
 800785c:	2b40      	cmp	r3, #64	; 0x40
 800785e:	f200 8142 	bhi.w	8007ae6 <USBD_StdEPReq+0x2aa>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00c      	beq.n	8007880 <USBD_StdEPReq+0x44>
 8007866:	2b20      	cmp	r3, #32
 8007868:	f040 813d 	bne.w	8007ae6 <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
 800787a:	4603      	mov	r3, r0
 800787c:	73fb      	strb	r3, [r7, #15]
    break;
 800787e:	e137      	b.n	8007af0 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b03      	cmp	r3, #3
 8007886:	d007      	beq.n	8007898 <USBD_StdEPReq+0x5c>
 8007888:	2b03      	cmp	r3, #3
 800788a:	f300 8126 	bgt.w	8007ada <USBD_StdEPReq+0x29e>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d07d      	beq.n	800798e <USBD_StdEPReq+0x152>
 8007892:	2b01      	cmp	r3, #1
 8007894:	d03b      	beq.n	800790e <USBD_StdEPReq+0xd2>
 8007896:	e120      	b.n	8007ada <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d002      	beq.n	80078a8 <USBD_StdEPReq+0x6c>
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d016      	beq.n	80078d4 <USBD_StdEPReq+0x98>
 80078a6:	e02c      	b.n	8007902 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00d      	beq.n	80078ca <USBD_StdEPReq+0x8e>
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b80      	cmp	r3, #128	; 0x80
 80078b2:	d00a      	beq.n	80078ca <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 f943 	bl	8008b44 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078be:	2180      	movs	r1, #128	; 0x80
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f001 f93f 	bl	8008b44 <USBD_LL_StallEP>
 80078c6:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078c8:	e020      	b.n	800790c <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fc68 	bl	80081a2 <USBD_CtlError>
        break;
 80078d2:	e01b      	b.n	800790c <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	885b      	ldrh	r3, [r3, #2]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10e      	bne.n	80078fa <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00b      	beq.n	80078fa <USBD_StdEPReq+0xbe>
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	2b80      	cmp	r3, #128	; 0x80
 80078e6:	d008      	beq.n	80078fa <USBD_StdEPReq+0xbe>
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	88db      	ldrh	r3, [r3, #6]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d104      	bne.n	80078fa <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 f925 	bl	8008b44 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fd1c 	bl	8008338 <USBD_CtlSendStatus>

        break;
 8007900:	e004      	b.n	800790c <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fc4c 	bl	80081a2 <USBD_CtlError>
        break;
 800790a:	bf00      	nop
      }
      break;
 800790c:	e0ea      	b.n	8007ae4 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007914:	2b02      	cmp	r3, #2
 8007916:	d002      	beq.n	800791e <USBD_StdEPReq+0xe2>
 8007918:	2b03      	cmp	r3, #3
 800791a:	d016      	beq.n	800794a <USBD_StdEPReq+0x10e>
 800791c:	e030      	b.n	8007980 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00d      	beq.n	8007940 <USBD_StdEPReq+0x104>
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	2b80      	cmp	r3, #128	; 0x80
 8007928:	d00a      	beq.n	8007940 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 f908 	bl	8008b44 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007934:	2180      	movs	r1, #128	; 0x80
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 f904 	bl	8008b44 <USBD_LL_StallEP>
 800793c:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800793e:	e025      	b.n	800798c <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fc2d 	bl	80081a2 <USBD_CtlError>
        break;
 8007948:	e020      	b.n	800798c <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	885b      	ldrh	r3, [r3, #2]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d11b      	bne.n	800798a <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007958:	2b00      	cmp	r3, #0
 800795a:	d004      	beq.n	8007966 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 f925 	bl	8008bb0 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fce6 	bl	8008338 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
 800797a:	4603      	mov	r3, r0
 800797c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800797e:	e004      	b.n	800798a <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fc0d 	bl	80081a2 <USBD_CtlError>
        break;
 8007988:	e000      	b.n	800798c <USBD_StdEPReq+0x150>
        break;
 800798a:	bf00      	nop
      }
      break;
 800798c:	e0aa      	b.n	8007ae4 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007994:	2b02      	cmp	r3, #2
 8007996:	d002      	beq.n	800799e <USBD_StdEPReq+0x162>
 8007998:	2b03      	cmp	r3, #3
 800799a:	d032      	beq.n	8007a02 <USBD_StdEPReq+0x1c6>
 800799c:	e097      	b.n	8007ace <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d007      	beq.n	80079b4 <USBD_StdEPReq+0x178>
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	2b80      	cmp	r3, #128	; 0x80
 80079a8:	d004      	beq.n	80079b4 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fbf8 	bl	80081a2 <USBD_CtlError>
          break;
 80079b2:	e091      	b.n	8007ad8 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	da0b      	bge.n	80079d4 <USBD_StdEPReq+0x198>
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079c2:	4613      	mov	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	3310      	adds	r3, #16
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	4413      	add	r3, r2
 80079d0:	3304      	adds	r3, #4
 80079d2:	e00b      	b.n	80079ec <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	4413      	add	r3, r2
 80079ea:	3304      	adds	r3, #4
 80079ec:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2202      	movs	r2, #2
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fc42 	bl	8008284 <USBD_CtlSendData>
        break;
 8007a00:	e06a      	b.n	8007ad8 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007a02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da11      	bge.n	8007a2e <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	f003 020f 	and.w	r2, r3, #15
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	3324      	adds	r3, #36	; 0x24
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d117      	bne.n	8007a54 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fbbb 	bl	80081a2 <USBD_CtlError>
            break;
 8007a2c:	e054      	b.n	8007ad8 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	f003 020f 	and.w	r2, r3, #15
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	4613      	mov	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	440b      	add	r3, r1
 8007a40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d104      	bne.n	8007a54 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fba8 	bl	80081a2 <USBD_CtlError>
            break;
 8007a52:	e041      	b.n	8007ad8 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	da0b      	bge.n	8007a74 <USBD_StdEPReq+0x238>
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	3310      	adds	r3, #16
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	4413      	add	r3, r2
 8007a70:	3304      	adds	r3, #4
 8007a72:	e00b      	b.n	8007a8c <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	4413      	add	r3, r2
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <USBD_StdEPReq+0x25e>
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b80      	cmp	r3, #128	; 0x80
 8007a98:	d103      	bne.n	8007aa2 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	e00e      	b.n	8007ac0 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007aa2:	7bbb      	ldrb	r3, [r7, #14]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 f8b8 	bl	8008c1c <USBD_LL_IsStallEP>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	e002      	b.n	8007ac0 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fbdc 	bl	8008284 <USBD_CtlSendData>
          break;
 8007acc:	e004      	b.n	8007ad8 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fb66 	bl	80081a2 <USBD_CtlError>
        break;
 8007ad6:	bf00      	nop
      }
      break;
 8007ad8:	e004      	b.n	8007ae4 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fb60 	bl	80081a2 <USBD_CtlError>
      break;
 8007ae2:	bf00      	nop
    }
    break;
 8007ae4:	e004      	b.n	8007af0 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fb5a 	bl	80081a2 <USBD_CtlError>
    break;
 8007aee:	bf00      	nop
  }

  return ret;
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	885b      	ldrh	r3, [r3, #2]
 8007b16:	0a1b      	lsrs	r3, r3, #8
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	2b0e      	cmp	r3, #14
 8007b1e:	f200 8152 	bhi.w	8007dc6 <USBD_GetDescriptor+0x2ca>
 8007b22:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <USBD_GetDescriptor+0x2c>)
 8007b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b28:	08007b99 	.word	0x08007b99
 8007b2c:	08007bb1 	.word	0x08007bb1
 8007b30:	08007bf1 	.word	0x08007bf1
 8007b34:	08007dc7 	.word	0x08007dc7
 8007b38:	08007dc7 	.word	0x08007dc7
 8007b3c:	08007d67 	.word	0x08007d67
 8007b40:	08007d93 	.word	0x08007d93
 8007b44:	08007dc7 	.word	0x08007dc7
 8007b48:	08007dc7 	.word	0x08007dc7
 8007b4c:	08007dc7 	.word	0x08007dc7
 8007b50:	08007dc7 	.word	0x08007dc7
 8007b54:	08007dc7 	.word	0x08007dc7
 8007b58:	08007dc7 	.word	0x08007dc7
 8007b5c:	08007dc7 	.word	0x08007dc7
 8007b60:	08007b65 	.word	0x08007b65
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00b      	beq.n	8007b88 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	7c12      	ldrb	r2, [r2, #16]
 8007b7c:	f107 0108 	add.w	r1, r7, #8
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007b86:	e126      	b.n	8007dd6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fb09 	bl	80081a2 <USBD_CtlError>
      err++;
 8007b90:	7afb      	ldrb	r3, [r7, #11]
 8007b92:	3301      	adds	r3, #1
 8007b94:	72fb      	strb	r3, [r7, #11]
    break;
 8007b96:	e11e      	b.n	8007dd6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	7c12      	ldrb	r2, [r2, #16]
 8007ba4:	f107 0108 	add.w	r1, r7, #8
 8007ba8:	4610      	mov	r0, r2
 8007baa:	4798      	blx	r3
 8007bac:	60f8      	str	r0, [r7, #12]
    break;
 8007bae:	e112      	b.n	8007dd6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	7c1b      	ldrb	r3, [r3, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10d      	bne.n	8007bd4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc0:	f107 0208 	add.w	r2, r7, #8
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	2202      	movs	r2, #2
 8007bd0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007bd2:	e100      	b.n	8007dd6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	f107 0208 	add.w	r2, r7, #8
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
 8007be4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3301      	adds	r3, #1
 8007bea:	2202      	movs	r2, #2
 8007bec:	701a      	strb	r2, [r3, #0]
    break;
 8007bee:	e0f2      	b.n	8007dd6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	885b      	ldrh	r3, [r3, #2]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b05      	cmp	r3, #5
 8007bf8:	f200 80ac 	bhi.w	8007d54 <USBD_GetDescriptor+0x258>
 8007bfc:	a201      	add	r2, pc, #4	; (adr r2, 8007c04 <USBD_GetDescriptor+0x108>)
 8007bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c02:	bf00      	nop
 8007c04:	08007c1d 	.word	0x08007c1d
 8007c08:	08007c51 	.word	0x08007c51
 8007c0c:	08007c85 	.word	0x08007c85
 8007c10:	08007cb9 	.word	0x08007cb9
 8007c14:	08007ced 	.word	0x08007ced
 8007c18:	08007d21 	.word	0x08007d21
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00b      	beq.n	8007c40 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	7c12      	ldrb	r2, [r2, #16]
 8007c34:	f107 0108 	add.w	r1, r7, #8
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c3e:	e091      	b.n	8007d64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 faad 	bl	80081a2 <USBD_CtlError>
        err++;
 8007c48:	7afb      	ldrb	r3, [r7, #11]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c4e:	e089      	b.n	8007d64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	7c12      	ldrb	r2, [r2, #16]
 8007c68:	f107 0108 	add.w	r1, r7, #8
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c72:	e077      	b.n	8007d64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fa93 	bl	80081a2 <USBD_CtlError>
        err++;
 8007c7c:	7afb      	ldrb	r3, [r7, #11]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	72fb      	strb	r3, [r7, #11]
      break;
 8007c82:	e06f      	b.n	8007d64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00b      	beq.n	8007ca8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	7c12      	ldrb	r2, [r2, #16]
 8007c9c:	f107 0108 	add.w	r1, r7, #8
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
 8007ca4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ca6:	e05d      	b.n	8007d64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa79 	bl	80081a2 <USBD_CtlError>
        err++;
 8007cb0:	7afb      	ldrb	r3, [r7, #11]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	72fb      	strb	r3, [r7, #11]
      break;
 8007cb6:	e055      	b.n	8007d64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00b      	beq.n	8007cdc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	7c12      	ldrb	r2, [r2, #16]
 8007cd0:	f107 0108 	add.w	r1, r7, #8
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
 8007cd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cda:	e043      	b.n	8007d64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa5f 	bl	80081a2 <USBD_CtlError>
        err++;
 8007ce4:	7afb      	ldrb	r3, [r7, #11]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	72fb      	strb	r3, [r7, #11]
      break;
 8007cea:	e03b      	b.n	8007d64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00b      	beq.n	8007d10 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	7c12      	ldrb	r2, [r2, #16]
 8007d04:	f107 0108 	add.w	r1, r7, #8
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4798      	blx	r3
 8007d0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d0e:	e029      	b.n	8007d64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fa45 	bl	80081a2 <USBD_CtlError>
        err++;
 8007d18:	7afb      	ldrb	r3, [r7, #11]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d1e:	e021      	b.n	8007d64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00b      	beq.n	8007d44 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	7c12      	ldrb	r2, [r2, #16]
 8007d38:	f107 0108 	add.w	r1, r7, #8
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4798      	blx	r3
 8007d40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d42:	e00f      	b.n	8007d64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fa2b 	bl	80081a2 <USBD_CtlError>
        err++;
 8007d4c:	7afb      	ldrb	r3, [r7, #11]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	72fb      	strb	r3, [r7, #11]
      break;
 8007d52:	e007      	b.n	8007d64 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa23 	bl	80081a2 <USBD_CtlError>
      err++;
 8007d5c:	7afb      	ldrb	r3, [r7, #11]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007d62:	bf00      	nop
    }
    break;
 8007d64:	e037      	b.n	8007dd6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	7c1b      	ldrb	r3, [r3, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d76:	f107 0208 	add.w	r2, r7, #8
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	4798      	blx	r3
 8007d7e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d80:	e029      	b.n	8007dd6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fa0c 	bl	80081a2 <USBD_CtlError>
      err++;
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	72fb      	strb	r3, [r7, #11]
    break;
 8007d90:	e021      	b.n	8007dd6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	7c1b      	ldrb	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10d      	bne.n	8007db6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	f107 0208 	add.w	r2, r7, #8
 8007da6:	4610      	mov	r0, r2
 8007da8:	4798      	blx	r3
 8007daa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3301      	adds	r3, #1
 8007db0:	2207      	movs	r2, #7
 8007db2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007db4:	e00f      	b.n	8007dd6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f9f2 	bl	80081a2 <USBD_CtlError>
      err++;
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	72fb      	strb	r3, [r7, #11]
    break;
 8007dc4:	e007      	b.n	8007dd6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f9ea 	bl	80081a2 <USBD_CtlError>
    err++;
 8007dce:	7afb      	ldrb	r3, [r7, #11]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	72fb      	strb	r3, [r7, #11]
    break;
 8007dd4:	bf00      	nop
  }

  if (err != 0U)
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d11e      	bne.n	8007e1a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	88db      	ldrh	r3, [r3, #6]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d016      	beq.n	8007e12 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007de4:	893b      	ldrh	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00e      	beq.n	8007e08 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	88da      	ldrh	r2, [r3, #6]
 8007dee:	893b      	ldrh	r3, [r7, #8]
 8007df0:	4293      	cmp	r3, r2
 8007df2:	bf28      	it	cs
 8007df4:	4613      	movcs	r3, r2
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dfa:	893b      	ldrh	r3, [r7, #8]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	68f9      	ldr	r1, [r7, #12]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fa3f 	bl	8008284 <USBD_CtlSendData>
 8007e06:	e009      	b.n	8007e1c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f9c9 	bl	80081a2 <USBD_CtlError>
 8007e10:	e004      	b.n	8007e1c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa90 	bl	8008338 <USBD_CtlSendStatus>
 8007e18:	e000      	b.n	8007e1c <USBD_GetDescriptor+0x320>
    return;
 8007e1a:	bf00      	nop
    }
  }
}
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop

08007e24 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	889b      	ldrh	r3, [r3, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d130      	bne.n	8007e98 <USBD_SetAddress+0x74>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	88db      	ldrh	r3, [r3, #6]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d12c      	bne.n	8007e98 <USBD_SetAddress+0x74>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	885b      	ldrh	r3, [r3, #2]
 8007e42:	2b7f      	cmp	r3, #127	; 0x7f
 8007e44:	d828      	bhi.n	8007e98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	885b      	ldrh	r3, [r3, #2]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d104      	bne.n	8007e66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f99f 	bl	80081a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e64:	e01d      	b.n	8007ea2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	7bfa      	ldrb	r2, [r7, #15]
 8007e6a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 ff00 	bl	8008c78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fa5d 	bl	8008338 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8c:	e009      	b.n	8007ea2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e96:	e004      	b.n	8007ea2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f981 	bl	80081a2 <USBD_CtlError>
  }
}
 8007ea0:	bf00      	nop
 8007ea2:	bf00      	nop
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	885b      	ldrh	r3, [r3, #2]
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	4b4b      	ldr	r3, [pc, #300]	; (8007ff0 <USBD_SetConfig+0x144>)
 8007ec2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ec4:	4b4a      	ldr	r3, [pc, #296]	; (8007ff0 <USBD_SetConfig+0x144>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d905      	bls.n	8007ed8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f967 	bl	80081a2 <USBD_CtlError>
    return USBD_FAIL;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e087      	b.n	8007fe8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d002      	beq.n	8007ee8 <USBD_SetConfig+0x3c>
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d025      	beq.n	8007f32 <USBD_SetConfig+0x86>
 8007ee6:	e071      	b.n	8007fcc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007ee8:	4b41      	ldr	r3, [pc, #260]	; (8007ff0 <USBD_SetConfig+0x144>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01c      	beq.n	8007f2a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007ef0:	4b3f      	ldr	r3, [pc, #252]	; (8007ff0 <USBD_SetConfig+0x144>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007efa:	4b3d      	ldr	r3, [pc, #244]	; (8007ff0 <USBD_SetConfig+0x144>)
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff f9af 	bl	8007264 <USBD_SetClassConfig>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d004      	beq.n	8007f1a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f945 	bl	80081a2 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f18:	e065      	b.n	8007fe6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fa0c 	bl	8008338 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2203      	movs	r2, #3
 8007f24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f28:	e05d      	b.n	8007fe6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fa04 	bl	8008338 <USBD_CtlSendStatus>
    break;
 8007f30:	e059      	b.n	8007fe6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007f32:	4b2f      	ldr	r3, [pc, #188]	; (8007ff0 <USBD_SetConfig+0x144>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d112      	bne.n	8007f60 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007f42:	4b2b      	ldr	r3, [pc, #172]	; (8007ff0 <USBD_SetConfig+0x144>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f4c:	4b28      	ldr	r3, [pc, #160]	; (8007ff0 <USBD_SetConfig+0x144>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff f9a2 	bl	800729c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f9ed 	bl	8008338 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f5e:	e042      	b.n	8007fe6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007f60:	4b23      	ldr	r3, [pc, #140]	; (8007ff0 <USBD_SetConfig+0x144>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d02a      	beq.n	8007fc4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff f990 	bl	800729c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007f7c:	4b1c      	ldr	r3, [pc, #112]	; (8007ff0 <USBD_SetConfig+0x144>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f86:	4b1a      	ldr	r3, [pc, #104]	; (8007ff0 <USBD_SetConfig+0x144>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff f969 	bl	8007264 <USBD_SetClassConfig>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00f      	beq.n	8007fbc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f8ff 	bl	80081a2 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff f975 	bl	800729c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007fba:	e014      	b.n	8007fe6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f9bb 	bl	8008338 <USBD_CtlSendStatus>
    break;
 8007fc2:	e010      	b.n	8007fe6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f9b7 	bl	8008338 <USBD_CtlSendStatus>
    break;
 8007fca:	e00c      	b.n	8007fe6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f8e7 	bl	80081a2 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fd4:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <USBD_SetConfig+0x144>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7ff f95e 	bl	800729c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fe4:	bf00      	nop
  }

  return ret;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	2000021c 	.word	0x2000021c

08007ff4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	88db      	ldrh	r3, [r3, #6]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d004      	beq.n	8008010 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f8ca 	bl	80081a2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800800e:	e022      	b.n	8008056 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008016:	2b02      	cmp	r3, #2
 8008018:	dc02      	bgt.n	8008020 <USBD_GetConfig+0x2c>
 800801a:	2b00      	cmp	r3, #0
 800801c:	dc03      	bgt.n	8008026 <USBD_GetConfig+0x32>
 800801e:	e015      	b.n	800804c <USBD_GetConfig+0x58>
 8008020:	2b03      	cmp	r3, #3
 8008022:	d00b      	beq.n	800803c <USBD_GetConfig+0x48>
 8008024:	e012      	b.n	800804c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3308      	adds	r3, #8
 8008030:	2201      	movs	r2, #1
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f925 	bl	8008284 <USBD_CtlSendData>
      break;
 800803a:	e00c      	b.n	8008056 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3304      	adds	r3, #4
 8008040:	2201      	movs	r2, #1
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f91d 	bl	8008284 <USBD_CtlSendData>
      break;
 800804a:	e004      	b.n	8008056 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f8a7 	bl	80081a2 <USBD_CtlError>
      break;
 8008054:	bf00      	nop
}
 8008056:	bf00      	nop
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806e:	3b01      	subs	r3, #1
 8008070:	2b02      	cmp	r3, #2
 8008072:	d81e      	bhi.n	80080b2 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	88db      	ldrh	r3, [r3, #6]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d004      	beq.n	8008086 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f88f 	bl	80081a2 <USBD_CtlError>
      break;
 8008084:	e01a      	b.n	80080bc <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008092:	2b00      	cmp	r3, #0
 8008094:	d005      	beq.n	80080a2 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f043 0202 	orr.w	r2, r3, #2
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	330c      	adds	r3, #12
 80080a6:	2202      	movs	r2, #2
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f8ea 	bl	8008284 <USBD_CtlSendData>
    break;
 80080b0:	e004      	b.n	80080bc <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f874 	bl	80081a2 <USBD_CtlError>
    break;
 80080ba:	bf00      	nop
  }
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	885b      	ldrh	r3, [r3, #2]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d106      	bne.n	80080e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f92a 	bl	8008338 <USBD_CtlSendStatus>
  }
}
 80080e4:	bf00      	nop
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fc:	3b01      	subs	r3, #1
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d80b      	bhi.n	800811a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	885b      	ldrh	r3, [r3, #2]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d10c      	bne.n	8008124 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f910 	bl	8008338 <USBD_CtlSendStatus>
      }
      break;
 8008118:	e004      	b.n	8008124 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f840 	bl	80081a2 <USBD_CtlError>
      break;
 8008122:	e000      	b.n	8008126 <USBD_ClrFeature+0x3a>
      break;
 8008124:	bf00      	nop
  }
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	781a      	ldrb	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3301      	adds	r3, #1
 8008148:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	781a      	ldrb	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3301      	adds	r3, #1
 8008156:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f7ff fa9b 	bl	8007694 <SWAPBYTE>
 800815e:	4603      	mov	r3, r0
 8008160:	461a      	mov	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3301      	adds	r3, #1
 8008170:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f7ff fa8e 	bl	8007694 <SWAPBYTE>
 8008178:	4603      	mov	r3, r0
 800817a:	461a      	mov	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	3301      	adds	r3, #1
 8008184:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3301      	adds	r3, #1
 800818a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f7ff fa81 	bl	8007694 <SWAPBYTE>
 8008192:	4603      	mov	r3, r0
 8008194:	461a      	mov	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	80da      	strh	r2, [r3, #6]
}
 800819a:	bf00      	nop
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b082      	sub	sp, #8
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081ac:	2180      	movs	r1, #128	; 0x80
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fcc8 	bl	8008b44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081b4:	2100      	movs	r1, #0
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fcc4 	bl	8008b44 <USBD_LL_StallEP>
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d036      	beq.n	8008248 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081de:	6938      	ldr	r0, [r7, #16]
 80081e0:	f000 f836 	bl	8008250 <USBD_GetLen>
 80081e4:	4603      	mov	r3, r0
 80081e6:	3301      	adds	r3, #1
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	4413      	add	r3, r2
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	7812      	ldrb	r2, [r2, #0]
 80081fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	3301      	adds	r3, #1
 8008202:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	4413      	add	r3, r2
 800820a:	2203      	movs	r2, #3
 800820c:	701a      	strb	r2, [r3, #0]
  idx++;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	3301      	adds	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008214:	e013      	b.n	800823e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	4413      	add	r3, r2
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	7812      	ldrb	r2, [r2, #0]
 8008220:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	3301      	adds	r3, #1
 8008226:	613b      	str	r3, [r7, #16]
    idx++;
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	3301      	adds	r3, #1
 800822c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	4413      	add	r3, r2
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]
    idx++;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	3301      	adds	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e7      	bne.n	8008216 <USBD_GetString+0x52>
 8008246:	e000      	b.n	800824a <USBD_GetString+0x86>
    return;
 8008248:	bf00      	nop
  }
}
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008260:	e005      	b.n	800826e <USBD_GetLen+0x1e>
  {
    len++;
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	3301      	adds	r3, #1
 8008266:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	3301      	adds	r3, #1
 800826c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1f5      	bne.n	8008262 <USBD_GetLen+0x12>
  }

  return len;
 8008276:	7bfb      	ldrb	r3, [r7, #15]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3714      	adds	r7, #20
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2202      	movs	r2, #2
 8008294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	2100      	movs	r1, #0
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 fd1a 	bl	8008ce4 <USBD_LL_Transmit>

  return USBD_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	2100      	movs	r1, #0
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 fd09 	bl	8008ce4 <USBD_LL_Transmit>

  return USBD_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2203      	movs	r2, #3
 80082ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	2100      	movs	r1, #0
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fd24 	bl	8008d54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	2100      	movs	r1, #0
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 fd13 	bl	8008d54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2204      	movs	r2, #4
 8008344:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008348:	2300      	movs	r3, #0
 800834a:	2200      	movs	r2, #0
 800834c:	2100      	movs	r1, #0
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fcc8 	bl	8008ce4 <USBD_LL_Transmit>

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2205      	movs	r2, #5
 800836a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800836e:	2300      	movs	r3, #0
 8008370:	2200      	movs	r2, #0
 8008372:	2100      	movs	r1, #0
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fced 	bl	8008d54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008388:	2200      	movs	r2, #0
 800838a:	4912      	ldr	r1, [pc, #72]	; (80083d4 <MX_USB_DEVICE_Init+0x50>)
 800838c:	4812      	ldr	r0, [pc, #72]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 800838e:	f7fe fefb 	bl	8007188 <USBD_Init>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008398:	f7f8 f85e 	bl	8000458 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800839c:	490f      	ldr	r1, [pc, #60]	; (80083dc <MX_USB_DEVICE_Init+0x58>)
 800839e:	480e      	ldr	r0, [pc, #56]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 80083a0:	f7fe ff22 	bl	80071e8 <USBD_RegisterClass>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083aa:	f7f8 f855 	bl	8000458 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083ae:	490c      	ldr	r1, [pc, #48]	; (80083e0 <MX_USB_DEVICE_Init+0x5c>)
 80083b0:	4809      	ldr	r0, [pc, #36]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 80083b2:	f7fe fe7d 	bl	80070b0 <USBD_CDC_RegisterInterface>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083bc:	f7f8 f84c 	bl	8000458 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083c0:	4805      	ldr	r0, [pc, #20]	; (80083d8 <MX_USB_DEVICE_Init+0x54>)
 80083c2:	f7fe ff38 	bl	8007236 <USBD_Start>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083cc:	f7f8 f844 	bl	8000458 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083d0:	bf00      	nop
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20000138 	.word	0x20000138
 80083d8:	200002d0 	.word	0x200002d0
 80083dc:	20000020 	.word	0x20000020
 80083e0:	20000124 	.word	0x20000124

080083e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083e8:	2200      	movs	r2, #0
 80083ea:	4905      	ldr	r1, [pc, #20]	; (8008400 <CDC_Init_FS+0x1c>)
 80083ec:	4805      	ldr	r0, [pc, #20]	; (8008404 <CDC_Init_FS+0x20>)
 80083ee:	f7fe fe74 	bl	80070da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083f2:	4905      	ldr	r1, [pc, #20]	; (8008408 <CDC_Init_FS+0x24>)
 80083f4:	4803      	ldr	r0, [pc, #12]	; (8008404 <CDC_Init_FS+0x20>)
 80083f6:	f7fe fe89 	bl	800710c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	20000988 	.word	0x20000988
 8008404:	200002d0 	.word	0x200002d0
 8008408:	200005a0 	.word	0x200005a0

0800840c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008410:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008412:	4618      	mov	r0, r3
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	4603      	mov	r3, r0
 8008424:	6039      	str	r1, [r7, #0]
 8008426:	71fb      	strb	r3, [r7, #7]
 8008428:	4613      	mov	r3, r2
 800842a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	2b23      	cmp	r3, #35	; 0x23
 8008430:	d84a      	bhi.n	80084c8 <CDC_Control_FS+0xac>
 8008432:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <CDC_Control_FS+0x1c>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	080084c9 	.word	0x080084c9
 800843c:	080084c9 	.word	0x080084c9
 8008440:	080084c9 	.word	0x080084c9
 8008444:	080084c9 	.word	0x080084c9
 8008448:	080084c9 	.word	0x080084c9
 800844c:	080084c9 	.word	0x080084c9
 8008450:	080084c9 	.word	0x080084c9
 8008454:	080084c9 	.word	0x080084c9
 8008458:	080084c9 	.word	0x080084c9
 800845c:	080084c9 	.word	0x080084c9
 8008460:	080084c9 	.word	0x080084c9
 8008464:	080084c9 	.word	0x080084c9
 8008468:	080084c9 	.word	0x080084c9
 800846c:	080084c9 	.word	0x080084c9
 8008470:	080084c9 	.word	0x080084c9
 8008474:	080084c9 	.word	0x080084c9
 8008478:	080084c9 	.word	0x080084c9
 800847c:	080084c9 	.word	0x080084c9
 8008480:	080084c9 	.word	0x080084c9
 8008484:	080084c9 	.word	0x080084c9
 8008488:	080084c9 	.word	0x080084c9
 800848c:	080084c9 	.word	0x080084c9
 8008490:	080084c9 	.word	0x080084c9
 8008494:	080084c9 	.word	0x080084c9
 8008498:	080084c9 	.word	0x080084c9
 800849c:	080084c9 	.word	0x080084c9
 80084a0:	080084c9 	.word	0x080084c9
 80084a4:	080084c9 	.word	0x080084c9
 80084a8:	080084c9 	.word	0x080084c9
 80084ac:	080084c9 	.word	0x080084c9
 80084b0:	080084c9 	.word	0x080084c9
 80084b4:	080084c9 	.word	0x080084c9
 80084b8:	080084c9 	.word	0x080084c9
 80084bc:	080084c9 	.word	0x080084c9
 80084c0:	080084c9 	.word	0x080084c9
 80084c4:	080084c9 	.word	0x080084c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084c8:	bf00      	nop
  }

  return (USBD_OK);
 80084ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	480f      	ldr	r0, [pc, #60]	; (8008524 <CDC_Receive_FS+0x4c>)
 80084e6:	f7fe fe11 	bl	800710c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084ea:	480e      	ldr	r0, [pc, #56]	; (8008524 <CDC_Receive_FS+0x4c>)
 80084ec:	f7fe fe22 	bl	8007134 <USBD_CDC_ReceivePacket>


  for(i=0;i<*Len;i++){
 80084f0:	2300      	movs	r3, #0
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	e00b      	b.n	800850e <CDC_Receive_FS+0x36>
	  rxBuffer[i] = Buf[i];
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	7819      	ldrb	r1, [r3, #0]
 80084fe:	4a0a      	ldr	r2, [pc, #40]	; (8008528 <CDC_Receive_FS+0x50>)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4413      	add	r3, r2
 8008504:	460a      	mov	r2, r1
 8008506:	701a      	strb	r2, [r3, #0]
  for(i=0;i<*Len;i++){
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	3301      	adds	r3, #1
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	429a      	cmp	r2, r3
 8008516:	d3ee      	bcc.n	80084f6 <CDC_Receive_FS+0x1e>


  //CDC_Transmit_FS((uint8_t *) rxBuffer,strlen(rxBuffer));


  return (USBD_OK);
 8008518:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	200002d0 	.word	0x200002d0
 8008528:	2000028c 	.word	0x2000028c

0800852c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	4613      	mov	r3, r2
 8008538:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800853e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008542:	4618      	mov	r0, r3
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	4603      	mov	r3, r0
 8008558:	6039      	str	r1, [r7, #0]
 800855a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2212      	movs	r2, #18
 8008560:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008562:	4b03      	ldr	r3, [pc, #12]	; (8008570 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	20000158 	.word	0x20000158

08008574 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	6039      	str	r1, [r7, #0]
 800857e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2204      	movs	r2, #4
 8008584:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008586:	4b03      	ldr	r3, [pc, #12]	; (8008594 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008588:	4618      	mov	r0, r3
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	20000178 	.word	0x20000178

08008598 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	6039      	str	r1, [r7, #0]
 80085a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d105      	bne.n	80085b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	4907      	ldr	r1, [pc, #28]	; (80085cc <USBD_FS_ProductStrDescriptor+0x34>)
 80085ae:	4808      	ldr	r0, [pc, #32]	; (80085d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80085b0:	f7ff fe08 	bl	80081c4 <USBD_GetString>
 80085b4:	e004      	b.n	80085c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	4904      	ldr	r1, [pc, #16]	; (80085cc <USBD_FS_ProductStrDescriptor+0x34>)
 80085ba:	4805      	ldr	r0, [pc, #20]	; (80085d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80085bc:	f7ff fe02 	bl	80081c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085c0:	4b02      	ldr	r3, [pc, #8]	; (80085cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000d70 	.word	0x20000d70
 80085d0:	080090a0 	.word	0x080090a0

080085d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	6039      	str	r1, [r7, #0]
 80085de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	4904      	ldr	r1, [pc, #16]	; (80085f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085e4:	4804      	ldr	r0, [pc, #16]	; (80085f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085e6:	f7ff fded 	bl	80081c4 <USBD_GetString>
  return USBD_StrDesc;
 80085ea:	4b02      	ldr	r3, [pc, #8]	; (80085f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20000d70 	.word	0x20000d70
 80085f8:	080090b8 	.word	0x080090b8

080085fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	6039      	str	r1, [r7, #0]
 8008606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	221a      	movs	r2, #26
 800860c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800860e:	f000 f855 	bl	80086bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008612:	4b02      	ldr	r3, [pc, #8]	; (800861c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	2000017c 	.word	0x2000017c

08008620 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	6039      	str	r1, [r7, #0]
 800862a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d105      	bne.n	800863e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	4907      	ldr	r1, [pc, #28]	; (8008654 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008636:	4808      	ldr	r0, [pc, #32]	; (8008658 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008638:	f7ff fdc4 	bl	80081c4 <USBD_GetString>
 800863c:	e004      	b.n	8008648 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	4904      	ldr	r1, [pc, #16]	; (8008654 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008642:	4805      	ldr	r0, [pc, #20]	; (8008658 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008644:	f7ff fdbe 	bl	80081c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008648:	4b02      	ldr	r3, [pc, #8]	; (8008654 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20000d70 	.word	0x20000d70
 8008658:	080090cc 	.word	0x080090cc

0800865c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d105      	bne.n	800867a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	4907      	ldr	r1, [pc, #28]	; (8008690 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008672:	4808      	ldr	r0, [pc, #32]	; (8008694 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008674:	f7ff fda6 	bl	80081c4 <USBD_GetString>
 8008678:	e004      	b.n	8008684 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	4904      	ldr	r1, [pc, #16]	; (8008690 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800867e:	4805      	ldr	r0, [pc, #20]	; (8008694 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008680:	f7ff fda0 	bl	80081c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008684:	4b02      	ldr	r3, [pc, #8]	; (8008690 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20000d70 	.word	0x20000d70
 8008694:	080090d8 	.word	0x080090d8

08008698 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	220c      	movs	r2, #12
 80086a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80086aa:	4b03      	ldr	r3, [pc, #12]	; (80086b8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	2000016c 	.word	0x2000016c

080086bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086c2:	4b0f      	ldr	r3, [pc, #60]	; (8008700 <Get_SerialNum+0x44>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086c8:	4b0e      	ldr	r3, [pc, #56]	; (8008704 <Get_SerialNum+0x48>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086ce:	4b0e      	ldr	r3, [pc, #56]	; (8008708 <Get_SerialNum+0x4c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4413      	add	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d009      	beq.n	80086f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086e2:	2208      	movs	r2, #8
 80086e4:	4909      	ldr	r1, [pc, #36]	; (800870c <Get_SerialNum+0x50>)
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f000 f814 	bl	8008714 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086ec:	2204      	movs	r2, #4
 80086ee:	4908      	ldr	r1, [pc, #32]	; (8008710 <Get_SerialNum+0x54>)
 80086f0:	68b8      	ldr	r0, [r7, #8]
 80086f2:	f000 f80f 	bl	8008714 <IntToUnicode>
  }
}
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	1fff7590 	.word	0x1fff7590
 8008704:	1fff7594 	.word	0x1fff7594
 8008708:	1fff7598 	.word	0x1fff7598
 800870c:	2000017e 	.word	0x2000017e
 8008710:	2000018e 	.word	0x2000018e

08008714 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	4613      	mov	r3, r2
 8008720:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008726:	2300      	movs	r3, #0
 8008728:	75fb      	strb	r3, [r7, #23]
 800872a:	e027      	b.n	800877c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	0f1b      	lsrs	r3, r3, #28
 8008730:	2b09      	cmp	r3, #9
 8008732:	d80b      	bhi.n	800874c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	0f1b      	lsrs	r3, r3, #28
 8008738:	b2da      	uxtb	r2, r3
 800873a:	7dfb      	ldrb	r3, [r7, #23]
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	4619      	mov	r1, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	440b      	add	r3, r1
 8008744:	3230      	adds	r2, #48	; 0x30
 8008746:	b2d2      	uxtb	r2, r2
 8008748:	701a      	strb	r2, [r3, #0]
 800874a:	e00a      	b.n	8008762 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	0f1b      	lsrs	r3, r3, #28
 8008750:	b2da      	uxtb	r2, r3
 8008752:	7dfb      	ldrb	r3, [r7, #23]
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	4619      	mov	r1, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	440b      	add	r3, r1
 800875c:	3237      	adds	r2, #55	; 0x37
 800875e:	b2d2      	uxtb	r2, r2
 8008760:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	011b      	lsls	r3, r3, #4
 8008766:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	005b      	lsls	r3, r3, #1
 800876c:	3301      	adds	r3, #1
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	4413      	add	r3, r2
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	3301      	adds	r3, #1
 800877a:	75fb      	strb	r3, [r7, #23]
 800877c:	7dfa      	ldrb	r2, [r7, #23]
 800877e:	79fb      	ldrb	r3, [r7, #7]
 8008780:	429a      	cmp	r2, r3
 8008782:	d3d3      	bcc.n	800872c <IntToUnicode+0x18>
  }
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
	...

08008794 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a0d      	ldr	r2, [pc, #52]	; (80087d8 <HAL_PCD_MspInit+0x44>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d113      	bne.n	80087ce <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80087a6:	4b0d      	ldr	r3, [pc, #52]	; (80087dc <HAL_PCD_MspInit+0x48>)
 80087a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087aa:	4a0c      	ldr	r2, [pc, #48]	; (80087dc <HAL_PCD_MspInit+0x48>)
 80087ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087b0:	6593      	str	r3, [r2, #88]	; 0x58
 80087b2:	4b0a      	ldr	r3, [pc, #40]	; (80087dc <HAL_PCD_MspInit+0x48>)
 80087b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80087be:	2200      	movs	r2, #0
 80087c0:	2100      	movs	r1, #0
 80087c2:	2043      	movs	r0, #67	; 0x43
 80087c4:	f7f8 fb73 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80087c8:	2043      	movs	r0, #67	; 0x43
 80087ca:	f7f8 fb8c 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80087ce:	bf00      	nop
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	40006800 	.word	0x40006800
 80087dc:	40021000 	.word	0x40021000

080087e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80087f4:	4619      	mov	r1, r3
 80087f6:	4610      	mov	r0, r2
 80087f8:	f7fe fd68 	bl	80072cc <USBD_LL_SetupStage>
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	6879      	ldr	r1, [r7, #4]
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	00db      	lsls	r3, r3, #3
 8008822:	440b      	add	r3, r1
 8008824:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	4619      	mov	r1, r3
 800882e:	f7fe fda2 	bl	8007376 <USBD_LL_DataOutStage>
}
 8008832:	bf00      	nop
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800884c:	78fa      	ldrb	r2, [r7, #3]
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	4613      	mov	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	440b      	add	r3, r1
 800885a:	333c      	adds	r3, #60	; 0x3c
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	4619      	mov	r1, r3
 8008862:	f7fe fdeb 	bl	800743c <USBD_LL_DataInStage>
}
 8008866:	bf00      	nop
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b082      	sub	sp, #8
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800887c:	4618      	mov	r0, r3
 800887e:	f7fe feef 	bl	8007660 <USBD_LL_SOF>
}
 8008882:	bf00      	nop
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008892:	2301      	movs	r3, #1
 8008894:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2b02      	cmp	r3, #2
 800889c:	d001      	beq.n	80088a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800889e:	f7f7 fddb 	bl	8000458 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088a8:	7bfa      	ldrb	r2, [r7, #15]
 80088aa:	4611      	mov	r1, r2
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fe fe9c 	bl	80075ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fe fe55 	bl	8007568 <USBD_LL_Reset>
}
 80088be:	bf00      	nop
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe fe97 	bl	800760a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d005      	beq.n	80088f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088e4:	4b04      	ldr	r3, [pc, #16]	; (80088f8 <HAL_PCD_SuspendCallback+0x30>)
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	4a03      	ldr	r2, [pc, #12]	; (80088f8 <HAL_PCD_SuspendCallback+0x30>)
 80088ea:	f043 0306 	orr.w	r3, r3, #6
 80088ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	e000ed00 	.word	0xe000ed00

080088fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d007      	beq.n	800891c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800890c:	4b08      	ldr	r3, [pc, #32]	; (8008930 <HAL_PCD_ResumeCallback+0x34>)
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	4a07      	ldr	r2, [pc, #28]	; (8008930 <HAL_PCD_ResumeCallback+0x34>)
 8008912:	f023 0306 	bic.w	r3, r3, #6
 8008916:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008918:	f000 fa9e 	bl	8008e58 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fe86 	bl	8007634 <USBD_LL_Resume>
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	e000ed00 	.word	0xe000ed00

08008934 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800893c:	f7fa f878 	bl	8002a30 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008940:	4a2b      	ldr	r2, [pc, #172]	; (80089f0 <USBD_LL_Init+0xbc>)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a29      	ldr	r2, [pc, #164]	; (80089f0 <USBD_LL_Init+0xbc>)
 800894c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008950:	4b27      	ldr	r3, [pc, #156]	; (80089f0 <USBD_LL_Init+0xbc>)
 8008952:	4a28      	ldr	r2, [pc, #160]	; (80089f4 <USBD_LL_Init+0xc0>)
 8008954:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008956:	4b26      	ldr	r3, [pc, #152]	; (80089f0 <USBD_LL_Init+0xbc>)
 8008958:	2208      	movs	r2, #8
 800895a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800895c:	4b24      	ldr	r3, [pc, #144]	; (80089f0 <USBD_LL_Init+0xbc>)
 800895e:	2202      	movs	r2, #2
 8008960:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008962:	4b23      	ldr	r3, [pc, #140]	; (80089f0 <USBD_LL_Init+0xbc>)
 8008964:	2202      	movs	r2, #2
 8008966:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008968:	4b21      	ldr	r3, [pc, #132]	; (80089f0 <USBD_LL_Init+0xbc>)
 800896a:	2200      	movs	r2, #0
 800896c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800896e:	4b20      	ldr	r3, [pc, #128]	; (80089f0 <USBD_LL_Init+0xbc>)
 8008970:	2200      	movs	r2, #0
 8008972:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008974:	4b1e      	ldr	r3, [pc, #120]	; (80089f0 <USBD_LL_Init+0xbc>)
 8008976:	2200      	movs	r2, #0
 8008978:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800897a:	4b1d      	ldr	r3, [pc, #116]	; (80089f0 <USBD_LL_Init+0xbc>)
 800897c:	2200      	movs	r2, #0
 800897e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008980:	481b      	ldr	r0, [pc, #108]	; (80089f0 <USBD_LL_Init+0xbc>)
 8008982:	f7f8 fc4d 	bl	8001220 <HAL_PCD_Init>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800898c:	f7f7 fd64 	bl	8000458 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008996:	2318      	movs	r3, #24
 8008998:	2200      	movs	r2, #0
 800899a:	2100      	movs	r1, #0
 800899c:	f7f9 ff76 	bl	800288c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089a6:	2358      	movs	r3, #88	; 0x58
 80089a8:	2200      	movs	r2, #0
 80089aa:	2180      	movs	r1, #128	; 0x80
 80089ac:	f7f9 ff6e 	bl	800288c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089b6:	23c0      	movs	r3, #192	; 0xc0
 80089b8:	2200      	movs	r2, #0
 80089ba:	2181      	movs	r1, #129	; 0x81
 80089bc:	f7f9 ff66 	bl	800288c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80089ca:	2200      	movs	r2, #0
 80089cc:	2101      	movs	r1, #1
 80089ce:	f7f9 ff5d 	bl	800288c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089dc:	2200      	movs	r2, #0
 80089de:	2182      	movs	r1, #130	; 0x82
 80089e0:	f7f9 ff54 	bl	800288c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20000f70 	.word	0x20000f70
 80089f4:	40006800 	.word	0x40006800

080089f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7f8 fd18 	bl	8001444 <HAL_PCD_Start>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d816      	bhi.n	8008a4c <USBD_LL_Start+0x54>
 8008a1e:	a201      	add	r2, pc, #4	; (adr r2, 8008a24 <USBD_LL_Start+0x2c>)
 8008a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a24:	08008a35 	.word	0x08008a35
 8008a28:	08008a3b 	.word	0x08008a3b
 8008a2c:	08008a41 	.word	0x08008a41
 8008a30:	08008a47 	.word	0x08008a47
    case HAL_OK :
      usb_status = USBD_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73fb      	strb	r3, [r7, #15]
    break;
 8008a38:	e00b      	b.n	8008a52 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a3e:	e008      	b.n	8008a52 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a40:	2301      	movs	r3, #1
 8008a42:	73fb      	strb	r3, [r7, #15]
    break;
 8008a44:	e005      	b.n	8008a52 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a46:	2303      	movs	r3, #3
 8008a48:	73fb      	strb	r3, [r7, #15]
    break;
 8008a4a:	e002      	b.n	8008a52 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a50:	bf00      	nop
  }
  return usb_status;
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	4608      	mov	r0, r1
 8008a66:	4611      	mov	r1, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	70fb      	strb	r3, [r7, #3]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70bb      	strb	r3, [r7, #2]
 8008a72:	4613      	mov	r3, r2
 8008a74:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a84:	78bb      	ldrb	r3, [r7, #2]
 8008a86:	883a      	ldrh	r2, [r7, #0]
 8008a88:	78f9      	ldrb	r1, [r7, #3]
 8008a8a:	f7f8 fe70 	bl	800176e <HAL_PCD_EP_Open>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	2b03      	cmp	r3, #3
 8008a96:	d817      	bhi.n	8008ac8 <USBD_LL_OpenEP+0x6c>
 8008a98:	a201      	add	r2, pc, #4	; (adr r2, 8008aa0 <USBD_LL_OpenEP+0x44>)
 8008a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9e:	bf00      	nop
 8008aa0:	08008ab1 	.word	0x08008ab1
 8008aa4:	08008ab7 	.word	0x08008ab7
 8008aa8:	08008abd 	.word	0x08008abd
 8008aac:	08008ac3 	.word	0x08008ac3
    case HAL_OK :
      usb_status = USBD_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab4:	e00b      	b.n	8008ace <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8008aba:	e008      	b.n	8008ace <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008abc:	2301      	movs	r3, #1
 8008abe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac0:	e005      	b.n	8008ace <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac6:	e002      	b.n	8008ace <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	73fb      	strb	r3, [r7, #15]
    break;
 8008acc:	bf00      	nop
  }
  return usb_status;
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008af2:	78fa      	ldrb	r2, [r7, #3]
 8008af4:	4611      	mov	r1, r2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7f8 fe9f 	bl	800183a <HAL_PCD_EP_Close>
 8008afc:	4603      	mov	r3, r0
 8008afe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d816      	bhi.n	8008b34 <USBD_LL_CloseEP+0x5c>
 8008b06:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <USBD_LL_CloseEP+0x34>)
 8008b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0c:	08008b1d 	.word	0x08008b1d
 8008b10:	08008b23 	.word	0x08008b23
 8008b14:	08008b29 	.word	0x08008b29
 8008b18:	08008b2f 	.word	0x08008b2f
    case HAL_OK :
      usb_status = USBD_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b20:	e00b      	b.n	8008b3a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b22:	2303      	movs	r3, #3
 8008b24:	73fb      	strb	r3, [r7, #15]
    break;
 8008b26:	e008      	b.n	8008b3a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2c:	e005      	b.n	8008b3a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	73fb      	strb	r3, [r7, #15]
    break;
 8008b32:	e002      	b.n	8008b3a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b34:	2303      	movs	r3, #3
 8008b36:	73fb      	strb	r3, [r7, #15]
    break;
 8008b38:	bf00      	nop
  }
  return usb_status;
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b5e:	78fa      	ldrb	r2, [r7, #3]
 8008b60:	4611      	mov	r1, r2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7f8 ff49 	bl	80019fa <HAL_PCD_EP_SetStall>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d816      	bhi.n	8008ba0 <USBD_LL_StallEP+0x5c>
 8008b72:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <USBD_LL_StallEP+0x34>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008b89 	.word	0x08008b89
 8008b7c:	08008b8f 	.word	0x08008b8f
 8008b80:	08008b95 	.word	0x08008b95
 8008b84:	08008b9b 	.word	0x08008b9b
    case HAL_OK :
      usb_status = USBD_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8c:	e00b      	b.n	8008ba6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	73fb      	strb	r3, [r7, #15]
    break;
 8008b92:	e008      	b.n	8008ba6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b94:	2301      	movs	r3, #1
 8008b96:	73fb      	strb	r3, [r7, #15]
    break;
 8008b98:	e005      	b.n	8008ba6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9e:	e002      	b.n	8008ba6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba4:	bf00      	nop
  }
  return usb_status;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bca:	78fa      	ldrb	r2, [r7, #3]
 8008bcc:	4611      	mov	r1, r2
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7f8 ff73 	bl	8001aba <HAL_PCD_EP_ClrStall>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d816      	bhi.n	8008c0c <USBD_LL_ClearStallEP+0x5c>
 8008bde:	a201      	add	r2, pc, #4	; (adr r2, 8008be4 <USBD_LL_ClearStallEP+0x34>)
 8008be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be4:	08008bf5 	.word	0x08008bf5
 8008be8:	08008bfb 	.word	0x08008bfb
 8008bec:	08008c01 	.word	0x08008c01
 8008bf0:	08008c07 	.word	0x08008c07
    case HAL_OK :
      usb_status = USBD_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf8:	e00b      	b.n	8008c12 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	73fb      	strb	r3, [r7, #15]
    break;
 8008bfe:	e008      	b.n	8008c12 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c00:	2301      	movs	r3, #1
 8008c02:	73fb      	strb	r3, [r7, #15]
    break;
 8008c04:	e005      	b.n	8008c12 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c06:	2303      	movs	r3, #3
 8008c08:	73fb      	strb	r3, [r7, #15]
    break;
 8008c0a:	e002      	b.n	8008c12 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c10:	bf00      	nop
  }
  return usb_status;
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	da0c      	bge.n	8008c52 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c38:	78fb      	ldrb	r3, [r7, #3]
 8008c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c3e:	68f9      	ldr	r1, [r7, #12]
 8008c40:	1c5a      	adds	r2, r3, #1
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	440b      	add	r3, r1
 8008c4c:	3302      	adds	r3, #2
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	e00b      	b.n	8008c6a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c52:	78fb      	ldrb	r3, [r7, #3]
 8008c54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c58:	68f9      	ldr	r1, [r7, #12]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	440b      	add	r3, r1
 8008c64:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008c68:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
	...

08008c78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	460b      	mov	r3, r1
 8008c82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c92:	78fa      	ldrb	r2, [r7, #3]
 8008c94:	4611      	mov	r1, r2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7f8 fd44 	bl	8001724 <HAL_PCD_SetAddress>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d816      	bhi.n	8008cd4 <USBD_LL_SetUSBAddress+0x5c>
 8008ca6:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <USBD_LL_SetUSBAddress+0x34>)
 8008ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cac:	08008cbd 	.word	0x08008cbd
 8008cb0:	08008cc3 	.word	0x08008cc3
 8008cb4:	08008cc9 	.word	0x08008cc9
 8008cb8:	08008ccf 	.word	0x08008ccf
    case HAL_OK :
      usb_status = USBD_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc0:	e00b      	b.n	8008cda <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc6:	e008      	b.n	8008cda <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	73fb      	strb	r3, [r7, #15]
    break;
 8008ccc:	e005      	b.n	8008cda <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd2:	e002      	b.n	8008cda <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd8:	bf00      	nop
  }
  return usb_status;
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	607a      	str	r2, [r7, #4]
 8008cee:	603b      	str	r3, [r7, #0]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d02:	7af9      	ldrb	r1, [r7, #11]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	f7f8 fe34 	bl	8001974 <HAL_PCD_EP_Transmit>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008d10:	7dbb      	ldrb	r3, [r7, #22]
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d816      	bhi.n	8008d44 <USBD_LL_Transmit+0x60>
 8008d16:	a201      	add	r2, pc, #4	; (adr r2, 8008d1c <USBD_LL_Transmit+0x38>)
 8008d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1c:	08008d2d 	.word	0x08008d2d
 8008d20:	08008d33 	.word	0x08008d33
 8008d24:	08008d39 	.word	0x08008d39
 8008d28:	08008d3f 	.word	0x08008d3f
    case HAL_OK :
      usb_status = USBD_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	75fb      	strb	r3, [r7, #23]
    break;
 8008d30:	e00b      	b.n	8008d4a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d32:	2303      	movs	r3, #3
 8008d34:	75fb      	strb	r3, [r7, #23]
    break;
 8008d36:	e008      	b.n	8008d4a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d3c:	e005      	b.n	8008d4a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	75fb      	strb	r3, [r7, #23]
    break;
 8008d42:	e002      	b.n	8008d4a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008d44:	2303      	movs	r3, #3
 8008d46:	75fb      	strb	r3, [r7, #23]
    break;
 8008d48:	bf00      	nop
  }
  return usb_status;
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	607a      	str	r2, [r7, #4]
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	460b      	mov	r3, r1
 8008d62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d72:	7af9      	ldrb	r1, [r7, #11]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	f7f8 fda7 	bl	80018ca <HAL_PCD_EP_Receive>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008d80:	7dbb      	ldrb	r3, [r7, #22]
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d816      	bhi.n	8008db4 <USBD_LL_PrepareReceive+0x60>
 8008d86:	a201      	add	r2, pc, #4	; (adr r2, 8008d8c <USBD_LL_PrepareReceive+0x38>)
 8008d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8c:	08008d9d 	.word	0x08008d9d
 8008d90:	08008da3 	.word	0x08008da3
 8008d94:	08008da9 	.word	0x08008da9
 8008d98:	08008daf 	.word	0x08008daf
    case HAL_OK :
      usb_status = USBD_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	75fb      	strb	r3, [r7, #23]
    break;
 8008da0:	e00b      	b.n	8008dba <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008da2:	2303      	movs	r3, #3
 8008da4:	75fb      	strb	r3, [r7, #23]
    break;
 8008da6:	e008      	b.n	8008dba <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008da8:	2301      	movs	r3, #1
 8008daa:	75fb      	strb	r3, [r7, #23]
    break;
 8008dac:	e005      	b.n	8008dba <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dae:	2303      	movs	r3, #3
 8008db0:	75fb      	strb	r3, [r7, #23]
    break;
 8008db2:	e002      	b.n	8008dba <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008db4:	2303      	movs	r3, #3
 8008db6:	75fb      	strb	r3, [r7, #23]
    break;
 8008db8:	bf00      	nop
  }
  return usb_status;
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dd6:	78fa      	ldrb	r2, [r7, #3]
 8008dd8:	4611      	mov	r1, r2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7f8 fdb2 	bl	8001944 <HAL_PCD_EP_GetRxCount>
 8008de0:	4603      	mov	r3, r0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008df8:	78fb      	ldrb	r3, [r7, #3]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <HAL_PCDEx_LPM_Callback+0x18>
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d013      	beq.n	8008e2a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008e02:	e023      	b.n	8008e4c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d007      	beq.n	8008e1c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008e0c:	f000 f824 	bl	8008e58 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e10:	4b10      	ldr	r3, [pc, #64]	; (8008e54 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	4a0f      	ldr	r2, [pc, #60]	; (8008e54 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e16:	f023 0306 	bic.w	r3, r3, #6
 8008e1a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fe fc06 	bl	8007634 <USBD_LL_Resume>
    break;
 8008e28:	e010      	b.n	8008e4c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fe fbea 	bl	800760a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d005      	beq.n	8008e4a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e3e:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	4a04      	ldr	r2, [pc, #16]	; (8008e54 <HAL_PCDEx_LPM_Callback+0x68>)
 8008e44:	f043 0306 	orr.w	r3, r3, #6
 8008e48:	6113      	str	r3, [r2, #16]
    break;
 8008e4a:	bf00      	nop
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	e000ed00 	.word	0xe000ed00

08008e58 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008e5c:	f7f7 f9f0 	bl	8000240 <SystemClock_Config>
}
 8008e60:	bf00      	nop
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <__errno>:
 8008e64:	4b01      	ldr	r3, [pc, #4]	; (8008e6c <__errno+0x8>)
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	20000198 	.word	0x20000198

08008e70 <__libc_init_array>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	4d0d      	ldr	r5, [pc, #52]	; (8008ea8 <__libc_init_array+0x38>)
 8008e74:	4c0d      	ldr	r4, [pc, #52]	; (8008eac <__libc_init_array+0x3c>)
 8008e76:	1b64      	subs	r4, r4, r5
 8008e78:	10a4      	asrs	r4, r4, #2
 8008e7a:	2600      	movs	r6, #0
 8008e7c:	42a6      	cmp	r6, r4
 8008e7e:	d109      	bne.n	8008e94 <__libc_init_array+0x24>
 8008e80:	4d0b      	ldr	r5, [pc, #44]	; (8008eb0 <__libc_init_array+0x40>)
 8008e82:	4c0c      	ldr	r4, [pc, #48]	; (8008eb4 <__libc_init_array+0x44>)
 8008e84:	f000 f8f8 	bl	8009078 <_init>
 8008e88:	1b64      	subs	r4, r4, r5
 8008e8a:	10a4      	asrs	r4, r4, #2
 8008e8c:	2600      	movs	r6, #0
 8008e8e:	42a6      	cmp	r6, r4
 8008e90:	d105      	bne.n	8008e9e <__libc_init_array+0x2e>
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e98:	4798      	blx	r3
 8008e9a:	3601      	adds	r6, #1
 8008e9c:	e7ee      	b.n	8008e7c <__libc_init_array+0xc>
 8008e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea2:	4798      	blx	r3
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	e7f2      	b.n	8008e8e <__libc_init_array+0x1e>
 8008ea8:	08009128 	.word	0x08009128
 8008eac:	08009128 	.word	0x08009128
 8008eb0:	08009128 	.word	0x08009128
 8008eb4:	0800912c 	.word	0x0800912c

08008eb8 <malloc>:
 8008eb8:	4b02      	ldr	r3, [pc, #8]	; (8008ec4 <malloc+0xc>)
 8008eba:	4601      	mov	r1, r0
 8008ebc:	6818      	ldr	r0, [r3, #0]
 8008ebe:	f000 b863 	b.w	8008f88 <_malloc_r>
 8008ec2:	bf00      	nop
 8008ec4:	20000198 	.word	0x20000198

08008ec8 <free>:
 8008ec8:	4b02      	ldr	r3, [pc, #8]	; (8008ed4 <free+0xc>)
 8008eca:	4601      	mov	r1, r0
 8008ecc:	6818      	ldr	r0, [r3, #0]
 8008ece:	f000 b80b 	b.w	8008ee8 <_free_r>
 8008ed2:	bf00      	nop
 8008ed4:	20000198 	.word	0x20000198

08008ed8 <memset>:
 8008ed8:	4402      	add	r2, r0
 8008eda:	4603      	mov	r3, r0
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d100      	bne.n	8008ee2 <memset+0xa>
 8008ee0:	4770      	bx	lr
 8008ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee6:	e7f9      	b.n	8008edc <memset+0x4>

08008ee8 <_free_r>:
 8008ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eea:	2900      	cmp	r1, #0
 8008eec:	d048      	beq.n	8008f80 <_free_r+0x98>
 8008eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef2:	9001      	str	r0, [sp, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8008efa:	bfb8      	it	lt
 8008efc:	18e4      	addlt	r4, r4, r3
 8008efe:	f000 f8ad 	bl	800905c <__malloc_lock>
 8008f02:	4a20      	ldr	r2, [pc, #128]	; (8008f84 <_free_r+0x9c>)
 8008f04:	9801      	ldr	r0, [sp, #4]
 8008f06:	6813      	ldr	r3, [r2, #0]
 8008f08:	4615      	mov	r5, r2
 8008f0a:	b933      	cbnz	r3, 8008f1a <_free_r+0x32>
 8008f0c:	6063      	str	r3, [r4, #4]
 8008f0e:	6014      	str	r4, [r2, #0]
 8008f10:	b003      	add	sp, #12
 8008f12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f16:	f000 b8a7 	b.w	8009068 <__malloc_unlock>
 8008f1a:	42a3      	cmp	r3, r4
 8008f1c:	d90b      	bls.n	8008f36 <_free_r+0x4e>
 8008f1e:	6821      	ldr	r1, [r4, #0]
 8008f20:	1862      	adds	r2, r4, r1
 8008f22:	4293      	cmp	r3, r2
 8008f24:	bf04      	itt	eq
 8008f26:	681a      	ldreq	r2, [r3, #0]
 8008f28:	685b      	ldreq	r3, [r3, #4]
 8008f2a:	6063      	str	r3, [r4, #4]
 8008f2c:	bf04      	itt	eq
 8008f2e:	1852      	addeq	r2, r2, r1
 8008f30:	6022      	streq	r2, [r4, #0]
 8008f32:	602c      	str	r4, [r5, #0]
 8008f34:	e7ec      	b.n	8008f10 <_free_r+0x28>
 8008f36:	461a      	mov	r2, r3
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	b10b      	cbz	r3, 8008f40 <_free_r+0x58>
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	d9fa      	bls.n	8008f36 <_free_r+0x4e>
 8008f40:	6811      	ldr	r1, [r2, #0]
 8008f42:	1855      	adds	r5, r2, r1
 8008f44:	42a5      	cmp	r5, r4
 8008f46:	d10b      	bne.n	8008f60 <_free_r+0x78>
 8008f48:	6824      	ldr	r4, [r4, #0]
 8008f4a:	4421      	add	r1, r4
 8008f4c:	1854      	adds	r4, r2, r1
 8008f4e:	42a3      	cmp	r3, r4
 8008f50:	6011      	str	r1, [r2, #0]
 8008f52:	d1dd      	bne.n	8008f10 <_free_r+0x28>
 8008f54:	681c      	ldr	r4, [r3, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	6053      	str	r3, [r2, #4]
 8008f5a:	4421      	add	r1, r4
 8008f5c:	6011      	str	r1, [r2, #0]
 8008f5e:	e7d7      	b.n	8008f10 <_free_r+0x28>
 8008f60:	d902      	bls.n	8008f68 <_free_r+0x80>
 8008f62:	230c      	movs	r3, #12
 8008f64:	6003      	str	r3, [r0, #0]
 8008f66:	e7d3      	b.n	8008f10 <_free_r+0x28>
 8008f68:	6825      	ldr	r5, [r4, #0]
 8008f6a:	1961      	adds	r1, r4, r5
 8008f6c:	428b      	cmp	r3, r1
 8008f6e:	bf04      	itt	eq
 8008f70:	6819      	ldreq	r1, [r3, #0]
 8008f72:	685b      	ldreq	r3, [r3, #4]
 8008f74:	6063      	str	r3, [r4, #4]
 8008f76:	bf04      	itt	eq
 8008f78:	1949      	addeq	r1, r1, r5
 8008f7a:	6021      	streq	r1, [r4, #0]
 8008f7c:	6054      	str	r4, [r2, #4]
 8008f7e:	e7c7      	b.n	8008f10 <_free_r+0x28>
 8008f80:	b003      	add	sp, #12
 8008f82:	bd30      	pop	{r4, r5, pc}
 8008f84:	20000220 	.word	0x20000220

08008f88 <_malloc_r>:
 8008f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8a:	1ccd      	adds	r5, r1, #3
 8008f8c:	f025 0503 	bic.w	r5, r5, #3
 8008f90:	3508      	adds	r5, #8
 8008f92:	2d0c      	cmp	r5, #12
 8008f94:	bf38      	it	cc
 8008f96:	250c      	movcc	r5, #12
 8008f98:	2d00      	cmp	r5, #0
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	db01      	blt.n	8008fa2 <_malloc_r+0x1a>
 8008f9e:	42a9      	cmp	r1, r5
 8008fa0:	d903      	bls.n	8008faa <_malloc_r+0x22>
 8008fa2:	230c      	movs	r3, #12
 8008fa4:	6033      	str	r3, [r6, #0]
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008faa:	f000 f857 	bl	800905c <__malloc_lock>
 8008fae:	4921      	ldr	r1, [pc, #132]	; (8009034 <_malloc_r+0xac>)
 8008fb0:	680a      	ldr	r2, [r1, #0]
 8008fb2:	4614      	mov	r4, r2
 8008fb4:	b99c      	cbnz	r4, 8008fde <_malloc_r+0x56>
 8008fb6:	4f20      	ldr	r7, [pc, #128]	; (8009038 <_malloc_r+0xb0>)
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	b923      	cbnz	r3, 8008fc6 <_malloc_r+0x3e>
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f000 f83c 	bl	800903c <_sbrk_r>
 8008fc4:	6038      	str	r0, [r7, #0]
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f000 f837 	bl	800903c <_sbrk_r>
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	d123      	bne.n	800901a <_malloc_r+0x92>
 8008fd2:	230c      	movs	r3, #12
 8008fd4:	6033      	str	r3, [r6, #0]
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f000 f846 	bl	8009068 <__malloc_unlock>
 8008fdc:	e7e3      	b.n	8008fa6 <_malloc_r+0x1e>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	1b5b      	subs	r3, r3, r5
 8008fe2:	d417      	bmi.n	8009014 <_malloc_r+0x8c>
 8008fe4:	2b0b      	cmp	r3, #11
 8008fe6:	d903      	bls.n	8008ff0 <_malloc_r+0x68>
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	441c      	add	r4, r3
 8008fec:	6025      	str	r5, [r4, #0]
 8008fee:	e004      	b.n	8008ffa <_malloc_r+0x72>
 8008ff0:	6863      	ldr	r3, [r4, #4]
 8008ff2:	42a2      	cmp	r2, r4
 8008ff4:	bf0c      	ite	eq
 8008ff6:	600b      	streq	r3, [r1, #0]
 8008ff8:	6053      	strne	r3, [r2, #4]
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f000 f834 	bl	8009068 <__malloc_unlock>
 8009000:	f104 000b 	add.w	r0, r4, #11
 8009004:	1d23      	adds	r3, r4, #4
 8009006:	f020 0007 	bic.w	r0, r0, #7
 800900a:	1ac2      	subs	r2, r0, r3
 800900c:	d0cc      	beq.n	8008fa8 <_malloc_r+0x20>
 800900e:	1a1b      	subs	r3, r3, r0
 8009010:	50a3      	str	r3, [r4, r2]
 8009012:	e7c9      	b.n	8008fa8 <_malloc_r+0x20>
 8009014:	4622      	mov	r2, r4
 8009016:	6864      	ldr	r4, [r4, #4]
 8009018:	e7cc      	b.n	8008fb4 <_malloc_r+0x2c>
 800901a:	1cc4      	adds	r4, r0, #3
 800901c:	f024 0403 	bic.w	r4, r4, #3
 8009020:	42a0      	cmp	r0, r4
 8009022:	d0e3      	beq.n	8008fec <_malloc_r+0x64>
 8009024:	1a21      	subs	r1, r4, r0
 8009026:	4630      	mov	r0, r6
 8009028:	f000 f808 	bl	800903c <_sbrk_r>
 800902c:	3001      	adds	r0, #1
 800902e:	d1dd      	bne.n	8008fec <_malloc_r+0x64>
 8009030:	e7cf      	b.n	8008fd2 <_malloc_r+0x4a>
 8009032:	bf00      	nop
 8009034:	20000220 	.word	0x20000220
 8009038:	20000224 	.word	0x20000224

0800903c <_sbrk_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4d06      	ldr	r5, [pc, #24]	; (8009058 <_sbrk_r+0x1c>)
 8009040:	2300      	movs	r3, #0
 8009042:	4604      	mov	r4, r0
 8009044:	4608      	mov	r0, r1
 8009046:	602b      	str	r3, [r5, #0]
 8009048:	f7f7 fd28 	bl	8000a9c <_sbrk>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d102      	bne.n	8009056 <_sbrk_r+0x1a>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	b103      	cbz	r3, 8009056 <_sbrk_r+0x1a>
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	20001264 	.word	0x20001264

0800905c <__malloc_lock>:
 800905c:	4801      	ldr	r0, [pc, #4]	; (8009064 <__malloc_lock+0x8>)
 800905e:	f000 b809 	b.w	8009074 <__retarget_lock_acquire_recursive>
 8009062:	bf00      	nop
 8009064:	2000126c 	.word	0x2000126c

08009068 <__malloc_unlock>:
 8009068:	4801      	ldr	r0, [pc, #4]	; (8009070 <__malloc_unlock+0x8>)
 800906a:	f000 b804 	b.w	8009076 <__retarget_lock_release_recursive>
 800906e:	bf00      	nop
 8009070:	2000126c 	.word	0x2000126c

08009074 <__retarget_lock_acquire_recursive>:
 8009074:	4770      	bx	lr

08009076 <__retarget_lock_release_recursive>:
 8009076:	4770      	bx	lr

08009078 <_init>:
 8009078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907a:	bf00      	nop
 800907c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907e:	bc08      	pop	{r3}
 8009080:	469e      	mov	lr, r3
 8009082:	4770      	bx	lr

08009084 <_fini>:
 8009084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009086:	bf00      	nop
 8009088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800908a:	bc08      	pop	{r3}
 800908c:	469e      	mov	lr, r3
 800908e:	4770      	bx	lr
