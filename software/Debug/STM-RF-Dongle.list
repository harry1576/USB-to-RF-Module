
STM-RF-Dongle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000857c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800870c  0800870c  0001870c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087d0  080087d0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  080087d0  080087d0  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087d0  080087d0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087d0  080087d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087d4  080087d4  000187d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080087d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b8  200001f4  080089cc  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200012ac  080089cc  000212ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfa1  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003649  00000000  00000000  0003c1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0003f810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  000406e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230f4  00000000  00000000  00041448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127b4  00000000  00000000  0006453c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3dc3  00000000  00000000  00076cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013aab3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003efc  00000000  00000000  0013ab08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086f4 	.word	0x080086f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	080086f4 	.word	0x080086f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fa7e 	bl	8000786 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f839 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f8f7 	bl	8000480 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000292:	f000 f8b7 	bl	8000404 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 8000296:	f007 f81f 	bl	80072d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 800029a:	2201      	movs	r2, #1
 800029c:	2101      	movs	r1, #1
 800029e:	4815      	ldr	r0, [pc, #84]	; (80002f4 <main+0x74>)
 80002a0:	f000 fd86 	bl	8000db0 <HAL_GPIO_WritePin>


  uint8_t count = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	count += 1;
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	3301      	adds	r3, #1
 80002ac:	71fb      	strb	r3, [r7, #7]
	sprintf(txBuffer,"%u\r\n",count);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	461a      	mov	r2, r3
 80002b2:	4911      	ldr	r1, [pc, #68]	; (80002f8 <main+0x78>)
 80002b4:	4811      	ldr	r0, [pc, #68]	; (80002fc <main+0x7c>)
 80002b6:	f007 fea9 	bl	800800c <siprintf>
	if(CDC_Transmit_FS((uint8_t *) txBuffer,strlen(txBuffer)) == 1)
 80002ba:	4810      	ldr	r0, [pc, #64]	; (80002fc <main+0x7c>)
 80002bc:	f7ff ff88 	bl	80001d0 <strlen>
 80002c0:	4603      	mov	r3, r0
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	4619      	mov	r1, r3
 80002c6:	480d      	ldr	r0, [pc, #52]	; (80002fc <main+0x7c>)
 80002c8:	f007 f8e2 	bl	8007490 <CDC_Transmit_FS>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d105      	bne.n	80002de <main+0x5e>
	{
   		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 80002d2:	2201      	movs	r2, #1
 80002d4:	2101      	movs	r1, #1
 80002d6:	4807      	ldr	r0, [pc, #28]	; (80002f4 <main+0x74>)
 80002d8:	f000 fd6a 	bl	8000db0 <HAL_GPIO_WritePin>
 80002dc:	e004      	b.n	80002e8 <main+0x68>
   	}
   	else
   	{
   		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
 80002de:	2200      	movs	r2, #0
 80002e0:	2101      	movs	r1, #1
 80002e2:	4804      	ldr	r0, [pc, #16]	; (80002f4 <main+0x74>)
 80002e4:	f000 fd64 	bl	8000db0 <HAL_GPIO_WritePin>
   	}
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);

    //HAL_Delay(20);
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
    HAL_Delay(500);
 80002e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ec:	f000 fac0 	bl	8000870 <HAL_Delay>
	count += 1;
 80002f0:	e7da      	b.n	80002a8 <main+0x28>
 80002f2:	bf00      	nop
 80002f4:	48000400 	.word	0x48000400
 80002f8:	0800870c 	.word	0x0800870c
 80002fc:	200002c4 	.word	0x200002c4

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b0ac      	sub	sp, #176	; 0xb0
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800030a:	2244      	movs	r2, #68	; 0x44
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f007 fdba 	bl	8007e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2254      	movs	r2, #84	; 0x54
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f007 fdac 	bl	8007e88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000330:	2310      	movs	r3, #16
 8000332:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000334:	2301      	movs	r3, #1
 8000336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000340:	2360      	movs	r3, #96	; 0x60
 8000342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000346:	2302      	movs	r3, #2
 8000348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800034c:	2301      	movs	r3, #1
 800034e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000352:	2301      	movs	r3, #1
 8000354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000358:	2328      	movs	r3, #40	; 0x28
 800035a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800035e:	2307      	movs	r3, #7
 8000360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000364:	2302      	movs	r3, #2
 8000366:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800036a:	2302      	movs	r3, #2
 800036c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000374:	4618      	mov	r0, r3
 8000376:	f002 f94b 	bl	8002610 <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000380:	f000 f8ca 	bl	8000518 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	2303      	movs	r3, #3
 800038a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000398:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800039c:	2104      	movs	r1, #4
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 fd56 	bl	8002e50 <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003aa:	f000 f8b5 	bl	8000518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80003b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80003b8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80003ba:	2301      	movs	r3, #1
 80003bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80003be:	2301      	movs	r3, #1
 80003c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80003c2:	2318      	movs	r3, #24
 80003c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80003c6:	2307      	movs	r3, #7
 80003c8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80003d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003d6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4618      	mov	r0, r3
 80003dc:	f002 ff06 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0xea>
  {
    Error_Handler();
 80003e6:	f000 f897 	bl	8000518 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ee:	f002 f8a9 	bl	8002544 <HAL_PWREx_ControlVoltageScaling>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80003f8:	f000 f88e 	bl	8000518 <Error_Handler>
  }
}
 80003fc:	bf00      	nop
 80003fe:	37b0      	adds	r7, #176	; 0xb0
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <MX_SPI3_Init+0x74>)
 800040a:	4a1c      	ldr	r2, [pc, #112]	; (800047c <MX_SPI3_Init+0x78>)
 800040c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800040e:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <MX_SPI3_Init+0x74>)
 8000410:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000414:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000416:	4b18      	ldr	r3, [pc, #96]	; (8000478 <MX_SPI3_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_5BIT;
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <MX_SPI3_Init+0x74>)
 800041e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000422:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_SPI3_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <MX_SPI3_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_SPI3_Init+0x74>)
 8000432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000436:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_SPI3_Init+0x74>)
 800043a:	2228      	movs	r2, #40	; 0x28
 800043c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_SPI3_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_SPI3_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_SPI3_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_SPI3_Init+0x74>)
 8000452:	2207      	movs	r2, #7
 8000454:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_SPI3_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_SPI3_Init+0x74>)
 800045e:	2208      	movs	r2, #8
 8000460:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_SPI3_Init+0x74>)
 8000464:	f003 f9a8 	bl	80037b8 <HAL_SPI_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800046e:	f000 f853 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000220 	.word	0x20000220
 800047c:	40003c00 	.word	0x40003c00

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	f107 030c 	add.w	r3, r7, #12
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000496:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <MX_GPIO_Init+0x90>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049a:	4a1d      	ldr	r2, [pc, #116]	; (8000510 <MX_GPIO_Init+0x90>)
 800049c:	f043 0302 	orr.w	r3, r3, #2
 80004a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004a2:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_GPIO_Init+0x90>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a6:	f003 0302 	and.w	r3, r3, #2
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b18      	ldr	r3, [pc, #96]	; (8000510 <MX_GPIO_Init+0x90>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	4a17      	ldr	r2, [pc, #92]	; (8000510 <MX_GPIO_Init+0x90>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <MX_GPIO_Init+0x90>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	21c3      	movs	r1, #195	; 0xc3
 80004ca:	4812      	ldr	r0, [pc, #72]	; (8000514 <MX_GPIO_Init+0x94>)
 80004cc:	f000 fc70 	bl	8000db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin NRF_CS_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin;
 80004d0:	23c3      	movs	r3, #195	; 0xc3
 80004d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	4619      	mov	r1, r3
 80004e6:	480b      	ldr	r0, [pc, #44]	; (8000514 <MX_GPIO_Init+0x94>)
 80004e8:	f000 faf8 	bl	8000adc <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80004ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	4619      	mov	r1, r3
 8000500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000504:	f000 faea 	bl	8000adc <HAL_GPIO_Init>

}
 8000508:	bf00      	nop
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000
 8000514:	48000400 	.word	0x48000400

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	e7fe      	b.n	8000520 <Error_Handler+0x8>
	...

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_MspInit+0x44>)
 800052c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <HAL_MspInit+0x44>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6613      	str	r3, [r2, #96]	; 0x60
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <HAL_MspInit+0x44>)
 8000538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <HAL_MspInit+0x44>)
 8000544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000546:	4a08      	ldr	r2, [pc, #32]	; (8000568 <HAL_MspInit+0x44>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054c:	6593      	str	r3, [r2, #88]	; 0x58
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_MspInit+0x44>)
 8000550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <HAL_SPI_MspInit+0x7c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d127      	bne.n	80005de <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <HAL_SPI_MspInit+0x80>)
 8000590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000592:	4a16      	ldr	r2, [pc, #88]	; (80005ec <HAL_SPI_MspInit+0x80>)
 8000594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000598:	6593      	str	r3, [r2, #88]	; 0x58
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <HAL_SPI_MspInit+0x80>)
 800059c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800059e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_SPI_MspInit+0x80>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	4a10      	ldr	r2, [pc, #64]	; (80005ec <HAL_SPI_MspInit+0x80>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_SPI_MspInit+0x80>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80005be:	2338      	movs	r3, #56	; 0x38
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ca:	2303      	movs	r3, #3
 80005cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80005ce:	2306      	movs	r3, #6
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <HAL_SPI_MspInit+0x84>)
 80005da:	f000 fa7f 	bl	8000adc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40003c00 	.word	0x40003c00
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000400 	.word	0x48000400

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <NMI_Handler+0x4>

080005fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <HardFault_Handler+0x4>

08000600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <MemManage_Handler+0x4>

08000606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <UsageFault_Handler+0x4>

08000612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000640:	f000 f8f6 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <USB_IRQHandler+0x10>)
 800064e:	f000 fcfb 	bl	8001048 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000fa8 	.word	0x20000fa8

0800065c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <_sbrk+0x5c>)
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <_sbrk+0x60>)
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <_sbrk+0x64>)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <_sbrk+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	429a      	cmp	r2, r3
 800068a:	d207      	bcs.n	800069c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800068c:	f007 fbc2 	bl	8007e14 <__errno>
 8000690:	4603      	mov	r3, r0
 8000692:	220c      	movs	r2, #12
 8000694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069a:	e009      	b.n	80006b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <_sbrk+0x64>)
 80006ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ae:	68fb      	ldr	r3, [r7, #12]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20010000 	.word	0x20010000
 80006bc:	00000400 	.word	0x00000400
 80006c0:	20000210 	.word	0x20000210
 80006c4:	200012b0 	.word	0x200012b0

080006c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <SystemInit+0x64>)
 80006ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006d2:	4a16      	ldr	r2, [pc, #88]	; (800072c <SystemInit+0x64>)
 80006d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <SystemInit+0x68>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a13      	ldr	r2, [pc, #76]	; (8000730 <SystemInit+0x68>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <SystemInit+0x68>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <SystemInit+0x68>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <SystemInit+0x68>)
 80006f4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80006f8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80006fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <SystemInit+0x68>)
 8000700:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000704:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <SystemInit+0x68>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a09      	ldr	r2, [pc, #36]	; (8000730 <SystemInit+0x68>)
 800070c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000710:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <SystemInit+0x68>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <SystemInit+0x64>)
 800071a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800071e:	609a      	str	r2, [r3, #8]
#endif
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00
 8000730:	40021000 	.word	0x40021000

08000734 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800076c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000738:	f7ff ffc6 	bl	80006c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800073c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800073e:	e003      	b.n	8000748 <LoopCopyDataInit>

08000740 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000742:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000744:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000746:	3104      	adds	r1, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000748:	480a      	ldr	r0, [pc, #40]	; (8000774 <LoopForever+0xa>)
	ldr	r3, =_edata
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <LoopForever+0xe>)
	adds	r2, r0, r1
 800074c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800074e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000750:	d3f6      	bcc.n	8000740 <CopyDataInit>
	ldr	r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000754:	e002      	b.n	800075c <LoopFillZerobss>

08000756 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000756:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000758:	f842 3b04 	str.w	r3, [r2], #4

0800075c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <LoopForever+0x16>)
	cmp	r2, r3
 800075e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000760:	d3f9      	bcc.n	8000756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000762:	f007 fb5d 	bl	8007e20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000766:	f7ff fd8b 	bl	8000280 <main>

0800076a <LoopForever>:

LoopForever:
    b LoopForever
 800076a:	e7fe      	b.n	800076a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800076c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000770:	080087d8 	.word	0x080087d8
	ldr	r0, =_sdata
 8000774:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000778:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 800077c:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8000780:	200012ac 	.word	0x200012ac

08000784 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC1_IRQHandler>

08000786 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800078c:	2300      	movs	r3, #0
 800078e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f961 	bl	8000a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000796:	2000      	movs	r0, #0
 8000798:	f000 f80e 	bl	80007b8 <HAL_InitTick>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d002      	beq.n	80007a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	71fb      	strb	r3, [r7, #7]
 80007a6:	e001      	b.n	80007ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007a8:	f7ff febc 	bl	8000524 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007ac:	79fb      	ldrb	r3, [r7, #7]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007c0:	2300      	movs	r3, #0
 80007c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <HAL_InitTick+0x6c>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d023      	beq.n	8000814 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <HAL_InitTick+0x70>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_InitTick+0x6c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007da:	fbb3 f3f1 	udiv	r3, r3, r1
 80007de:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f96d 	bl	8000ac2 <HAL_SYSTICK_Config>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10f      	bne.n	800080e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b0f      	cmp	r3, #15
 80007f2:	d809      	bhi.n	8000808 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f4:	2200      	movs	r2, #0
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007fc:	f000 f937 	bl	8000a6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_InitTick+0x74>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	e007      	b.n	8000818 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	73fb      	strb	r3, [r7, #15]
 800080c:	e004      	b.n	8000818 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	73fb      	strb	r3, [r7, #15]
 8000812:	e001      	b.n	8000818 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000818:	7bfb      	ldrb	r3, [r7, #15]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000008 	.word	0x20000008
 8000828:	20000000 	.word	0x20000000
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x20>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x24>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_IncTick+0x24>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000008 	.word	0x20000008
 8000854:	20000304 	.word	0x20000304

08000858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return uwTick;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_GetTick+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000304 	.word	0x20000304

08000870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff ffee 	bl	8000858 <HAL_GetTick>
 800087c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000888:	d005      	beq.n	8000896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <HAL_Delay+0x44>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4413      	add	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000896:	bf00      	nop
 8000898:	f7ff ffde 	bl	8000858 <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d8f7      	bhi.n	8000898 <HAL_Delay+0x28>
  {
  }
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000008 	.word	0x20000008

080008b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ea:	4a04      	ldr	r2, [pc, #16]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	60d3      	str	r3, [r2, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <__NVIC_GetPriorityGrouping+0x18>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	f003 0307 	and.w	r3, r3, #7
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	2b00      	cmp	r3, #0
 800092c:	db0b      	blt.n	8000946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f003 021f 	and.w	r2, r3, #31
 8000934:	4907      	ldr	r1, [pc, #28]	; (8000954 <__NVIC_EnableIRQ+0x38>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	095b      	lsrs	r3, r3, #5
 800093c:	2001      	movs	r0, #1
 800093e:	fa00 f202 	lsl.w	r2, r0, r2
 8000942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000e100 	.word	0xe000e100

08000958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db0a      	blt.n	8000982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	490c      	ldr	r1, [pc, #48]	; (80009a4 <__NVIC_SetPriority+0x4c>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	0112      	lsls	r2, r2, #4
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	440b      	add	r3, r1
 800097c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000980:	e00a      	b.n	8000998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4908      	ldr	r1, [pc, #32]	; (80009a8 <__NVIC_SetPriority+0x50>)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	3b04      	subs	r3, #4
 8000990:	0112      	lsls	r2, r2, #4
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	440b      	add	r3, r1
 8000996:	761a      	strb	r2, [r3, #24]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000e100 	.word	0xe000e100
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b089      	sub	sp, #36	; 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f1c3 0307 	rsb	r3, r3, #7
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	bf28      	it	cs
 80009ca:	2304      	movcs	r3, #4
 80009cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3304      	adds	r3, #4
 80009d2:	2b06      	cmp	r3, #6
 80009d4:	d902      	bls.n	80009dc <NVIC_EncodePriority+0x30>
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3b03      	subs	r3, #3
 80009da:	e000      	b.n	80009de <NVIC_EncodePriority+0x32>
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43da      	mvns	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	401a      	ands	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	43d9      	mvns	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	4313      	orrs	r3, r2
         );
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3724      	adds	r7, #36	; 0x24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a24:	d301      	bcc.n	8000a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00f      	b.n	8000a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <SysTick_Config+0x40>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a32:	210f      	movs	r1, #15
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a38:	f7ff ff8e 	bl	8000958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <SysTick_Config+0x40>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <SysTick_Config+0x40>)
 8000a44:	2207      	movs	r2, #7
 8000a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	e000e010 	.word	0xe000e010

08000a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff29 	bl	80008b8 <__NVIC_SetPriorityGrouping>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a80:	f7ff ff3e 	bl	8000900 <__NVIC_GetPriorityGrouping>
 8000a84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	68b9      	ldr	r1, [r7, #8]
 8000a8a:	6978      	ldr	r0, [r7, #20]
 8000a8c:	f7ff ff8e 	bl	80009ac <NVIC_EncodePriority>
 8000a90:	4602      	mov	r2, r0
 8000a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff5d 	bl	8000958 <__NVIC_SetPriority>
}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff31 	bl	800091c <__NVIC_EnableIRQ>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ffa2 	bl	8000a14 <SysTick_Config>
 8000ad0:	4603      	mov	r3, r0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aea:	e148      	b.n	8000d7e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	2101      	movs	r1, #1
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	4013      	ands	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 813a 	beq.w	8000d78 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d00b      	beq.n	8000b24 <HAL_GPIO_Init+0x48>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d007      	beq.n	8000b24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b18:	2b11      	cmp	r3, #17
 8000b1a:	d003      	beq.n	8000b24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2b12      	cmp	r3, #18
 8000b22:	d130      	bne.n	8000b86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	2203      	movs	r2, #3
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	091b      	lsrs	r3, r3, #4
 8000b70:	f003 0201 	and.w	r2, r3, #1
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2203      	movs	r2, #3
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_Init+0xea>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b12      	cmp	r3, #18
 8000bc4:	d123      	bne.n	8000c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	08da      	lsrs	r2, r3, #3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3208      	adds	r2, #8
 8000bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	220f      	movs	r2, #15
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	f003 0307 	and.w	r3, r3, #7
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	08da      	lsrs	r2, r3, #3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3208      	adds	r2, #8
 8000c08:	6939      	ldr	r1, [r7, #16]
 8000c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0203 	and.w	r2, r3, #3
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 8094 	beq.w	8000d78 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c50:	4b52      	ldr	r3, [pc, #328]	; (8000d9c <HAL_GPIO_Init+0x2c0>)
 8000c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c54:	4a51      	ldr	r2, [pc, #324]	; (8000d9c <HAL_GPIO_Init+0x2c0>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c5c:	4b4f      	ldr	r3, [pc, #316]	; (8000d9c <HAL_GPIO_Init+0x2c0>)
 8000c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c68:	4a4d      	ldr	r2, [pc, #308]	; (8000da0 <HAL_GPIO_Init+0x2c4>)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	3302      	adds	r3, #2
 8000c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	220f      	movs	r2, #15
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c92:	d00d      	beq.n	8000cb0 <HAL_GPIO_Init+0x1d4>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a43      	ldr	r2, [pc, #268]	; (8000da4 <HAL_GPIO_Init+0x2c8>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d007      	beq.n	8000cac <HAL_GPIO_Init+0x1d0>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a42      	ldr	r2, [pc, #264]	; (8000da8 <HAL_GPIO_Init+0x2cc>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d101      	bne.n	8000ca8 <HAL_GPIO_Init+0x1cc>
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e004      	b.n	8000cb2 <HAL_GPIO_Init+0x1d6>
 8000ca8:	2307      	movs	r3, #7
 8000caa:	e002      	b.n	8000cb2 <HAL_GPIO_Init+0x1d6>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <HAL_GPIO_Init+0x1d6>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	f002 0203 	and.w	r2, r2, #3
 8000cb8:	0092      	lsls	r2, r2, #2
 8000cba:	4093      	lsls	r3, r2
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cc2:	4937      	ldr	r1, [pc, #220]	; (8000da0 <HAL_GPIO_Init+0x2c4>)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	3302      	adds	r3, #2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cd0:	4b36      	ldr	r3, [pc, #216]	; (8000dac <HAL_GPIO_Init+0x2d0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cf4:	4a2d      	ldr	r2, [pc, #180]	; (8000dac <HAL_GPIO_Init+0x2d0>)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <HAL_GPIO_Init+0x2d0>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d1e:	4a23      	ldr	r2, [pc, #140]	; (8000dac <HAL_GPIO_Init+0x2d0>)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <HAL_GPIO_Init+0x2d0>)
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d48:	4a18      	ldr	r2, [pc, #96]	; (8000dac <HAL_GPIO_Init+0x2d0>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_GPIO_Init+0x2d0>)
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d72:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_GPIO_Init+0x2d0>)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	fa22 f303 	lsr.w	r3, r2, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f47f aeaf 	bne.w	8000aec <HAL_GPIO_Init+0x10>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	371c      	adds	r7, #28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000
 8000da4:	48000400 	.word	0x48000400
 8000da8:	48000800 	.word	0x48000800
 8000dac:	40010400 	.word	0x40010400

08000db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dc0:	787b      	ldrb	r3, [r7, #1]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de2:	b08b      	sub	sp, #44	; 0x2c
 8000de4:	af06      	add	r7, sp, #24
 8000de6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e104      	b.n	8000ffc <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d106      	bne.n	8000e0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f006 fc9c 	bl	8007744 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fd98 	bl	800394e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	687e      	ldr	r6, [r7, #4]
 8000e26:	466d      	mov	r5, sp
 8000e28:	f106 0410 	add.w	r4, r6, #16
 8000e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	602b      	str	r3, [r5, #0]
 8000e34:	1d33      	adds	r3, r6, #4
 8000e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e38:	6838      	ldr	r0, [r7, #0]
 8000e3a:	f002 fd60 	bl	80038fe <USB_CoreInit>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d005      	beq.n	8000e50 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2202      	movs	r2, #2
 8000e48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e0d5      	b.n	8000ffc <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 fd94 	bl	8003984 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e04c      	b.n	8000efc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	3301      	adds	r3, #1
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	1c5a      	adds	r2, r3, #1
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	440b      	add	r3, r1
 8000e88:	7bfa      	ldrb	r2, [r7, #15]
 8000e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	b298      	uxth	r0, r3
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	440b      	add	r3, r1
 8000e9e:	3336      	adds	r3, #54	; 0x36
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	1c5a      	adds	r2, r3, #1
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	440b      	add	r3, r1
 8000eb4:	3303      	adds	r3, #3
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000eba:	7bfa      	ldrb	r2, [r7, #15]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3338      	adds	r3, #56	; 0x38
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ece:	7bfa      	ldrb	r2, [r7, #15]
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	333c      	adds	r3, #60	; 0x3c
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	3340      	adds	r3, #64	; 0x40
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3ad      	bcc.n	8000e62 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e044      	b.n	8000f96 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	440b      	add	r3, r1
 8000f30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	440b      	add	r3, r1
 8000f88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	3301      	adds	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d3b5      	bcc.n	8000f0c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	687e      	ldr	r6, [r7, #4]
 8000fa8:	466d      	mov	r5, sp
 8000faa:	f106 0410 	add.w	r4, r6, #16
 8000fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	602b      	str	r3, [r5, #0]
 8000fb6:	1d33      	adds	r3, r6, #4
 8000fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fba:	6838      	ldr	r0, [r7, #0]
 8000fbc:	f002 fcef 	bl	800399e <USB_DevInit>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e014      	b.n	8000ffc <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d102      	bne.n	8000ff0 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f001 fa71 	bl	80024d2 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 fca7 	bl	8005948 <USB_DevDisconnect>

  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001004 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001012:	2b01      	cmp	r3, #1
 8001014:	d101      	bne.n	800101a <HAL_PCD_Start+0x16>
 8001016:	2302      	movs	r3, #2
 8001018:	e012      	b.n	8001040 <HAL_PCD_Start+0x3c>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f002 fc7a 	bl	8003920 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f004 fc72 	bl	800591a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f004 fc8c 	bl	8005972 <USB_ReadInterrupts>
 800105a:	4603      	mov	r3, r0
 800105c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001064:	d102      	bne.n	800106c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fb5b 	bl	8001722 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f004 fc7e 	bl	8005972 <USB_ReadInterrupts>
 8001076:	4603      	mov	r3, r0
 8001078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800107c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001080:	d112      	bne.n	80010a8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800108a:	b29a      	uxth	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001094:	b292      	uxth	r2, r2
 8001096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f006 fbcd 	bl	800783a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010a0:	2100      	movs	r1, #0
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f91e 	bl	80012e4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 fc60 	bl	8005972 <USB_ReadInterrupts>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010bc:	d10b      	bne.n	80010d6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010d0:	b292      	uxth	r2, r2
 80010d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 fc49 	bl	8005972 <USB_ReadInterrupts>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ea:	d10b      	bne.n	8001104 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010fe:	b292      	uxth	r2, r2
 8001100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f004 fc32 	bl	8005972 <USB_ReadInterrupts>
 800110e:	4603      	mov	r3, r0
 8001110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001118:	d133      	bne.n	8001182 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001122:	b29a      	uxth	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0204 	bic.w	r2, r2, #4
 800112c:	b292      	uxth	r2, r2
 800112e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800113a:	b29a      	uxth	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0208 	bic.w	r2, r2, #8
 8001144:	b292      	uxth	r2, r2
 8001146:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001150:	2b01      	cmp	r3, #1
 8001152:	d107      	bne.n	8001164 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800115c:	2100      	movs	r1, #0
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f006 fe1c 	bl	8007d9c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f006 fba1 	bl	80078ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800117c:	b292      	uxth	r2, r2
 800117e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f004 fbf3 	bl	8005972 <USB_ReadInterrupts>
 800118c:	4603      	mov	r3, r0
 800118e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001196:	d126      	bne.n	80011e6 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0208 	orr.w	r2, r2, #8
 80011aa:	b292      	uxth	r2, r2
 80011ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011c2:	b292      	uxth	r2, r2
 80011c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0204 	orr.w	r2, r2, #4
 80011da:	b292      	uxth	r2, r2
 80011dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f006 fb49 	bl	8007878 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 fbc1 	bl	8005972 <USB_ReadInterrupts>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	2b80      	cmp	r3, #128	; 0x80
 80011f8:	d13f      	bne.n	800127a <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001202:	b29a      	uxth	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800120c:	b292      	uxth	r2, r2
 800120e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d12b      	bne.n	8001274 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001224:	b29a      	uxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0204 	orr.w	r2, r2, #4
 800122e:	b292      	uxth	r2, r2
 8001230:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800123c:	b29a      	uxth	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0208 	orr.w	r2, r2, #8
 8001246:	b292      	uxth	r2, r2
 8001248:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800125c:	b29b      	uxth	r3, r3
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800126a:	2101      	movs	r1, #1
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f006 fd95 	bl	8007d9c <HAL_PCDEx_LPM_Callback>
 8001272:	e002      	b.n	800127a <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f006 faff 	bl	8007878 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f004 fb77 	bl	8005972 <USB_ReadInterrupts>
 8001284:	4603      	mov	r3, r0
 8001286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800128a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800128e:	d10e      	bne.n	80012ae <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001298:	b29a      	uxth	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012a2:	b292      	uxth	r2, r2
 80012a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f006 fab8 	bl	800781e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 fb5d 	bl	8005972 <USB_ReadInterrupts>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012c2:	d10b      	bne.n	80012dc <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012d6:	b292      	uxth	r2, r2
 80012d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_PCD_SetAddress+0x1a>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e013      	b.n	8001326 <HAL_PCD_SetAddress+0x42>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	78fa      	ldrb	r2, [r7, #3]
 800130a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	78fa      	ldrb	r2, [r7, #3]
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f004 faeb 	bl	80058f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	4608      	mov	r0, r1
 8001338:	4611      	mov	r1, r2
 800133a:	461a      	mov	r2, r3
 800133c:	4603      	mov	r3, r0
 800133e:	70fb      	strb	r3, [r7, #3]
 8001340:	460b      	mov	r3, r1
 8001342:	803b      	strh	r3, [r7, #0]
 8001344:	4613      	mov	r3, r2
 8001346:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800134c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001350:	2b00      	cmp	r3, #0
 8001352:	da0e      	bge.n	8001372 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2201      	movs	r2, #1
 800136e:	705a      	strb	r2, [r3, #1]
 8001370:	e00e      	b.n	8001390 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	f003 0207 	and.w	r2, r3, #7
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	b2da      	uxtb	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800139c:	883a      	ldrh	r2, [r7, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	78ba      	ldrb	r2, [r7, #2]
 80013a6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	785b      	ldrb	r3, [r3, #1]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d004      	beq.n	80013ba <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80013ba:	78bb      	ldrb	r3, [r7, #2]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d102      	bne.n	80013c6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_PCD_EP_Open+0xa6>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e00e      	b.n	80013f2 <HAL_PCD_EP_Open+0xc4>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68f9      	ldr	r1, [r7, #12]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 fafc 	bl	80039e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80013f0:	7afb      	ldrb	r3, [r7, #11]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001406:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800140a:	2b00      	cmp	r3, #0
 800140c:	da0e      	bge.n	800142c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	1c5a      	adds	r2, r3, #1
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2201      	movs	r2, #1
 8001428:	705a      	strb	r2, [r3, #1]
 800142a:	e00e      	b.n	800144a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	f003 0207 	and.w	r2, r3, #7
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	b2da      	uxtb	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_PCD_EP_Close+0x6a>
 8001460:	2302      	movs	r3, #2
 8001462:	e00e      	b.n	8001482 <HAL_PCD_EP_Close+0x88>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68f9      	ldr	r1, [r7, #12]
 8001472:	4618      	mov	r0, r3
 8001474:	f002 fe22 	bl	80040bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	460b      	mov	r3, r1
 8001498:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800149a:	7afb      	ldrb	r3, [r7, #11]
 800149c:	f003 0207 	and.w	r2, r3, #7
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2200      	movs	r2, #0
 80014c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014ca:	7afb      	ldrb	r3, [r7, #11]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014d6:	7afb      	ldrb	r3, [r7, #11]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d106      	bne.n	80014ee <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6979      	ldr	r1, [r7, #20]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 ffd5 	bl	8004496 <USB_EPStartXfer>
 80014ec:	e005      	b.n	80014fa <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6979      	ldr	r1, [r7, #20]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 ffce 	bl	8004496 <USB_EPStartXfer>
  }

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	f003 0207 	and.w	r2, r3, #7
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	460b      	mov	r3, r1
 8001542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2201      	movs	r2, #1
 800157e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	b2da      	uxtb	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800158c:	7afb      	ldrb	r3, [r7, #11]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	2b00      	cmp	r3, #0
 8001594:	d106      	bne.n	80015a4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6979      	ldr	r1, [r7, #20]
 800159c:	4618      	mov	r0, r3
 800159e:	f002 ff7a 	bl	8004496 <USB_EPStartXfer>
 80015a2:	e005      	b.n	80015b0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6979      	ldr	r1, [r7, #20]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 ff73 	bl	8004496 <USB_EPStartXfer>
  }

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	f003 0207 	and.w	r2, r3, #7
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d901      	bls.n	80015d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e04c      	b.n	8001672 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da0e      	bge.n	80015fe <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2201      	movs	r2, #1
 80015fa:	705a      	strb	r2, [r3, #1]
 80015fc:	e00c      	b.n	8001618 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2201      	movs	r2, #1
 800161c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	b2da      	uxtb	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_PCD_EP_SetStall+0x7e>
 8001634:	2302      	movs	r3, #2
 8001636:	e01c      	b.n	8001672 <HAL_PCD_EP_SetStall+0xb8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68f9      	ldr	r1, [r7, #12]
 8001646:	4618      	mov	r0, r3
 8001648:	f004 f854 	bl	80056f4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	2b00      	cmp	r3, #0
 8001654:	d108      	bne.n	8001668 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001660:	4619      	mov	r1, r3
 8001662:	4610      	mov	r0, r2
 8001664:	f004 f995 	bl	8005992 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	f003 020f 	and.w	r2, r3, #15
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	d901      	bls.n	8001698 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e040      	b.n	800171a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800169c:	2b00      	cmp	r3, #0
 800169e:	da0e      	bge.n	80016be <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2201      	movs	r2, #1
 80016ba:	705a      	strb	r2, [r3, #1]
 80016bc:	e00e      	b.n	80016dc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	f003 0207 	and.w	r2, r3, #7
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_PCD_EP_ClrStall+0x82>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e00e      	b.n	800171a <HAL_PCD_EP_ClrStall+0xa0>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	4618      	mov	r0, r3
 800170c:	f004 f843 	bl	8005796 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b08e      	sub	sp, #56	; 0x38
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800172a:	e2d1      	b.n	8001cd0 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001734:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001736:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001742:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 8152 	bne.w	80019f0 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800174c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	2b00      	cmp	r3, #0
 8001754:	d150      	bne.n	80017f8 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	b29b      	uxth	r3, r3
 800175e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001766:	81fb      	strh	r3, [r7, #14]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	89fb      	ldrh	r3, [r7, #14]
 800176e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001776:	b29b      	uxth	r3, r3
 8001778:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3328      	adds	r3, #40	; 0x28
 800177e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001788:	b29b      	uxth	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4413      	add	r3, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	4413      	add	r3, r2
 800179a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	441a      	add	r2, r3
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017b6:	2100      	movs	r1, #0
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f006 f816 	bl	80077ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8282 	beq.w	8001cd0 <PCD_EP_ISR_Handler+0x5ae>
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f040 827d 	bne.w	8001cd0 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	b292      	uxth	r2, r2
 80017ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017f6:	e26b      	b.n	8001cd0 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001808:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800180a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800180e:	2b00      	cmp	r3, #0
 8001810:	d032      	beq.n	8001878 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800181a:	b29b      	uxth	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	4413      	add	r3, r2
 800182c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800184c:	b29b      	uxth	r3, r3
 800184e:	f004 f8ee 	bl	8005a2e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b29a      	uxth	r2, r3
 800185a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800185e:	4013      	ands	r3, r2
 8001860:	823b      	strh	r3, [r7, #16]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	8a3a      	ldrh	r2, [r7, #16]
 8001868:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800186c:	b292      	uxth	r2, r2
 800186e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f005 ff8d 	bl	8007790 <HAL_PCD_SetupStageCallback>
 8001876:	e22b      	b.n	8001cd0 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001878:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800187c:	2b00      	cmp	r3, #0
 800187e:	f280 8227 	bge.w	8001cd0 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	b29a      	uxth	r2, r3
 800188a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800188e:	4013      	ands	r3, r2
 8001890:	83bb      	strh	r3, [r7, #28]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	8bba      	ldrh	r2, [r7, #28]
 8001898:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800189c:	b292      	uxth	r2, r2
 800189e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d019      	beq.n	8001904 <PCD_EP_ISR_Handler+0x1e2>
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d015      	beq.n	8001904 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	6959      	ldr	r1, [r3, #20]
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	f004 f8a0 	bl	8005a2e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	441a      	add	r2, r3
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018fc:	2100      	movs	r1, #0
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f005 ff58 	bl	80077b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001912:	b29b      	uxth	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	4413      	add	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d112      	bne.n	8001952 <PCD_EP_ISR_Handler+0x230>
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001936:	b29a      	uxth	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	801a      	strh	r2, [r3, #0]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800194a:	b29a      	uxth	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	801a      	strh	r2, [r3, #0]
 8001950:	e02f      	b.n	80019b2 <PCD_EP_ISR_Handler+0x290>
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	2b3e      	cmp	r3, #62	; 0x3e
 8001958:	d813      	bhi.n	8001982 <PCD_EP_ISR_Handler+0x260>
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <PCD_EP_ISR_Handler+0x252>
 800196e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001970:	3301      	adds	r3, #1
 8001972:	633b      	str	r3, [r7, #48]	; 0x30
 8001974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001976:	b29b      	uxth	r3, r3
 8001978:	029b      	lsls	r3, r3, #10
 800197a:	b29a      	uxth	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	801a      	strh	r2, [r3, #0]
 8001980:	e017      	b.n	80019b2 <PCD_EP_ISR_Handler+0x290>
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <PCD_EP_ISR_Handler+0x27a>
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	3b01      	subs	r3, #1
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
 800199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199e:	b29b      	uxth	r3, r3
 80019a0:	029b      	lsls	r3, r3, #10
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c2:	827b      	strh	r3, [r7, #18]
 80019c4:	8a7b      	ldrh	r3, [r7, #18]
 80019c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80019ca:	827b      	strh	r3, [r7, #18]
 80019cc:	8a7b      	ldrh	r3, [r7, #18]
 80019ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80019d2:	827b      	strh	r3, [r7, #18]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	8a7b      	ldrh	r3, [r7, #18]
 80019da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	8013      	strh	r3, [r2, #0]
 80019ee:	e16f      	b.n	8001cd0 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a02:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f280 80e4 	bge.w	8001bd4 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a22:	4013      	ands	r3, r2
 8001a24:	853b      	strh	r3, [r7, #40]	; 0x28
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a3a:	b292      	uxth	r2, r2
 8001a3c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a3e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	7b1b      	ldrb	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d120      	bne.n	8001a9e <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a80:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001a82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8083 	beq.w	8001b90 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	6959      	ldr	r1, [r3, #20]
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	88da      	ldrh	r2, [r3, #6]
 8001a96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a98:	f003 ffc9 	bl	8005a2e <USB_ReadPMA>
 8001a9c:	e078      	b.n	8001b90 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	78db      	ldrb	r3, [r3, #3]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d108      	bne.n	8001ab8 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001aa6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f91d 	bl	8001cec <HAL_PCD_EP_DB_Receive>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ab6:	e06b      	b.n	8001b90 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad2:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	441a      	add	r2, r3
 8001ae2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d01f      	beq.n	8001b52 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4413      	add	r3, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b36:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001b38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d028      	beq.n	8001b90 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	6959      	ldr	r1, [r3, #20]
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	891a      	ldrh	r2, [r3, #8]
 8001b4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b4c:	f003 ff6f 	bl	8005a2e <USB_ReadPMA>
 8001b50:	e01e      	b.n	8001b90 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b76:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001b78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	6959      	ldr	r1, [r3, #20]
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	895a      	ldrh	r2, [r3, #10]
 8001b8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b8c:	f003 ff4f 	bl	8005a2e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	69da      	ldr	r2, [r3, #28]
 8001b94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b96:	441a      	add	r2, r3
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ba2:	441a      	add	r2, r3
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <PCD_EP_ISR_Handler+0x498>
 8001bb0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d206      	bcs.n	8001bc8 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f005 fdf7 	bl	80077b4 <HAL_PCD_DataOutStageCallback>
 8001bc6:	e005      	b.n	8001bd4 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fc61 	bl	8004496 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d078      	beq.n	8001cd0 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8001bde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0c:	843b      	strh	r3, [r7, #32]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	441a      	add	r2, r3
 8001c1c:	8c3b      	ldrh	r3, [r7, #32]
 8001c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	78db      	ldrb	r3, [r3, #3]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d108      	bne.n	8001c44 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d144      	bne.n	8001cc4 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001c3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d13f      	bne.n	8001cc4 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c68:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	8bfb      	ldrh	r3, [r7, #30]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d906      	bls.n	8001c82 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	699a      	ldr	r2, [r3, #24]
 8001c78:	8bfb      	ldrh	r3, [r7, #30]
 8001c7a:	1ad2      	subs	r2, r2, r3
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	619a      	str	r2, [r3, #24]
 8001c80:	e002      	b.n	8001c88 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d106      	bne.n	8001c9e <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f005 fda7 	bl	80077ea <HAL_PCD_DataInStageCallback>
 8001c9c:	e018      	b.n	8001cd0 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	441a      	add	r2, r3
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	8bfb      	ldrh	r3, [r7, #30]
 8001cb0:	441a      	add	r2, r3
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fbea 	bl	8004496 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001cc2:	e005      	b.n	8001cd0 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001cc4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f917 	bl	8001efe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f6ff ad25 	blt.w	800172c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3738      	adds	r7, #56	; 0x38
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d07c      	beq.n	8001dfe <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d28:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	8b7b      	ldrh	r3, [r7, #26]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d306      	bcc.n	8001d42 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	8b7b      	ldrh	r3, [r7, #26]
 8001d3a:	1ad2      	subs	r2, r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	619a      	str	r2, [r3, #24]
 8001d40:	e002      	b.n	8001d48 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d123      	bne.n	8001d98 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d6a:	833b      	strh	r3, [r7, #24]
 8001d6c:	8b3b      	ldrh	r3, [r7, #24]
 8001d6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d72:	833b      	strh	r3, [r7, #24]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	441a      	add	r2, r3
 8001d82:	8b3b      	ldrh	r3, [r7, #24]
 8001d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d01f      	beq.n	8001de2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dbc:	82fb      	strh	r3, [r7, #22]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	441a      	add	r2, r3
 8001dcc:	8afb      	ldrh	r3, [r7, #22]
 8001dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001de2:	8b7b      	ldrh	r3, [r7, #26]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 8085 	beq.w	8001ef4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	6959      	ldr	r1, [r3, #20]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	891a      	ldrh	r2, [r3, #8]
 8001df6:	8b7b      	ldrh	r3, [r7, #26]
 8001df8:	f003 fe19 	bl	8005a2e <USB_ReadPMA>
 8001dfc:	e07a      	b.n	8001ef4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	699a      	ldr	r2, [r3, #24]
 8001e28:	8b7b      	ldrh	r3, [r7, #26]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d306      	bcc.n	8001e3c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	8b7b      	ldrh	r3, [r7, #26]
 8001e34:	1ad2      	subs	r2, r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	619a      	str	r2, [r3, #24]
 8001e3a:	e002      	b.n	8001e42 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d123      	bne.n	8001e92 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e64:	83fb      	strh	r3, [r7, #30]
 8001e66:	8bfb      	ldrh	r3, [r7, #30]
 8001e68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e6c:	83fb      	strh	r3, [r7, #30]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	441a      	add	r2, r3
 8001e7c:	8bfb      	ldrh	r3, [r7, #30]
 8001e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d11f      	bne.n	8001edc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb6:	83bb      	strh	r3, [r7, #28]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	441a      	add	r2, r3
 8001ec6:	8bbb      	ldrh	r3, [r7, #28]
 8001ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001edc:	8b7b      	ldrh	r3, [r7, #26]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d008      	beq.n	8001ef4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	6959      	ldr	r1, [r3, #20]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	895a      	ldrh	r2, [r3, #10]
 8001eee:	8b7b      	ldrh	r3, [r7, #26]
 8001ef0:	f003 fd9d 	bl	8005a2e <USB_ReadPMA>
    }
  }

  return count;
 8001ef4:	8b7b      	ldrh	r3, [r7, #26]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b094      	sub	sp, #80	; 0x50
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8136 	beq.w	8002184 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	4413      	add	r3, r2
 8001f32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f3c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	699a      	ldr	r2, [r3, #24]
 8001f44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d907      	bls.n	8001f5c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	699a      	ldr	r2, [r3, #24]
 8001f50:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f54:	1ad2      	subs	r2, r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	619a      	str	r2, [r3, #24]
 8001f5a:	e002      	b.n	8001f62 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d12c      	bne.n	8001fc4 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f005 fc3a 	bl	80077ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8238 	beq.w	80023f2 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9c:	82fb      	strh	r3, [r7, #22]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	441a      	add	r2, r3
 8001fac:	8afb      	ldrh	r3, [r7, #22]
 8001fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	8013      	strh	r3, [r2, #0]
 8001fc2:	e216      	b.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d01f      	beq.n	800200e <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	441a      	add	r2, r3
 8001ff8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002002:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200a:	b29b      	uxth	r3, r3
 800200c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002014:	2b01      	cmp	r3, #1
 8002016:	f040 81ec 	bne.w	80023f2 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002022:	441a      	add	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	69da      	ldr	r2, [r3, #28]
 800202c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002030:	441a      	add	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	6a1a      	ldr	r2, [r3, #32]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	429a      	cmp	r2, r3
 8002040:	d309      	bcc.n	8002056 <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800204e:	1ad2      	subs	r2, r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	621a      	str	r2, [r3, #32]
 8002054:	e015      	b.n	8002082 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d107      	bne.n	800206e <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 800205e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002062:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800206c:	e009      	b.n	8002082 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2200      	movs	r2, #0
 8002080:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	785b      	ldrb	r3, [r3, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d155      	bne.n	8002136 <HAL_PCD_EP_DB_Transmit+0x238>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002098:	b29b      	uxth	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	4413      	add	r3, r2
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	00da      	lsls	r2, r3, #3
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	4413      	add	r3, r2
 80020ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d112      	bne.n	80020de <HAL_PCD_EP_DB_Transmit+0x1e0>
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	801a      	strh	r2, [r3, #0]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	801a      	strh	r2, [r3, #0]
 80020dc:	e047      	b.n	800216e <HAL_PCD_EP_DB_Transmit+0x270>
 80020de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e0:	2b3e      	cmp	r3, #62	; 0x3e
 80020e2:	d811      	bhi.n	8002108 <HAL_PCD_EP_DB_Transmit+0x20a>
 80020e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_PCD_EP_DB_Transmit+0x1fc>
 80020f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f6:	3301      	adds	r3, #1
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	029b      	lsls	r3, r3, #10
 8002100:	b29a      	uxth	r2, r3
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	e032      	b.n	800216e <HAL_PCD_EP_DB_Transmit+0x270>
 8002108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <HAL_PCD_EP_DB_Transmit+0x220>
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211a:	3b01      	subs	r3, #1
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002120:	b29b      	uxth	r3, r3
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	b29b      	uxth	r3, r3
 8002126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800212a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800212e:	b29a      	uxth	r2, r3
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	801a      	strh	r2, [r3, #0]
 8002134:	e01b      	b.n	800216e <HAL_PCD_EP_DB_Transmit+0x270>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	785b      	ldrb	r3, [r3, #1]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d117      	bne.n	800216e <HAL_PCD_EP_DB_Transmit+0x270>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214c:	b29b      	uxth	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	4413      	add	r3, r2
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	00da      	lsls	r2, r3, #3
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	4413      	add	r3, r2
 8002160:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002164:	623b      	str	r3, [r7, #32]
 8002166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002168:	b29a      	uxth	r2, r3
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	6959      	ldr	r1, [r3, #20]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	891a      	ldrh	r2, [r3, #8]
 800217a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800217c:	b29b      	uxth	r3, r3
 800217e:	f003 fc14 	bl	80059aa <USB_WritePMA>
 8002182:	e136      	b.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800218c:	b29b      	uxth	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	4413      	add	r3, r2
 800219e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021a8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d307      	bcc.n	80021c8 <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	699a      	ldr	r2, [r3, #24]
 80021bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021c0:	1ad2      	subs	r2, r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	619a      	str	r2, [r3, #24]
 80021c6:	e002      	b.n	80021ce <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2200      	movs	r2, #0
 80021cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d12e      	bne.n	8002234 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f005 fb04 	bl	80077ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f040 8102 	bne.w	80023f2 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002208:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	441a      	add	r2, r3
 800221a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800221e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800222a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222e:	b29b      	uxth	r3, r3
 8002230:	8013      	strh	r3, [r2, #0]
 8002232:	e0de      	b.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d11f      	bne.n	800227e <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002258:	867b      	strh	r3, [r7, #50]	; 0x32
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	441a      	add	r2, r3
 8002268:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800226a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800226e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227a:	b29b      	uxth	r3, r3
 800227c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002284:	2b01      	cmp	r3, #1
 8002286:	f040 80b4 	bne.w	80023f2 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002292:	441a      	add	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	69da      	ldr	r2, [r3, #28]
 800229c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022a0:	441a      	add	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6a1a      	ldr	r2, [r3, #32]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d309      	bcc.n	80022c6 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022be:	1ad2      	subs	r2, r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	621a      	str	r2, [r3, #32]
 80022c4:	e015      	b.n	80022f2 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 80022ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022d2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022dc:	e009      	b.n	80022f2 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2200      	movs	r2, #0
 80022e8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	643b      	str	r3, [r7, #64]	; 0x40
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d155      	bne.n	80023ac <HAL_PCD_EP_DB_Transmit+0x4ae>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	63bb      	str	r3, [r7, #56]	; 0x38
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230e:	b29b      	uxth	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002314:	4413      	add	r3, r2
 8002316:	63bb      	str	r3, [r7, #56]	; 0x38
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	00da      	lsls	r2, r3, #3
 800231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002320:	4413      	add	r3, r2
 8002322:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002326:	637b      	str	r3, [r7, #52]	; 0x34
 8002328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800232a:	2b00      	cmp	r3, #0
 800232c:	d112      	bne.n	8002354 <HAL_PCD_EP_DB_Transmit+0x456>
 800232e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002338:	b29a      	uxth	r2, r3
 800233a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233c:	801a      	strh	r2, [r3, #0]
 800233e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800234c:	b29a      	uxth	r2, r3
 800234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002350:	801a      	strh	r2, [r3, #0]
 8002352:	e044      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002356:	2b3e      	cmp	r3, #62	; 0x3e
 8002358:	d811      	bhi.n	800237e <HAL_PCD_EP_DB_Transmit+0x480>
 800235a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_PCD_EP_DB_Transmit+0x472>
 800236a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236c:	3301      	adds	r3, #1
 800236e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002372:	b29b      	uxth	r3, r3
 8002374:	029b      	lsls	r3, r3, #10
 8002376:	b29a      	uxth	r2, r3
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	801a      	strh	r2, [r3, #0]
 800237c:	e02f      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0x4e0>
 800237e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <HAL_PCD_EP_DB_Transmit+0x496>
 800238e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002390:	3b01      	subs	r3, #1
 8002392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002396:	b29b      	uxth	r3, r3
 8002398:	029b      	lsls	r3, r3, #10
 800239a:	b29b      	uxth	r3, r3
 800239c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	e018      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0x4e0>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	785b      	ldrb	r3, [r3, #1]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d114      	bne.n	80023de <HAL_PCD_EP_DB_Transmit+0x4e0>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023bc:	b29b      	uxth	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c2:	4413      	add	r3, r2
 80023c4:	643b      	str	r3, [r7, #64]	; 0x40
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	00da      	lsls	r2, r3, #3
 80023cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ce:	4413      	add	r3, r2
 80023d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023d8:	b29a      	uxth	r2, r3
 80023da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023dc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	6959      	ldr	r1, [r3, #20]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	895a      	ldrh	r2, [r3, #10]
 80023ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f003 fadc 	bl	80059aa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800240c:	82bb      	strh	r3, [r7, #20]
 800240e:	8abb      	ldrh	r3, [r7, #20]
 8002410:	f083 0310 	eor.w	r3, r3, #16
 8002414:	82bb      	strh	r3, [r7, #20]
 8002416:	8abb      	ldrh	r3, [r7, #20]
 8002418:	f083 0320 	eor.w	r3, r3, #32
 800241c:	82bb      	strh	r3, [r7, #20]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	441a      	add	r2, r3
 800242c:	8abb      	ldrh	r3, [r7, #20]
 800242e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800243a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800243e:	b29b      	uxth	r3, r3
 8002440:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3750      	adds	r7, #80	; 0x50
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	817b      	strh	r3, [r7, #10]
 800245a:	4613      	mov	r3, r2
 800245c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800245e:	897b      	ldrh	r3, [r7, #10]
 8002460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800246a:	897b      	ldrh	r3, [r7, #10]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4413      	add	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	e009      	b.n	8002496 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002482:	897a      	ldrh	r2, [r7, #10]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002496:	893b      	ldrh	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2200      	movs	r2, #0
 80024a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	80da      	strh	r2, [r3, #6]
 80024aa:	e00b      	b.n	80024c4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2201      	movs	r2, #1
 80024b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	b29a      	uxth	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800250a:	b29b      	uxth	r3, r3
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <HAL_PWREx_GetVoltageRange+0x18>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40007000 	.word	0x40007000

08002544 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002552:	d130      	bne.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002554:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800255c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002560:	d038      	beq.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800256a:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002570:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2232      	movs	r2, #50	; 0x32
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0c9b      	lsrs	r3, r3, #18
 8002584:	3301      	adds	r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002588:	e002      	b.n	8002590 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3b01      	subs	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259c:	d102      	bne.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f2      	bne.n	800258a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b0:	d110      	bne.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e00f      	b.n	80025d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c2:	d007      	beq.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025cc:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40007000 	.word	0x40007000
 80025e8:	20000000 	.word	0x20000000
 80025ec:	431bde83 	.word	0x431bde83

080025f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_PWREx_EnableVddUSB+0x1c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <HAL_PWREx_EnableVddUSB+0x1c>)
 80025fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fe:	6053      	str	r3, [r2, #4]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40007000 	.word	0x40007000

08002610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f000 bc11 	b.w	8002e46 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002624:	4ba0      	ldr	r3, [pc, #640]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800262e:	4b9e      	ldr	r3, [pc, #632]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80e4 	beq.w	800280e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <HAL_RCC_OscConfig+0x4c>
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b0c      	cmp	r3, #12
 8002650:	f040 808b 	bne.w	800276a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2b01      	cmp	r3, #1
 8002658:	f040 8087 	bne.w	800276a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800265c:	4b92      	ldr	r3, [pc, #584]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_OscConfig+0x64>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e3e8      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1a      	ldr	r2, [r3, #32]
 8002678:	4b8b      	ldr	r3, [pc, #556]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <HAL_RCC_OscConfig+0x7e>
 8002684:	4b88      	ldr	r3, [pc, #544]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268c:	e005      	b.n	800269a <HAL_RCC_OscConfig+0x8a>
 800268e:	4b86      	ldr	r3, [pc, #536]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800269a:	4293      	cmp	r3, r2
 800269c:	d223      	bcs.n	80026e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fd42 	bl	800312c <RCC_SetFlashLatencyFromMSIRange>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e3c9      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b2:	4b7d      	ldr	r3, [pc, #500]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a7c      	ldr	r2, [pc, #496]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80026b8:	f043 0308 	orr.w	r3, r3, #8
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b7a      	ldr	r3, [pc, #488]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4977      	ldr	r1, [pc, #476]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d0:	4b75      	ldr	r3, [pc, #468]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	4972      	ldr	r1, [pc, #456]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
 80026e4:	e025      	b.n	8002732 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e6:	4b70      	ldr	r3, [pc, #448]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6f      	ldr	r2, [pc, #444]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80026ec:	f043 0308 	orr.w	r3, r3, #8
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b6d      	ldr	r3, [pc, #436]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	496a      	ldr	r1, [pc, #424]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002704:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	4965      	ldr	r1, [pc, #404]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fd02 	bl	800312c <RCC_SetFlashLatencyFromMSIRange>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e389      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002732:	f000 fc6f 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8002736:	4602      	mov	r2, r0
 8002738:	4b5b      	ldr	r3, [pc, #364]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	495a      	ldr	r1, [pc, #360]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002744:	5ccb      	ldrb	r3, [r1, r3]
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	fa22 f303 	lsr.w	r3, r2, r3
 800274e:	4a58      	ldr	r2, [pc, #352]	; (80028b0 <HAL_RCC_OscConfig+0x2a0>)
 8002750:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002752:	4b58      	ldr	r3, [pc, #352]	; (80028b4 <HAL_RCC_OscConfig+0x2a4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe f82e 	bl	80007b8 <HAL_InitTick>
 800275c:	4603      	mov	r3, r0
 800275e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d052      	beq.n	800280c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	e36d      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d032      	beq.n	80027d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002772:	4b4d      	ldr	r3, [pc, #308]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a4c      	ldr	r2, [pc, #304]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800277e:	f7fe f86b 	bl	8000858 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002786:	f7fe f867 	bl	8000858 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e356      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002798:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a4:	4b40      	ldr	r3, [pc, #256]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a3f      	ldr	r2, [pc, #252]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80027aa:	f043 0308 	orr.w	r3, r3, #8
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	493a      	ldr	r1, [pc, #232]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c2:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	4935      	ldr	r1, [pc, #212]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
 80027d6:	e01a      	b.n	800280e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027d8:	4b33      	ldr	r3, [pc, #204]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a32      	ldr	r2, [pc, #200]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027e4:	f7fe f838 	bl	8000858 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ec:	f7fe f834 	bl	8000858 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e323      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027fe:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x1dc>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d073      	beq.n	8002902 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d005      	beq.n	800282c <HAL_RCC_OscConfig+0x21c>
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d10e      	bne.n	8002844 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d10b      	bne.n	8002844 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282c:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d063      	beq.n	8002900 <HAL_RCC_OscConfig+0x2f0>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d15f      	bne.n	8002900 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e300      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284c:	d106      	bne.n	800285c <HAL_RCC_OscConfig+0x24c>
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e01d      	b.n	8002898 <HAL_RCC_OscConfig+0x288>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0x270>
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 800286c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e00b      	b.n	8002898 <HAL_RCC_OscConfig+0x288>
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <HAL_RCC_OscConfig+0x298>)
 8002892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01b      	beq.n	80028d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fd ffda 	bl	8000858 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a6:	e010      	b.n	80028ca <HAL_RCC_OscConfig+0x2ba>
 80028a8:	40021000 	.word	0x40021000
 80028ac:	0800875c 	.word	0x0800875c
 80028b0:	20000000 	.word	0x20000000
 80028b4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fd ffce 	bl	8000858 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e2bd      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ca:	4baf      	ldr	r3, [pc, #700]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2a8>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fd ffbe 	bl	8000858 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7fd ffba 	bl	8000858 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e2a9      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028f2:	4ba5      	ldr	r3, [pc, #660]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2d0>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d060      	beq.n	80029d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d005      	beq.n	8002920 <HAL_RCC_OscConfig+0x310>
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2b0c      	cmp	r3, #12
 8002918:	d119      	bne.n	800294e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d116      	bne.n	800294e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002920:	4b99      	ldr	r3, [pc, #612]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_OscConfig+0x328>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e286      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	4b93      	ldr	r3, [pc, #588]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	4990      	ldr	r1, [pc, #576]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294c:	e040      	b.n	80029d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d023      	beq.n	800299e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002956:	4b8c      	ldr	r3, [pc, #560]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a8b      	ldr	r2, [pc, #556]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7fd ff79 	bl	8000858 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296a:	f7fd ff75 	bl	8000858 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e264      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800297c:	4b82      	ldr	r3, [pc, #520]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002988:	4b7f      	ldr	r3, [pc, #508]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	061b      	lsls	r3, r3, #24
 8002996:	497c      	ldr	r1, [pc, #496]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
 800299c:	e018      	b.n	80029d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299e:	4b7a      	ldr	r3, [pc, #488]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a79      	ldr	r2, [pc, #484]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 80029a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fd ff55 	bl	8000858 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b2:	f7fd ff51 	bl	8000858 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e240      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c4:	4b70      	ldr	r3, [pc, #448]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d03c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01c      	beq.n	8002a1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e4:	4b68      	ldr	r3, [pc, #416]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 80029e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ea:	4a67      	ldr	r2, [pc, #412]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7fd ff30 	bl	8000858 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fc:	f7fd ff2c 	bl	8000858 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e21b      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a0e:	4b5e      	ldr	r3, [pc, #376]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ef      	beq.n	80029fc <HAL_RCC_OscConfig+0x3ec>
 8002a1c:	e01b      	b.n	8002a56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1e:	4b5a      	ldr	r3, [pc, #360]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a24:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2e:	f7fd ff13 	bl	8000858 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a36:	f7fd ff0f 	bl	8000858 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e1fe      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a48:	4b4f      	ldr	r3, [pc, #316]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1ef      	bne.n	8002a36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80a6 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a64:	2300      	movs	r3, #0
 8002a66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a68:	4b47      	ldr	r3, [pc, #284]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10d      	bne.n	8002a90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	4b44      	ldr	r3, [pc, #272]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	4a43      	ldr	r2, [pc, #268]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a80:	4b41      	ldr	r3, [pc, #260]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a90:	4b3e      	ldr	r3, [pc, #248]	; (8002b8c <HAL_RCC_OscConfig+0x57c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d118      	bne.n	8002ace <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a9c:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_RCC_OscConfig+0x57c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a3a      	ldr	r2, [pc, #232]	; (8002b8c <HAL_RCC_OscConfig+0x57c>)
 8002aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa8:	f7fd fed6 	bl	8000858 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab0:	f7fd fed2 	bl	8000858 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1c1      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac2:	4b32      	ldr	r3, [pc, #200]	; (8002b8c <HAL_RCC_OscConfig+0x57c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d108      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4d8>
 8002ad6:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ae6:	e024      	b.n	8002b32 <HAL_RCC_OscConfig+0x522>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b05      	cmp	r3, #5
 8002aee:	d110      	bne.n	8002b12 <HAL_RCC_OscConfig+0x502>
 8002af0:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b00:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b06:	4a20      	ldr	r2, [pc, #128]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b10:	e00f      	b.n	8002b32 <HAL_RCC_OscConfig+0x522>
 8002b12:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	4a1b      	ldr	r2, [pc, #108]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b22:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	4a17      	ldr	r2, [pc, #92]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002b2a:	f023 0304 	bic.w	r3, r3, #4
 8002b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d016      	beq.n	8002b68 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fd fe8d 	bl	8000858 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fd fe89 	bl	8000858 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e176      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_OscConfig+0x578>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0ed      	beq.n	8002b42 <HAL_RCC_OscConfig+0x532>
 8002b66:	e01a      	b.n	8002b9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7fd fe76 	bl	8000858 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b6e:	e00f      	b.n	8002b90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7fd fe72 	bl	8000858 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d906      	bls.n	8002b90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e15f      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b90:	4baa      	ldr	r3, [pc, #680]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e8      	bne.n	8002b70 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba4:	4ba5      	ldr	r3, [pc, #660]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	4aa4      	ldr	r2, [pc, #656]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d03c      	beq.n	8002c36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01c      	beq.n	8002bfe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bc4:	4b9d      	ldr	r3, [pc, #628]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bca:	4a9c      	ldr	r2, [pc, #624]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fd fe40 	bl	8000858 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bdc:	f7fd fe3c 	bl	8000858 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e12b      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bee:	4b93      	ldr	r3, [pc, #588]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ef      	beq.n	8002bdc <HAL_RCC_OscConfig+0x5cc>
 8002bfc:	e01b      	b.n	8002c36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bfe:	4b8f      	ldr	r3, [pc, #572]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c04:	4a8d      	ldr	r2, [pc, #564]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0e:	f7fd fe23 	bl	8000858 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c16:	f7fd fe1f 	bl	8000858 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e10e      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c28:	4b84      	ldr	r3, [pc, #528]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1ef      	bne.n	8002c16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8102 	beq.w	8002e44 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	f040 80c5 	bne.w	8002dd4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c4a:	4b7c      	ldr	r3, [pc, #496]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f003 0203 	and.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d12c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d123      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d113      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9a:	085b      	lsrs	r3, r3, #1
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d109      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d067      	beq.n	8002d88 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d062      	beq.n	8002d84 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cbe:	4b5f      	ldr	r3, [pc, #380]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0bb      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cce:	4b5b      	ldr	r3, [pc, #364]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a5a      	ldr	r2, [pc, #360]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002cd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cd8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cda:	f7fd fdbd 	bl	8000858 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7fd fdb9 	bl	8000858 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0a8      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf4:	4b51      	ldr	r3, [pc, #324]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f0      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d00:	4b4e      	ldr	r3, [pc, #312]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	4b4e      	ldr	r3, [pc, #312]	; (8002e40 <HAL_RCC_OscConfig+0x830>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d10:	3a01      	subs	r2, #1
 8002d12:	0112      	lsls	r2, r2, #4
 8002d14:	4311      	orrs	r1, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d1a:	0212      	lsls	r2, r2, #8
 8002d1c:	4311      	orrs	r1, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d22:	0852      	lsrs	r2, r2, #1
 8002d24:	3a01      	subs	r2, #1
 8002d26:	0552      	lsls	r2, r2, #21
 8002d28:	4311      	orrs	r1, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d2e:	0852      	lsrs	r2, r2, #1
 8002d30:	3a01      	subs	r2, #1
 8002d32:	0652      	lsls	r2, r2, #25
 8002d34:	4311      	orrs	r1, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d3a:	06d2      	lsls	r2, r2, #27
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	493f      	ldr	r1, [pc, #252]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d44:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a3c      	ldr	r2, [pc, #240]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d50:	4b3a      	ldr	r3, [pc, #232]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a39      	ldr	r2, [pc, #228]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d5c:	f7fd fd7c 	bl	8000858 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fd fd78 	bl	8000858 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e067      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d76:	4b31      	ldr	r3, [pc, #196]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d82:	e05f      	b.n	8002e44 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e05e      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d88:	4b2c      	ldr	r3, [pc, #176]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d157      	bne.n	8002e44 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d94:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a28      	ldr	r2, [pc, #160]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002da0:	4b26      	ldr	r3, [pc, #152]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a25      	ldr	r2, [pc, #148]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002daa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dac:	f7fd fd54 	bl	8000858 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7fd fd50 	bl	8000858 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e03f      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
 8002dd2:	e037      	b.n	8002e44 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d02d      	beq.n	8002e36 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002de0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002de4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d105      	bne.n	8002dfe <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002df2:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002df8:	f023 0303 	bic.w	r3, r3, #3
 8002dfc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	4a0e      	ldr	r2, [pc, #56]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002e04:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7fd fd23 	bl	8000858 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e16:	f7fd fd1f 	bl	8000858 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e00e      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <HAL_RCC_OscConfig+0x82c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x806>
 8002e34:	e006      	b.n	8002e44 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e005      	b.n	8002e46 <HAL_RCC_OscConfig+0x836>
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop

08002e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0c8      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e64:	4b66      	ldr	r3, [pc, #408]	; (8003000 <HAL_RCC_ClockConfig+0x1b0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d910      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b63      	ldr	r3, [pc, #396]	; (8003000 <HAL_RCC_ClockConfig+0x1b0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 0207 	bic.w	r2, r3, #7
 8002e7a:	4961      	ldr	r1, [pc, #388]	; (8003000 <HAL_RCC_ClockConfig+0x1b0>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b5f      	ldr	r3, [pc, #380]	; (8003000 <HAL_RCC_ClockConfig+0x1b0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0b0      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d04c      	beq.n	8002f3a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d107      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ea8:	4b56      	ldr	r3, [pc, #344]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d121      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e09e      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec0:	4b50      	ldr	r3, [pc, #320]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d115      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e092      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ed8:	4b4a      	ldr	r3, [pc, #296]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e086      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee8:	4b46      	ldr	r3, [pc, #280]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e07e      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ef8:	4b42      	ldr	r3, [pc, #264]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 0203 	bic.w	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	493f      	ldr	r1, [pc, #252]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0a:	f7fd fca5 	bl	8000858 <HAL_GetTick>
 8002f0e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f12:	f7fd fca1 	bl	8000858 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e066      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f28:	4b36      	ldr	r3, [pc, #216]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 020c 	and.w	r2, r3, #12
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d1eb      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f46:	4b2f      	ldr	r3, [pc, #188]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	492c      	ldr	r1, [pc, #176]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f58:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HAL_RCC_ClockConfig+0x1b0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d210      	bcs.n	8002f88 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f66:	4b26      	ldr	r3, [pc, #152]	; (8003000 <HAL_RCC_ClockConfig+0x1b0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 0207 	bic.w	r2, r3, #7
 8002f6e:	4924      	ldr	r1, [pc, #144]	; (8003000 <HAL_RCC_ClockConfig+0x1b0>)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b22      	ldr	r3, [pc, #136]	; (8003000 <HAL_RCC_ClockConfig+0x1b0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e036      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4918      	ldr	r1, [pc, #96]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fb2:	4b14      	ldr	r3, [pc, #80]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4910      	ldr	r1, [pc, #64]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fc6:	f000 f825 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <HAL_RCC_ClockConfig+0x1b4>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	490c      	ldr	r1, [pc, #48]	; (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd8:	5ccb      	ldrb	r3, [r1, r3]
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fbe4 	bl	80007b8 <HAL_InitTick>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ff4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40022000 	.word	0x40022000
 8003004:	40021000 	.word	0x40021000
 8003008:	0800875c 	.word	0x0800875c
 800300c:	20000000 	.word	0x20000000
 8003010:	20000004 	.word	0x20000004

08003014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	; 0x24
 8003018:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003022:	4b3e      	ldr	r3, [pc, #248]	; (800311c <HAL_RCC_GetSysClockFreq+0x108>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800302c:	4b3b      	ldr	r3, [pc, #236]	; (800311c <HAL_RCC_GetSysClockFreq+0x108>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x34>
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b0c      	cmp	r3, #12
 8003040:	d121      	bne.n	8003086 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d11e      	bne.n	8003086 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003048:	4b34      	ldr	r3, [pc, #208]	; (800311c <HAL_RCC_GetSysClockFreq+0x108>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d107      	bne.n	8003064 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003054:	4b31      	ldr	r3, [pc, #196]	; (800311c <HAL_RCC_GetSysClockFreq+0x108>)
 8003056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	e005      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003064:	4b2d      	ldr	r3, [pc, #180]	; (800311c <HAL_RCC_GetSysClockFreq+0x108>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003070:	4a2b      	ldr	r2, [pc, #172]	; (8003120 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003078:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10d      	bne.n	800309c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003084:	e00a      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b04      	cmp	r3, #4
 800308a:	d102      	bne.n	8003092 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800308c:	4b25      	ldr	r3, [pc, #148]	; (8003124 <HAL_RCC_GetSysClockFreq+0x110>)
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e004      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d101      	bne.n	800309c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003098:	4b23      	ldr	r3, [pc, #140]	; (8003128 <HAL_RCC_GetSysClockFreq+0x114>)
 800309a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	d134      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030a2:	4b1e      	ldr	r3, [pc, #120]	; (800311c <HAL_RCC_GetSysClockFreq+0x108>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d003      	beq.n	80030ba <HAL_RCC_GetSysClockFreq+0xa6>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d003      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0xac>
 80030b8:	e005      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030ba:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <HAL_RCC_GetSysClockFreq+0x110>)
 80030bc:	617b      	str	r3, [r7, #20]
      break;
 80030be:	e005      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <HAL_RCC_GetSysClockFreq+0x114>)
 80030c2:	617b      	str	r3, [r7, #20]
      break;
 80030c4:	e002      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	617b      	str	r3, [r7, #20]
      break;
 80030ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030cc:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_RCC_GetSysClockFreq+0x108>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	3301      	adds	r3, #1
 80030d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <HAL_RCC_GetSysClockFreq+0x108>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	0a1b      	lsrs	r3, r3, #8
 80030e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	fb02 f203 	mul.w	r2, r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030f2:	4b0a      	ldr	r3, [pc, #40]	; (800311c <HAL_RCC_GetSysClockFreq+0x108>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	0e5b      	lsrs	r3, r3, #25
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	3301      	adds	r3, #1
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800310c:	69bb      	ldr	r3, [r7, #24]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3724      	adds	r7, #36	; 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
 8003120:	0800876c 	.word	0x0800876c
 8003124:	00f42400 	.word	0x00f42400
 8003128:	007a1200 	.word	0x007a1200

0800312c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003134:	2300      	movs	r3, #0
 8003136:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003138:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003144:	f7ff f9f0 	bl	8002528 <HAL_PWREx_GetVoltageRange>
 8003148:	6178      	str	r0, [r7, #20]
 800314a:	e014      	b.n	8003176 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	4a24      	ldr	r2, [pc, #144]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003156:	6593      	str	r3, [r2, #88]	; 0x58
 8003158:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003164:	f7ff f9e0 	bl	8002528 <HAL_PWREx_GetVoltageRange>
 8003168:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800316a:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003174:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317c:	d10b      	bne.n	8003196 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b80      	cmp	r3, #128	; 0x80
 8003182:	d919      	bls.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2ba0      	cmp	r3, #160	; 0xa0
 8003188:	d902      	bls.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800318a:	2302      	movs	r3, #2
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	e013      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003190:	2301      	movs	r3, #1
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	e010      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b80      	cmp	r3, #128	; 0x80
 800319a:	d902      	bls.n	80031a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800319c:	2303      	movs	r3, #3
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	e00a      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b80      	cmp	r3, #128	; 0x80
 80031a6:	d102      	bne.n	80031ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031a8:	2302      	movs	r3, #2
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e004      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b70      	cmp	r3, #112	; 0x70
 80031b2:	d101      	bne.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031b4:	2301      	movs	r3, #1
 80031b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 0207 	bic.w	r2, r3, #7
 80031c0:	4909      	ldr	r1, [pc, #36]	; (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031c8:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d001      	beq.n	80031da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40022000 	.word	0x40022000

080031ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f4:	2300      	movs	r3, #0
 80031f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031f8:	2300      	movs	r3, #0
 80031fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003204:	2b00      	cmp	r3, #0
 8003206:	d031      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003210:	d01a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003212:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003216:	d814      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d009      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800321c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003220:	d10f      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003222:	4bac      	ldr	r3, [pc, #688]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	4aab      	ldr	r2, [pc, #684]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800322e:	e00c      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f9cc 	bl	80035d4 <RCCEx_PLLSAI1_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003240:	e003      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	74fb      	strb	r3, [r7, #19]
      break;
 8003246:	e000      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800324a:	7cfb      	ldrb	r3, [r7, #19]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10b      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003250:	4ba0      	ldr	r3, [pc, #640]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	499d      	ldr	r1, [pc, #628]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003266:	e001      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	7cfb      	ldrb	r3, [r7, #19]
 800326a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8099 	beq.w	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800327e:	4b95      	ldr	r3, [pc, #596]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800328e:	2300      	movs	r3, #0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00d      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	4b8f      	ldr	r3, [pc, #572]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	4a8e      	ldr	r2, [pc, #568]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800329a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329e:	6593      	str	r3, [r2, #88]	; 0x58
 80032a0:	4b8c      	ldr	r3, [pc, #560]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ac:	2301      	movs	r3, #1
 80032ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b0:	4b89      	ldr	r3, [pc, #548]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a88      	ldr	r2, [pc, #544]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80032b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032bc:	f7fd facc 	bl	8000858 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032c2:	e009      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c4:	f7fd fac8 	bl	8000858 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d902      	bls.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	74fb      	strb	r3, [r7, #19]
        break;
 80032d6:	e005      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032d8:	4b7f      	ldr	r3, [pc, #508]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0ef      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d155      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032ea:	4b7a      	ldr	r3, [pc, #488]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01e      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	429a      	cmp	r2, r3
 8003304:	d019      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003306:	4b73      	ldr	r3, [pc, #460]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003310:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003312:	4b70      	ldr	r3, [pc, #448]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003318:	4a6e      	ldr	r2, [pc, #440]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800331a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003322:	4b6c      	ldr	r3, [pc, #432]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003328:	4a6a      	ldr	r2, [pc, #424]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800332a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003332:	4a68      	ldr	r2, [pc, #416]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d016      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fd fa88 	bl	8000858 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334a:	e00b      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fd fa84 	bl	8000858 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d902      	bls.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	74fb      	strb	r3, [r7, #19]
            break;
 8003362:	e006      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003364:	4b5b      	ldr	r3, [pc, #364]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0ec      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003378:	4b56      	ldr	r3, [pc, #344]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003386:	4953      	ldr	r1, [pc, #332]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800338e:	e004      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	74bb      	strb	r3, [r7, #18]
 8003394:	e001      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339a:	7c7b      	ldrb	r3, [r7, #17]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b4c      	ldr	r3, [pc, #304]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	4a4b      	ldr	r2, [pc, #300]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b8:	4b46      	ldr	r3, [pc, #280]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f023 0203 	bic.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4943      	ldr	r1, [pc, #268]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033da:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f023 020c 	bic.w	r2, r3, #12
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	493a      	ldr	r1, [pc, #232]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033fc:	4b35      	ldr	r3, [pc, #212]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	4932      	ldr	r1, [pc, #200]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800341e:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342c:	4929      	ldr	r1, [pc, #164]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003440:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	4921      	ldr	r1, [pc, #132]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003462:	4b1c      	ldr	r3, [pc, #112]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	4918      	ldr	r1, [pc, #96]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4910      	ldr	r1, [pc, #64]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d02c      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034a6:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	4907      	ldr	r1, [pc, #28]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034c4:	d10a      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c6:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	4a02      	ldr	r2, [pc, #8]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034d0:	60d3      	str	r3, [r2, #12]
 80034d2:	e015      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e4:	d10c      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2101      	movs	r1, #1
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 f871 	bl	80035d4 <RCCEx_PLLSAI1_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d028      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800350c:	4b30      	ldr	r3, [pc, #192]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	492d      	ldr	r1, [pc, #180]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800352a:	d106      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800352c:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a27      	ldr	r2, [pc, #156]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003536:	60d3      	str	r3, [r2, #12]
 8003538:	e011      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003542:	d10c      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	2101      	movs	r1, #1
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f842 	bl	80035d4 <RCCEx_PLLSAI1_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800355a:	7cfb      	ldrb	r3, [r7, #19]
 800355c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01c      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800356a:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003578:	4915      	ldr	r1, [pc, #84]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	2102      	movs	r1, #2
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f81f 	bl	80035d4 <RCCEx_PLLSAI1_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035b0:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035be:	4904      	ldr	r1, [pc, #16]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000

080035d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035e2:	4b74      	ldr	r3, [pc, #464]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d018      	beq.n	8003620 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ee:	4b71      	ldr	r3, [pc, #452]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0203 	and.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d10d      	bne.n	800361a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
       ||
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003606:	4b6b      	ldr	r3, [pc, #428]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
       ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d047      	beq.n	80036aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	e044      	b.n	80036aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d018      	beq.n	800365a <RCCEx_PLLSAI1_Config+0x86>
 8003628:	2b03      	cmp	r3, #3
 800362a:	d825      	bhi.n	8003678 <RCCEx_PLLSAI1_Config+0xa4>
 800362c:	2b01      	cmp	r3, #1
 800362e:	d002      	beq.n	8003636 <RCCEx_PLLSAI1_Config+0x62>
 8003630:	2b02      	cmp	r3, #2
 8003632:	d009      	beq.n	8003648 <RCCEx_PLLSAI1_Config+0x74>
 8003634:	e020      	b.n	8003678 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003636:	4b5f      	ldr	r3, [pc, #380]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d11d      	bne.n	800367e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003646:	e01a      	b.n	800367e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003648:	4b5a      	ldr	r3, [pc, #360]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d116      	bne.n	8003682 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003658:	e013      	b.n	8003682 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800365a:	4b56      	ldr	r3, [pc, #344]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003666:	4b53      	ldr	r3, [pc, #332]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003676:	e006      	b.n	8003686 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      break;
 800367c:	e004      	b.n	8003688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800367e:	bf00      	nop
 8003680:	e002      	b.n	8003688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003682:	bf00      	nop
 8003684:	e000      	b.n	8003688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003686:	bf00      	nop
    }

    if(status == HAL_OK)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10d      	bne.n	80036aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800368e:	4b49      	ldr	r3, [pc, #292]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6819      	ldr	r1, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	430b      	orrs	r3, r1
 80036a4:	4943      	ldr	r1, [pc, #268]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d17c      	bne.n	80037aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036b0:	4b40      	ldr	r3, [pc, #256]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a3f      	ldr	r2, [pc, #252]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036bc:	f7fd f8cc 	bl	8000858 <HAL_GetTick>
 80036c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036c2:	e009      	b.n	80036d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c4:	f7fd f8c8 	bl	8000858 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d902      	bls.n	80036d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	73fb      	strb	r3, [r7, #15]
        break;
 80036d6:	e005      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036d8:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ef      	bne.n	80036c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d15f      	bne.n	80037aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d110      	bne.n	8003712 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036f0:	4b30      	ldr	r3, [pc, #192]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80036f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6892      	ldr	r2, [r2, #8]
 8003700:	0211      	lsls	r1, r2, #8
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68d2      	ldr	r2, [r2, #12]
 8003706:	06d2      	lsls	r2, r2, #27
 8003708:	430a      	orrs	r2, r1
 800370a:	492a      	ldr	r1, [pc, #168]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	610b      	str	r3, [r1, #16]
 8003710:	e027      	b.n	8003762 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d112      	bne.n	800373e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003718:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003720:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6892      	ldr	r2, [r2, #8]
 8003728:	0211      	lsls	r1, r2, #8
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6912      	ldr	r2, [r2, #16]
 800372e:	0852      	lsrs	r2, r2, #1
 8003730:	3a01      	subs	r2, #1
 8003732:	0552      	lsls	r2, r2, #21
 8003734:	430a      	orrs	r2, r1
 8003736:	491f      	ldr	r1, [pc, #124]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003738:	4313      	orrs	r3, r2
 800373a:	610b      	str	r3, [r1, #16]
 800373c:	e011      	b.n	8003762 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800373e:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003746:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6892      	ldr	r2, [r2, #8]
 800374e:	0211      	lsls	r1, r2, #8
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6952      	ldr	r2, [r2, #20]
 8003754:	0852      	lsrs	r2, r2, #1
 8003756:	3a01      	subs	r2, #1
 8003758:	0652      	lsls	r2, r2, #25
 800375a:	430a      	orrs	r2, r1
 800375c:	4915      	ldr	r1, [pc, #84]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800375e:	4313      	orrs	r3, r2
 8003760:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003762:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800376c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376e:	f7fd f873 	bl	8000858 <HAL_GetTick>
 8003772:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003774:	e009      	b.n	800378a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003776:	f7fd f86f 	bl	8000858 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d902      	bls.n	800378a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	73fb      	strb	r3, [r7, #15]
          break;
 8003788:	e005      	b.n	8003796 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800378a:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0ef      	beq.n	8003776 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d106      	bne.n	80037aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	4903      	ldr	r1, [pc, #12]	; (80037b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000

080037b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e095      	b.n	80038f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d108      	bne.n	80037e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037da:	d009      	beq.n	80037f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]
 80037e2:	e005      	b.n	80037f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fc feae 	bl	800056c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003826:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003830:	d902      	bls.n	8003838 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e002      	b.n	800383e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800383c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003846:	d007      	beq.n	8003858 <HAL_SPI_Init+0xa0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003850:	d002      	beq.n	8003858 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	ea42 0103 	orr.w	r1, r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	0c1b      	lsrs	r3, r3, #16
 80038b4:	f003 0204 	and.w	r2, r3, #4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038d4:	ea42 0103 	orr.w	r1, r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038fe:	b084      	sub	sp, #16
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	f107 0014 	add.w	r0, r7, #20
 800390c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	b004      	add	sp, #16
 800391e:	4770      	bx	lr

08003920 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003930:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003934:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	b29a      	uxth	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800394e:	b480      	push	{r7}
 8003950:	b085      	sub	sp, #20
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003956:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800395a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	b29b      	uxth	r3, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	b29b      	uxth	r3, r3
 800396c:	4013      	ands	r3, r2
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800399e:	b084      	sub	sp, #16
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	f107 0014 	add.w	r0, r7, #20
 80039ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	b004      	add	sp, #16
 80039de:	4770      	bx	lr

080039e0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b09b      	sub	sp, #108	; 0x6c
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a06:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	78db      	ldrb	r3, [r3, #3]
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d81f      	bhi.n	8003a52 <USB_ActivateEndpoint+0x72>
 8003a12:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <USB_ActivateEndpoint+0x38>)
 8003a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a18:	08003a29 	.word	0x08003a29
 8003a1c:	08003a45 	.word	0x08003a45
 8003a20:	08003a5b 	.word	0x08003a5b
 8003a24:	08003a37 	.word	0x08003a37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003a28:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a30:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003a34:	e012      	b.n	8003a5c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003a36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a3a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003a3e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003a42:	e00b      	b.n	8003a5c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003a44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a4c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003a50:	e004      	b.n	8003a5c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003a58:	e000      	b.n	8003a5c <USB_ActivateEndpoint+0x7c>
      break;
 8003a5a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	441a      	add	r2, r3
 8003a66:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	b21b      	sxth	r3, r3
 8003a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	b21a      	sxth	r2, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	b21b      	sxth	r3, r3
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	b21b      	sxth	r3, r3
 8003aa2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	441a      	add	r2, r3
 8003ab0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	7b1b      	ldrb	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f040 8149 	bne.w	8003d64 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	785b      	ldrb	r3, [r3, #1]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8084 	beq.w	8003be4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	4413      	add	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	00da      	lsls	r2, r3, #3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	88db      	ldrh	r3, [r3, #6]
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	81fb      	strh	r3, [r7, #14]
 8003b1e:	89fb      	ldrh	r3, [r7, #14]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01b      	beq.n	8003b60 <USB_ActivateEndpoint+0x180>
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	81bb      	strh	r3, [r7, #12]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	441a      	add	r2, r3
 8003b4a:	89bb      	ldrh	r3, [r7, #12]
 8003b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	78db      	ldrb	r3, [r3, #3]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d020      	beq.n	8003baa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b7e:	813b      	strh	r3, [r7, #8]
 8003b80:	893b      	ldrh	r3, [r7, #8]
 8003b82:	f083 0320 	eor.w	r3, r3, #32
 8003b86:	813b      	strh	r3, [r7, #8]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	441a      	add	r2, r3
 8003b92:	893b      	ldrh	r3, [r7, #8]
 8003b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	8013      	strh	r3, [r2, #0]
 8003ba8:	e27f      	b.n	80040aa <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc0:	817b      	strh	r3, [r7, #10]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	441a      	add	r2, r3
 8003bcc:	897b      	ldrh	r3, [r7, #10]
 8003bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	8013      	strh	r3, [r2, #0]
 8003be2:	e262      	b.n	80040aa <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	4413      	add	r3, r2
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	00da      	lsls	r2, r3, #3
 8003bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c00:	4413      	add	r3, r2
 8003c02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	88db      	ldrh	r3, [r3, #6]
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	4413      	add	r3, r2
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	00da      	lsls	r2, r3, #3
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	4413      	add	r3, r2
 8003c36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c3a:	623b      	str	r3, [r7, #32]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d112      	bne.n	8003c6a <USB_ActivateEndpoint+0x28a>
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	801a      	strh	r2, [r3, #0]
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	801a      	strh	r2, [r3, #0]
 8003c68:	e02f      	b.n	8003cca <USB_ActivateEndpoint+0x2ea>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b3e      	cmp	r3, #62	; 0x3e
 8003c70:	d813      	bhi.n	8003c9a <USB_ActivateEndpoint+0x2ba>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	663b      	str	r3, [r7, #96]	; 0x60
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <USB_ActivateEndpoint+0x2ac>
 8003c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c88:	3301      	adds	r3, #1
 8003c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	029b      	lsls	r3, r3, #10
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	801a      	strh	r2, [r3, #0]
 8003c98:	e017      	b.n	8003cca <USB_ActivateEndpoint+0x2ea>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d102      	bne.n	8003cb4 <USB_ActivateEndpoint+0x2d4>
 8003cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	663b      	str	r3, [r7, #96]	; 0x60
 8003cb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	029b      	lsls	r3, r3, #10
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	83fb      	strh	r3, [r7, #30]
 8003cd8:	8bfb      	ldrh	r3, [r7, #30]
 8003cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01b      	beq.n	8003d1a <USB_ActivateEndpoint+0x33a>
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf8:	83bb      	strh	r3, [r7, #28]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	441a      	add	r2, r3
 8003d04:	8bbb      	ldrh	r3, [r7, #28]
 8003d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d30:	837b      	strh	r3, [r7, #26]
 8003d32:	8b7b      	ldrh	r3, [r7, #26]
 8003d34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d38:	837b      	strh	r3, [r7, #26]
 8003d3a:	8b7b      	ldrh	r3, [r7, #26]
 8003d3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d40:	837b      	strh	r3, [r7, #26]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	441a      	add	r2, r3
 8003d4c:	8b7b      	ldrh	r3, [r7, #26]
 8003d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	8013      	strh	r3, [r2, #0]
 8003d62:	e1a2      	b.n	80040aa <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	441a      	add	r2, r3
 8003d88:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d94:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003db0:	4413      	add	r3, r2
 8003db2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	00da      	lsls	r2, r3, #3
 8003dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	891b      	ldrh	r3, [r3, #8]
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd2:	801a      	strh	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	653b      	str	r3, [r7, #80]	; 0x50
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de4:	4413      	add	r3, r2
 8003de6:	653b      	str	r3, [r7, #80]	; 0x50
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	00da      	lsls	r2, r3, #3
 8003dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df0:	4413      	add	r3, r2
 8003df2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	895b      	ldrh	r3, [r3, #10]
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e06:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	785b      	ldrb	r3, [r3, #1]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f040 8091 	bne.w	8003f34 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003e20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01b      	beq.n	8003e62 <USB_ActivateEndpoint+0x482>
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e40:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	441a      	add	r2, r3
 8003e4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	873b      	strh	r3, [r7, #56]	; 0x38
 8003e70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01b      	beq.n	8003eb2 <USB_ActivateEndpoint+0x4d2>
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	441a      	add	r2, r3
 8003e9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003eca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ecc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ed0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003ed2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ed4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ed8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	441a      	add	r2, r3
 8003ee4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f10:	867b      	strh	r3, [r7, #50]	; 0x32
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	441a      	add	r2, r3
 8003f1c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	8013      	strh	r3, [r2, #0]
 8003f32:	e0ba      	b.n	80040aa <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003f44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01d      	beq.n	8003f8c <USB_ActivateEndpoint+0x5ac>
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	441a      	add	r2, r3
 8003f74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003f9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01d      	beq.n	8003fe4 <USB_ActivateEndpoint+0x604>
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	441a      	add	r2, r3
 8003fcc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	78db      	ldrb	r3, [r3, #3]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d024      	beq.n	8004036 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004002:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004006:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800400a:	f083 0320 	eor.w	r3, r3, #32
 800400e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	441a      	add	r2, r3
 800401c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800402c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004030:	b29b      	uxth	r3, r3
 8004032:	8013      	strh	r3, [r2, #0]
 8004034:	e01d      	b.n	8004072 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b29b      	uxth	r3, r3
 8004044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800404c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	441a      	add	r2, r3
 800405a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800405e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406e:	b29b      	uxth	r3, r3
 8004070:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004088:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	441a      	add	r2, r3
 8004094:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800409e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80040aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	376c      	adds	r7, #108	; 0x6c
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop

080040bc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040bc:	b480      	push	{r7}
 80040be:	b08d      	sub	sp, #52	; 0x34
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	7b1b      	ldrb	r3, [r3, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f040 808e 	bne.w	80041ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	785b      	ldrb	r3, [r3, #1]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d044      	beq.n	8004162 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	81bb      	strh	r3, [r7, #12]
 80040e6:	89bb      	ldrh	r3, [r7, #12]
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01b      	beq.n	8004128 <USB_DeactivateEndpoint+0x6c>
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004106:	817b      	strh	r3, [r7, #10]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	441a      	add	r2, r3
 8004112:	897b      	ldrh	r3, [r7, #10]
 8004114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800411c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004120:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004124:	b29b      	uxth	r3, r3
 8004126:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29b      	uxth	r3, r3
 8004136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413e:	813b      	strh	r3, [r7, #8]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	441a      	add	r2, r3
 800414a:	893b      	ldrh	r3, [r7, #8]
 800414c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800415c:	b29b      	uxth	r3, r3
 800415e:	8013      	strh	r3, [r2, #0]
 8004160:	e192      	b.n	8004488 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	827b      	strh	r3, [r7, #18]
 8004170:	8a7b      	ldrh	r3, [r7, #18]
 8004172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01b      	beq.n	80041b2 <USB_DeactivateEndpoint+0xf6>
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004190:	823b      	strh	r3, [r7, #16]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	441a      	add	r2, r3
 800419c:	8a3b      	ldrh	r3, [r7, #16]
 800419e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c8:	81fb      	strh	r3, [r7, #14]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	441a      	add	r2, r3
 80041d4:	89fb      	ldrh	r3, [r7, #14]
 80041d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	8013      	strh	r3, [r2, #0]
 80041ea:	e14d      	b.n	8004488 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	785b      	ldrb	r3, [r3, #1]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f040 80a5 	bne.w	8004340 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	843b      	strh	r3, [r7, #32]
 8004204:	8c3b      	ldrh	r3, [r7, #32]
 8004206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01b      	beq.n	8004246 <USB_DeactivateEndpoint+0x18a>
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	83fb      	strh	r3, [r7, #30]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	8bfb      	ldrh	r3, [r7, #30]
 8004232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800423e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004242:	b29b      	uxth	r3, r3
 8004244:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	83bb      	strh	r3, [r7, #28]
 8004254:	8bbb      	ldrh	r3, [r7, #28]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01b      	beq.n	8004296 <USB_DeactivateEndpoint+0x1da>
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004274:	837b      	strh	r3, [r7, #26]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	441a      	add	r2, r3
 8004280:	8b7b      	ldrh	r3, [r7, #26]
 8004282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800428a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004292:	b29b      	uxth	r3, r3
 8004294:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ac:	833b      	strh	r3, [r7, #24]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	441a      	add	r2, r3
 80042b8:	8b3b      	ldrh	r3, [r7, #24]
 80042ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e4:	82fb      	strh	r3, [r7, #22]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	441a      	add	r2, r3
 80042f0:	8afb      	ldrh	r3, [r7, #22]
 80042f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004302:	b29b      	uxth	r3, r3
 8004304:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800431c:	82bb      	strh	r3, [r7, #20]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	441a      	add	r2, r3
 8004328:	8abb      	ldrh	r3, [r7, #20]
 800432a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800432e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433a:	b29b      	uxth	r3, r3
 800433c:	8013      	strh	r3, [r2, #0]
 800433e:	e0a3      	b.n	8004488 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800434e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01b      	beq.n	8004390 <USB_DeactivateEndpoint+0x2d4>
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	441a      	add	r2, r3
 800437a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800437c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438c:	b29b      	uxth	r3, r3
 800438e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800439e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80043a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01b      	beq.n	80043e0 <USB_DeactivateEndpoint+0x324>
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	853b      	strh	r3, [r7, #40]	; 0x28
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	441a      	add	r2, r3
 80043ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043dc:	b29b      	uxth	r3, r3
 80043de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800440c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004414:	b29b      	uxth	r3, r3
 8004416:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800442e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800443c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444c:	b29b      	uxth	r3, r3
 800444e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004466:	847b      	strh	r3, [r7, #34]	; 0x22
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	441a      	add	r2, r3
 8004472:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004484:	b29b      	uxth	r3, r3
 8004486:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3734      	adds	r7, #52	; 0x34
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b0c4      	sub	sp, #272	; 0x110
 800449a:	af00      	add	r7, sp, #0
 800449c:	1d3b      	adds	r3, r7, #4
 800449e:	6018      	str	r0, [r3, #0]
 80044a0:	463b      	mov	r3, r7
 80044a2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044a4:	463b      	mov	r3, r7
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	785b      	ldrb	r3, [r3, #1]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	f040 8566 	bne.w	8004f7c <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80044b0:	463b      	mov	r3, r7
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	463b      	mov	r3, r7
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d905      	bls.n	80044cc <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80044c0:	463b      	mov	r3, r7
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80044ca:	e004      	b.n	80044d6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80044cc:	463b      	mov	r3, r7
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80044d6:	463b      	mov	r3, r7
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	7b1b      	ldrb	r3, [r3, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d12c      	bne.n	800453a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80044e0:	463b      	mov	r3, r7
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6959      	ldr	r1, [r3, #20]
 80044e6:	463b      	mov	r3, r7
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	88da      	ldrh	r2, [r3, #6]
 80044ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	1d38      	adds	r0, r7, #4
 80044f4:	6800      	ldr	r0, [r0, #0]
 80044f6:	f001 fa58 	bl	80059aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	1d3b      	adds	r3, r7, #4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004508:	b29b      	uxth	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	4413      	add	r3, r2
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	463b      	mov	r3, r7
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	00da      	lsls	r2, r3, #3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	4413      	add	r3, r2
 800451e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8004522:	f107 0310 	add.w	r3, r7, #16
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800452c:	b29a      	uxth	r2, r3
 800452e:	f107 0310 	add.w	r3, r7, #16
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	801a      	strh	r2, [r3, #0]
 8004536:	f000 bcec 	b.w	8004f12 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800453a:	463b      	mov	r3, r7
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	78db      	ldrb	r3, [r3, #3]
 8004540:	2b02      	cmp	r3, #2
 8004542:	f040 8356 	bne.w	8004bf2 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004546:	463b      	mov	r3, r7
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6a1a      	ldr	r2, [r3, #32]
 800454c:	463b      	mov	r3, r7
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	429a      	cmp	r2, r3
 8004554:	f240 82fa 	bls.w	8004b4c <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004558:	1d3b      	adds	r3, r7, #4
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	463b      	mov	r3, r7
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	b29b      	uxth	r3, r3
 800456a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004572:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004576:	1d3b      	adds	r3, r7, #4
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	463b      	mov	r3, r7
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	441a      	add	r2, r3
 8004584:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004590:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004598:	b29b      	uxth	r3, r3
 800459a:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 800459c:	463b      	mov	r3, r7
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80045a6:	463b      	mov	r3, r7
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6a1a      	ldr	r2, [r3, #32]
 80045ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045b0:	1ad2      	subs	r2, r2, r3
 80045b2:	463b      	mov	r3, r7
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80045b8:	1d3b      	adds	r3, r7, #4
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	463b      	mov	r3, r7
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 815e 	beq.w	8004890 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045d4:	1d3b      	adds	r3, r7, #4
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	637b      	str	r3, [r7, #52]	; 0x34
 80045da:	463b      	mov	r3, r7
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d164      	bne.n	80046ae <USB_EPStartXfer+0x218>
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ea:	1d3b      	adds	r3, r7, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f8:	4413      	add	r3, r2
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045fc:	463b      	mov	r3, r7
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	00da      	lsls	r2, r3, #3
 8004604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004606:	4413      	add	r3, r2
 8004608:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800460c:	62bb      	str	r3, [r7, #40]	; 0x28
 800460e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004612:	2b00      	cmp	r3, #0
 8004614:	d112      	bne.n	800463c <USB_EPStartXfer+0x1a6>
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004620:	b29a      	uxth	r2, r3
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	801a      	strh	r2, [r3, #0]
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004634:	b29a      	uxth	r2, r3
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	801a      	strh	r2, [r3, #0]
 800463a:	e054      	b.n	80046e6 <USB_EPStartXfer+0x250>
 800463c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004640:	2b3e      	cmp	r3, #62	; 0x3e
 8004642:	d817      	bhi.n	8004674 <USB_EPStartXfer+0x1de>
 8004644:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800464e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <USB_EPStartXfer+0x1ce>
 800465a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465e:	3301      	adds	r3, #1
 8004660:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004668:	b29b      	uxth	r3, r3
 800466a:	029b      	lsls	r3, r3, #10
 800466c:	b29a      	uxth	r2, r3
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	801a      	strh	r2, [r3, #0]
 8004672:	e038      	b.n	80046e6 <USB_EPStartXfer+0x250>
 8004674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800467e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <USB_EPStartXfer+0x1fe>
 800468a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800468e:	3b01      	subs	r3, #1
 8004690:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004698:	b29b      	uxth	r3, r3
 800469a:	029b      	lsls	r3, r3, #10
 800469c:	b29b      	uxth	r3, r3
 800469e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	801a      	strh	r2, [r3, #0]
 80046ac:	e01b      	b.n	80046e6 <USB_EPStartXfer+0x250>
 80046ae:	463b      	mov	r3, r7
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	785b      	ldrb	r3, [r3, #1]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d116      	bne.n	80046e6 <USB_EPStartXfer+0x250>
 80046b8:	1d3b      	adds	r3, r7, #4
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	461a      	mov	r2, r3
 80046c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c6:	4413      	add	r3, r2
 80046c8:	637b      	str	r3, [r7, #52]	; 0x34
 80046ca:	463b      	mov	r3, r7
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	00da      	lsls	r2, r3, #3
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	4413      	add	r3, r2
 80046d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046da:	633b      	str	r3, [r7, #48]	; 0x30
 80046dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046e6:	463b      	mov	r3, r7
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	895b      	ldrh	r3, [r3, #10]
 80046ec:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046f0:	463b      	mov	r3, r7
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6959      	ldr	r1, [r3, #20]
 80046f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004700:	1d38      	adds	r0, r7, #4
 8004702:	6800      	ldr	r0, [r0, #0]
 8004704:	f001 f951 	bl	80059aa <USB_WritePMA>
            ep->xfer_buff += len;
 8004708:	463b      	mov	r3, r7
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004712:	441a      	add	r2, r3
 8004714:	463b      	mov	r3, r7
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800471a:	463b      	mov	r3, r7
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6a1a      	ldr	r2, [r3, #32]
 8004720:	463b      	mov	r3, r7
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	429a      	cmp	r2, r3
 8004728:	d90e      	bls.n	8004748 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800472a:	463b      	mov	r3, r7
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8004734:	463b      	mov	r3, r7
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6a1a      	ldr	r2, [r3, #32]
 800473a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800473e:	1ad2      	subs	r2, r2, r3
 8004740:	463b      	mov	r3, r7
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	621a      	str	r2, [r3, #32]
 8004746:	e008      	b.n	800475a <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004748:	463b      	mov	r3, r7
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8004752:	463b      	mov	r3, r7
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2200      	movs	r2, #0
 8004758:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800475a:	463b      	mov	r3, r7
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	785b      	ldrb	r3, [r3, #1]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d164      	bne.n	800482e <USB_EPStartXfer+0x398>
 8004764:	1d3b      	adds	r3, r7, #4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004772:	b29b      	uxth	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4413      	add	r3, r2
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	463b      	mov	r3, r7
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	00da      	lsls	r2, r3, #3
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	4413      	add	r3, r2
 8004788:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004792:	2b00      	cmp	r3, #0
 8004794:	d112      	bne.n	80047bc <USB_EPStartXfer+0x326>
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	801a      	strh	r2, [r3, #0]
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	801a      	strh	r2, [r3, #0]
 80047ba:	e057      	b.n	800486c <USB_EPStartXfer+0x3d6>
 80047bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047c0:	2b3e      	cmp	r3, #62	; 0x3e
 80047c2:	d817      	bhi.n	80047f4 <USB_EPStartXfer+0x35e>
 80047c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d004      	beq.n	80047e4 <USB_EPStartXfer+0x34e>
 80047da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047de:	3301      	adds	r3, #1
 80047e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	029b      	lsls	r3, r3, #10
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	801a      	strh	r2, [r3, #0]
 80047f2:	e03b      	b.n	800486c <USB_EPStartXfer+0x3d6>
 80047f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	2b00      	cmp	r3, #0
 8004808:	d104      	bne.n	8004814 <USB_EPStartXfer+0x37e>
 800480a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800480e:	3b01      	subs	r3, #1
 8004810:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004814:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004818:	b29b      	uxth	r3, r3
 800481a:	029b      	lsls	r3, r3, #10
 800481c:	b29b      	uxth	r3, r3
 800481e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004826:	b29a      	uxth	r2, r3
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	e01e      	b.n	800486c <USB_EPStartXfer+0x3d6>
 800482e:	463b      	mov	r3, r7
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d119      	bne.n	800486c <USB_EPStartXfer+0x3d6>
 8004838:	1d3b      	adds	r3, r7, #4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 800483e:	1d3b      	adds	r3, r7, #4
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004846:	b29b      	uxth	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	4413      	add	r3, r2
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
 8004850:	463b      	mov	r3, r7
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	00da      	lsls	r2, r3, #3
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	4413      	add	r3, r2
 800485c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004860:	623b      	str	r3, [r7, #32]
 8004862:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004866:	b29a      	uxth	r2, r3
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800486c:	463b      	mov	r3, r7
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	891b      	ldrh	r3, [r3, #8]
 8004872:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004876:	463b      	mov	r3, r7
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6959      	ldr	r1, [r3, #20]
 800487c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004880:	b29b      	uxth	r3, r3
 8004882:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004886:	1d38      	adds	r0, r7, #4
 8004888:	6800      	ldr	r0, [r0, #0]
 800488a:	f001 f88e 	bl	80059aa <USB_WritePMA>
 800488e:	e340      	b.n	8004f12 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004890:	463b      	mov	r3, r7
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	785b      	ldrb	r3, [r3, #1]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d164      	bne.n	8004964 <USB_EPStartXfer+0x4ce>
 800489a:	1d3b      	adds	r3, r7, #4
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a0:	1d3b      	adds	r3, r7, #4
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ae:	4413      	add	r3, r2
 80048b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b2:	463b      	mov	r3, r7
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	00da      	lsls	r2, r3, #3
 80048ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048bc:	4413      	add	r3, r2
 80048be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d112      	bne.n	80048f2 <USB_EPStartXfer+0x45c>
 80048cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048da:	801a      	strh	r2, [r3, #0]
 80048dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ee:	801a      	strh	r2, [r3, #0]
 80048f0:	e057      	b.n	80049a2 <USB_EPStartXfer+0x50c>
 80048f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048f6:	2b3e      	cmp	r3, #62	; 0x3e
 80048f8:	d817      	bhi.n	800492a <USB_EPStartXfer+0x494>
 80048fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048fe:	085b      	lsrs	r3, r3, #1
 8004900:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004904:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <USB_EPStartXfer+0x484>
 8004910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004914:	3301      	adds	r3, #1
 8004916:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800491a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800491e:	b29b      	uxth	r3, r3
 8004920:	029b      	lsls	r3, r3, #10
 8004922:	b29a      	uxth	r2, r3
 8004924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004926:	801a      	strh	r2, [r3, #0]
 8004928:	e03b      	b.n	80049a2 <USB_EPStartXfer+0x50c>
 800492a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004934:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	2b00      	cmp	r3, #0
 800493e:	d104      	bne.n	800494a <USB_EPStartXfer+0x4b4>
 8004940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004944:	3b01      	subs	r3, #1
 8004946:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800494a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800494e:	b29b      	uxth	r3, r3
 8004950:	029b      	lsls	r3, r3, #10
 8004952:	b29b      	uxth	r3, r3
 8004954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800495c:	b29a      	uxth	r2, r3
 800495e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	e01e      	b.n	80049a2 <USB_EPStartXfer+0x50c>
 8004964:	463b      	mov	r3, r7
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d119      	bne.n	80049a2 <USB_EPStartXfer+0x50c>
 800496e:	1d3b      	adds	r3, r7, #4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	657b      	str	r3, [r7, #84]	; 0x54
 8004974:	1d3b      	adds	r3, r7, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800497c:	b29b      	uxth	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004982:	4413      	add	r3, r2
 8004984:	657b      	str	r3, [r7, #84]	; 0x54
 8004986:	463b      	mov	r3, r7
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	00da      	lsls	r2, r3, #3
 800498e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004990:	4413      	add	r3, r2
 8004992:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004996:	653b      	str	r3, [r7, #80]	; 0x50
 8004998:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800499c:	b29a      	uxth	r2, r3
 800499e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80049a2:	463b      	mov	r3, r7
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	891b      	ldrh	r3, [r3, #8]
 80049a8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049ac:	463b      	mov	r3, r7
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6959      	ldr	r1, [r3, #20]
 80049b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80049bc:	1d38      	adds	r0, r7, #4
 80049be:	6800      	ldr	r0, [r0, #0]
 80049c0:	f000 fff3 	bl	80059aa <USB_WritePMA>
            ep->xfer_buff += len;
 80049c4:	463b      	mov	r3, r7
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049ce:	441a      	add	r2, r3
 80049d0:	463b      	mov	r3, r7
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80049d6:	463b      	mov	r3, r7
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6a1a      	ldr	r2, [r3, #32]
 80049dc:	463b      	mov	r3, r7
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d90e      	bls.n	8004a04 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 80049e6:	463b      	mov	r3, r7
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80049f0:	463b      	mov	r3, r7
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6a1a      	ldr	r2, [r3, #32]
 80049f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	463b      	mov	r3, r7
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	621a      	str	r2, [r3, #32]
 8004a02:	e008      	b.n	8004a16 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a04:	463b      	mov	r3, r7
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8004a0e:	463b      	mov	r3, r7
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2200      	movs	r2, #0
 8004a14:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a16:	1d3b      	adds	r3, r7, #4
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a1c:	463b      	mov	r3, r7
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	785b      	ldrb	r3, [r3, #1]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d164      	bne.n	8004af0 <USB_EPStartXfer+0x65a>
 8004a26:	1d3b      	adds	r3, r7, #4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a2c:	1d3b      	adds	r3, r7, #4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	461a      	mov	r2, r3
 8004a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3a:	4413      	add	r3, r2
 8004a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3e:	463b      	mov	r3, r7
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	00da      	lsls	r2, r3, #3
 8004a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a48:	4413      	add	r3, r2
 8004a4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d112      	bne.n	8004a7e <USB_EPStartXfer+0x5e8>
 8004a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	801a      	strh	r2, [r3, #0]
 8004a7c:	e054      	b.n	8004b28 <USB_EPStartXfer+0x692>
 8004a7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a82:	2b3e      	cmp	r3, #62	; 0x3e
 8004a84:	d817      	bhi.n	8004ab6 <USB_EPStartXfer+0x620>
 8004a86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d004      	beq.n	8004aa6 <USB_EPStartXfer+0x610>
 8004a9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004aa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	029b      	lsls	r3, r3, #10
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab2:	801a      	strh	r2, [r3, #0]
 8004ab4:	e038      	b.n	8004b28 <USB_EPStartXfer+0x692>
 8004ab6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ac0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <USB_EPStartXfer+0x640>
 8004acc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	029b      	lsls	r3, r3, #10
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	e01b      	b.n	8004b28 <USB_EPStartXfer+0x692>
 8004af0:	463b      	mov	r3, r7
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	785b      	ldrb	r3, [r3, #1]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d116      	bne.n	8004b28 <USB_EPStartXfer+0x692>
 8004afa:	1d3b      	adds	r3, r7, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b08:	4413      	add	r3, r2
 8004b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	00da      	lsls	r2, r3, #3
 8004b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b16:	4413      	add	r3, r2
 8004b18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b28:	463b      	mov	r3, r7
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	895b      	ldrh	r3, [r3, #10]
 8004b2e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b32:	463b      	mov	r3, r7
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6959      	ldr	r1, [r3, #20]
 8004b38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004b42:	1d38      	adds	r0, r7, #4
 8004b44:	6800      	ldr	r0, [r0, #0]
 8004b46:	f000 ff30 	bl	80059aa <USB_WritePMA>
 8004b4a:	e1e2      	b.n	8004f12 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8004b4c:	463b      	mov	r3, r7
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	463b      	mov	r3, r7
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b70:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004b74:	1d3b      	adds	r3, r7, #4
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	463b      	mov	r3, r7
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	441a      	add	r2, r3
 8004b82:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b9a:	1d3b      	adds	r3, r7, #4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	663b      	str	r3, [r7, #96]	; 0x60
 8004ba0:	1d3b      	adds	r3, r7, #4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bae:	4413      	add	r3, r2
 8004bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	00da      	lsls	r2, r3, #3
 8004bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bcc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004bce:	463b      	mov	r3, r7
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	891b      	ldrh	r3, [r3, #8]
 8004bd4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bd8:	463b      	mov	r3, r7
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6959      	ldr	r1, [r3, #20]
 8004bde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004be8:	1d38      	adds	r0, r7, #4
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	f000 fedd 	bl	80059aa <USB_WritePMA>
 8004bf0:	e18f      	b.n	8004f12 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004bf2:	1d3b      	adds	r3, r7, #4
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	463b      	mov	r3, r7
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 808f 	beq.w	8004d2c <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c0e:	1d3b      	adds	r3, r7, #4
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c14:	463b      	mov	r3, r7
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	785b      	ldrb	r3, [r3, #1]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d164      	bne.n	8004ce8 <USB_EPStartXfer+0x852>
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	673b      	str	r3, [r7, #112]	; 0x70
 8004c24:	1d3b      	adds	r3, r7, #4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c32:	4413      	add	r3, r2
 8004c34:	673b      	str	r3, [r7, #112]	; 0x70
 8004c36:	463b      	mov	r3, r7
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	00da      	lsls	r2, r3, #3
 8004c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c40:	4413      	add	r3, r2
 8004c42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d112      	bne.n	8004c76 <USB_EPStartXfer+0x7e0>
 8004c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c5e:	801a      	strh	r2, [r3, #0]
 8004c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	e054      	b.n	8004d20 <USB_EPStartXfer+0x88a>
 8004c76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c7c:	d817      	bhi.n	8004cae <USB_EPStartXfer+0x818>
 8004c7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d004      	beq.n	8004c9e <USB_EPStartXfer+0x808>
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c98:	3301      	adds	r3, #1
 8004c9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	029b      	lsls	r3, r3, #10
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e038      	b.n	8004d20 <USB_EPStartXfer+0x88a>
 8004cae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004cb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <USB_EPStartXfer+0x838>
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	029b      	lsls	r3, r3, #10
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce4:	801a      	strh	r2, [r3, #0]
 8004ce6:	e01b      	b.n	8004d20 <USB_EPStartXfer+0x88a>
 8004ce8:	463b      	mov	r3, r7
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d116      	bne.n	8004d20 <USB_EPStartXfer+0x88a>
 8004cf2:	1d3b      	adds	r3, r7, #4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d00:	4413      	add	r3, r2
 8004d02:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d04:	463b      	mov	r3, r7
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	00da      	lsls	r2, r3, #3
 8004d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d0e:	4413      	add	r3, r2
 8004d10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d14:	677b      	str	r3, [r7, #116]	; 0x74
 8004d16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004d20:	463b      	mov	r3, r7
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	895b      	ldrh	r3, [r3, #10]
 8004d26:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8004d2a:	e097      	b.n	8004e5c <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d2c:	463b      	mov	r3, r7
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	785b      	ldrb	r3, [r3, #1]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d168      	bne.n	8004e08 <USB_EPStartXfer+0x972>
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d3e:	1d3b      	adds	r3, r7, #4
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d4e:	4413      	add	r3, r2
 8004d50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d54:	463b      	mov	r3, r7
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	00da      	lsls	r2, r3, #3
 8004d5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d60:	4413      	add	r3, r2
 8004d62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d112      	bne.n	8004d96 <USB_EPStartXfer+0x900>
 8004d70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d92:	801a      	strh	r2, [r3, #0]
 8004d94:	e05d      	b.n	8004e52 <USB_EPStartXfer+0x9bc>
 8004d96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d9c:	d817      	bhi.n	8004dce <USB_EPStartXfer+0x938>
 8004d9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004da2:	085b      	lsrs	r3, r3, #1
 8004da4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004da8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <USB_EPStartXfer+0x928>
 8004db4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004db8:	3301      	adds	r3, #1
 8004dba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004dbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	029b      	lsls	r3, r3, #10
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dca:	801a      	strh	r2, [r3, #0]
 8004dcc:	e041      	b.n	8004e52 <USB_EPStartXfer+0x9bc>
 8004dce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004dd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d104      	bne.n	8004dee <USB_EPStartXfer+0x958>
 8004de4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004de8:	3b01      	subs	r3, #1
 8004dea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004dee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	029b      	lsls	r3, r3, #10
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e04:	801a      	strh	r2, [r3, #0]
 8004e06:	e024      	b.n	8004e52 <USB_EPStartXfer+0x9bc>
 8004e08:	463b      	mov	r3, r7
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d11f      	bne.n	8004e52 <USB_EPStartXfer+0x9bc>
 8004e12:	1d3b      	adds	r3, r7, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e1a:	1d3b      	adds	r3, r7, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e30:	463b      	mov	r3, r7
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	00da      	lsls	r2, r3, #3
 8004e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e52:	463b      	mov	r3, r7
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	891b      	ldrh	r3, [r3, #8]
 8004e58:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e5c:	463b      	mov	r3, r7
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6959      	ldr	r1, [r3, #20]
 8004e62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004e6c:	1d38      	adds	r0, r7, #4
 8004e6e:	6800      	ldr	r0, [r0, #0]
 8004e70:	f000 fd9b 	bl	80059aa <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004e74:	463b      	mov	r3, r7
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	785b      	ldrb	r3, [r3, #1]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d122      	bne.n	8004ec4 <USB_EPStartXfer+0xa2e>
 8004e7e:	1d3b      	adds	r3, r7, #4
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	463b      	mov	r3, r7
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e98:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004e9c:	1d3b      	adds	r3, r7, #4
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	441a      	add	r2, r3
 8004eaa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	8013      	strh	r3, [r2, #0]
 8004ec2:	e026      	b.n	8004f12 <USB_EPStartXfer+0xa7c>
 8004ec4:	463b      	mov	r3, r7
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d121      	bne.n	8004f12 <USB_EPStartXfer+0xa7c>
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004eec:	1d3b      	adds	r3, r7, #4
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	463b      	mov	r3, r7
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	441a      	add	r2, r3
 8004efa:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004f12:	1d3b      	adds	r3, r7, #4
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	463b      	mov	r3, r7
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f107 020e 	add.w	r2, r7, #14
 8004f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f30:	8013      	strh	r3, [r2, #0]
 8004f32:	f107 030e 	add.w	r3, r7, #14
 8004f36:	f107 020e 	add.w	r2, r7, #14
 8004f3a:	8812      	ldrh	r2, [r2, #0]
 8004f3c:	f082 0210 	eor.w	r2, r2, #16
 8004f40:	801a      	strh	r2, [r3, #0]
 8004f42:	f107 030e 	add.w	r3, r7, #14
 8004f46:	f107 020e 	add.w	r2, r7, #14
 8004f4a:	8812      	ldrh	r2, [r2, #0]
 8004f4c:	f082 0220 	eor.w	r2, r2, #32
 8004f50:	801a      	strh	r2, [r3, #0]
 8004f52:	1d3b      	adds	r3, r7, #4
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	463b      	mov	r3, r7
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	441a      	add	r2, r3
 8004f60:	f107 030e 	add.w	r3, r7, #14
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]
 8004f7a:	e3b5      	b.n	80056e8 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	7b1b      	ldrb	r3, [r3, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f040 8090 	bne.w	80050a8 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8004f88:	463b      	mov	r3, r7
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	463b      	mov	r3, r7
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d90e      	bls.n	8004fb6 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8004f98:	463b      	mov	r3, r7
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fac:	1ad2      	subs	r2, r2, r3
 8004fae:	463b      	mov	r3, r7
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	619a      	str	r2, [r3, #24]
 8004fb4:	e008      	b.n	8004fc8 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8004fb6:	463b      	mov	r3, r7
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004fc8:	1d3b      	adds	r3, r7, #4
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fd0:	1d3b      	adds	r3, r7, #4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	00da      	lsls	r2, r3, #3
 8004fee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ffc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005000:	2b00      	cmp	r3, #0
 8005002:	d116      	bne.n	8005032 <USB_EPStartXfer+0xb9c>
 8005004:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005010:	b29a      	uxth	r2, r3
 8005012:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005016:	801a      	strh	r2, [r3, #0]
 8005018:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005028:	b29a      	uxth	r2, r3
 800502a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	e32c      	b.n	800568c <USB_EPStartXfer+0x11f6>
 8005032:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005036:	2b3e      	cmp	r3, #62	; 0x3e
 8005038:	d818      	bhi.n	800506c <USB_EPStartXfer+0xbd6>
 800503a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005044:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <USB_EPStartXfer+0xbc4>
 8005050:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005054:	3301      	adds	r3, #1
 8005056:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800505a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800505e:	b29b      	uxth	r3, r3
 8005060:	029b      	lsls	r3, r3, #10
 8005062:	b29a      	uxth	r2, r3
 8005064:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005068:	801a      	strh	r2, [r3, #0]
 800506a:	e30f      	b.n	800568c <USB_EPStartXfer+0x11f6>
 800506c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005076:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	2b00      	cmp	r3, #0
 8005080:	d104      	bne.n	800508c <USB_EPStartXfer+0xbf6>
 8005082:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005086:	3b01      	subs	r3, #1
 8005088:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800508c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005090:	b29b      	uxth	r3, r3
 8005092:	029b      	lsls	r3, r3, #10
 8005094:	b29b      	uxth	r3, r3
 8005096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800509a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509e:	b29a      	uxth	r2, r3
 80050a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050a4:	801a      	strh	r2, [r3, #0]
 80050a6:	e2f1      	b.n	800568c <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80050a8:	463b      	mov	r3, r7
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	78db      	ldrb	r3, [r3, #3]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	f040 818f 	bne.w	80053d2 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80050b4:	463b      	mov	r3, r7
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	785b      	ldrb	r3, [r3, #1]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d175      	bne.n	80051aa <USB_EPStartXfer+0xd14>
 80050be:	1d3b      	adds	r3, r7, #4
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050c6:	1d3b      	adds	r3, r7, #4
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80050d6:	4413      	add	r3, r2
 80050d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050dc:	463b      	mov	r3, r7
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	00da      	lsls	r2, r3, #3
 80050e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80050e8:	4413      	add	r3, r2
 80050ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050f2:	463b      	mov	r3, r7
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d116      	bne.n	800512a <USB_EPStartXfer+0xc94>
 80050fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005108:	b29a      	uxth	r2, r3
 800510a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800511c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005120:	b29a      	uxth	r2, r3
 8005122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005126:	801a      	strh	r2, [r3, #0]
 8005128:	e065      	b.n	80051f6 <USB_EPStartXfer+0xd60>
 800512a:	463b      	mov	r3, r7
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b3e      	cmp	r3, #62	; 0x3e
 8005132:	d81a      	bhi.n	800516a <USB_EPStartXfer+0xcd4>
 8005134:	463b      	mov	r3, r7
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005140:	463b      	mov	r3, r7
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d004      	beq.n	8005158 <USB_EPStartXfer+0xcc2>
 800514e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005152:	3301      	adds	r3, #1
 8005154:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005158:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800515c:	b29b      	uxth	r3, r3
 800515e:	029b      	lsls	r3, r3, #10
 8005160:	b29a      	uxth	r2, r3
 8005162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	e045      	b.n	80051f6 <USB_EPStartXfer+0xd60>
 800516a:	463b      	mov	r3, r7
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005176:	463b      	mov	r3, r7
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <USB_EPStartXfer+0xcf8>
 8005184:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005188:	3b01      	subs	r3, #1
 800518a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800518e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005192:	b29b      	uxth	r3, r3
 8005194:	029b      	lsls	r3, r3, #10
 8005196:	b29b      	uxth	r3, r3
 8005198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051a6:	801a      	strh	r2, [r3, #0]
 80051a8:	e025      	b.n	80051f6 <USB_EPStartXfer+0xd60>
 80051aa:	463b      	mov	r3, r7
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d120      	bne.n	80051f6 <USB_EPStartXfer+0xd60>
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051cc:	4413      	add	r3, r2
 80051ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051d2:	463b      	mov	r3, r7
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	00da      	lsls	r2, r3, #3
 80051da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051de:	4413      	add	r3, r2
 80051e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051e8:	463b      	mov	r3, r7
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	1d3b      	adds	r3, r7, #4
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051fe:	463b      	mov	r3, r7
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d175      	bne.n	80052f4 <USB_EPStartXfer+0xe5e>
 8005208:	1d3b      	adds	r3, r7, #4
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005210:	1d3b      	adds	r3, r7, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005218:	b29b      	uxth	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005220:	4413      	add	r3, r2
 8005222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005226:	463b      	mov	r3, r7
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	00da      	lsls	r2, r3, #3
 800522e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005232:	4413      	add	r3, r2
 8005234:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005238:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800523c:	463b      	mov	r3, r7
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d116      	bne.n	8005274 <USB_EPStartXfer+0xdde>
 8005246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005252:	b29a      	uxth	r2, r3
 8005254:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	b29b      	uxth	r3, r3
 8005262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800526a:	b29a      	uxth	r2, r3
 800526c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	e061      	b.n	8005338 <USB_EPStartXfer+0xea2>
 8005274:	463b      	mov	r3, r7
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b3e      	cmp	r3, #62	; 0x3e
 800527c:	d81a      	bhi.n	80052b4 <USB_EPStartXfer+0xe1e>
 800527e:	463b      	mov	r3, r7
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800528a:	463b      	mov	r3, r7
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <USB_EPStartXfer+0xe0c>
 8005298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529c:	3301      	adds	r3, #1
 800529e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	029b      	lsls	r3, r3, #10
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052b0:	801a      	strh	r2, [r3, #0]
 80052b2:	e041      	b.n	8005338 <USB_EPStartXfer+0xea2>
 80052b4:	463b      	mov	r3, r7
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052c0:	463b      	mov	r3, r7
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <USB_EPStartXfer+0xe42>
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d2:	3b01      	subs	r3, #1
 80052d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052dc:	b29b      	uxth	r3, r3
 80052de:	029b      	lsls	r3, r3, #10
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	e021      	b.n	8005338 <USB_EPStartXfer+0xea2>
 80052f4:	463b      	mov	r3, r7
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	785b      	ldrb	r3, [r3, #1]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d11c      	bne.n	8005338 <USB_EPStartXfer+0xea2>
 80052fe:	1d3b      	adds	r3, r7, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005306:	b29b      	uxth	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800530e:	4413      	add	r3, r2
 8005310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005314:	463b      	mov	r3, r7
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	00da      	lsls	r2, r3, #3
 800531c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005320:	4413      	add	r3, r2
 8005322:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800532a:	463b      	mov	r3, r7
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	b29a      	uxth	r2, r3
 8005332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005336:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8005338:	463b      	mov	r3, r7
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 81a4 	beq.w	800568c <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005344:	1d3b      	adds	r3, r7, #4
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	463b      	mov	r3, r7
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005358:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800535c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <USB_EPStartXfer+0xeda>
 8005364:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10d      	bne.n	800538c <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005370:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005378:	2b00      	cmp	r3, #0
 800537a:	f040 8187 	bne.w	800568c <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800537e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 8180 	bne.w	800568c <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800538c:	1d3b      	adds	r3, r7, #4
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	463b      	mov	r3, r7
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80053aa:	1d3b      	adds	r3, r7, #4
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	463b      	mov	r3, r7
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	441a      	add	r2, r3
 80053b8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80053bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	8013      	strh	r3, [r2, #0]
 80053d0:	e15c      	b.n	800568c <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80053d2:	463b      	mov	r3, r7
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	78db      	ldrb	r3, [r3, #3]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	f040 8155 	bne.w	8005688 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80053de:	463b      	mov	r3, r7
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699a      	ldr	r2, [r3, #24]
 80053e4:	463b      	mov	r3, r7
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d90e      	bls.n	800540c <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80053ee:	463b      	mov	r3, r7
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80053f8:	463b      	mov	r3, r7
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005402:	1ad2      	subs	r2, r2, r3
 8005404:	463b      	mov	r3, r7
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	619a      	str	r2, [r3, #24]
 800540a:	e008      	b.n	800541e <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800540c:	463b      	mov	r3, r7
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8005416:	463b      	mov	r3, r7
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2200      	movs	r2, #0
 800541c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800541e:	463b      	mov	r3, r7
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	785b      	ldrb	r3, [r3, #1]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d16f      	bne.n	8005508 <USB_EPStartXfer+0x1072>
 8005428:	1d3b      	adds	r3, r7, #4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005430:	1d3b      	adds	r3, r7, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005438:	b29b      	uxth	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005440:	4413      	add	r3, r2
 8005442:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005446:	463b      	mov	r3, r7
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	00da      	lsls	r2, r3, #3
 800544e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005452:	4413      	add	r3, r2
 8005454:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005458:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800545c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005460:	2b00      	cmp	r3, #0
 8005462:	d116      	bne.n	8005492 <USB_EPStartXfer+0xffc>
 8005464:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005470:	b29a      	uxth	r2, r3
 8005472:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005476:	801a      	strh	r2, [r3, #0]
 8005478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005488:	b29a      	uxth	r2, r3
 800548a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800548e:	801a      	strh	r2, [r3, #0]
 8005490:	e05f      	b.n	8005552 <USB_EPStartXfer+0x10bc>
 8005492:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005496:	2b3e      	cmp	r3, #62	; 0x3e
 8005498:	d818      	bhi.n	80054cc <USB_EPStartXfer+0x1036>
 800549a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800549e:	085b      	lsrs	r3, r3, #1
 80054a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d004      	beq.n	80054ba <USB_EPStartXfer+0x1024>
 80054b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b4:	3301      	adds	r3, #1
 80054b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054be:	b29b      	uxth	r3, r3
 80054c0:	029b      	lsls	r3, r3, #10
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054c8:	801a      	strh	r2, [r3, #0]
 80054ca:	e042      	b.n	8005552 <USB_EPStartXfer+0x10bc>
 80054cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054da:	f003 031f 	and.w	r3, r3, #31
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d104      	bne.n	80054ec <USB_EPStartXfer+0x1056>
 80054e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e6:	3b01      	subs	r3, #1
 80054e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	029b      	lsls	r3, r3, #10
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fe:	b29a      	uxth	r2, r3
 8005500:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005504:	801a      	strh	r2, [r3, #0]
 8005506:	e024      	b.n	8005552 <USB_EPStartXfer+0x10bc>
 8005508:	463b      	mov	r3, r7
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	785b      	ldrb	r3, [r3, #1]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d11f      	bne.n	8005552 <USB_EPStartXfer+0x10bc>
 8005512:	1d3b      	adds	r3, r7, #4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800551a:	1d3b      	adds	r3, r7, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005522:	b29b      	uxth	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800552a:	4413      	add	r3, r2
 800552c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005530:	463b      	mov	r3, r7
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	00da      	lsls	r2, r3, #3
 8005538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800553c:	4413      	add	r3, r2
 800553e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005542:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005546:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800554a:	b29a      	uxth	r2, r3
 800554c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005550:	801a      	strh	r2, [r3, #0]
 8005552:	1d3b      	adds	r3, r7, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800555a:	463b      	mov	r3, r7
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d16f      	bne.n	8005644 <USB_EPStartXfer+0x11ae>
 8005564:	1d3b      	adds	r3, r7, #4
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005574:	b29b      	uxth	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800557c:	4413      	add	r3, r2
 800557e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005582:	463b      	mov	r3, r7
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	00da      	lsls	r2, r3, #3
 800558a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800558e:	4413      	add	r3, r2
 8005590:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005594:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005598:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800559c:	2b00      	cmp	r3, #0
 800559e:	d116      	bne.n	80055ce <USB_EPStartXfer+0x1138>
 80055a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	e05e      	b.n	800568c <USB_EPStartXfer+0x11f6>
 80055ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055d2:	2b3e      	cmp	r3, #62	; 0x3e
 80055d4:	d818      	bhi.n	8005608 <USB_EPStartXfer+0x1172>
 80055d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055da:	085b      	lsrs	r3, r3, #1
 80055dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80055e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <USB_EPStartXfer+0x1160>
 80055ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f0:	3301      	adds	r3, #1
 80055f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80055f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	029b      	lsls	r3, r3, #10
 80055fe:	b29a      	uxth	r2, r3
 8005600:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	e041      	b.n	800568c <USB_EPStartXfer+0x11f6>
 8005608:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800560c:	095b      	lsrs	r3, r3, #5
 800560e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005612:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	2b00      	cmp	r3, #0
 800561c:	d104      	bne.n	8005628 <USB_EPStartXfer+0x1192>
 800561e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005622:	3b01      	subs	r3, #1
 8005624:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800562c:	b29b      	uxth	r3, r3
 800562e:	029b      	lsls	r3, r3, #10
 8005630:	b29b      	uxth	r3, r3
 8005632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563a:	b29a      	uxth	r2, r3
 800563c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	e023      	b.n	800568c <USB_EPStartXfer+0x11f6>
 8005644:	463b      	mov	r3, r7
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d11e      	bne.n	800568c <USB_EPStartXfer+0x11f6>
 800564e:	1d3b      	adds	r3, r7, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005656:	b29b      	uxth	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800565e:	4413      	add	r3, r2
 8005660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005664:	463b      	mov	r3, r7
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	00da      	lsls	r2, r3, #3
 800566c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005670:	4413      	add	r3, r2
 8005672:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005676:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800567a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800567e:	b29a      	uxth	r2, r3
 8005680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005684:	801a      	strh	r2, [r3, #0]
 8005686:	e001      	b.n	800568c <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e02e      	b.n	80056ea <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	463b      	mov	r3, r7
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80056aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80056ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80056b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80056ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80056c2:	1d3b      	adds	r3, r7, #4
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	463b      	mov	r3, r7
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	441a      	add	r2, r3
 80056d0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80056d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	785b      	ldrb	r3, [r3, #1]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d020      	beq.n	8005748 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800571c:	81bb      	strh	r3, [r7, #12]
 800571e:	89bb      	ldrh	r3, [r7, #12]
 8005720:	f083 0310 	eor.w	r3, r3, #16
 8005724:	81bb      	strh	r3, [r7, #12]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	441a      	add	r2, r3
 8005730:	89bb      	ldrh	r3, [r7, #12]
 8005732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005742:	b29b      	uxth	r3, r3
 8005744:	8013      	strh	r3, [r2, #0]
 8005746:	e01f      	b.n	8005788 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800575a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575e:	81fb      	strh	r3, [r7, #14]
 8005760:	89fb      	ldrh	r3, [r7, #14]
 8005762:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005766:	81fb      	strh	r3, [r7, #14]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	441a      	add	r2, r3
 8005772:	89fb      	ldrh	r3, [r7, #14]
 8005774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005784:	b29b      	uxth	r3, r3
 8005786:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005796:	b480      	push	{r7}
 8005798:	b087      	sub	sp, #28
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	7b1b      	ldrb	r3, [r3, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f040 809d 	bne.w	80058e4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	785b      	ldrb	r3, [r3, #1]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d04c      	beq.n	800584c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	823b      	strh	r3, [r7, #16]
 80057c0:	8a3b      	ldrh	r3, [r7, #16]
 80057c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d01b      	beq.n	8005802 <USB_EPClearStall+0x6c>
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e0:	81fb      	strh	r3, [r7, #14]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	441a      	add	r2, r3
 80057ec:	89fb      	ldrh	r3, [r7, #14]
 80057ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	78db      	ldrb	r3, [r3, #3]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d06c      	beq.n	80058e4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005820:	81bb      	strh	r3, [r7, #12]
 8005822:	89bb      	ldrh	r3, [r7, #12]
 8005824:	f083 0320 	eor.w	r3, r3, #32
 8005828:	81bb      	strh	r3, [r7, #12]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	441a      	add	r2, r3
 8005834:	89bb      	ldrh	r3, [r7, #12]
 8005836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800583a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800583e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005846:	b29b      	uxth	r3, r3
 8005848:	8013      	strh	r3, [r2, #0]
 800584a:	e04b      	b.n	80058e4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	82fb      	strh	r3, [r7, #22]
 800585a:	8afb      	ldrh	r3, [r7, #22]
 800585c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01b      	beq.n	800589c <USB_EPClearStall+0x106>
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587a:	82bb      	strh	r3, [r7, #20]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	441a      	add	r2, r3
 8005886:	8abb      	ldrh	r3, [r7, #20]
 8005888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005898:	b29b      	uxth	r3, r3
 800589a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b2:	827b      	strh	r3, [r7, #18]
 80058b4:	8a7b      	ldrh	r3, [r7, #18]
 80058b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058ba:	827b      	strh	r3, [r7, #18]
 80058bc:	8a7b      	ldrh	r3, [r7, #18]
 80058be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058c2:	827b      	strh	r3, [r7, #18]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	441a      	add	r2, r3
 80058ce:	8a7b      	ldrh	r3, [r7, #18]
 80058d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	460b      	mov	r3, r1
 80058fc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d103      	bne.n	800590c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2280      	movs	r2, #128	; 0x80
 8005908:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005928:	b29b      	uxth	r3, r3
 800592a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005932:	b29a      	uxth	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005956:	b29b      	uxth	r3, r3
 8005958:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800595c:	b29a      	uxth	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005980:	b29b      	uxth	r3, r3
 8005982:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005984:	68fb      	ldr	r3, [r7, #12]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b08d      	sub	sp, #52	; 0x34
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	4611      	mov	r1, r2
 80059b6:	461a      	mov	r2, r3
 80059b8:	460b      	mov	r3, r1
 80059ba:	80fb      	strh	r3, [r7, #6]
 80059bc:	4613      	mov	r3, r2
 80059be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80059c0:	88bb      	ldrh	r3, [r7, #4]
 80059c2:	3301      	adds	r3, #1
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80059d0:	88fa      	ldrh	r2, [r7, #6]
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059da:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e0:	e01b      	b.n	8005a1a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	3301      	adds	r3, #1
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	3302      	adds	r3, #2
 8005a0c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	3301      	adds	r3, #1
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a16:	3b01      	subs	r3, #1
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e0      	bne.n	80059e2 <USB_WritePMA+0x38>
  }
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	3734      	adds	r7, #52	; 0x34
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b08b      	sub	sp, #44	; 0x2c
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	4611      	mov	r1, r2
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	80fb      	strh	r3, [r7, #6]
 8005a40:	4613      	mov	r3, r2
 8005a42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005a44:	88bb      	ldrh	r3, [r7, #4]
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a54:	88fa      	ldrh	r2, [r7, #6]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a5e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
 8005a64:	e018      	b.n	8005a98 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	3302      	adds	r3, #2
 8005a72:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	0a1b      	lsrs	r3, r3, #8
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	3b01      	subs	r3, #1
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e3      	bne.n	8005a66 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005a9e:	88bb      	ldrh	r3, [r7, #4]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	701a      	strb	r2, [r3, #0]
  }
}
 8005aba:	bf00      	nop
 8005abc:	372c      	adds	r7, #44	; 0x2c
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ad2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ad6:	f002 f9c7 	bl	8007e68 <malloc>
 8005ada:	4603      	mov	r3, r0
 8005adc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005aec:	2302      	movs	r3, #2
 8005aee:	e066      	b.n	8005bbe <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	7c1b      	ldrb	r3, [r3, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d119      	bne.n	8005b34 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b04:	2202      	movs	r2, #2
 8005b06:	2181      	movs	r1, #129	; 0x81
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 ff7f 	bl	8007a0c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b18:	2202      	movs	r2, #2
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f001 ff75 	bl	8007a0c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2210      	movs	r2, #16
 8005b2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005b32:	e016      	b.n	8005b62 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b34:	2340      	movs	r3, #64	; 0x40
 8005b36:	2202      	movs	r2, #2
 8005b38:	2181      	movs	r1, #129	; 0x81
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f001 ff66 	bl	8007a0c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b46:	2340      	movs	r3, #64	; 0x40
 8005b48:	2202      	movs	r2, #2
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f001 ff5d 	bl	8007a0c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2210      	movs	r2, #16
 8005b5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b62:	2308      	movs	r3, #8
 8005b64:	2203      	movs	r2, #3
 8005b66:	2182      	movs	r1, #130	; 0x82
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 ff4f 	bl	8007a0c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	7c1b      	ldrb	r3, [r3, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f002 f8ad 	bl	8007d04 <USBD_LL_PrepareReceive>
 8005baa:	e007      	b.n	8005bbc <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bb2:	2340      	movs	r3, #64	; 0x40
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f002 f8a4 	bl	8007d04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005bd2:	2181      	movs	r1, #129	; 0x81
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 ff57 	bl	8007a88 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005be0:	2101      	movs	r1, #1
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f001 ff50 	bl	8007a88 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005bf0:	2182      	movs	r1, #130	; 0x82
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 ff48 	bl	8007a88 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00e      	beq.n	8005c30 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c22:	4618      	mov	r0, r3
 8005c24:	f002 f928 	bl	8007e78 <free>
    pdev->pClassData = NULL;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c4c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d03a      	beq.n	8005cdc <USBD_CDC_Setup+0xa0>
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	f040 8097 	bne.w	8005d9a <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	88db      	ldrh	r3, [r3, #6]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d029      	beq.n	8005cc8 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	b25b      	sxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	da11      	bge.n	8005ca2 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005c8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	88d2      	ldrh	r2, [r2, #6]
 8005c90:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005c92:	6939      	ldr	r1, [r7, #16]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	88db      	ldrh	r3, [r3, #6]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 fa9c 	bl	80071d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005ca0:	e082      	b.n	8005da8 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	785a      	ldrb	r2, [r3, #1]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	88db      	ldrh	r3, [r3, #6]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005cb8:	6939      	ldr	r1, [r7, #16]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	88db      	ldrh	r3, [r3, #6]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f001 fab5 	bl	8007230 <USBD_CtlPrepareRx>
      break;
 8005cc6:	e06f      	b.n	8005da8 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	7850      	ldrb	r0, [r2, #1]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	4798      	blx	r3
      break;
 8005cda:	e065      	b.n	8005da8 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	2b0b      	cmp	r3, #11
 8005ce2:	d84f      	bhi.n	8005d84 <USBD_CDC_Setup+0x148>
 8005ce4:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <USBD_CDC_Setup+0xb0>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005d1d 	.word	0x08005d1d
 8005cf0:	08005d93 	.word	0x08005d93
 8005cf4:	08005d85 	.word	0x08005d85
 8005cf8:	08005d85 	.word	0x08005d85
 8005cfc:	08005d85 	.word	0x08005d85
 8005d00:	08005d85 	.word	0x08005d85
 8005d04:	08005d85 	.word	0x08005d85
 8005d08:	08005d85 	.word	0x08005d85
 8005d0c:	08005d85 	.word	0x08005d85
 8005d10:	08005d85 	.word	0x08005d85
 8005d14:	08005d45 	.word	0x08005d45
 8005d18:	08005d6d 	.word	0x08005d6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d107      	bne.n	8005d36 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d26:	f107 030c 	add.w	r3, r7, #12
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f001 fa52 	bl	80071d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d34:	e030      	b.n	8005d98 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 f9dc 	bl	80070f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	75fb      	strb	r3, [r7, #23]
          break;
 8005d42:	e029      	b.n	8005d98 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d107      	bne.n	8005d5e <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d4e:	f107 030f 	add.w	r3, r7, #15
 8005d52:	2201      	movs	r2, #1
 8005d54:	4619      	mov	r1, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f001 fa3e 	bl	80071d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d5c:	e01c      	b.n	8005d98 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f001 f9c8 	bl	80070f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d66:	2303      	movs	r3, #3
 8005d68:	75fb      	strb	r3, [r7, #23]
          break;
 8005d6a:	e015      	b.n	8005d98 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d00f      	beq.n	8005d96 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f001 f9bc 	bl	80070f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d82:	e008      	b.n	8005d96 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 f9b5 	bl	80070f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	75fb      	strb	r3, [r7, #23]
          break;
 8005d90:	e002      	b.n	8005d98 <USBD_CDC_Setup+0x15c>
          break;
 8005d92:	bf00      	nop
 8005d94:	e008      	b.n	8005da8 <USBD_CDC_Setup+0x16c>
          break;
 8005d96:	bf00      	nop
      }
      break;
 8005d98:	e006      	b.n	8005da8 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 f9aa 	bl	80070f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005da2:	2303      	movs	r3, #3
 8005da4:	75fb      	strb	r3, [r7, #23]
      break;
 8005da6:	bf00      	nop
  }

  return (uint8_t)ret;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop

08005db4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005dc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e04f      	b.n	8005e76 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ddc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005dde:	78fa      	ldrb	r2, [r7, #3]
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	3318      	adds	r3, #24
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d029      	beq.n	8005e48 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005df4:	78fa      	ldrb	r2, [r7, #3]
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	3318      	adds	r3, #24
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	78f9      	ldrb	r1, [r7, #3]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	4403      	add	r3, r0
 8005e14:	3338      	adds	r3, #56	; 0x38
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e1c:	fb03 f301 	mul.w	r3, r3, r1
 8005e20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d110      	bne.n	8005e48 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005e26:	78fa      	ldrb	r2, [r7, #3]
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	3318      	adds	r3, #24
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e3a:	78f9      	ldrb	r1, [r7, #3]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	2200      	movs	r2, #0
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 ff27 	bl	8007c94 <USBD_LL_Transmit>
 8005e46:	e015      	b.n	8005e74 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00b      	beq.n	8005e74 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005e70:	78fa      	ldrb	r2, [r7, #3]
 8005e72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	460b      	mov	r3, r1
 8005e88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e015      	b.n	8005ecc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f001 ff65 	bl	8007d74 <USBD_LL_GetRxDataSize>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ee2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d015      	beq.n	8005f1a <USBD_CDC_EP0_RxReady+0x46>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ef4:	2bff      	cmp	r3, #255	; 0xff
 8005ef6:	d010      	beq.n	8005f1a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005f06:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f0e:	b292      	uxth	r2, r2
 8005f10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	22ff      	movs	r2, #255	; 0xff
 8005f16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2243      	movs	r2, #67	; 0x43
 8005f30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005f32:	4b03      	ldr	r3, [pc, #12]	; (8005f40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	20000094 	.word	0x20000094

08005f44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2243      	movs	r2, #67	; 0x43
 8005f50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005f52:	4b03      	ldr	r3, [pc, #12]	; (8005f60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	20000050 	.word	0x20000050

08005f64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2243      	movs	r2, #67	; 0x43
 8005f70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005f72:	4b03      	ldr	r3, [pc, #12]	; (8005f80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	200000d8 	.word	0x200000d8

08005f84 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	220a      	movs	r2, #10
 8005f90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f92:	4b03      	ldr	r3, [pc, #12]	; (8005fa0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	2000000c 	.word	0x2000000c

08005fa4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e004      	b.n	8005fc2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b087      	sub	sp, #28
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fe0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006010:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006036:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006038:	2301      	movs	r3, #1
 800603a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006046:	2303      	movs	r3, #3
 8006048:	e01a      	b.n	8006080 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006050:	2b00      	cmp	r3, #0
 8006052:	d114      	bne.n	800607e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2201      	movs	r2, #1
 8006058:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006072:	2181      	movs	r1, #129	; 0x81
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f001 fe0d 	bl	8007c94 <USBD_LL_Transmit>

    ret = USBD_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800607e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006096:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e016      	b.n	80060d4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	7c1b      	ldrb	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d109      	bne.n	80060c2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060b8:	2101      	movs	r1, #1
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fe22 	bl	8007d04 <USBD_LL_PrepareReceive>
 80060c0:	e007      	b.n	80060d2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060c8:	2340      	movs	r3, #64	; 0x40
 80060ca:	2101      	movs	r1, #1
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 fe19 	bl	8007d04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e01f      	b.n	8006134 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	79fa      	ldrb	r2, [r7, #7]
 8006126:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f001 fbdb 	bl	80078e4 <USBD_LL_Init>
 800612e:	4603      	mov	r3, r0
 8006130:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006132:	7dfb      	ldrb	r3, [r7, #23]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006150:	2303      	movs	r3, #3
 8006152:	e016      	b.n	8006182 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00b      	beq.n	8006180 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	f107 020e 	add.w	r2, r7, #14
 8006174:	4610      	mov	r0, r2
 8006176:	4798      	blx	r3
 8006178:	4602      	mov	r2, r0
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 fc08 	bl	80079a8 <USBD_LL_Start>
 8006198:	4603      	mov	r3, r0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80061c4:	2303      	movs	r3, #3
 80061c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d009      	beq.n	80061e6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	78fa      	ldrb	r2, [r7, #3]
 80061dc:	4611      	mov	r1, r2
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	78fa      	ldrb	r2, [r7, #3]
 8006210:	4611      	mov	r1, r2
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	4798      	blx	r3
  }

  return USBD_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f000 ff25 	bl	8007082 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	2b02      	cmp	r3, #2
 800625a:	d01a      	beq.n	8006292 <USBD_LL_SetupStage+0x72>
 800625c:	2b02      	cmp	r3, #2
 800625e:	d822      	bhi.n	80062a6 <USBD_LL_SetupStage+0x86>
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <USBD_LL_SetupStage+0x4a>
 8006264:	2b01      	cmp	r3, #1
 8006266:	d00a      	beq.n	800627e <USBD_LL_SetupStage+0x5e>
 8006268:	e01d      	b.n	80062a6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006270:	4619      	mov	r1, r3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f9d6 	bl	8006624 <USBD_StdDevReq>
 8006278:	4603      	mov	r3, r0
 800627a:	73fb      	strb	r3, [r7, #15]
      break;
 800627c:	e020      	b.n	80062c0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa3a 	bl	8006700 <USBD_StdItfReq>
 800628c:	4603      	mov	r3, r0
 800628e:	73fb      	strb	r3, [r7, #15]
      break;
 8006290:	e016      	b.n	80062c0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa78 	bl	8006790 <USBD_StdEPReq>
 80062a0:	4603      	mov	r3, r0
 80062a2:	73fb      	strb	r3, [r7, #15]
      break;
 80062a4:	e00c      	b.n	80062c0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 fc1d 	bl	8007af4 <USBD_LL_StallEP>
 80062ba:	4603      	mov	r3, r0
 80062bc:	73fb      	strb	r3, [r7, #15]
      break;
 80062be:	bf00      	nop
  }

  return ret;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b086      	sub	sp, #24
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	460b      	mov	r3, r1
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80062d8:	7afb      	ldrb	r3, [r7, #11]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d137      	bne.n	800634e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80062e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d14a      	bne.n	8006386 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d913      	bls.n	8006324 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	1ad2      	subs	r2, r2, r3
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	4293      	cmp	r3, r2
 8006314:	bf28      	it	cs
 8006316:	4613      	movcs	r3, r2
 8006318:	461a      	mov	r2, r3
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 ffa4 	bl	800726a <USBD_CtlContinueRx>
 8006322:	e030      	b.n	8006386 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006336:	2b03      	cmp	r3, #3
 8006338:	d105      	bne.n	8006346 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 ffa0 	bl	800728c <USBD_CtlSendStatus>
 800634c:	e01b      	b.n	8006386 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d013      	beq.n	8006382 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006360:	2b03      	cmp	r3, #3
 8006362:	d10e      	bne.n	8006382 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	7afa      	ldrb	r2, [r7, #11]
 800636e:	4611      	mov	r1, r2
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	4798      	blx	r3
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006378:	7dfb      	ldrb	r3, [r7, #23]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800637e:	7dfb      	ldrb	r3, [r7, #23]
 8006380:	e002      	b.n	8006388 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006382:	2303      	movs	r3, #3
 8006384:	e000      	b.n	8006388 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	460b      	mov	r3, r1
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800639e:	7afb      	ldrb	r3, [r7, #11]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d16a      	bne.n	800647a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3314      	adds	r3, #20
 80063a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d155      	bne.n	8006460 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d914      	bls.n	80063ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	1ad2      	subs	r2, r2, r3
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	461a      	mov	r2, r3
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 ff19 	bl	800720e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063dc:	2300      	movs	r3, #0
 80063de:	2200      	movs	r2, #0
 80063e0:	2100      	movs	r1, #0
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f001 fc8e 	bl	8007d04 <USBD_LL_PrepareReceive>
 80063e8:	e03a      	b.n	8006460 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d11c      	bne.n	8006430 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80063fe:	429a      	cmp	r2, r3
 8006400:	d316      	bcc.n	8006430 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800640c:	429a      	cmp	r2, r3
 800640e:	d20f      	bcs.n	8006430 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006410:	2200      	movs	r2, #0
 8006412:	2100      	movs	r1, #0
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 fefa 	bl	800720e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006422:	2300      	movs	r3, #0
 8006424:	2200      	movs	r2, #0
 8006426:	2100      	movs	r1, #0
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f001 fc6b 	bl	8007d04 <USBD_LL_PrepareReceive>
 800642e:	e017      	b.n	8006460 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006442:	2b03      	cmp	r3, #3
 8006444:	d105      	bne.n	8006452 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006452:	2180      	movs	r1, #128	; 0x80
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f001 fb4d 	bl	8007af4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 ff29 	bl	80072b2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006466:	2b01      	cmp	r3, #1
 8006468:	d123      	bne.n	80064b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f7ff fe99 	bl	80061a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006478:	e01b      	b.n	80064b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d013      	beq.n	80064ae <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800648c:	2b03      	cmp	r3, #3
 800648e:	d10e      	bne.n	80064ae <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	7afa      	ldrb	r2, [r7, #11]
 800649a:	4611      	mov	r1, r2
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	4798      	blx	r3
 80064a0:	4603      	mov	r3, r0
 80064a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
 80064ac:	e002      	b.n	80064b4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e000      	b.n	80064b4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d009      	beq.n	8006500 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6852      	ldr	r2, [r2, #4]
 80064f8:	b2d2      	uxtb	r2, r2
 80064fa:	4611      	mov	r1, r2
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006500:	2340      	movs	r3, #64	; 0x40
 8006502:	2200      	movs	r2, #0
 8006504:	2100      	movs	r1, #0
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f001 fa80 	bl	8007a0c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2240      	movs	r2, #64	; 0x40
 8006518:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800651c:	2340      	movs	r3, #64	; 0x40
 800651e:	2200      	movs	r2, #0
 8006520:	2180      	movs	r1, #128	; 0x80
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 fa72 	bl	8007a0c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2240      	movs	r2, #64	; 0x40
 8006532:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	460b      	mov	r3, r1
 8006548:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	78fa      	ldrb	r2, [r7, #3]
 800654e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2204      	movs	r2, #4
 8006576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006596:	2b04      	cmp	r3, #4
 8006598:	d105      	bne.n	80065a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d10b      	bne.n	80065de <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	3301      	adds	r3, #1
 80065fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006606:	8a3b      	ldrh	r3, [r7, #16]
 8006608:	021b      	lsls	r3, r3, #8
 800660a:	b21a      	sxth	r2, r3
 800660c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006610:	4313      	orrs	r3, r2
 8006612:	b21b      	sxth	r3, r3
 8006614:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006616:	89fb      	ldrh	r3, [r7, #14]
}
 8006618:	4618      	mov	r0, r3
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d005      	beq.n	800664a <USBD_StdDevReq+0x26>
 800663e:	2b40      	cmp	r3, #64	; 0x40
 8006640:	d853      	bhi.n	80066ea <USBD_StdDevReq+0xc6>
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <USBD_StdDevReq+0x3a>
 8006646:	2b20      	cmp	r3, #32
 8006648:	d14f      	bne.n	80066ea <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	4798      	blx	r3
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]
    break;
 800665c:	e04a      	b.n	80066f4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	785b      	ldrb	r3, [r3, #1]
 8006662:	2b09      	cmp	r3, #9
 8006664:	d83b      	bhi.n	80066de <USBD_StdDevReq+0xba>
 8006666:	a201      	add	r2, pc, #4	; (adr r2, 800666c <USBD_StdDevReq+0x48>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	080066c1 	.word	0x080066c1
 8006670:	080066d5 	.word	0x080066d5
 8006674:	080066df 	.word	0x080066df
 8006678:	080066cb 	.word	0x080066cb
 800667c:	080066df 	.word	0x080066df
 8006680:	0800669f 	.word	0x0800669f
 8006684:	08006695 	.word	0x08006695
 8006688:	080066df 	.word	0x080066df
 800668c:	080066b7 	.word	0x080066b7
 8006690:	080066a9 	.word	0x080066a9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f9da 	bl	8006a50 <USBD_GetDescriptor>
      break;
 800669c:	e024      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fb69 	bl	8006d78 <USBD_SetAddress>
      break;
 80066a6:	e01f      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fba8 	bl	8006e00 <USBD_SetConfig>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]
      break;
 80066b4:	e018      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fc45 	bl	8006f48 <USBD_GetConfig>
      break;
 80066be:	e013      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fc75 	bl	8006fb2 <USBD_GetStatus>
      break;
 80066c8:	e00e      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fca3 	bl	8007018 <USBD_SetFeature>
      break;
 80066d2:	e009      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fcb2 	bl	8007040 <USBD_ClrFeature>
      break;
 80066dc:	e004      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fd08 	bl	80070f6 <USBD_CtlError>
      break;
 80066e6:	bf00      	nop
    }
    break;
 80066e8:	e004      	b.n	80066f4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fd02 	bl	80070f6 <USBD_CtlError>
    break;
 80066f2:	bf00      	nop
  }

  return ret;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop

08006700 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006716:	2b40      	cmp	r3, #64	; 0x40
 8006718:	d005      	beq.n	8006726 <USBD_StdItfReq+0x26>
 800671a:	2b40      	cmp	r3, #64	; 0x40
 800671c:	d82e      	bhi.n	800677c <USBD_StdItfReq+0x7c>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <USBD_StdItfReq+0x26>
 8006722:	2b20      	cmp	r3, #32
 8006724:	d12a      	bne.n	800677c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800672c:	3b01      	subs	r3, #1
 800672e:	2b02      	cmp	r3, #2
 8006730:	d81d      	bhi.n	800676e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	889b      	ldrh	r3, [r3, #4]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	d813      	bhi.n	8006764 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	4798      	blx	r3
 800674a:	4603      	mov	r3, r0
 800674c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	88db      	ldrh	r3, [r3, #6]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d110      	bne.n	8006778 <USBD_StdItfReq+0x78>
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10d      	bne.n	8006778 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fd95 	bl	800728c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006762:	e009      	b.n	8006778 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fcc5 	bl	80070f6 <USBD_CtlError>
      break;
 800676c:	e004      	b.n	8006778 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fcc0 	bl	80070f6 <USBD_CtlError>
      break;
 8006776:	e000      	b.n	800677a <USBD_StdItfReq+0x7a>
      break;
 8006778:	bf00      	nop
    }
    break;
 800677a:	e004      	b.n	8006786 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fcb9 	bl	80070f6 <USBD_CtlError>
    break;
 8006784:	bf00      	nop
  }

  return ret;
 8006786:	7bfb      	ldrb	r3, [r7, #15]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	889b      	ldrh	r3, [r3, #4]
 80067a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067ac:	2b40      	cmp	r3, #64	; 0x40
 80067ae:	d007      	beq.n	80067c0 <USBD_StdEPReq+0x30>
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	f200 8142 	bhi.w	8006a3a <USBD_StdEPReq+0x2aa>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00c      	beq.n	80067d4 <USBD_StdEPReq+0x44>
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	f040 813d 	bne.w	8006a3a <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	73fb      	strb	r3, [r7, #15]
    break;
 80067d2:	e137      	b.n	8006a44 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d007      	beq.n	80067ec <USBD_StdEPReq+0x5c>
 80067dc:	2b03      	cmp	r3, #3
 80067de:	f300 8126 	bgt.w	8006a2e <USBD_StdEPReq+0x29e>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d07d      	beq.n	80068e2 <USBD_StdEPReq+0x152>
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d03b      	beq.n	8006862 <USBD_StdEPReq+0xd2>
 80067ea:	e120      	b.n	8006a2e <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d002      	beq.n	80067fc <USBD_StdEPReq+0x6c>
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d016      	beq.n	8006828 <USBD_StdEPReq+0x98>
 80067fa:	e02c      	b.n	8006856 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00d      	beq.n	800681e <USBD_StdEPReq+0x8e>
 8006802:	7bbb      	ldrb	r3, [r7, #14]
 8006804:	2b80      	cmp	r3, #128	; 0x80
 8006806:	d00a      	beq.n	800681e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f001 f971 	bl	8007af4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006812:	2180      	movs	r1, #128	; 0x80
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 f96d 	bl	8007af4 <USBD_LL_StallEP>
 800681a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800681c:	e020      	b.n	8006860 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fc68 	bl	80070f6 <USBD_CtlError>
        break;
 8006826:	e01b      	b.n	8006860 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	885b      	ldrh	r3, [r3, #2]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10e      	bne.n	800684e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006830:	7bbb      	ldrb	r3, [r7, #14]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <USBD_StdEPReq+0xbe>
 8006836:	7bbb      	ldrb	r3, [r7, #14]
 8006838:	2b80      	cmp	r3, #128	; 0x80
 800683a:	d008      	beq.n	800684e <USBD_StdEPReq+0xbe>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	88db      	ldrh	r3, [r3, #6]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d104      	bne.n	800684e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 f953 	bl	8007af4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fd1c 	bl	800728c <USBD_CtlSendStatus>

        break;
 8006854:	e004      	b.n	8006860 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fc4c 	bl	80070f6 <USBD_CtlError>
        break;
 800685e:	bf00      	nop
      }
      break;
 8006860:	e0ea      	b.n	8006a38 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006868:	2b02      	cmp	r3, #2
 800686a:	d002      	beq.n	8006872 <USBD_StdEPReq+0xe2>
 800686c:	2b03      	cmp	r3, #3
 800686e:	d016      	beq.n	800689e <USBD_StdEPReq+0x10e>
 8006870:	e030      	b.n	80068d4 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006872:	7bbb      	ldrb	r3, [r7, #14]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00d      	beq.n	8006894 <USBD_StdEPReq+0x104>
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	2b80      	cmp	r3, #128	; 0x80
 800687c:	d00a      	beq.n	8006894 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800687e:	7bbb      	ldrb	r3, [r7, #14]
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 f936 	bl	8007af4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006888:	2180      	movs	r1, #128	; 0x80
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 f932 	bl	8007af4 <USBD_LL_StallEP>
 8006890:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006892:	e025      	b.n	80068e0 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fc2d 	bl	80070f6 <USBD_CtlError>
        break;
 800689c:	e020      	b.n	80068e0 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	885b      	ldrh	r3, [r3, #2]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d11b      	bne.n	80068de <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d004      	beq.n	80068ba <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068b0:	7bbb      	ldrb	r3, [r7, #14]
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 f953 	bl	8007b60 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fce6 	bl	800728c <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
 80068ce:	4603      	mov	r3, r0
 80068d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068d2:	e004      	b.n	80068de <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fc0d 	bl	80070f6 <USBD_CtlError>
        break;
 80068dc:	e000      	b.n	80068e0 <USBD_StdEPReq+0x150>
        break;
 80068de:	bf00      	nop
      }
      break;
 80068e0:	e0aa      	b.n	8006a38 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d002      	beq.n	80068f2 <USBD_StdEPReq+0x162>
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d032      	beq.n	8006956 <USBD_StdEPReq+0x1c6>
 80068f0:	e097      	b.n	8006a22 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068f2:	7bbb      	ldrb	r3, [r7, #14]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d007      	beq.n	8006908 <USBD_StdEPReq+0x178>
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	2b80      	cmp	r3, #128	; 0x80
 80068fc:	d004      	beq.n	8006908 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fbf8 	bl	80070f6 <USBD_CtlError>
          break;
 8006906:	e091      	b.n	8006a2c <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800690c:	2b00      	cmp	r3, #0
 800690e:	da0b      	bge.n	8006928 <USBD_StdEPReq+0x198>
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	3310      	adds	r3, #16
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	4413      	add	r3, r2
 8006924:	3304      	adds	r3, #4
 8006926:	e00b      	b.n	8006940 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	4413      	add	r3, r2
 800693e:	3304      	adds	r3, #4
 8006940:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2202      	movs	r2, #2
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fc42 	bl	80071d8 <USBD_CtlSendData>
        break;
 8006954:	e06a      	b.n	8006a2c <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800695a:	2b00      	cmp	r3, #0
 800695c:	da11      	bge.n	8006982 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	f003 020f 	and.w	r2, r3, #15
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	440b      	add	r3, r1
 8006970:	3324      	adds	r3, #36	; 0x24
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d117      	bne.n	80069a8 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fbbb 	bl	80070f6 <USBD_CtlError>
            break;
 8006980:	e054      	b.n	8006a2c <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	f003 020f 	and.w	r2, r3, #15
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d104      	bne.n	80069a8 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fba8 	bl	80070f6 <USBD_CtlError>
            break;
 80069a6:	e041      	b.n	8006a2c <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	da0b      	bge.n	80069c8 <USBD_StdEPReq+0x238>
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	3310      	adds	r3, #16
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	4413      	add	r3, r2
 80069c4:	3304      	adds	r3, #4
 80069c6:	e00b      	b.n	80069e0 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	4413      	add	r3, r2
 80069de:	3304      	adds	r3, #4
 80069e0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <USBD_StdEPReq+0x25e>
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	2b80      	cmp	r3, #128	; 0x80
 80069ec:	d103      	bne.n	80069f6 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2200      	movs	r2, #0
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	e00e      	b.n	8006a14 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80069f6:	7bbb      	ldrb	r3, [r7, #14]
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 f8e6 	bl	8007bcc <USBD_LL_IsStallEP>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	e002      	b.n	8006a14 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2202      	movs	r2, #2
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fbdc 	bl	80071d8 <USBD_CtlSendData>
          break;
 8006a20:	e004      	b.n	8006a2c <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fb66 	bl	80070f6 <USBD_CtlError>
        break;
 8006a2a:	bf00      	nop
      }
      break;
 8006a2c:	e004      	b.n	8006a38 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fb60 	bl	80070f6 <USBD_CtlError>
      break;
 8006a36:	bf00      	nop
    }
    break;
 8006a38:	e004      	b.n	8006a44 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fb5a 	bl	80070f6 <USBD_CtlError>
    break;
 8006a42:	bf00      	nop
  }

  return ret;
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	885b      	ldrh	r3, [r3, #2]
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	2b0e      	cmp	r3, #14
 8006a72:	f200 8152 	bhi.w	8006d1a <USBD_GetDescriptor+0x2ca>
 8006a76:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <USBD_GetDescriptor+0x2c>)
 8006a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7c:	08006aed 	.word	0x08006aed
 8006a80:	08006b05 	.word	0x08006b05
 8006a84:	08006b45 	.word	0x08006b45
 8006a88:	08006d1b 	.word	0x08006d1b
 8006a8c:	08006d1b 	.word	0x08006d1b
 8006a90:	08006cbb 	.word	0x08006cbb
 8006a94:	08006ce7 	.word	0x08006ce7
 8006a98:	08006d1b 	.word	0x08006d1b
 8006a9c:	08006d1b 	.word	0x08006d1b
 8006aa0:	08006d1b 	.word	0x08006d1b
 8006aa4:	08006d1b 	.word	0x08006d1b
 8006aa8:	08006d1b 	.word	0x08006d1b
 8006aac:	08006d1b 	.word	0x08006d1b
 8006ab0:	08006d1b 	.word	0x08006d1b
 8006ab4:	08006ab9 	.word	0x08006ab9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	7c12      	ldrb	r2, [r2, #16]
 8006ad0:	f107 0108 	add.w	r1, r7, #8
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4798      	blx	r3
 8006ad8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006ada:	e126      	b.n	8006d2a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fb09 	bl	80070f6 <USBD_CtlError>
      err++;
 8006ae4:	7afb      	ldrb	r3, [r7, #11]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	72fb      	strb	r3, [r7, #11]
    break;
 8006aea:	e11e      	b.n	8006d2a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	7c12      	ldrb	r2, [r2, #16]
 8006af8:	f107 0108 	add.w	r1, r7, #8
 8006afc:	4610      	mov	r0, r2
 8006afe:	4798      	blx	r3
 8006b00:	60f8      	str	r0, [r7, #12]
    break;
 8006b02:	e112      	b.n	8006d2a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	7c1b      	ldrb	r3, [r3, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10d      	bne.n	8006b28 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	f107 0208 	add.w	r2, r7, #8
 8006b18:	4610      	mov	r0, r2
 8006b1a:	4798      	blx	r3
 8006b1c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3301      	adds	r3, #1
 8006b22:	2202      	movs	r2, #2
 8006b24:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006b26:	e100      	b.n	8006d2a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	f107 0208 	add.w	r2, r7, #8
 8006b34:	4610      	mov	r0, r2
 8006b36:	4798      	blx	r3
 8006b38:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	2202      	movs	r2, #2
 8006b40:	701a      	strb	r2, [r3, #0]
    break;
 8006b42:	e0f2      	b.n	8006d2a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	885b      	ldrh	r3, [r3, #2]
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b05      	cmp	r3, #5
 8006b4c:	f200 80ac 	bhi.w	8006ca8 <USBD_GetDescriptor+0x258>
 8006b50:	a201      	add	r2, pc, #4	; (adr r2, 8006b58 <USBD_GetDescriptor+0x108>)
 8006b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b56:	bf00      	nop
 8006b58:	08006b71 	.word	0x08006b71
 8006b5c:	08006ba5 	.word	0x08006ba5
 8006b60:	08006bd9 	.word	0x08006bd9
 8006b64:	08006c0d 	.word	0x08006c0d
 8006b68:	08006c41 	.word	0x08006c41
 8006b6c:	08006c75 	.word	0x08006c75
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	7c12      	ldrb	r2, [r2, #16]
 8006b88:	f107 0108 	add.w	r1, r7, #8
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4798      	blx	r3
 8006b90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b92:	e091      	b.n	8006cb8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 faad 	bl	80070f6 <USBD_CtlError>
        err++;
 8006b9c:	7afb      	ldrb	r3, [r7, #11]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	72fb      	strb	r3, [r7, #11]
      break;
 8006ba2:	e089      	b.n	8006cb8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	7c12      	ldrb	r2, [r2, #16]
 8006bbc:	f107 0108 	add.w	r1, r7, #8
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	4798      	blx	r3
 8006bc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bc6:	e077      	b.n	8006cb8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fa93 	bl	80070f6 <USBD_CtlError>
        err++;
 8006bd0:	7afb      	ldrb	r3, [r7, #11]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	72fb      	strb	r3, [r7, #11]
      break;
 8006bd6:	e06f      	b.n	8006cb8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	7c12      	ldrb	r2, [r2, #16]
 8006bf0:	f107 0108 	add.w	r1, r7, #8
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4798      	blx	r3
 8006bf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bfa:	e05d      	b.n	8006cb8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fa79 	bl	80070f6 <USBD_CtlError>
        err++;
 8006c04:	7afb      	ldrb	r3, [r7, #11]
 8006c06:	3301      	adds	r3, #1
 8006c08:	72fb      	strb	r3, [r7, #11]
      break;
 8006c0a:	e055      	b.n	8006cb8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	7c12      	ldrb	r2, [r2, #16]
 8006c24:	f107 0108 	add.w	r1, r7, #8
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4798      	blx	r3
 8006c2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c2e:	e043      	b.n	8006cb8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa5f 	bl	80070f6 <USBD_CtlError>
        err++;
 8006c38:	7afb      	ldrb	r3, [r7, #11]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	72fb      	strb	r3, [r7, #11]
      break;
 8006c3e:	e03b      	b.n	8006cb8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00b      	beq.n	8006c64 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	7c12      	ldrb	r2, [r2, #16]
 8006c58:	f107 0108 	add.w	r1, r7, #8
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4798      	blx	r3
 8006c60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c62:	e029      	b.n	8006cb8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fa45 	bl	80070f6 <USBD_CtlError>
        err++;
 8006c6c:	7afb      	ldrb	r3, [r7, #11]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	72fb      	strb	r3, [r7, #11]
      break;
 8006c72:	e021      	b.n	8006cb8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	7c12      	ldrb	r2, [r2, #16]
 8006c8c:	f107 0108 	add.w	r1, r7, #8
 8006c90:	4610      	mov	r0, r2
 8006c92:	4798      	blx	r3
 8006c94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c96:	e00f      	b.n	8006cb8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fa2b 	bl	80070f6 <USBD_CtlError>
        err++;
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	72fb      	strb	r3, [r7, #11]
      break;
 8006ca6:	e007      	b.n	8006cb8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fa23 	bl	80070f6 <USBD_CtlError>
      err++;
 8006cb0:	7afb      	ldrb	r3, [r7, #11]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006cb6:	bf00      	nop
    }
    break;
 8006cb8:	e037      	b.n	8006d2a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	7c1b      	ldrb	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cca:	f107 0208 	add.w	r2, r7, #8
 8006cce:	4610      	mov	r0, r2
 8006cd0:	4798      	blx	r3
 8006cd2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006cd4:	e029      	b.n	8006d2a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fa0c 	bl	80070f6 <USBD_CtlError>
      err++;
 8006cde:	7afb      	ldrb	r3, [r7, #11]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	72fb      	strb	r3, [r7, #11]
    break;
 8006ce4:	e021      	b.n	8006d2a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	7c1b      	ldrb	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10d      	bne.n	8006d0a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	f107 0208 	add.w	r2, r7, #8
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	4798      	blx	r3
 8006cfe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	2207      	movs	r2, #7
 8006d06:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006d08:	e00f      	b.n	8006d2a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f9f2 	bl	80070f6 <USBD_CtlError>
      err++;
 8006d12:	7afb      	ldrb	r3, [r7, #11]
 8006d14:	3301      	adds	r3, #1
 8006d16:	72fb      	strb	r3, [r7, #11]
    break;
 8006d18:	e007      	b.n	8006d2a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f9ea 	bl	80070f6 <USBD_CtlError>
    err++;
 8006d22:	7afb      	ldrb	r3, [r7, #11]
 8006d24:	3301      	adds	r3, #1
 8006d26:	72fb      	strb	r3, [r7, #11]
    break;
 8006d28:	bf00      	nop
  }

  if (err != 0U)
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d11e      	bne.n	8006d6e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	88db      	ldrh	r3, [r3, #6]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d016      	beq.n	8006d66 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006d38:	893b      	ldrh	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00e      	beq.n	8006d5c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	88da      	ldrh	r2, [r3, #6]
 8006d42:	893b      	ldrh	r3, [r7, #8]
 8006d44:	4293      	cmp	r3, r2
 8006d46:	bf28      	it	cs
 8006d48:	4613      	movcs	r3, r2
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d4e:	893b      	ldrh	r3, [r7, #8]
 8006d50:	461a      	mov	r2, r3
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fa3f 	bl	80071d8 <USBD_CtlSendData>
 8006d5a:	e009      	b.n	8006d70 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f9c9 	bl	80070f6 <USBD_CtlError>
 8006d64:	e004      	b.n	8006d70 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fa90 	bl	800728c <USBD_CtlSendStatus>
 8006d6c:	e000      	b.n	8006d70 <USBD_GetDescriptor+0x320>
    return;
 8006d6e:	bf00      	nop
    }
  }
}
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop

08006d78 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	889b      	ldrh	r3, [r3, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d130      	bne.n	8006dec <USBD_SetAddress+0x74>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	88db      	ldrh	r3, [r3, #6]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d12c      	bne.n	8006dec <USBD_SetAddress+0x74>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	885b      	ldrh	r3, [r3, #2]
 8006d96:	2b7f      	cmp	r3, #127	; 0x7f
 8006d98:	d828      	bhi.n	8006dec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	885b      	ldrh	r3, [r3, #2]
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006da4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d104      	bne.n	8006dba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f99f 	bl	80070f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db8:	e01d      	b.n	8006df6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	7bfa      	ldrb	r2, [r7, #15]
 8006dbe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 ff2e 	bl	8007c28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fa5d 	bl	800728c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de0:	e009      	b.n	8006df6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dea:	e004      	b.n	8006df6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f981 	bl	80070f6 <USBD_CtlError>
  }
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	885b      	ldrh	r3, [r3, #2]
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	4b4b      	ldr	r3, [pc, #300]	; (8006f44 <USBD_SetConfig+0x144>)
 8006e16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e18:	4b4a      	ldr	r3, [pc, #296]	; (8006f44 <USBD_SetConfig+0x144>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d905      	bls.n	8006e2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f967 	bl	80070f6 <USBD_CtlError>
    return USBD_FAIL;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e087      	b.n	8006f3c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d002      	beq.n	8006e3c <USBD_SetConfig+0x3c>
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d025      	beq.n	8006e86 <USBD_SetConfig+0x86>
 8006e3a:	e071      	b.n	8006f20 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006e3c:	4b41      	ldr	r3, [pc, #260]	; (8006f44 <USBD_SetConfig+0x144>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01c      	beq.n	8006e7e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006e44:	4b3f      	ldr	r3, [pc, #252]	; (8006f44 <USBD_SetConfig+0x144>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e4e:	4b3d      	ldr	r3, [pc, #244]	; (8006f44 <USBD_SetConfig+0x144>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff f9af 	bl	80061b8 <USBD_SetClassConfig>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f945 	bl	80070f6 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006e6c:	e065      	b.n	8006f3a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fa0c 	bl	800728c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2203      	movs	r2, #3
 8006e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006e7c:	e05d      	b.n	8006f3a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fa04 	bl	800728c <USBD_CtlSendStatus>
    break;
 8006e84:	e059      	b.n	8006f3a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006e86:	4b2f      	ldr	r3, [pc, #188]	; (8006f44 <USBD_SetConfig+0x144>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d112      	bne.n	8006eb4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2202      	movs	r2, #2
 8006e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006e96:	4b2b      	ldr	r3, [pc, #172]	; (8006f44 <USBD_SetConfig+0x144>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ea0:	4b28      	ldr	r3, [pc, #160]	; (8006f44 <USBD_SetConfig+0x144>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff f9a2 	bl	80061f0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f9ed 	bl	800728c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006eb2:	e042      	b.n	8006f3a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006eb4:	4b23      	ldr	r3, [pc, #140]	; (8006f44 <USBD_SetConfig+0x144>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d02a      	beq.n	8006f18 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff f990 	bl	80061f0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006ed0:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <USBD_SetConfig+0x144>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006eda:	4b1a      	ldr	r3, [pc, #104]	; (8006f44 <USBD_SetConfig+0x144>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff f969 	bl	80061b8 <USBD_SetClassConfig>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00f      	beq.n	8006f10 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f8ff 	bl	80070f6 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff f975 	bl	80061f0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006f0e:	e014      	b.n	8006f3a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f9bb 	bl	800728c <USBD_CtlSendStatus>
    break;
 8006f16:	e010      	b.n	8006f3a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f9b7 	bl	800728c <USBD_CtlSendStatus>
    break;
 8006f1e:	e00c      	b.n	8006f3a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f8e7 	bl	80070f6 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f28:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <USBD_SetConfig+0x144>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff f95e 	bl	80061f0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006f34:	2303      	movs	r3, #3
 8006f36:	73fb      	strb	r3, [r7, #15]
    break;
 8006f38:	bf00      	nop
  }

  return ret;
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20000214 	.word	0x20000214

08006f48 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	88db      	ldrh	r3, [r3, #6]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d004      	beq.n	8006f64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f8ca 	bl	80070f6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006f62:	e022      	b.n	8006faa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	dc02      	bgt.n	8006f74 <USBD_GetConfig+0x2c>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	dc03      	bgt.n	8006f7a <USBD_GetConfig+0x32>
 8006f72:	e015      	b.n	8006fa0 <USBD_GetConfig+0x58>
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d00b      	beq.n	8006f90 <USBD_GetConfig+0x48>
 8006f78:	e012      	b.n	8006fa0 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3308      	adds	r3, #8
 8006f84:	2201      	movs	r2, #1
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f925 	bl	80071d8 <USBD_CtlSendData>
      break;
 8006f8e:	e00c      	b.n	8006faa <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3304      	adds	r3, #4
 8006f94:	2201      	movs	r2, #1
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f91d 	bl	80071d8 <USBD_CtlSendData>
      break;
 8006f9e:	e004      	b.n	8006faa <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f8a7 	bl	80070f6 <USBD_CtlError>
      break;
 8006fa8:	bf00      	nop
}
 8006faa:	bf00      	nop
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d81e      	bhi.n	8007006 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	88db      	ldrh	r3, [r3, #6]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d004      	beq.n	8006fda <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f88f 	bl	80070f6 <USBD_CtlError>
      break;
 8006fd8:	e01a      	b.n	8007010 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d005      	beq.n	8006ff6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f043 0202 	orr.w	r2, r3, #2
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	330c      	adds	r3, #12
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f8ea 	bl	80071d8 <USBD_CtlSendData>
    break;
 8007004:	e004      	b.n	8007010 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f874 	bl	80070f6 <USBD_CtlError>
    break;
 800700e:	bf00      	nop
  }
}
 8007010:	bf00      	nop
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	885b      	ldrh	r3, [r3, #2]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d106      	bne.n	8007038 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f92a 	bl	800728c <USBD_CtlSendStatus>
  }
}
 8007038:	bf00      	nop
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007050:	3b01      	subs	r3, #1
 8007052:	2b02      	cmp	r3, #2
 8007054:	d80b      	bhi.n	800706e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	885b      	ldrh	r3, [r3, #2]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d10c      	bne.n	8007078 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f910 	bl	800728c <USBD_CtlSendStatus>
      }
      break;
 800706c:	e004      	b.n	8007078 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f840 	bl	80070f6 <USBD_CtlError>
      break;
 8007076:	e000      	b.n	800707a <USBD_ClrFeature+0x3a>
      break;
 8007078:	bf00      	nop
  }
}
 800707a:	bf00      	nop
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	781a      	ldrb	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3301      	adds	r3, #1
 800709c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	781a      	ldrb	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3301      	adds	r3, #1
 80070aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f7ff fa9b 	bl	80065e8 <SWAPBYTE>
 80070b2:	4603      	mov	r3, r0
 80070b4:	461a      	mov	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3301      	adds	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3301      	adds	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fa8e 	bl	80065e8 <SWAPBYTE>
 80070cc:	4603      	mov	r3, r0
 80070ce:	461a      	mov	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3301      	adds	r3, #1
 80070d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3301      	adds	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7ff fa81 	bl	80065e8 <SWAPBYTE>
 80070e6:	4603      	mov	r3, r0
 80070e8:	461a      	mov	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	80da      	strh	r2, [r3, #6]
}
 80070ee:	bf00      	nop
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007100:	2180      	movs	r1, #128	; 0x80
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fcf6 	bl	8007af4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007108:	2100      	movs	r1, #0
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fcf2 	bl	8007af4 <USBD_LL_StallEP>
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d036      	beq.n	800719c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007132:	6938      	ldr	r0, [r7, #16]
 8007134:	f000 f836 	bl	80071a4 <USBD_GetLen>
 8007138:	4603      	mov	r3, r0
 800713a:	3301      	adds	r3, #1
 800713c:	b29b      	uxth	r3, r3
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	b29a      	uxth	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	4413      	add	r3, r2
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	7812      	ldrb	r2, [r2, #0]
 8007150:	701a      	strb	r2, [r3, #0]
  idx++;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	3301      	adds	r3, #1
 8007156:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	2203      	movs	r2, #3
 8007160:	701a      	strb	r2, [r3, #0]
  idx++;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
 8007164:	3301      	adds	r3, #1
 8007166:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007168:	e013      	b.n	8007192 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	4413      	add	r3, r2
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	7812      	ldrb	r2, [r2, #0]
 8007174:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	3301      	adds	r3, #1
 800717a:	613b      	str	r3, [r7, #16]
    idx++;
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	3301      	adds	r3, #1
 8007180:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	4413      	add	r3, r2
 8007188:	2200      	movs	r2, #0
 800718a:	701a      	strb	r2, [r3, #0]
    idx++;
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	3301      	adds	r3, #1
 8007190:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e7      	bne.n	800716a <USBD_GetString+0x52>
 800719a:	e000      	b.n	800719e <USBD_GetString+0x86>
    return;
 800719c:	bf00      	nop
  }
}
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071b4:	e005      	b.n	80071c2 <USBD_GetLen+0x1e>
  {
    len++;
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	3301      	adds	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	3301      	adds	r3, #1
 80071c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1f5      	bne.n	80071b6 <USBD_GetLen+0x12>
  }

  return len;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	2100      	movs	r1, #0
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 fd48 	bl	8007c94 <USBD_LL_Transmit>

  return USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	2100      	movs	r1, #0
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fd37 	bl	8007c94 <USBD_LL_Transmit>

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2203      	movs	r2, #3
 8007240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	2100      	movs	r1, #0
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 fd52 	bl	8007d04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	2100      	movs	r1, #0
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fd41 	bl	8007d04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2204      	movs	r2, #4
 8007298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800729c:	2300      	movs	r3, #0
 800729e:	2200      	movs	r2, #0
 80072a0:	2100      	movs	r1, #0
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fcf6 	bl	8007c94 <USBD_LL_Transmit>

  return USBD_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2205      	movs	r2, #5
 80072be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072c2:	2300      	movs	r3, #0
 80072c4:	2200      	movs	r2, #0
 80072c6:	2100      	movs	r1, #0
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fd1b 	bl	8007d04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072dc:	2200      	movs	r2, #0
 80072de:	4912      	ldr	r1, [pc, #72]	; (8007328 <MX_USB_DEVICE_Init+0x50>)
 80072e0:	4812      	ldr	r0, [pc, #72]	; (800732c <MX_USB_DEVICE_Init+0x54>)
 80072e2:	f7fe fefb 	bl	80060dc <USBD_Init>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80072ec:	f7f9 f914 	bl	8000518 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80072f0:	490f      	ldr	r1, [pc, #60]	; (8007330 <MX_USB_DEVICE_Init+0x58>)
 80072f2:	480e      	ldr	r0, [pc, #56]	; (800732c <MX_USB_DEVICE_Init+0x54>)
 80072f4:	f7fe ff22 	bl	800613c <USBD_RegisterClass>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80072fe:	f7f9 f90b 	bl	8000518 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007302:	490c      	ldr	r1, [pc, #48]	; (8007334 <MX_USB_DEVICE_Init+0x5c>)
 8007304:	4809      	ldr	r0, [pc, #36]	; (800732c <MX_USB_DEVICE_Init+0x54>)
 8007306:	f7fe fe4d 	bl	8005fa4 <USBD_CDC_RegisterInterface>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007310:	f7f9 f902 	bl	8000518 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007314:	4805      	ldr	r0, [pc, #20]	; (800732c <MX_USB_DEVICE_Init+0x54>)
 8007316:	f7fe ff38 	bl	800618a <USBD_Start>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007320:	f7f9 f8fa 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007324:	bf00      	nop
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20000130 	.word	0x20000130
 800732c:	20000308 	.word	0x20000308
 8007330:	20000018 	.word	0x20000018
 8007334:	2000011c 	.word	0x2000011c

08007338 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800733c:	2200      	movs	r2, #0
 800733e:	4905      	ldr	r1, [pc, #20]	; (8007354 <CDC_Init_FS+0x1c>)
 8007340:	4805      	ldr	r0, [pc, #20]	; (8007358 <CDC_Init_FS+0x20>)
 8007342:	f7fe fe44 	bl	8005fce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007346:	4905      	ldr	r1, [pc, #20]	; (800735c <CDC_Init_FS+0x24>)
 8007348:	4803      	ldr	r0, [pc, #12]	; (8007358 <CDC_Init_FS+0x20>)
 800734a:	f7fe fe59 	bl	8006000 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800734e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007350:	4618      	mov	r0, r3
 8007352:	bd80      	pop	{r7, pc}
 8007354:	200009c0 	.word	0x200009c0
 8007358:	20000308 	.word	0x20000308
 800735c:	200005d8 	.word	0x200005d8

08007360 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007360:	b480      	push	{r7}
 8007362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007364:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007366:	4618      	mov	r0, r3
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	6039      	str	r1, [r7, #0]
 800737a:	71fb      	strb	r3, [r7, #7]
 800737c:	4613      	mov	r3, r2
 800737e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	2b23      	cmp	r3, #35	; 0x23
 8007384:	d84a      	bhi.n	800741c <CDC_Control_FS+0xac>
 8007386:	a201      	add	r2, pc, #4	; (adr r2, 800738c <CDC_Control_FS+0x1c>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	0800741d 	.word	0x0800741d
 8007390:	0800741d 	.word	0x0800741d
 8007394:	0800741d 	.word	0x0800741d
 8007398:	0800741d 	.word	0x0800741d
 800739c:	0800741d 	.word	0x0800741d
 80073a0:	0800741d 	.word	0x0800741d
 80073a4:	0800741d 	.word	0x0800741d
 80073a8:	0800741d 	.word	0x0800741d
 80073ac:	0800741d 	.word	0x0800741d
 80073b0:	0800741d 	.word	0x0800741d
 80073b4:	0800741d 	.word	0x0800741d
 80073b8:	0800741d 	.word	0x0800741d
 80073bc:	0800741d 	.word	0x0800741d
 80073c0:	0800741d 	.word	0x0800741d
 80073c4:	0800741d 	.word	0x0800741d
 80073c8:	0800741d 	.word	0x0800741d
 80073cc:	0800741d 	.word	0x0800741d
 80073d0:	0800741d 	.word	0x0800741d
 80073d4:	0800741d 	.word	0x0800741d
 80073d8:	0800741d 	.word	0x0800741d
 80073dc:	0800741d 	.word	0x0800741d
 80073e0:	0800741d 	.word	0x0800741d
 80073e4:	0800741d 	.word	0x0800741d
 80073e8:	0800741d 	.word	0x0800741d
 80073ec:	0800741d 	.word	0x0800741d
 80073f0:	0800741d 	.word	0x0800741d
 80073f4:	0800741d 	.word	0x0800741d
 80073f8:	0800741d 	.word	0x0800741d
 80073fc:	0800741d 	.word	0x0800741d
 8007400:	0800741d 	.word	0x0800741d
 8007404:	0800741d 	.word	0x0800741d
 8007408:	0800741d 	.word	0x0800741d
 800740c:	0800741d 	.word	0x0800741d
 8007410:	0800741d 	.word	0x0800741d
 8007414:	0800741d 	.word	0x0800741d
 8007418:	0800741d 	.word	0x0800741d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800741c:	bf00      	nop
  }

  return (USBD_OK);
 800741e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007420:	4618      	mov	r0, r3
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800742c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4813      	ldr	r0, [pc, #76]	; (8007488 <CDC_Receive_FS+0x5c>)
 800743a:	f7fe fde1 	bl	8006000 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800743e:	4812      	ldr	r0, [pc, #72]	; (8007488 <CDC_Receive_FS+0x5c>)
 8007440:	f7fe fe22 	bl	8006088 <USBD_CDC_ReceivePacket>

  memset (rxBuffer, '\0', 64);  // clear the buffer
 8007444:	2240      	movs	r2, #64	; 0x40
 8007446:	2100      	movs	r1, #0
 8007448:	4810      	ldr	r0, [pc, #64]	; (800748c <CDC_Receive_FS+0x60>)
 800744a:	f000 fd1d 	bl	8007e88 <memset>
  uint8_t len = (uint8_t)*Len;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	73fb      	strb	r3, [r7, #15]
  memcpy(rxBuffer, Buf, 64);  // copy the data to the buffer
 8007454:	4a0d      	ldr	r2, [pc, #52]	; (800748c <CDC_Receive_FS+0x60>)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4610      	mov	r0, r2
 800745a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800745e:	4602      	mov	r2, r0
 8007460:	4619      	mov	r1, r3
 8007462:	f8d1 c000 	ldr.w	ip, [r1]
 8007466:	684e      	ldr	r6, [r1, #4]
 8007468:	688d      	ldr	r5, [r1, #8]
 800746a:	68c9      	ldr	r1, [r1, #12]
 800746c:	f8c2 c000 	str.w	ip, [r2]
 8007470:	6056      	str	r6, [r2, #4]
 8007472:	6095      	str	r5, [r2, #8]
 8007474:	60d1      	str	r1, [r2, #12]
 8007476:	3310      	adds	r3, #16
 8007478:	3010      	adds	r0, #16
 800747a:	42a3      	cmp	r3, r4
 800747c:	d1ef      	bne.n	800745e <CDC_Receive_FS+0x32>
  //memset(Buf, '\0', len);   // clear the Buf also

  return (USBD_OK);
 800747e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007488:	20000308 	.word	0x20000308
 800748c:	20000284 	.word	0x20000284

08007490 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80074a0:	4b0d      	ldr	r3, [pc, #52]	; (80074d8 <CDC_Transmit_FS+0x48>)
 80074a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e00b      	b.n	80074ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80074b6:	887b      	ldrh	r3, [r7, #2]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	4806      	ldr	r0, [pc, #24]	; (80074d8 <CDC_Transmit_FS+0x48>)
 80074be:	f7fe fd86 	bl	8005fce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80074c2:	4805      	ldr	r0, [pc, #20]	; (80074d8 <CDC_Transmit_FS+0x48>)
 80074c4:	f7fe fdb0 	bl	8006028 <USBD_CDC_TransmitPacket>
 80074c8:	4603      	mov	r3, r0
 80074ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20000308 	.word	0x20000308

080074dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80074ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	371c      	adds	r7, #28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
	...

08007500 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	6039      	str	r1, [r7, #0]
 800750a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2212      	movs	r2, #18
 8007510:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007512:	4b03      	ldr	r3, [pc, #12]	; (8007520 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	20000150 	.word	0x20000150

08007524 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	6039      	str	r1, [r7, #0]
 800752e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2204      	movs	r2, #4
 8007534:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007536:	4b03      	ldr	r3, [pc, #12]	; (8007544 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007538:	4618      	mov	r0, r3
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	20000170 	.word	0x20000170

08007548 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	6039      	str	r1, [r7, #0]
 8007552:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007554:	79fb      	ldrb	r3, [r7, #7]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d105      	bne.n	8007566 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	4907      	ldr	r1, [pc, #28]	; (800757c <USBD_FS_ProductStrDescriptor+0x34>)
 800755e:	4808      	ldr	r0, [pc, #32]	; (8007580 <USBD_FS_ProductStrDescriptor+0x38>)
 8007560:	f7ff fdda 	bl	8007118 <USBD_GetString>
 8007564:	e004      	b.n	8007570 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	4904      	ldr	r1, [pc, #16]	; (800757c <USBD_FS_ProductStrDescriptor+0x34>)
 800756a:	4805      	ldr	r0, [pc, #20]	; (8007580 <USBD_FS_ProductStrDescriptor+0x38>)
 800756c:	f7ff fdd4 	bl	8007118 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007570:	4b02      	ldr	r3, [pc, #8]	; (800757c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000da8 	.word	0x20000da8
 8007580:	08008714 	.word	0x08008714

08007584 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	6039      	str	r1, [r7, #0]
 800758e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	4904      	ldr	r1, [pc, #16]	; (80075a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007594:	4804      	ldr	r0, [pc, #16]	; (80075a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007596:	f7ff fdbf 	bl	8007118 <USBD_GetString>
  return USBD_StrDesc;
 800759a:	4b02      	ldr	r3, [pc, #8]	; (80075a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	20000da8 	.word	0x20000da8
 80075a8:	0800872c 	.word	0x0800872c

080075ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	4603      	mov	r3, r0
 80075b4:	6039      	str	r1, [r7, #0]
 80075b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	221a      	movs	r2, #26
 80075bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075be:	f000 f855 	bl	800766c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075c2:	4b02      	ldr	r3, [pc, #8]	; (80075cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20000174 	.word	0x20000174

080075d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d105      	bne.n	80075ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	4907      	ldr	r1, [pc, #28]	; (8007604 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075e6:	4808      	ldr	r0, [pc, #32]	; (8007608 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075e8:	f7ff fd96 	bl	8007118 <USBD_GetString>
 80075ec:	e004      	b.n	80075f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	4904      	ldr	r1, [pc, #16]	; (8007604 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075f2:	4805      	ldr	r0, [pc, #20]	; (8007608 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075f4:	f7ff fd90 	bl	8007118 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075f8:	4b02      	ldr	r3, [pc, #8]	; (8007604 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	20000da8 	.word	0x20000da8
 8007608:	08008740 	.word	0x08008740

0800760c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	4603      	mov	r3, r0
 8007614:	6039      	str	r1, [r7, #0]
 8007616:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007618:	79fb      	ldrb	r3, [r7, #7]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d105      	bne.n	800762a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	4907      	ldr	r1, [pc, #28]	; (8007640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007622:	4808      	ldr	r0, [pc, #32]	; (8007644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007624:	f7ff fd78 	bl	8007118 <USBD_GetString>
 8007628:	e004      	b.n	8007634 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	4904      	ldr	r1, [pc, #16]	; (8007640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800762e:	4805      	ldr	r0, [pc, #20]	; (8007644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007630:	f7ff fd72 	bl	8007118 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007634:	4b02      	ldr	r3, [pc, #8]	; (8007640 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000da8 	.word	0x20000da8
 8007644:	0800874c 	.word	0x0800874c

08007648 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	220c      	movs	r2, #12
 8007658:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800765a:	4b03      	ldr	r3, [pc, #12]	; (8007668 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800765c:	4618      	mov	r0, r3
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	20000164 	.word	0x20000164

0800766c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007672:	4b0f      	ldr	r3, [pc, #60]	; (80076b0 <Get_SerialNum+0x44>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007678:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <Get_SerialNum+0x48>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800767e:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <Get_SerialNum+0x4c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4413      	add	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007692:	2208      	movs	r2, #8
 8007694:	4909      	ldr	r1, [pc, #36]	; (80076bc <Get_SerialNum+0x50>)
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f814 	bl	80076c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800769c:	2204      	movs	r2, #4
 800769e:	4908      	ldr	r1, [pc, #32]	; (80076c0 <Get_SerialNum+0x54>)
 80076a0:	68b8      	ldr	r0, [r7, #8]
 80076a2:	f000 f80f 	bl	80076c4 <IntToUnicode>
  }
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	1fff7590 	.word	0x1fff7590
 80076b4:	1fff7594 	.word	0x1fff7594
 80076b8:	1fff7598 	.word	0x1fff7598
 80076bc:	20000176 	.word	0x20000176
 80076c0:	20000186 	.word	0x20000186

080076c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	4613      	mov	r3, r2
 80076d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076d6:	2300      	movs	r3, #0
 80076d8:	75fb      	strb	r3, [r7, #23]
 80076da:	e027      	b.n	800772c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	0f1b      	lsrs	r3, r3, #28
 80076e0:	2b09      	cmp	r3, #9
 80076e2:	d80b      	bhi.n	80076fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	0f1b      	lsrs	r3, r3, #28
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	4619      	mov	r1, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	440b      	add	r3, r1
 80076f4:	3230      	adds	r2, #48	; 0x30
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	e00a      	b.n	8007712 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	0f1b      	lsrs	r3, r3, #28
 8007700:	b2da      	uxtb	r2, r3
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	4619      	mov	r1, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	440b      	add	r3, r1
 800770c:	3237      	adds	r2, #55	; 0x37
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	3301      	adds	r3, #1
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	4413      	add	r3, r2
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007726:	7dfb      	ldrb	r3, [r7, #23]
 8007728:	3301      	adds	r3, #1
 800772a:	75fb      	strb	r3, [r7, #23]
 800772c:	7dfa      	ldrb	r2, [r7, #23]
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	429a      	cmp	r2, r3
 8007732:	d3d3      	bcc.n	80076dc <IntToUnicode+0x18>
  }
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
	...

08007744 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a0d      	ldr	r2, [pc, #52]	; (8007788 <HAL_PCD_MspInit+0x44>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d113      	bne.n	800777e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007756:	4b0d      	ldr	r3, [pc, #52]	; (800778c <HAL_PCD_MspInit+0x48>)
 8007758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775a:	4a0c      	ldr	r2, [pc, #48]	; (800778c <HAL_PCD_MspInit+0x48>)
 800775c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007760:	6593      	str	r3, [r2, #88]	; 0x58
 8007762:	4b0a      	ldr	r3, [pc, #40]	; (800778c <HAL_PCD_MspInit+0x48>)
 8007764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007766:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800776e:	2200      	movs	r2, #0
 8007770:	2100      	movs	r1, #0
 8007772:	2043      	movs	r0, #67	; 0x43
 8007774:	f7f9 f97b 	bl	8000a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007778:	2043      	movs	r0, #67	; 0x43
 800777a:	f7f9 f994 	bl	8000aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800777e:	bf00      	nop
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	40006800 	.word	0x40006800
 800778c:	40021000 	.word	0x40021000

08007790 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f7fe fd3a 	bl	8006220 <USBD_LL_SetupStage>
}
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80077c6:	78fa      	ldrb	r2, [r7, #3]
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	4613      	mov	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	440b      	add	r3, r1
 80077d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	4619      	mov	r1, r3
 80077de:	f7fe fd74 	bl	80062ca <USBD_LL_DataOutStage>
}
 80077e2:	bf00      	nop
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80077fc:	78fa      	ldrb	r2, [r7, #3]
 80077fe:	6879      	ldr	r1, [r7, #4]
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	440b      	add	r3, r1
 800780a:	333c      	adds	r3, #60	; 0x3c
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	4619      	mov	r1, r3
 8007812:	f7fe fdbd 	bl	8006390 <USBD_LL_DataInStage>
}
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800782c:	4618      	mov	r0, r3
 800782e:	f7fe fec1 	bl	80065b4 <USBD_LL_SOF>
}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007842:	2301      	movs	r3, #1
 8007844:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d001      	beq.n	8007852 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800784e:	f7f8 fe63 	bl	8000518 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007858:	7bfa      	ldrb	r2, [r7, #15]
 800785a:	4611      	mov	r1, r2
 800785c:	4618      	mov	r0, r3
 800785e:	f7fe fe6e 	bl	800653e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007868:	4618      	mov	r0, r3
 800786a:	f7fe fe27 	bl	80064bc <USBD_LL_Reset>
}
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fe69 	bl	800655e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007894:	4b04      	ldr	r3, [pc, #16]	; (80078a8 <HAL_PCD_SuspendCallback+0x30>)
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	4a03      	ldr	r2, [pc, #12]	; (80078a8 <HAL_PCD_SuspendCallback+0x30>)
 800789a:	f043 0306 	orr.w	r3, r3, #6
 800789e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	e000ed00 	.word	0xe000ed00

080078ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d007      	beq.n	80078cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078bc:	4b08      	ldr	r3, [pc, #32]	; (80078e0 <HAL_PCD_ResumeCallback+0x34>)
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	4a07      	ldr	r2, [pc, #28]	; (80078e0 <HAL_PCD_ResumeCallback+0x34>)
 80078c2:	f023 0306 	bic.w	r3, r3, #6
 80078c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80078c8:	f000 fa9e 	bl	8007e08 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe fe58 	bl	8006588 <USBD_LL_Resume>
}
 80078d8:	bf00      	nop
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	e000ed00 	.word	0xe000ed00

080078e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80078ec:	f7fa fe80 	bl	80025f0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80078f0:	4a2b      	ldr	r2, [pc, #172]	; (80079a0 <USBD_LL_Init+0xbc>)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a29      	ldr	r2, [pc, #164]	; (80079a0 <USBD_LL_Init+0xbc>)
 80078fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8007900:	4b27      	ldr	r3, [pc, #156]	; (80079a0 <USBD_LL_Init+0xbc>)
 8007902:	4a28      	ldr	r2, [pc, #160]	; (80079a4 <USBD_LL_Init+0xc0>)
 8007904:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007906:	4b26      	ldr	r3, [pc, #152]	; (80079a0 <USBD_LL_Init+0xbc>)
 8007908:	2208      	movs	r2, #8
 800790a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800790c:	4b24      	ldr	r3, [pc, #144]	; (80079a0 <USBD_LL_Init+0xbc>)
 800790e:	2202      	movs	r2, #2
 8007910:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007912:	4b23      	ldr	r3, [pc, #140]	; (80079a0 <USBD_LL_Init+0xbc>)
 8007914:	2202      	movs	r2, #2
 8007916:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007918:	4b21      	ldr	r3, [pc, #132]	; (80079a0 <USBD_LL_Init+0xbc>)
 800791a:	2200      	movs	r2, #0
 800791c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800791e:	4b20      	ldr	r3, [pc, #128]	; (80079a0 <USBD_LL_Init+0xbc>)
 8007920:	2200      	movs	r2, #0
 8007922:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007924:	4b1e      	ldr	r3, [pc, #120]	; (80079a0 <USBD_LL_Init+0xbc>)
 8007926:	2200      	movs	r2, #0
 8007928:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800792a:	4b1d      	ldr	r3, [pc, #116]	; (80079a0 <USBD_LL_Init+0xbc>)
 800792c:	2200      	movs	r2, #0
 800792e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007930:	481b      	ldr	r0, [pc, #108]	; (80079a0 <USBD_LL_Init+0xbc>)
 8007932:	f7f9 fa55 	bl	8000de0 <HAL_PCD_Init>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800793c:	f7f8 fdec 	bl	8000518 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007946:	2318      	movs	r3, #24
 8007948:	2200      	movs	r2, #0
 800794a:	2100      	movs	r1, #0
 800794c:	f7fa fd7e 	bl	800244c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007956:	2358      	movs	r3, #88	; 0x58
 8007958:	2200      	movs	r2, #0
 800795a:	2180      	movs	r1, #128	; 0x80
 800795c:	f7fa fd76 	bl	800244c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007966:	23c0      	movs	r3, #192	; 0xc0
 8007968:	2200      	movs	r2, #0
 800796a:	2181      	movs	r1, #129	; 0x81
 800796c:	f7fa fd6e 	bl	800244c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007976:	f44f 7388 	mov.w	r3, #272	; 0x110
 800797a:	2200      	movs	r2, #0
 800797c:	2101      	movs	r1, #1
 800797e:	f7fa fd65 	bl	800244c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800798c:	2200      	movs	r2, #0
 800798e:	2182      	movs	r1, #130	; 0x82
 8007990:	f7fa fd5c 	bl	800244c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000fa8 	.word	0x20000fa8
 80079a4:	40006800 	.word	0x40006800

080079a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079be:	4618      	mov	r0, r3
 80079c0:	f7f9 fb20 	bl	8001004 <HAL_PCD_Start>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d816      	bhi.n	80079fc <USBD_LL_Start+0x54>
 80079ce:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <USBD_LL_Start+0x2c>)
 80079d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d4:	080079e5 	.word	0x080079e5
 80079d8:	080079eb 	.word	0x080079eb
 80079dc:	080079f1 	.word	0x080079f1
 80079e0:	080079f7 	.word	0x080079f7
    case HAL_OK :
      usb_status = USBD_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	73fb      	strb	r3, [r7, #15]
    break;
 80079e8:	e00b      	b.n	8007a02 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079ea:	2303      	movs	r3, #3
 80079ec:	73fb      	strb	r3, [r7, #15]
    break;
 80079ee:	e008      	b.n	8007a02 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079f0:	2301      	movs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]
    break;
 80079f4:	e005      	b.n	8007a02 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079f6:	2303      	movs	r3, #3
 80079f8:	73fb      	strb	r3, [r7, #15]
    break;
 80079fa:	e002      	b.n	8007a02 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80079fc:	2303      	movs	r3, #3
 80079fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007a00:	bf00      	nop
  }
  return usb_status;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	4608      	mov	r0, r1
 8007a16:	4611      	mov	r1, r2
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	70fb      	strb	r3, [r7, #3]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	70bb      	strb	r3, [r7, #2]
 8007a22:	4613      	mov	r3, r2
 8007a24:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a34:	78bb      	ldrb	r3, [r7, #2]
 8007a36:	883a      	ldrh	r2, [r7, #0]
 8007a38:	78f9      	ldrb	r1, [r7, #3]
 8007a3a:	f7f9 fc78 	bl	800132e <HAL_PCD_EP_Open>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d817      	bhi.n	8007a78 <USBD_LL_OpenEP+0x6c>
 8007a48:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <USBD_LL_OpenEP+0x44>)
 8007a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4e:	bf00      	nop
 8007a50:	08007a61 	.word	0x08007a61
 8007a54:	08007a67 	.word	0x08007a67
 8007a58:	08007a6d 	.word	0x08007a6d
 8007a5c:	08007a73 	.word	0x08007a73
    case HAL_OK :
      usb_status = USBD_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73fb      	strb	r3, [r7, #15]
    break;
 8007a64:	e00b      	b.n	8007a7e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a66:	2303      	movs	r3, #3
 8007a68:	73fb      	strb	r3, [r7, #15]
    break;
 8007a6a:	e008      	b.n	8007a7e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a70:	e005      	b.n	8007a7e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a72:	2303      	movs	r3, #3
 8007a74:	73fb      	strb	r3, [r7, #15]
    break;
 8007a76:	e002      	b.n	8007a7e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a7c:	bf00      	nop
  }
  return usb_status;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007aa2:	78fa      	ldrb	r2, [r7, #3]
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7f9 fca7 	bl	80013fa <HAL_PCD_EP_Close>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d816      	bhi.n	8007ae4 <USBD_LL_CloseEP+0x5c>
 8007ab6:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <USBD_LL_CloseEP+0x34>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007acd 	.word	0x08007acd
 8007ac0:	08007ad3 	.word	0x08007ad3
 8007ac4:	08007ad9 	.word	0x08007ad9
 8007ac8:	08007adf 	.word	0x08007adf
    case HAL_OK :
      usb_status = USBD_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	73fb      	strb	r3, [r7, #15]
    break;
 8007ad0:	e00b      	b.n	8007aea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ad6:	e008      	b.n	8007aea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	73fb      	strb	r3, [r7, #15]
    break;
 8007adc:	e005      	b.n	8007aea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ae2:	e002      	b.n	8007aea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ae8:	bf00      	nop
  }
  return usb_status;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b0e:	78fa      	ldrb	r2, [r7, #3]
 8007b10:	4611      	mov	r1, r2
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7f9 fd51 	bl	80015ba <HAL_PCD_EP_SetStall>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d816      	bhi.n	8007b50 <USBD_LL_StallEP+0x5c>
 8007b22:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <USBD_LL_StallEP+0x34>)
 8007b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b28:	08007b39 	.word	0x08007b39
 8007b2c:	08007b3f 	.word	0x08007b3f
 8007b30:	08007b45 	.word	0x08007b45
 8007b34:	08007b4b 	.word	0x08007b4b
    case HAL_OK :
      usb_status = USBD_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b3c:	e00b      	b.n	8007b56 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	73fb      	strb	r3, [r7, #15]
    break;
 8007b42:	e008      	b.n	8007b56 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b44:	2301      	movs	r3, #1
 8007b46:	73fb      	strb	r3, [r7, #15]
    break;
 8007b48:	e005      	b.n	8007b56 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b4e:	e002      	b.n	8007b56 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007b50:	2303      	movs	r3, #3
 8007b52:	73fb      	strb	r3, [r7, #15]
    break;
 8007b54:	bf00      	nop
  }
  return usb_status;
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b7a:	78fa      	ldrb	r2, [r7, #3]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7f9 fd7b 	bl	800167a <HAL_PCD_EP_ClrStall>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d816      	bhi.n	8007bbc <USBD_LL_ClearStallEP+0x5c>
 8007b8e:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <USBD_LL_ClearStallEP+0x34>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007ba5 	.word	0x08007ba5
 8007b98:	08007bab 	.word	0x08007bab
 8007b9c:	08007bb1 	.word	0x08007bb1
 8007ba0:	08007bb7 	.word	0x08007bb7
    case HAL_OK :
      usb_status = USBD_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ba8:	e00b      	b.n	8007bc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007baa:	2303      	movs	r3, #3
 8007bac:	73fb      	strb	r3, [r7, #15]
    break;
 8007bae:	e008      	b.n	8007bc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb4:	e005      	b.n	8007bc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bba:	e002      	b.n	8007bc2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc0:	bf00      	nop
  }
  return usb_status;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	da0c      	bge.n	8007c02 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007be8:	78fb      	ldrb	r3, [r7, #3]
 8007bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bee:	68f9      	ldr	r1, [r7, #12]
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	440b      	add	r3, r1
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	e00b      	b.n	8007c1a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c08:	68f9      	ldr	r1, [r7, #12]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	440b      	add	r3, r1
 8007c14:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007c18:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
	...

08007c28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c42:	78fa      	ldrb	r2, [r7, #3]
 8007c44:	4611      	mov	r1, r2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7f9 fb4c 	bl	80012e4 <HAL_PCD_SetAddress>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d816      	bhi.n	8007c84 <USBD_LL_SetUSBAddress+0x5c>
 8007c56:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <USBD_LL_SetUSBAddress+0x34>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c6d 	.word	0x08007c6d
 8007c60:	08007c73 	.word	0x08007c73
 8007c64:	08007c79 	.word	0x08007c79
 8007c68:	08007c7f 	.word	0x08007c7f
    case HAL_OK :
      usb_status = USBD_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c70:	e00b      	b.n	8007c8a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c72:	2303      	movs	r3, #3
 8007c74:	73fb      	strb	r3, [r7, #15]
    break;
 8007c76:	e008      	b.n	8007c8a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c7c:	e005      	b.n	8007c8a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	73fb      	strb	r3, [r7, #15]
    break;
 8007c82:	e002      	b.n	8007c8a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007c84:	2303      	movs	r3, #3
 8007c86:	73fb      	strb	r3, [r7, #15]
    break;
 8007c88:	bf00      	nop
  }
  return usb_status;
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	607a      	str	r2, [r7, #4]
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007cb2:	7af9      	ldrb	r1, [r7, #11]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	f7f9 fc3c 	bl	8001534 <HAL_PCD_EP_Transmit>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007cc0:	7dbb      	ldrb	r3, [r7, #22]
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d816      	bhi.n	8007cf4 <USBD_LL_Transmit+0x60>
 8007cc6:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <USBD_LL_Transmit+0x38>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007cdd 	.word	0x08007cdd
 8007cd0:	08007ce3 	.word	0x08007ce3
 8007cd4:	08007ce9 	.word	0x08007ce9
 8007cd8:	08007cef 	.word	0x08007cef
    case HAL_OK :
      usb_status = USBD_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	75fb      	strb	r3, [r7, #23]
    break;
 8007ce0:	e00b      	b.n	8007cfa <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	75fb      	strb	r3, [r7, #23]
    break;
 8007ce6:	e008      	b.n	8007cfa <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	75fb      	strb	r3, [r7, #23]
    break;
 8007cec:	e005      	b.n	8007cfa <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	75fb      	strb	r3, [r7, #23]
    break;
 8007cf2:	e002      	b.n	8007cfa <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	75fb      	strb	r3, [r7, #23]
    break;
 8007cf8:	bf00      	nop
  }
  return usb_status;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	607a      	str	r2, [r7, #4]
 8007d0e:	603b      	str	r3, [r7, #0]
 8007d10:	460b      	mov	r3, r1
 8007d12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d22:	7af9      	ldrb	r1, [r7, #11]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	f7f9 fbaf 	bl	800148a <HAL_PCD_EP_Receive>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007d30:	7dbb      	ldrb	r3, [r7, #22]
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d816      	bhi.n	8007d64 <USBD_LL_PrepareReceive+0x60>
 8007d36:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <USBD_LL_PrepareReceive+0x38>)
 8007d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3c:	08007d4d 	.word	0x08007d4d
 8007d40:	08007d53 	.word	0x08007d53
 8007d44:	08007d59 	.word	0x08007d59
 8007d48:	08007d5f 	.word	0x08007d5f
    case HAL_OK :
      usb_status = USBD_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	75fb      	strb	r3, [r7, #23]
    break;
 8007d50:	e00b      	b.n	8007d6a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d52:	2303      	movs	r3, #3
 8007d54:	75fb      	strb	r3, [r7, #23]
    break;
 8007d56:	e008      	b.n	8007d6a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	75fb      	strb	r3, [r7, #23]
    break;
 8007d5c:	e005      	b.n	8007d6a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	75fb      	strb	r3, [r7, #23]
    break;
 8007d62:	e002      	b.n	8007d6a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007d64:	2303      	movs	r3, #3
 8007d66:	75fb      	strb	r3, [r7, #23]
    break;
 8007d68:	bf00      	nop
  }
  return usb_status;
 8007d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	4611      	mov	r1, r2
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7f9 fbba 	bl	8001504 <HAL_PCD_EP_GetRxCount>
 8007d90:	4603      	mov	r3, r0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
	...

08007d9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <HAL_PCDEx_LPM_Callback+0x18>
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d013      	beq.n	8007dda <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007db2:	e023      	b.n	8007dfc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d007      	beq.n	8007dcc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007dbc:	f000 f824 	bl	8007e08 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dc0:	4b10      	ldr	r3, [pc, #64]	; (8007e04 <HAL_PCDEx_LPM_Callback+0x68>)
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	4a0f      	ldr	r2, [pc, #60]	; (8007e04 <HAL_PCDEx_LPM_Callback+0x68>)
 8007dc6:	f023 0306 	bic.w	r3, r3, #6
 8007dca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe fbd8 	bl	8006588 <USBD_LL_Resume>
    break;
 8007dd8:	e010      	b.n	8007dfc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fbbc 	bl	800655e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dee:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <HAL_PCDEx_LPM_Callback+0x68>)
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	4a04      	ldr	r2, [pc, #16]	; (8007e04 <HAL_PCDEx_LPM_Callback+0x68>)
 8007df4:	f043 0306 	orr.w	r3, r3, #6
 8007df8:	6113      	str	r3, [r2, #16]
    break;
 8007dfa:	bf00      	nop
}
 8007dfc:	bf00      	nop
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	e000ed00 	.word	0xe000ed00

08007e08 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007e0c:	f7f8 fa78 	bl	8000300 <SystemClock_Config>
}
 8007e10:	bf00      	nop
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <__errno>:
 8007e14:	4b01      	ldr	r3, [pc, #4]	; (8007e1c <__errno+0x8>)
 8007e16:	6818      	ldr	r0, [r3, #0]
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20000190 	.word	0x20000190

08007e20 <__libc_init_array>:
 8007e20:	b570      	push	{r4, r5, r6, lr}
 8007e22:	4d0d      	ldr	r5, [pc, #52]	; (8007e58 <__libc_init_array+0x38>)
 8007e24:	4c0d      	ldr	r4, [pc, #52]	; (8007e5c <__libc_init_array+0x3c>)
 8007e26:	1b64      	subs	r4, r4, r5
 8007e28:	10a4      	asrs	r4, r4, #2
 8007e2a:	2600      	movs	r6, #0
 8007e2c:	42a6      	cmp	r6, r4
 8007e2e:	d109      	bne.n	8007e44 <__libc_init_array+0x24>
 8007e30:	4d0b      	ldr	r5, [pc, #44]	; (8007e60 <__libc_init_array+0x40>)
 8007e32:	4c0c      	ldr	r4, [pc, #48]	; (8007e64 <__libc_init_array+0x44>)
 8007e34:	f000 fc5e 	bl	80086f4 <_init>
 8007e38:	1b64      	subs	r4, r4, r5
 8007e3a:	10a4      	asrs	r4, r4, #2
 8007e3c:	2600      	movs	r6, #0
 8007e3e:	42a6      	cmp	r6, r4
 8007e40:	d105      	bne.n	8007e4e <__libc_init_array+0x2e>
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e48:	4798      	blx	r3
 8007e4a:	3601      	adds	r6, #1
 8007e4c:	e7ee      	b.n	8007e2c <__libc_init_array+0xc>
 8007e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e52:	4798      	blx	r3
 8007e54:	3601      	adds	r6, #1
 8007e56:	e7f2      	b.n	8007e3e <__libc_init_array+0x1e>
 8007e58:	080087d0 	.word	0x080087d0
 8007e5c:	080087d0 	.word	0x080087d0
 8007e60:	080087d0 	.word	0x080087d0
 8007e64:	080087d4 	.word	0x080087d4

08007e68 <malloc>:
 8007e68:	4b02      	ldr	r3, [pc, #8]	; (8007e74 <malloc+0xc>)
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	f000 b863 	b.w	8007f38 <_malloc_r>
 8007e72:	bf00      	nop
 8007e74:	20000190 	.word	0x20000190

08007e78 <free>:
 8007e78:	4b02      	ldr	r3, [pc, #8]	; (8007e84 <free+0xc>)
 8007e7a:	4601      	mov	r1, r0
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	f000 b80b 	b.w	8007e98 <_free_r>
 8007e82:	bf00      	nop
 8007e84:	20000190 	.word	0x20000190

08007e88 <memset>:
 8007e88:	4402      	add	r2, r0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d100      	bne.n	8007e92 <memset+0xa>
 8007e90:	4770      	bx	lr
 8007e92:	f803 1b01 	strb.w	r1, [r3], #1
 8007e96:	e7f9      	b.n	8007e8c <memset+0x4>

08007e98 <_free_r>:
 8007e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e9a:	2900      	cmp	r1, #0
 8007e9c:	d048      	beq.n	8007f30 <_free_r+0x98>
 8007e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea2:	9001      	str	r0, [sp, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f1a1 0404 	sub.w	r4, r1, #4
 8007eaa:	bfb8      	it	lt
 8007eac:	18e4      	addlt	r4, r4, r3
 8007eae:	f000 f8cd 	bl	800804c <__malloc_lock>
 8007eb2:	4a20      	ldr	r2, [pc, #128]	; (8007f34 <_free_r+0x9c>)
 8007eb4:	9801      	ldr	r0, [sp, #4]
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	4615      	mov	r5, r2
 8007eba:	b933      	cbnz	r3, 8007eca <_free_r+0x32>
 8007ebc:	6063      	str	r3, [r4, #4]
 8007ebe:	6014      	str	r4, [r2, #0]
 8007ec0:	b003      	add	sp, #12
 8007ec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ec6:	f000 b8c7 	b.w	8008058 <__malloc_unlock>
 8007eca:	42a3      	cmp	r3, r4
 8007ecc:	d90b      	bls.n	8007ee6 <_free_r+0x4e>
 8007ece:	6821      	ldr	r1, [r4, #0]
 8007ed0:	1862      	adds	r2, r4, r1
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	bf04      	itt	eq
 8007ed6:	681a      	ldreq	r2, [r3, #0]
 8007ed8:	685b      	ldreq	r3, [r3, #4]
 8007eda:	6063      	str	r3, [r4, #4]
 8007edc:	bf04      	itt	eq
 8007ede:	1852      	addeq	r2, r2, r1
 8007ee0:	6022      	streq	r2, [r4, #0]
 8007ee2:	602c      	str	r4, [r5, #0]
 8007ee4:	e7ec      	b.n	8007ec0 <_free_r+0x28>
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	b10b      	cbz	r3, 8007ef0 <_free_r+0x58>
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	d9fa      	bls.n	8007ee6 <_free_r+0x4e>
 8007ef0:	6811      	ldr	r1, [r2, #0]
 8007ef2:	1855      	adds	r5, r2, r1
 8007ef4:	42a5      	cmp	r5, r4
 8007ef6:	d10b      	bne.n	8007f10 <_free_r+0x78>
 8007ef8:	6824      	ldr	r4, [r4, #0]
 8007efa:	4421      	add	r1, r4
 8007efc:	1854      	adds	r4, r2, r1
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	6011      	str	r1, [r2, #0]
 8007f02:	d1dd      	bne.n	8007ec0 <_free_r+0x28>
 8007f04:	681c      	ldr	r4, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	6053      	str	r3, [r2, #4]
 8007f0a:	4421      	add	r1, r4
 8007f0c:	6011      	str	r1, [r2, #0]
 8007f0e:	e7d7      	b.n	8007ec0 <_free_r+0x28>
 8007f10:	d902      	bls.n	8007f18 <_free_r+0x80>
 8007f12:	230c      	movs	r3, #12
 8007f14:	6003      	str	r3, [r0, #0]
 8007f16:	e7d3      	b.n	8007ec0 <_free_r+0x28>
 8007f18:	6825      	ldr	r5, [r4, #0]
 8007f1a:	1961      	adds	r1, r4, r5
 8007f1c:	428b      	cmp	r3, r1
 8007f1e:	bf04      	itt	eq
 8007f20:	6819      	ldreq	r1, [r3, #0]
 8007f22:	685b      	ldreq	r3, [r3, #4]
 8007f24:	6063      	str	r3, [r4, #4]
 8007f26:	bf04      	itt	eq
 8007f28:	1949      	addeq	r1, r1, r5
 8007f2a:	6021      	streq	r1, [r4, #0]
 8007f2c:	6054      	str	r4, [r2, #4]
 8007f2e:	e7c7      	b.n	8007ec0 <_free_r+0x28>
 8007f30:	b003      	add	sp, #12
 8007f32:	bd30      	pop	{r4, r5, pc}
 8007f34:	20000218 	.word	0x20000218

08007f38 <_malloc_r>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	1ccd      	adds	r5, r1, #3
 8007f3c:	f025 0503 	bic.w	r5, r5, #3
 8007f40:	3508      	adds	r5, #8
 8007f42:	2d0c      	cmp	r5, #12
 8007f44:	bf38      	it	cc
 8007f46:	250c      	movcc	r5, #12
 8007f48:	2d00      	cmp	r5, #0
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	db01      	blt.n	8007f52 <_malloc_r+0x1a>
 8007f4e:	42a9      	cmp	r1, r5
 8007f50:	d903      	bls.n	8007f5a <_malloc_r+0x22>
 8007f52:	230c      	movs	r3, #12
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	2000      	movs	r0, #0
 8007f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f5a:	f000 f877 	bl	800804c <__malloc_lock>
 8007f5e:	4921      	ldr	r1, [pc, #132]	; (8007fe4 <_malloc_r+0xac>)
 8007f60:	680a      	ldr	r2, [r1, #0]
 8007f62:	4614      	mov	r4, r2
 8007f64:	b99c      	cbnz	r4, 8007f8e <_malloc_r+0x56>
 8007f66:	4f20      	ldr	r7, [pc, #128]	; (8007fe8 <_malloc_r+0xb0>)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	b923      	cbnz	r3, 8007f76 <_malloc_r+0x3e>
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f000 f83c 	bl	8007fec <_sbrk_r>
 8007f74:	6038      	str	r0, [r7, #0]
 8007f76:	4629      	mov	r1, r5
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f000 f837 	bl	8007fec <_sbrk_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d123      	bne.n	8007fca <_malloc_r+0x92>
 8007f82:	230c      	movs	r3, #12
 8007f84:	6033      	str	r3, [r6, #0]
 8007f86:	4630      	mov	r0, r6
 8007f88:	f000 f866 	bl	8008058 <__malloc_unlock>
 8007f8c:	e7e3      	b.n	8007f56 <_malloc_r+0x1e>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	1b5b      	subs	r3, r3, r5
 8007f92:	d417      	bmi.n	8007fc4 <_malloc_r+0x8c>
 8007f94:	2b0b      	cmp	r3, #11
 8007f96:	d903      	bls.n	8007fa0 <_malloc_r+0x68>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	441c      	add	r4, r3
 8007f9c:	6025      	str	r5, [r4, #0]
 8007f9e:	e004      	b.n	8007faa <_malloc_r+0x72>
 8007fa0:	6863      	ldr	r3, [r4, #4]
 8007fa2:	42a2      	cmp	r2, r4
 8007fa4:	bf0c      	ite	eq
 8007fa6:	600b      	streq	r3, [r1, #0]
 8007fa8:	6053      	strne	r3, [r2, #4]
 8007faa:	4630      	mov	r0, r6
 8007fac:	f000 f854 	bl	8008058 <__malloc_unlock>
 8007fb0:	f104 000b 	add.w	r0, r4, #11
 8007fb4:	1d23      	adds	r3, r4, #4
 8007fb6:	f020 0007 	bic.w	r0, r0, #7
 8007fba:	1ac2      	subs	r2, r0, r3
 8007fbc:	d0cc      	beq.n	8007f58 <_malloc_r+0x20>
 8007fbe:	1a1b      	subs	r3, r3, r0
 8007fc0:	50a3      	str	r3, [r4, r2]
 8007fc2:	e7c9      	b.n	8007f58 <_malloc_r+0x20>
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	6864      	ldr	r4, [r4, #4]
 8007fc8:	e7cc      	b.n	8007f64 <_malloc_r+0x2c>
 8007fca:	1cc4      	adds	r4, r0, #3
 8007fcc:	f024 0403 	bic.w	r4, r4, #3
 8007fd0:	42a0      	cmp	r0, r4
 8007fd2:	d0e3      	beq.n	8007f9c <_malloc_r+0x64>
 8007fd4:	1a21      	subs	r1, r4, r0
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 f808 	bl	8007fec <_sbrk_r>
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d1dd      	bne.n	8007f9c <_malloc_r+0x64>
 8007fe0:	e7cf      	b.n	8007f82 <_malloc_r+0x4a>
 8007fe2:	bf00      	nop
 8007fe4:	20000218 	.word	0x20000218
 8007fe8:	2000021c 	.word	0x2000021c

08007fec <_sbrk_r>:
 8007fec:	b538      	push	{r3, r4, r5, lr}
 8007fee:	4d06      	ldr	r5, [pc, #24]	; (8008008 <_sbrk_r+0x1c>)
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	4608      	mov	r0, r1
 8007ff6:	602b      	str	r3, [r5, #0]
 8007ff8:	f7f8 fb30 	bl	800065c <_sbrk>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_sbrk_r+0x1a>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_sbrk_r+0x1a>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	2000129c 	.word	0x2000129c

0800800c <siprintf>:
 800800c:	b40e      	push	{r1, r2, r3}
 800800e:	b500      	push	{lr}
 8008010:	b09c      	sub	sp, #112	; 0x70
 8008012:	ab1d      	add	r3, sp, #116	; 0x74
 8008014:	9002      	str	r0, [sp, #8]
 8008016:	9006      	str	r0, [sp, #24]
 8008018:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800801c:	4809      	ldr	r0, [pc, #36]	; (8008044 <siprintf+0x38>)
 800801e:	9107      	str	r1, [sp, #28]
 8008020:	9104      	str	r1, [sp, #16]
 8008022:	4909      	ldr	r1, [pc, #36]	; (8008048 <siprintf+0x3c>)
 8008024:	f853 2b04 	ldr.w	r2, [r3], #4
 8008028:	9105      	str	r1, [sp, #20]
 800802a:	6800      	ldr	r0, [r0, #0]
 800802c:	9301      	str	r3, [sp, #4]
 800802e:	a902      	add	r1, sp, #8
 8008030:	f000 f874 	bl	800811c <_svfiprintf_r>
 8008034:	9b02      	ldr	r3, [sp, #8]
 8008036:	2200      	movs	r2, #0
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	b01c      	add	sp, #112	; 0x70
 800803c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008040:	b003      	add	sp, #12
 8008042:	4770      	bx	lr
 8008044:	20000190 	.word	0x20000190
 8008048:	ffff0208 	.word	0xffff0208

0800804c <__malloc_lock>:
 800804c:	4801      	ldr	r0, [pc, #4]	; (8008054 <__malloc_lock+0x8>)
 800804e:	f000 baf9 	b.w	8008644 <__retarget_lock_acquire_recursive>
 8008052:	bf00      	nop
 8008054:	200012a4 	.word	0x200012a4

08008058 <__malloc_unlock>:
 8008058:	4801      	ldr	r0, [pc, #4]	; (8008060 <__malloc_unlock+0x8>)
 800805a:	f000 baf4 	b.w	8008646 <__retarget_lock_release_recursive>
 800805e:	bf00      	nop
 8008060:	200012a4 	.word	0x200012a4

08008064 <__ssputs_r>:
 8008064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008068:	688e      	ldr	r6, [r1, #8]
 800806a:	429e      	cmp	r6, r3
 800806c:	4682      	mov	sl, r0
 800806e:	460c      	mov	r4, r1
 8008070:	4690      	mov	r8, r2
 8008072:	461f      	mov	r7, r3
 8008074:	d838      	bhi.n	80080e8 <__ssputs_r+0x84>
 8008076:	898a      	ldrh	r2, [r1, #12]
 8008078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800807c:	d032      	beq.n	80080e4 <__ssputs_r+0x80>
 800807e:	6825      	ldr	r5, [r4, #0]
 8008080:	6909      	ldr	r1, [r1, #16]
 8008082:	eba5 0901 	sub.w	r9, r5, r1
 8008086:	6965      	ldr	r5, [r4, #20]
 8008088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800808c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008090:	3301      	adds	r3, #1
 8008092:	444b      	add	r3, r9
 8008094:	106d      	asrs	r5, r5, #1
 8008096:	429d      	cmp	r5, r3
 8008098:	bf38      	it	cc
 800809a:	461d      	movcc	r5, r3
 800809c:	0553      	lsls	r3, r2, #21
 800809e:	d531      	bpl.n	8008104 <__ssputs_r+0xa0>
 80080a0:	4629      	mov	r1, r5
 80080a2:	f7ff ff49 	bl	8007f38 <_malloc_r>
 80080a6:	4606      	mov	r6, r0
 80080a8:	b950      	cbnz	r0, 80080c0 <__ssputs_r+0x5c>
 80080aa:	230c      	movs	r3, #12
 80080ac:	f8ca 3000 	str.w	r3, [sl]
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080b6:	81a3      	strh	r3, [r4, #12]
 80080b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c0:	6921      	ldr	r1, [r4, #16]
 80080c2:	464a      	mov	r2, r9
 80080c4:	f000 fac0 	bl	8008648 <memcpy>
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d2:	81a3      	strh	r3, [r4, #12]
 80080d4:	6126      	str	r6, [r4, #16]
 80080d6:	6165      	str	r5, [r4, #20]
 80080d8:	444e      	add	r6, r9
 80080da:	eba5 0509 	sub.w	r5, r5, r9
 80080de:	6026      	str	r6, [r4, #0]
 80080e0:	60a5      	str	r5, [r4, #8]
 80080e2:	463e      	mov	r6, r7
 80080e4:	42be      	cmp	r6, r7
 80080e6:	d900      	bls.n	80080ea <__ssputs_r+0x86>
 80080e8:	463e      	mov	r6, r7
 80080ea:	4632      	mov	r2, r6
 80080ec:	6820      	ldr	r0, [r4, #0]
 80080ee:	4641      	mov	r1, r8
 80080f0:	f000 fab8 	bl	8008664 <memmove>
 80080f4:	68a3      	ldr	r3, [r4, #8]
 80080f6:	6822      	ldr	r2, [r4, #0]
 80080f8:	1b9b      	subs	r3, r3, r6
 80080fa:	4432      	add	r2, r6
 80080fc:	60a3      	str	r3, [r4, #8]
 80080fe:	6022      	str	r2, [r4, #0]
 8008100:	2000      	movs	r0, #0
 8008102:	e7db      	b.n	80080bc <__ssputs_r+0x58>
 8008104:	462a      	mov	r2, r5
 8008106:	f000 fac7 	bl	8008698 <_realloc_r>
 800810a:	4606      	mov	r6, r0
 800810c:	2800      	cmp	r0, #0
 800810e:	d1e1      	bne.n	80080d4 <__ssputs_r+0x70>
 8008110:	6921      	ldr	r1, [r4, #16]
 8008112:	4650      	mov	r0, sl
 8008114:	f7ff fec0 	bl	8007e98 <_free_r>
 8008118:	e7c7      	b.n	80080aa <__ssputs_r+0x46>
	...

0800811c <_svfiprintf_r>:
 800811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	4698      	mov	r8, r3
 8008122:	898b      	ldrh	r3, [r1, #12]
 8008124:	061b      	lsls	r3, r3, #24
 8008126:	b09d      	sub	sp, #116	; 0x74
 8008128:	4607      	mov	r7, r0
 800812a:	460d      	mov	r5, r1
 800812c:	4614      	mov	r4, r2
 800812e:	d50e      	bpl.n	800814e <_svfiprintf_r+0x32>
 8008130:	690b      	ldr	r3, [r1, #16]
 8008132:	b963      	cbnz	r3, 800814e <_svfiprintf_r+0x32>
 8008134:	2140      	movs	r1, #64	; 0x40
 8008136:	f7ff feff 	bl	8007f38 <_malloc_r>
 800813a:	6028      	str	r0, [r5, #0]
 800813c:	6128      	str	r0, [r5, #16]
 800813e:	b920      	cbnz	r0, 800814a <_svfiprintf_r+0x2e>
 8008140:	230c      	movs	r3, #12
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008148:	e0d1      	b.n	80082ee <_svfiprintf_r+0x1d2>
 800814a:	2340      	movs	r3, #64	; 0x40
 800814c:	616b      	str	r3, [r5, #20]
 800814e:	2300      	movs	r3, #0
 8008150:	9309      	str	r3, [sp, #36]	; 0x24
 8008152:	2320      	movs	r3, #32
 8008154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008158:	f8cd 800c 	str.w	r8, [sp, #12]
 800815c:	2330      	movs	r3, #48	; 0x30
 800815e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008308 <_svfiprintf_r+0x1ec>
 8008162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008166:	f04f 0901 	mov.w	r9, #1
 800816a:	4623      	mov	r3, r4
 800816c:	469a      	mov	sl, r3
 800816e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008172:	b10a      	cbz	r2, 8008178 <_svfiprintf_r+0x5c>
 8008174:	2a25      	cmp	r2, #37	; 0x25
 8008176:	d1f9      	bne.n	800816c <_svfiprintf_r+0x50>
 8008178:	ebba 0b04 	subs.w	fp, sl, r4
 800817c:	d00b      	beq.n	8008196 <_svfiprintf_r+0x7a>
 800817e:	465b      	mov	r3, fp
 8008180:	4622      	mov	r2, r4
 8008182:	4629      	mov	r1, r5
 8008184:	4638      	mov	r0, r7
 8008186:	f7ff ff6d 	bl	8008064 <__ssputs_r>
 800818a:	3001      	adds	r0, #1
 800818c:	f000 80aa 	beq.w	80082e4 <_svfiprintf_r+0x1c8>
 8008190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008192:	445a      	add	r2, fp
 8008194:	9209      	str	r2, [sp, #36]	; 0x24
 8008196:	f89a 3000 	ldrb.w	r3, [sl]
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 80a2 	beq.w	80082e4 <_svfiprintf_r+0x1c8>
 80081a0:	2300      	movs	r3, #0
 80081a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081aa:	f10a 0a01 	add.w	sl, sl, #1
 80081ae:	9304      	str	r3, [sp, #16]
 80081b0:	9307      	str	r3, [sp, #28]
 80081b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081b6:	931a      	str	r3, [sp, #104]	; 0x68
 80081b8:	4654      	mov	r4, sl
 80081ba:	2205      	movs	r2, #5
 80081bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c0:	4851      	ldr	r0, [pc, #324]	; (8008308 <_svfiprintf_r+0x1ec>)
 80081c2:	f7f8 f80d 	bl	80001e0 <memchr>
 80081c6:	9a04      	ldr	r2, [sp, #16]
 80081c8:	b9d8      	cbnz	r0, 8008202 <_svfiprintf_r+0xe6>
 80081ca:	06d0      	lsls	r0, r2, #27
 80081cc:	bf44      	itt	mi
 80081ce:	2320      	movmi	r3, #32
 80081d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081d4:	0711      	lsls	r1, r2, #28
 80081d6:	bf44      	itt	mi
 80081d8:	232b      	movmi	r3, #43	; 0x2b
 80081da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081de:	f89a 3000 	ldrb.w	r3, [sl]
 80081e2:	2b2a      	cmp	r3, #42	; 0x2a
 80081e4:	d015      	beq.n	8008212 <_svfiprintf_r+0xf6>
 80081e6:	9a07      	ldr	r2, [sp, #28]
 80081e8:	4654      	mov	r4, sl
 80081ea:	2000      	movs	r0, #0
 80081ec:	f04f 0c0a 	mov.w	ip, #10
 80081f0:	4621      	mov	r1, r4
 80081f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081f6:	3b30      	subs	r3, #48	; 0x30
 80081f8:	2b09      	cmp	r3, #9
 80081fa:	d94e      	bls.n	800829a <_svfiprintf_r+0x17e>
 80081fc:	b1b0      	cbz	r0, 800822c <_svfiprintf_r+0x110>
 80081fe:	9207      	str	r2, [sp, #28]
 8008200:	e014      	b.n	800822c <_svfiprintf_r+0x110>
 8008202:	eba0 0308 	sub.w	r3, r0, r8
 8008206:	fa09 f303 	lsl.w	r3, r9, r3
 800820a:	4313      	orrs	r3, r2
 800820c:	9304      	str	r3, [sp, #16]
 800820e:	46a2      	mov	sl, r4
 8008210:	e7d2      	b.n	80081b8 <_svfiprintf_r+0x9c>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	1d19      	adds	r1, r3, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	9103      	str	r1, [sp, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	bfbb      	ittet	lt
 800821e:	425b      	neglt	r3, r3
 8008220:	f042 0202 	orrlt.w	r2, r2, #2
 8008224:	9307      	strge	r3, [sp, #28]
 8008226:	9307      	strlt	r3, [sp, #28]
 8008228:	bfb8      	it	lt
 800822a:	9204      	strlt	r2, [sp, #16]
 800822c:	7823      	ldrb	r3, [r4, #0]
 800822e:	2b2e      	cmp	r3, #46	; 0x2e
 8008230:	d10c      	bne.n	800824c <_svfiprintf_r+0x130>
 8008232:	7863      	ldrb	r3, [r4, #1]
 8008234:	2b2a      	cmp	r3, #42	; 0x2a
 8008236:	d135      	bne.n	80082a4 <_svfiprintf_r+0x188>
 8008238:	9b03      	ldr	r3, [sp, #12]
 800823a:	1d1a      	adds	r2, r3, #4
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	9203      	str	r2, [sp, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	bfb8      	it	lt
 8008244:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008248:	3402      	adds	r4, #2
 800824a:	9305      	str	r3, [sp, #20]
 800824c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008318 <_svfiprintf_r+0x1fc>
 8008250:	7821      	ldrb	r1, [r4, #0]
 8008252:	2203      	movs	r2, #3
 8008254:	4650      	mov	r0, sl
 8008256:	f7f7 ffc3 	bl	80001e0 <memchr>
 800825a:	b140      	cbz	r0, 800826e <_svfiprintf_r+0x152>
 800825c:	2340      	movs	r3, #64	; 0x40
 800825e:	eba0 000a 	sub.w	r0, r0, sl
 8008262:	fa03 f000 	lsl.w	r0, r3, r0
 8008266:	9b04      	ldr	r3, [sp, #16]
 8008268:	4303      	orrs	r3, r0
 800826a:	3401      	adds	r4, #1
 800826c:	9304      	str	r3, [sp, #16]
 800826e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008272:	4826      	ldr	r0, [pc, #152]	; (800830c <_svfiprintf_r+0x1f0>)
 8008274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008278:	2206      	movs	r2, #6
 800827a:	f7f7 ffb1 	bl	80001e0 <memchr>
 800827e:	2800      	cmp	r0, #0
 8008280:	d038      	beq.n	80082f4 <_svfiprintf_r+0x1d8>
 8008282:	4b23      	ldr	r3, [pc, #140]	; (8008310 <_svfiprintf_r+0x1f4>)
 8008284:	bb1b      	cbnz	r3, 80082ce <_svfiprintf_r+0x1b2>
 8008286:	9b03      	ldr	r3, [sp, #12]
 8008288:	3307      	adds	r3, #7
 800828a:	f023 0307 	bic.w	r3, r3, #7
 800828e:	3308      	adds	r3, #8
 8008290:	9303      	str	r3, [sp, #12]
 8008292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008294:	4433      	add	r3, r6
 8008296:	9309      	str	r3, [sp, #36]	; 0x24
 8008298:	e767      	b.n	800816a <_svfiprintf_r+0x4e>
 800829a:	fb0c 3202 	mla	r2, ip, r2, r3
 800829e:	460c      	mov	r4, r1
 80082a0:	2001      	movs	r0, #1
 80082a2:	e7a5      	b.n	80081f0 <_svfiprintf_r+0xd4>
 80082a4:	2300      	movs	r3, #0
 80082a6:	3401      	adds	r4, #1
 80082a8:	9305      	str	r3, [sp, #20]
 80082aa:	4619      	mov	r1, r3
 80082ac:	f04f 0c0a 	mov.w	ip, #10
 80082b0:	4620      	mov	r0, r4
 80082b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082b6:	3a30      	subs	r2, #48	; 0x30
 80082b8:	2a09      	cmp	r2, #9
 80082ba:	d903      	bls.n	80082c4 <_svfiprintf_r+0x1a8>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0c5      	beq.n	800824c <_svfiprintf_r+0x130>
 80082c0:	9105      	str	r1, [sp, #20]
 80082c2:	e7c3      	b.n	800824c <_svfiprintf_r+0x130>
 80082c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80082c8:	4604      	mov	r4, r0
 80082ca:	2301      	movs	r3, #1
 80082cc:	e7f0      	b.n	80082b0 <_svfiprintf_r+0x194>
 80082ce:	ab03      	add	r3, sp, #12
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	462a      	mov	r2, r5
 80082d4:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <_svfiprintf_r+0x1f8>)
 80082d6:	a904      	add	r1, sp, #16
 80082d8:	4638      	mov	r0, r7
 80082da:	f3af 8000 	nop.w
 80082de:	1c42      	adds	r2, r0, #1
 80082e0:	4606      	mov	r6, r0
 80082e2:	d1d6      	bne.n	8008292 <_svfiprintf_r+0x176>
 80082e4:	89ab      	ldrh	r3, [r5, #12]
 80082e6:	065b      	lsls	r3, r3, #25
 80082e8:	f53f af2c 	bmi.w	8008144 <_svfiprintf_r+0x28>
 80082ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082ee:	b01d      	add	sp, #116	; 0x74
 80082f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f4:	ab03      	add	r3, sp, #12
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	462a      	mov	r2, r5
 80082fa:	4b06      	ldr	r3, [pc, #24]	; (8008314 <_svfiprintf_r+0x1f8>)
 80082fc:	a904      	add	r1, sp, #16
 80082fe:	4638      	mov	r0, r7
 8008300:	f000 f87a 	bl	80083f8 <_printf_i>
 8008304:	e7eb      	b.n	80082de <_svfiprintf_r+0x1c2>
 8008306:	bf00      	nop
 8008308:	0800879c 	.word	0x0800879c
 800830c:	080087a6 	.word	0x080087a6
 8008310:	00000000 	.word	0x00000000
 8008314:	08008065 	.word	0x08008065
 8008318:	080087a2 	.word	0x080087a2

0800831c <_printf_common>:
 800831c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008320:	4616      	mov	r6, r2
 8008322:	4699      	mov	r9, r3
 8008324:	688a      	ldr	r2, [r1, #8]
 8008326:	690b      	ldr	r3, [r1, #16]
 8008328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800832c:	4293      	cmp	r3, r2
 800832e:	bfb8      	it	lt
 8008330:	4613      	movlt	r3, r2
 8008332:	6033      	str	r3, [r6, #0]
 8008334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008338:	4607      	mov	r7, r0
 800833a:	460c      	mov	r4, r1
 800833c:	b10a      	cbz	r2, 8008342 <_printf_common+0x26>
 800833e:	3301      	adds	r3, #1
 8008340:	6033      	str	r3, [r6, #0]
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	0699      	lsls	r1, r3, #26
 8008346:	bf42      	ittt	mi
 8008348:	6833      	ldrmi	r3, [r6, #0]
 800834a:	3302      	addmi	r3, #2
 800834c:	6033      	strmi	r3, [r6, #0]
 800834e:	6825      	ldr	r5, [r4, #0]
 8008350:	f015 0506 	ands.w	r5, r5, #6
 8008354:	d106      	bne.n	8008364 <_printf_common+0x48>
 8008356:	f104 0a19 	add.w	sl, r4, #25
 800835a:	68e3      	ldr	r3, [r4, #12]
 800835c:	6832      	ldr	r2, [r6, #0]
 800835e:	1a9b      	subs	r3, r3, r2
 8008360:	42ab      	cmp	r3, r5
 8008362:	dc26      	bgt.n	80083b2 <_printf_common+0x96>
 8008364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008368:	1e13      	subs	r3, r2, #0
 800836a:	6822      	ldr	r2, [r4, #0]
 800836c:	bf18      	it	ne
 800836e:	2301      	movne	r3, #1
 8008370:	0692      	lsls	r2, r2, #26
 8008372:	d42b      	bmi.n	80083cc <_printf_common+0xb0>
 8008374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008378:	4649      	mov	r1, r9
 800837a:	4638      	mov	r0, r7
 800837c:	47c0      	blx	r8
 800837e:	3001      	adds	r0, #1
 8008380:	d01e      	beq.n	80083c0 <_printf_common+0xa4>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	68e5      	ldr	r5, [r4, #12]
 8008386:	6832      	ldr	r2, [r6, #0]
 8008388:	f003 0306 	and.w	r3, r3, #6
 800838c:	2b04      	cmp	r3, #4
 800838e:	bf08      	it	eq
 8008390:	1aad      	subeq	r5, r5, r2
 8008392:	68a3      	ldr	r3, [r4, #8]
 8008394:	6922      	ldr	r2, [r4, #16]
 8008396:	bf0c      	ite	eq
 8008398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800839c:	2500      	movne	r5, #0
 800839e:	4293      	cmp	r3, r2
 80083a0:	bfc4      	itt	gt
 80083a2:	1a9b      	subgt	r3, r3, r2
 80083a4:	18ed      	addgt	r5, r5, r3
 80083a6:	2600      	movs	r6, #0
 80083a8:	341a      	adds	r4, #26
 80083aa:	42b5      	cmp	r5, r6
 80083ac:	d11a      	bne.n	80083e4 <_printf_common+0xc8>
 80083ae:	2000      	movs	r0, #0
 80083b0:	e008      	b.n	80083c4 <_printf_common+0xa8>
 80083b2:	2301      	movs	r3, #1
 80083b4:	4652      	mov	r2, sl
 80083b6:	4649      	mov	r1, r9
 80083b8:	4638      	mov	r0, r7
 80083ba:	47c0      	blx	r8
 80083bc:	3001      	adds	r0, #1
 80083be:	d103      	bne.n	80083c8 <_printf_common+0xac>
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c8:	3501      	adds	r5, #1
 80083ca:	e7c6      	b.n	800835a <_printf_common+0x3e>
 80083cc:	18e1      	adds	r1, r4, r3
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	2030      	movs	r0, #48	; 0x30
 80083d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083d6:	4422      	add	r2, r4
 80083d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083e0:	3302      	adds	r3, #2
 80083e2:	e7c7      	b.n	8008374 <_printf_common+0x58>
 80083e4:	2301      	movs	r3, #1
 80083e6:	4622      	mov	r2, r4
 80083e8:	4649      	mov	r1, r9
 80083ea:	4638      	mov	r0, r7
 80083ec:	47c0      	blx	r8
 80083ee:	3001      	adds	r0, #1
 80083f0:	d0e6      	beq.n	80083c0 <_printf_common+0xa4>
 80083f2:	3601      	adds	r6, #1
 80083f4:	e7d9      	b.n	80083aa <_printf_common+0x8e>
	...

080083f8 <_printf_i>:
 80083f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083fc:	460c      	mov	r4, r1
 80083fe:	4691      	mov	r9, r2
 8008400:	7e27      	ldrb	r7, [r4, #24]
 8008402:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008404:	2f78      	cmp	r7, #120	; 0x78
 8008406:	4680      	mov	r8, r0
 8008408:	469a      	mov	sl, r3
 800840a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800840e:	d807      	bhi.n	8008420 <_printf_i+0x28>
 8008410:	2f62      	cmp	r7, #98	; 0x62
 8008412:	d80a      	bhi.n	800842a <_printf_i+0x32>
 8008414:	2f00      	cmp	r7, #0
 8008416:	f000 80d8 	beq.w	80085ca <_printf_i+0x1d2>
 800841a:	2f58      	cmp	r7, #88	; 0x58
 800841c:	f000 80a3 	beq.w	8008566 <_printf_i+0x16e>
 8008420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008428:	e03a      	b.n	80084a0 <_printf_i+0xa8>
 800842a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800842e:	2b15      	cmp	r3, #21
 8008430:	d8f6      	bhi.n	8008420 <_printf_i+0x28>
 8008432:	a001      	add	r0, pc, #4	; (adr r0, 8008438 <_printf_i+0x40>)
 8008434:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008438:	08008491 	.word	0x08008491
 800843c:	080084a5 	.word	0x080084a5
 8008440:	08008421 	.word	0x08008421
 8008444:	08008421 	.word	0x08008421
 8008448:	08008421 	.word	0x08008421
 800844c:	08008421 	.word	0x08008421
 8008450:	080084a5 	.word	0x080084a5
 8008454:	08008421 	.word	0x08008421
 8008458:	08008421 	.word	0x08008421
 800845c:	08008421 	.word	0x08008421
 8008460:	08008421 	.word	0x08008421
 8008464:	080085b1 	.word	0x080085b1
 8008468:	080084d5 	.word	0x080084d5
 800846c:	08008593 	.word	0x08008593
 8008470:	08008421 	.word	0x08008421
 8008474:	08008421 	.word	0x08008421
 8008478:	080085d3 	.word	0x080085d3
 800847c:	08008421 	.word	0x08008421
 8008480:	080084d5 	.word	0x080084d5
 8008484:	08008421 	.word	0x08008421
 8008488:	08008421 	.word	0x08008421
 800848c:	0800859b 	.word	0x0800859b
 8008490:	680b      	ldr	r3, [r1, #0]
 8008492:	1d1a      	adds	r2, r3, #4
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	600a      	str	r2, [r1, #0]
 8008498:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800849c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084a0:	2301      	movs	r3, #1
 80084a2:	e0a3      	b.n	80085ec <_printf_i+0x1f4>
 80084a4:	6825      	ldr	r5, [r4, #0]
 80084a6:	6808      	ldr	r0, [r1, #0]
 80084a8:	062e      	lsls	r6, r5, #24
 80084aa:	f100 0304 	add.w	r3, r0, #4
 80084ae:	d50a      	bpl.n	80084c6 <_printf_i+0xce>
 80084b0:	6805      	ldr	r5, [r0, #0]
 80084b2:	600b      	str	r3, [r1, #0]
 80084b4:	2d00      	cmp	r5, #0
 80084b6:	da03      	bge.n	80084c0 <_printf_i+0xc8>
 80084b8:	232d      	movs	r3, #45	; 0x2d
 80084ba:	426d      	negs	r5, r5
 80084bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084c0:	485e      	ldr	r0, [pc, #376]	; (800863c <_printf_i+0x244>)
 80084c2:	230a      	movs	r3, #10
 80084c4:	e019      	b.n	80084fa <_printf_i+0x102>
 80084c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084ca:	6805      	ldr	r5, [r0, #0]
 80084cc:	600b      	str	r3, [r1, #0]
 80084ce:	bf18      	it	ne
 80084d0:	b22d      	sxthne	r5, r5
 80084d2:	e7ef      	b.n	80084b4 <_printf_i+0xbc>
 80084d4:	680b      	ldr	r3, [r1, #0]
 80084d6:	6825      	ldr	r5, [r4, #0]
 80084d8:	1d18      	adds	r0, r3, #4
 80084da:	6008      	str	r0, [r1, #0]
 80084dc:	0628      	lsls	r0, r5, #24
 80084de:	d501      	bpl.n	80084e4 <_printf_i+0xec>
 80084e0:	681d      	ldr	r5, [r3, #0]
 80084e2:	e002      	b.n	80084ea <_printf_i+0xf2>
 80084e4:	0669      	lsls	r1, r5, #25
 80084e6:	d5fb      	bpl.n	80084e0 <_printf_i+0xe8>
 80084e8:	881d      	ldrh	r5, [r3, #0]
 80084ea:	4854      	ldr	r0, [pc, #336]	; (800863c <_printf_i+0x244>)
 80084ec:	2f6f      	cmp	r7, #111	; 0x6f
 80084ee:	bf0c      	ite	eq
 80084f0:	2308      	moveq	r3, #8
 80084f2:	230a      	movne	r3, #10
 80084f4:	2100      	movs	r1, #0
 80084f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084fa:	6866      	ldr	r6, [r4, #4]
 80084fc:	60a6      	str	r6, [r4, #8]
 80084fe:	2e00      	cmp	r6, #0
 8008500:	bfa2      	ittt	ge
 8008502:	6821      	ldrge	r1, [r4, #0]
 8008504:	f021 0104 	bicge.w	r1, r1, #4
 8008508:	6021      	strge	r1, [r4, #0]
 800850a:	b90d      	cbnz	r5, 8008510 <_printf_i+0x118>
 800850c:	2e00      	cmp	r6, #0
 800850e:	d04d      	beq.n	80085ac <_printf_i+0x1b4>
 8008510:	4616      	mov	r6, r2
 8008512:	fbb5 f1f3 	udiv	r1, r5, r3
 8008516:	fb03 5711 	mls	r7, r3, r1, r5
 800851a:	5dc7      	ldrb	r7, [r0, r7]
 800851c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008520:	462f      	mov	r7, r5
 8008522:	42bb      	cmp	r3, r7
 8008524:	460d      	mov	r5, r1
 8008526:	d9f4      	bls.n	8008512 <_printf_i+0x11a>
 8008528:	2b08      	cmp	r3, #8
 800852a:	d10b      	bne.n	8008544 <_printf_i+0x14c>
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	07df      	lsls	r7, r3, #31
 8008530:	d508      	bpl.n	8008544 <_printf_i+0x14c>
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	6861      	ldr	r1, [r4, #4]
 8008536:	4299      	cmp	r1, r3
 8008538:	bfde      	ittt	le
 800853a:	2330      	movle	r3, #48	; 0x30
 800853c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008540:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008544:	1b92      	subs	r2, r2, r6
 8008546:	6122      	str	r2, [r4, #16]
 8008548:	f8cd a000 	str.w	sl, [sp]
 800854c:	464b      	mov	r3, r9
 800854e:	aa03      	add	r2, sp, #12
 8008550:	4621      	mov	r1, r4
 8008552:	4640      	mov	r0, r8
 8008554:	f7ff fee2 	bl	800831c <_printf_common>
 8008558:	3001      	adds	r0, #1
 800855a:	d14c      	bne.n	80085f6 <_printf_i+0x1fe>
 800855c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008560:	b004      	add	sp, #16
 8008562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008566:	4835      	ldr	r0, [pc, #212]	; (800863c <_printf_i+0x244>)
 8008568:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	680e      	ldr	r6, [r1, #0]
 8008570:	061f      	lsls	r7, r3, #24
 8008572:	f856 5b04 	ldr.w	r5, [r6], #4
 8008576:	600e      	str	r6, [r1, #0]
 8008578:	d514      	bpl.n	80085a4 <_printf_i+0x1ac>
 800857a:	07d9      	lsls	r1, r3, #31
 800857c:	bf44      	itt	mi
 800857e:	f043 0320 	orrmi.w	r3, r3, #32
 8008582:	6023      	strmi	r3, [r4, #0]
 8008584:	b91d      	cbnz	r5, 800858e <_printf_i+0x196>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	f023 0320 	bic.w	r3, r3, #32
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	2310      	movs	r3, #16
 8008590:	e7b0      	b.n	80084f4 <_printf_i+0xfc>
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	f043 0320 	orr.w	r3, r3, #32
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	2378      	movs	r3, #120	; 0x78
 800859c:	4828      	ldr	r0, [pc, #160]	; (8008640 <_printf_i+0x248>)
 800859e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085a2:	e7e3      	b.n	800856c <_printf_i+0x174>
 80085a4:	065e      	lsls	r6, r3, #25
 80085a6:	bf48      	it	mi
 80085a8:	b2ad      	uxthmi	r5, r5
 80085aa:	e7e6      	b.n	800857a <_printf_i+0x182>
 80085ac:	4616      	mov	r6, r2
 80085ae:	e7bb      	b.n	8008528 <_printf_i+0x130>
 80085b0:	680b      	ldr	r3, [r1, #0]
 80085b2:	6826      	ldr	r6, [r4, #0]
 80085b4:	6960      	ldr	r0, [r4, #20]
 80085b6:	1d1d      	adds	r5, r3, #4
 80085b8:	600d      	str	r5, [r1, #0]
 80085ba:	0635      	lsls	r5, r6, #24
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	d501      	bpl.n	80085c4 <_printf_i+0x1cc>
 80085c0:	6018      	str	r0, [r3, #0]
 80085c2:	e002      	b.n	80085ca <_printf_i+0x1d2>
 80085c4:	0671      	lsls	r1, r6, #25
 80085c6:	d5fb      	bpl.n	80085c0 <_printf_i+0x1c8>
 80085c8:	8018      	strh	r0, [r3, #0]
 80085ca:	2300      	movs	r3, #0
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	4616      	mov	r6, r2
 80085d0:	e7ba      	b.n	8008548 <_printf_i+0x150>
 80085d2:	680b      	ldr	r3, [r1, #0]
 80085d4:	1d1a      	adds	r2, r3, #4
 80085d6:	600a      	str	r2, [r1, #0]
 80085d8:	681e      	ldr	r6, [r3, #0]
 80085da:	6862      	ldr	r2, [r4, #4]
 80085dc:	2100      	movs	r1, #0
 80085de:	4630      	mov	r0, r6
 80085e0:	f7f7 fdfe 	bl	80001e0 <memchr>
 80085e4:	b108      	cbz	r0, 80085ea <_printf_i+0x1f2>
 80085e6:	1b80      	subs	r0, r0, r6
 80085e8:	6060      	str	r0, [r4, #4]
 80085ea:	6863      	ldr	r3, [r4, #4]
 80085ec:	6123      	str	r3, [r4, #16]
 80085ee:	2300      	movs	r3, #0
 80085f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f4:	e7a8      	b.n	8008548 <_printf_i+0x150>
 80085f6:	6923      	ldr	r3, [r4, #16]
 80085f8:	4632      	mov	r2, r6
 80085fa:	4649      	mov	r1, r9
 80085fc:	4640      	mov	r0, r8
 80085fe:	47d0      	blx	sl
 8008600:	3001      	adds	r0, #1
 8008602:	d0ab      	beq.n	800855c <_printf_i+0x164>
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	079b      	lsls	r3, r3, #30
 8008608:	d413      	bmi.n	8008632 <_printf_i+0x23a>
 800860a:	68e0      	ldr	r0, [r4, #12]
 800860c:	9b03      	ldr	r3, [sp, #12]
 800860e:	4298      	cmp	r0, r3
 8008610:	bfb8      	it	lt
 8008612:	4618      	movlt	r0, r3
 8008614:	e7a4      	b.n	8008560 <_printf_i+0x168>
 8008616:	2301      	movs	r3, #1
 8008618:	4632      	mov	r2, r6
 800861a:	4649      	mov	r1, r9
 800861c:	4640      	mov	r0, r8
 800861e:	47d0      	blx	sl
 8008620:	3001      	adds	r0, #1
 8008622:	d09b      	beq.n	800855c <_printf_i+0x164>
 8008624:	3501      	adds	r5, #1
 8008626:	68e3      	ldr	r3, [r4, #12]
 8008628:	9903      	ldr	r1, [sp, #12]
 800862a:	1a5b      	subs	r3, r3, r1
 800862c:	42ab      	cmp	r3, r5
 800862e:	dcf2      	bgt.n	8008616 <_printf_i+0x21e>
 8008630:	e7eb      	b.n	800860a <_printf_i+0x212>
 8008632:	2500      	movs	r5, #0
 8008634:	f104 0619 	add.w	r6, r4, #25
 8008638:	e7f5      	b.n	8008626 <_printf_i+0x22e>
 800863a:	bf00      	nop
 800863c:	080087ad 	.word	0x080087ad
 8008640:	080087be 	.word	0x080087be

08008644 <__retarget_lock_acquire_recursive>:
 8008644:	4770      	bx	lr

08008646 <__retarget_lock_release_recursive>:
 8008646:	4770      	bx	lr

08008648 <memcpy>:
 8008648:	440a      	add	r2, r1
 800864a:	4291      	cmp	r1, r2
 800864c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008650:	d100      	bne.n	8008654 <memcpy+0xc>
 8008652:	4770      	bx	lr
 8008654:	b510      	push	{r4, lr}
 8008656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800865a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800865e:	4291      	cmp	r1, r2
 8008660:	d1f9      	bne.n	8008656 <memcpy+0xe>
 8008662:	bd10      	pop	{r4, pc}

08008664 <memmove>:
 8008664:	4288      	cmp	r0, r1
 8008666:	b510      	push	{r4, lr}
 8008668:	eb01 0402 	add.w	r4, r1, r2
 800866c:	d902      	bls.n	8008674 <memmove+0x10>
 800866e:	4284      	cmp	r4, r0
 8008670:	4623      	mov	r3, r4
 8008672:	d807      	bhi.n	8008684 <memmove+0x20>
 8008674:	1e43      	subs	r3, r0, #1
 8008676:	42a1      	cmp	r1, r4
 8008678:	d008      	beq.n	800868c <memmove+0x28>
 800867a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800867e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008682:	e7f8      	b.n	8008676 <memmove+0x12>
 8008684:	4402      	add	r2, r0
 8008686:	4601      	mov	r1, r0
 8008688:	428a      	cmp	r2, r1
 800868a:	d100      	bne.n	800868e <memmove+0x2a>
 800868c:	bd10      	pop	{r4, pc}
 800868e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008696:	e7f7      	b.n	8008688 <memmove+0x24>

08008698 <_realloc_r>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	4607      	mov	r7, r0
 800869c:	4614      	mov	r4, r2
 800869e:	460e      	mov	r6, r1
 80086a0:	b921      	cbnz	r1, 80086ac <_realloc_r+0x14>
 80086a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086a6:	4611      	mov	r1, r2
 80086a8:	f7ff bc46 	b.w	8007f38 <_malloc_r>
 80086ac:	b922      	cbnz	r2, 80086b8 <_realloc_r+0x20>
 80086ae:	f7ff fbf3 	bl	8007e98 <_free_r>
 80086b2:	4625      	mov	r5, r4
 80086b4:	4628      	mov	r0, r5
 80086b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b8:	f000 f814 	bl	80086e4 <_malloc_usable_size_r>
 80086bc:	42a0      	cmp	r0, r4
 80086be:	d20f      	bcs.n	80086e0 <_realloc_r+0x48>
 80086c0:	4621      	mov	r1, r4
 80086c2:	4638      	mov	r0, r7
 80086c4:	f7ff fc38 	bl	8007f38 <_malloc_r>
 80086c8:	4605      	mov	r5, r0
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d0f2      	beq.n	80086b4 <_realloc_r+0x1c>
 80086ce:	4631      	mov	r1, r6
 80086d0:	4622      	mov	r2, r4
 80086d2:	f7ff ffb9 	bl	8008648 <memcpy>
 80086d6:	4631      	mov	r1, r6
 80086d8:	4638      	mov	r0, r7
 80086da:	f7ff fbdd 	bl	8007e98 <_free_r>
 80086de:	e7e9      	b.n	80086b4 <_realloc_r+0x1c>
 80086e0:	4635      	mov	r5, r6
 80086e2:	e7e7      	b.n	80086b4 <_realloc_r+0x1c>

080086e4 <_malloc_usable_size_r>:
 80086e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e8:	1f18      	subs	r0, r3, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	bfbc      	itt	lt
 80086ee:	580b      	ldrlt	r3, [r1, r0]
 80086f0:	18c0      	addlt	r0, r0, r3
 80086f2:	4770      	bx	lr

080086f4 <_init>:
 80086f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f6:	bf00      	nop
 80086f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fa:	bc08      	pop	{r3}
 80086fc:	469e      	mov	lr, r3
 80086fe:	4770      	bx	lr

08008700 <_fini>:
 8008700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008702:	bf00      	nop
 8008704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008706:	bc08      	pop	{r3}
 8008708:	469e      	mov	lr, r3
 800870a:	4770      	bx	lr
