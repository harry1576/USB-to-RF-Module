
STM-RF-Dongle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eec  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08009078  08009078  00019078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009110  08009110  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  08009110  08009110  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009110  08009110  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009110  08009110  00019110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009114  08009114  00019114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  08009118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001078  2000021c  08009334  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20001294  08009334  00021294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc1b  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b1  00000000  00000000  0003ce67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00040718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00041690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023243  00000000  00000000  00042480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001316d  00000000  00000000  000656c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c388a  00000000  00000000  00078830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c0ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f38  00000000  00000000  0013c110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000021c 	.word	0x2000021c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009060 	.word	0x08009060

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000220 	.word	0x20000220
 80001c8:	08009060 	.word	0x08009060

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fcd3 	bl	8000b7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f82c 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f8ea 	bl	80003b0 <MX_GPIO_Init>
  MX_SPI3_Init();
 80001dc:	f000 f8aa 	bl	8000334 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80001e0:	f008 f8c4 	bl	800836c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 80001e4:	f000 faae 	bl	8000744 <NRF24_Init>
  NRF24_ReadAll(&rxBuffer);
 80001e8:	480d      	ldr	r0, [pc, #52]	; (8000220 <main+0x54>)
 80001ea:	f000 fb2f 	bl	800084c <NRF24_ReadAll>


#if MODE == 0
  NRF24_TxMode(address,120);
 80001ee:	2178      	movs	r1, #120	; 0x78
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <main+0x58>)
 80001f2:	f000 face 	bl	8000792 <NRF24_TxMode>
  NRF24_RxMode(address, 120);
  //NRF24_ReadAll(data);
#endif
 // HAL_Delay(50);

  NRF24_ReadAll(&rxBuffer);
 80001f6:	480a      	ldr	r0, [pc, #40]	; (8000220 <main+0x54>)
 80001f8:	f000 fb28 	bl	800084c <NRF24_ReadAll>

    /* USER CODE BEGIN 3 */

#if MODE == 0

	  if(NRF24_Transmit(TxData) == 1)
 80001fc:	480a      	ldr	r0, [pc, #40]	; (8000228 <main+0x5c>)
 80001fe:	f000 fae7 	bl	80007d0 <NRF24_Transmit>
 8000202:	4603      	mov	r3, r0
 8000204:	2b01      	cmp	r3, #1
 8000206:	d107      	bne.n	8000218 <main+0x4c>
	  {
		//sprintf(txBuffer,"%u\r\n",count);
		//CDC_Transmit_FS((uint8_t *) txBuffer,strlen(txBuffer));
	   	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000208:	2101      	movs	r1, #1
 800020a:	4808      	ldr	r0, [pc, #32]	; (800022c <main+0x60>)
 800020c:	f000 ffe2 	bl	80011d4 <HAL_GPIO_TogglePin>
	   	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 8000210:	2102      	movs	r1, #2
 8000212:	4806      	ldr	r0, [pc, #24]	; (800022c <main+0x60>)
 8000214:	f000 ffde 	bl	80011d4 <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(15);
 8000218:	200f      	movs	r0, #15
 800021a:	f000 fd23 	bl	8000c64 <HAL_Delay>
	  if(NRF24_Transmit(TxData) == 1)
 800021e:	e7ed      	b.n	80001fc <main+0x30>
 8000220:	200002ac 	.word	0x200002ac
 8000224:	20000000 	.word	0x20000000
 8000228:	20000008 	.word	0x20000008
 800022c:	48000400 	.word	0x48000400

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b0ac      	sub	sp, #176	; 0xb0
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800023a:	2244      	movs	r2, #68	; 0x44
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f008 fe3e 	bl	8008ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2254      	movs	r2, #84	; 0x54
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f008 fe30 	bl	8008ec0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000260:	2310      	movs	r3, #16
 8000262:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000270:	2360      	movs	r3, #96	; 0x60
 8000272:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800027c:	2301      	movs	r3, #1
 800027e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000282:	2301      	movs	r3, #1
 8000284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000288:	2328      	movs	r3, #40	; 0x28
 800028a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800028e:	2307      	movs	r3, #7
 8000290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000294:	2302      	movs	r3, #2
 8000296:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 fbc7 	bl	8002a38 <HAL_RCC_OscConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002b0:	f000 f8ca 	bl	8000448 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b4:	230f      	movs	r3, #15
 80002b6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b8:	2303      	movs	r3, #3
 80002ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002cc:	2104      	movs	r1, #4
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 ffd2 	bl	8003278 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002da:	f000 f8b5 	bl	8000448 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002e2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80002e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80002e8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002ea:	2301      	movs	r3, #1
 80002ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80002f2:	2318      	movs	r3, #24
 80002f4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80002f6:	2307      	movs	r3, #7
 80002f8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80002fa:	2302      	movs	r3, #2
 80002fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80002fe:	2302      	movs	r3, #2
 8000300:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000302:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000306:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	4618      	mov	r0, r3
 800030c:	f003 f982 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000316:	f000 f897 	bl	8000448 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800031a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800031e:	f002 fb25 	bl	800296c <HAL_PWREx_ControlVoltageScaling>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000328:	f000 f88e 	bl	8000448 <Error_Handler>
  }
}
 800032c:	bf00      	nop
 800032e:	37b0      	adds	r7, #176	; 0xb0
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_SPI3_Init+0x74>)
 800033a:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <MX_SPI3_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_SPI3_Init+0x74>)
 8000340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000344:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_SPI3_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800034c:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <MX_SPI3_Init+0x74>)
 800034e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000352:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_SPI3_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <MX_SPI3_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_SPI3_Init+0x74>)
 8000362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000366:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_SPI3_Init+0x74>)
 800036a:	2220      	movs	r2, #32
 800036c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_SPI3_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_SPI3_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_SPI3_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_SPI3_Init+0x74>)
 8000382:	2207      	movs	r2, #7
 8000384:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_SPI3_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_SPI3_Init+0x74>)
 800038e:	2208      	movs	r2, #8
 8000390:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_SPI3_Init+0x74>)
 8000394:	f003 fc24 	bl	8003be0 <HAL_SPI_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800039e:	f000 f853 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000248 	.word	0x20000248
 80003ac:	40003c00 	.word	0x40003c00

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c6:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <MX_GPIO_Init+0x90>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	4a1d      	ldr	r2, [pc, #116]	; (8000440 <MX_GPIO_Init+0x90>)
 80003cc:	f043 0302 	orr.w	r3, r3, #2
 80003d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d2:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <MX_GPIO_Init+0x90>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	f003 0302 	and.w	r3, r3, #2
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b18      	ldr	r3, [pc, #96]	; (8000440 <MX_GPIO_Init+0x90>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	4a17      	ldr	r2, [pc, #92]	; (8000440 <MX_GPIO_Init+0x90>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_GPIO_Init+0x90>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	21c3      	movs	r1, #195	; 0xc3
 80003fa:	4812      	ldr	r0, [pc, #72]	; (8000444 <MX_GPIO_Init+0x94>)
 80003fc:	f000 fed2 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_LED_Pin TX_LED_Pin NRF_CS_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = RX_LED_Pin|TX_LED_Pin|NRF_CS_Pin|NRF_CE_Pin;
 8000400:	23c3      	movs	r3, #195	; 0xc3
 8000402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000410:	f107 030c 	add.w	r3, r7, #12
 8000414:	4619      	mov	r1, r3
 8000416:	480b      	ldr	r0, [pc, #44]	; (8000444 <MX_GPIO_Init+0x94>)
 8000418:	f000 fd5a 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800041c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000422:	2300      	movs	r3, #0
 8000424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800042a:	f107 030c 	add.w	r3, r7, #12
 800042e:	4619      	mov	r1, r3
 8000430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000434:	f000 fd4c 	bl	8000ed0 <HAL_GPIO_Init>

}
 8000438:	bf00      	nop
 800043a:	3720      	adds	r7, #32
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000
 8000444:	48000400 	.word	0x48000400

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	e7fe      	b.n	8000450 <Error_Handler+0x8>
	...

08000454 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_6


void CS_Select (void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2140      	movs	r1, #64	; 0x40
 800045c:	4802      	ldr	r0, [pc, #8]	; (8000468 <CS_Select+0x14>)
 800045e:	f000 fea1 	bl	80011a4 <HAL_GPIO_WritePin>
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	48000400 	.word	0x48000400

0800046c <CS_UnSelect>:

void CS_UnSelect (void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2140      	movs	r1, #64	; 0x40
 8000474:	4802      	ldr	r0, [pc, #8]	; (8000480 <CS_UnSelect+0x14>)
 8000476:	f000 fe95 	bl	80011a4 <HAL_GPIO_WritePin>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	48000400 	.word	0x48000400

08000484 <CE_Enable>:


void CE_Enable (void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000488:	2201      	movs	r2, #1
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <CE_Enable+0x14>)
 800048e:	f000 fe89 	bl	80011a4 <HAL_GPIO_WritePin>
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	48000400 	.word	0x48000400

0800049c <CE_Disable>:

void CE_Disable (void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2180      	movs	r1, #128	; 0x80
 80004a4:	4802      	ldr	r0, [pc, #8]	; (80004b0 <CE_Disable+0x14>)
 80004a6:	f000 fe7d 	bl	80011a4 <HAL_GPIO_WritePin>
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	48000400 	.word	0x48000400

080004b4 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	460a      	mov	r2, r1
 80004be:	71fb      	strb	r3, [r7, #7]
 80004c0:	4613      	mov	r3, r2
 80004c2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80004ce:	79bb      	ldrb	r3, [r7, #6]
 80004d0:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80004d2:	f7ff ffbf 	bl	8000454 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80004d6:	f107 010c 	add.w	r1, r7, #12
 80004da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004de:	2202      	movs	r2, #2
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <nrf24_WriteReg+0x40>)
 80004e2:	f003 fc20 	bl	8003d26 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80004e6:	f7ff ffc1 	bl	800046c <CS_UnSelect>
}
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000248 	.word	0x20000248

080004f8 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
 8000504:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	f043 0320 	orr.w	r3, r3, #32
 800050c:	b2db      	uxtb	r3, r3
 800050e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000510:	f7ff ffa0 	bl	8000454 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000514:	f107 0114 	add.w	r1, r7, #20
 8000518:	2364      	movs	r3, #100	; 0x64
 800051a:	2201      	movs	r2, #1
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <nrf24_WriteRegMulti+0x48>)
 800051e:	f003 fc02 	bl	8003d26 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	b29a      	uxth	r2, r3
 8000526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052a:	68b9      	ldr	r1, [r7, #8]
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <nrf24_WriteRegMulti+0x48>)
 800052e:	f003 fbfa 	bl	8003d26 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000532:	f7ff ff9b 	bl	800046c <CS_UnSelect>
}
 8000536:	bf00      	nop
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000248 	.word	0x20000248

08000544 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000552:	f7ff ff7f 	bl	8000454 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000556:	1df9      	adds	r1, r7, #7
 8000558:	2364      	movs	r3, #100	; 0x64
 800055a:	2201      	movs	r2, #1
 800055c:	4808      	ldr	r0, [pc, #32]	; (8000580 <nrf24_ReadReg+0x3c>)
 800055e:	f003 fbe2 	bl	8003d26 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000562:	f107 010f 	add.w	r1, r7, #15
 8000566:	2364      	movs	r3, #100	; 0x64
 8000568:	2201      	movs	r2, #1
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <nrf24_ReadReg+0x3c>)
 800056c:	f003 fd49 	bl	8004002 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000570:	f7ff ff7c 	bl	800046c <CS_UnSelect>

	return data;
 8000574:	7bfb      	ldrb	r3, [r7, #15]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000248 	.word	0x20000248

08000584 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000592:	f7ff ff5f 	bl	8000454 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000596:	f107 010f 	add.w	r1, r7, #15
 800059a:	2364      	movs	r3, #100	; 0x64
 800059c:	2201      	movs	r2, #1
 800059e:	4808      	ldr	r0, [pc, #32]	; (80005c0 <nrf24_ReadReg_Multi+0x3c>)
 80005a0:	f003 fbc1 	bl	8003d26 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ac:	68b9      	ldr	r1, [r7, #8]
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <nrf24_ReadReg_Multi+0x3c>)
 80005b0:	f003 fd27 	bl	8004002 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005b4:	f7ff ff5a 	bl	800046c <CS_UnSelect>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000248 	.word	0x20000248

080005c4 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005ce:	f7ff ff41 	bl	8000454 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80005d2:	1df9      	adds	r1, r7, #7
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	2201      	movs	r2, #1
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <nrfsendCmd+0x28>)
 80005da:	f003 fba4 	bl	8003d26 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005de:	f7ff ff45 	bl	800046c <CS_UnSelect>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000248 	.word	0x20000248

080005f0 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b07      	cmp	r3, #7
 80005fe:	d107      	bne.n	8000610 <nrf24_reset+0x20>
	{
		HAL_Delay(5);
 8000600:	2005      	movs	r0, #5
 8000602:	f000 fb2f 	bl	8000c64 <HAL_Delay>
		nrf24_WriteReg(STATUS, 0x00);
 8000606:	2100      	movs	r1, #0
 8000608:	2007      	movs	r0, #7
 800060a:	f7ff ff53 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 800060e:	e090      	b.n	8000732 <nrf24_reset+0x142>
	else if (REG == FIFO_STATUS)
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b17      	cmp	r3, #23
 8000614:	d104      	bne.n	8000620 <nrf24_reset+0x30>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000616:	2111      	movs	r1, #17
 8000618:	2017      	movs	r0, #23
 800061a:	f7ff ff4b 	bl	80004b4 <nrf24_WriteReg>
}
 800061e:	e088      	b.n	8000732 <nrf24_reset+0x142>
	nrf24_WriteReg(CONFIG, 0x08);
 8000620:	2108      	movs	r1, #8
 8000622:	2000      	movs	r0, #0
 8000624:	f7ff ff46 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000628:	213f      	movs	r1, #63	; 0x3f
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff ff42 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000630:	2103      	movs	r1, #3
 8000632:	2002      	movs	r0, #2
 8000634:	f7ff ff3e 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000638:	2103      	movs	r1, #3
 800063a:	2003      	movs	r0, #3
 800063c:	f7ff ff3a 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000640:	2103      	movs	r1, #3
 8000642:	2004      	movs	r0, #4
 8000644:	f7ff ff36 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000648:	2102      	movs	r1, #2
 800064a:	2005      	movs	r0, #5
 800064c:	f7ff ff32 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000650:	210e      	movs	r1, #14
 8000652:	2006      	movs	r0, #6
 8000654:	f7ff ff2e 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000658:	2100      	movs	r1, #0
 800065a:	2007      	movs	r0, #7
 800065c:	f7ff ff2a 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000660:	2100      	movs	r1, #0
 8000662:	2008      	movs	r0, #8
 8000664:	f7ff ff26 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000668:	2100      	movs	r1, #0
 800066a:	2009      	movs	r0, #9
 800066c:	f7ff ff22 	bl	80004b4 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000670:	4a32      	ldr	r2, [pc, #200]	; (800073c <nrf24_reset+0x14c>)
 8000672:	f107 0318 	add.w	r3, r7, #24
 8000676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800067a:	6018      	str	r0, [r3, #0]
 800067c:	3304      	adds	r3, #4
 800067e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000680:	f107 0318 	add.w	r3, r7, #24
 8000684:	2205      	movs	r2, #5
 8000686:	4619      	mov	r1, r3
 8000688:	200a      	movs	r0, #10
 800068a:	f7ff ff35 	bl	80004f8 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800068e:	4a2c      	ldr	r2, [pc, #176]	; (8000740 <nrf24_reset+0x150>)
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000698:	6018      	str	r0, [r3, #0]
 800069a:	3304      	adds	r3, #4
 800069c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	2205      	movs	r2, #5
 80006a4:	4619      	mov	r1, r3
 80006a6:	200b      	movs	r0, #11
 80006a8:	f7ff ff26 	bl	80004f8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80006ac:	21c3      	movs	r1, #195	; 0xc3
 80006ae:	200c      	movs	r0, #12
 80006b0:	f7ff ff00 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80006b4:	21c4      	movs	r1, #196	; 0xc4
 80006b6:	200d      	movs	r0, #13
 80006b8:	f7ff fefc 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80006bc:	21c5      	movs	r1, #197	; 0xc5
 80006be:	200e      	movs	r0, #14
 80006c0:	f7ff fef8 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80006c4:	21c6      	movs	r1, #198	; 0xc6
 80006c6:	200f      	movs	r0, #15
 80006c8:	f7ff fef4 	bl	80004b4 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <nrf24_reset+0x14c>)
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d6:	6018      	str	r0, [r3, #0]
 80006d8:	3304      	adds	r3, #4
 80006da:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2205      	movs	r2, #5
 80006e2:	4619      	mov	r1, r3
 80006e4:	2010      	movs	r0, #16
 80006e6:	f7ff ff07 	bl	80004f8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80006ea:	2100      	movs	r1, #0
 80006ec:	2011      	movs	r0, #17
 80006ee:	f7ff fee1 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80006f2:	2100      	movs	r1, #0
 80006f4:	2012      	movs	r0, #18
 80006f6:	f7ff fedd 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	2013      	movs	r0, #19
 80006fe:	f7ff fed9 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000702:	2100      	movs	r1, #0
 8000704:	2014      	movs	r0, #20
 8000706:	f7ff fed5 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800070a:	2100      	movs	r1, #0
 800070c:	2015      	movs	r0, #21
 800070e:	f7ff fed1 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000712:	2100      	movs	r1, #0
 8000714:	2016      	movs	r0, #22
 8000716:	f7ff fecd 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800071a:	2111      	movs	r1, #17
 800071c:	2017      	movs	r0, #23
 800071e:	f7ff fec9 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000722:	2100      	movs	r1, #0
 8000724:	201c      	movs	r0, #28
 8000726:	f7ff fec5 	bl	80004b4 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800072a:	2100      	movs	r1, #0
 800072c:	201d      	movs	r0, #29
 800072e:	f7ff fec1 	bl	80004b4 <nrf24_WriteReg>
}
 8000732:	bf00      	nop
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	08009078 	.word	0x08009078
 8000740:	08009080 	.word	0x08009080

08000744 <NRF24_Init>:




void NRF24_Init (void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000748:	f7ff fea8 	bl	800049c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff ff4f 	bl	80005f0 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000752:	2100      	movs	r1, #0
 8000754:	2000      	movs	r0, #0
 8000756:	f7ff fead 	bl	80004b4 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800075a:	2100      	movs	r1, #0
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff fea9 	bl	80004b4 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000762:	2100      	movs	r1, #0
 8000764:	2002      	movs	r0, #2
 8000766:	f7ff fea5 	bl	80004b4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800076a:	2103      	movs	r1, #3
 800076c:	2003      	movs	r0, #3
 800076e:	f7ff fea1 	bl	80004b4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000772:	2100      	movs	r1, #0
 8000774:	2004      	movs	r0, #4
 8000776:	f7ff fe9d 	bl	80004b4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800077a:	2100      	movs	r1, #0
 800077c:	2005      	movs	r0, #5
 800077e:	f7ff fe99 	bl	80004b4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0F);   // Power= 0db, data rate = 2Mbps
 8000782:	210f      	movs	r1, #15
 8000784:	2006      	movs	r0, #6
 8000786:	f7ff fe95 	bl	80004b4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800078a:	f7ff fe7b 	bl	8000484 <CE_Enable>

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}

08000792 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	460b      	mov	r3, r1
 800079c:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800079e:	f7ff fe7d 	bl	800049c <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	4619      	mov	r1, r3
 80007a6:	2005      	movs	r0, #5
 80007a8:	f7ff fe84 	bl	80004b4 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 80007ac:	2205      	movs	r2, #5
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	2010      	movs	r0, #16
 80007b2:	f7ff fea1 	bl	80004f8 <nrf24_WriteRegMulti>


	// power up the device
	//uint8_t config = nrf24_ReadReg(CONFIG);
	//	config = config | (1<<1);   // write 1 in the PWR_UP bit
	uint8_t config = (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 80007b6:	23f2      	movs	r3, #242	; 0xf2
 80007b8:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (CONFIG, config);
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	4619      	mov	r1, r3
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff fe78 	bl	80004b4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80007c4:	f7ff fe5e 	bl	8000484 <CE_Enable>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 80007dc:	f7ff fe3a 	bl	8000454 <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80007e0:	23a0      	movs	r3, #160	; 0xa0
 80007e2:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80007e4:	f107 010e 	add.w	r1, r7, #14
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	2201      	movs	r2, #1
 80007ec:	4816      	ldr	r0, [pc, #88]	; (8000848 <NRF24_Transmit+0x78>)
 80007ee:	f003 fa9a 	bl	8003d26 <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 80007f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f6:	2220      	movs	r2, #32
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	4813      	ldr	r0, [pc, #76]	; (8000848 <NRF24_Transmit+0x78>)
 80007fc:	f003 fa93 	bl	8003d26 <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 8000800:	f7ff fe34 	bl	800046c <CS_UnSelect>

	HAL_Delay(1);
 8000804:	2001      	movs	r0, #1
 8000806:	f000 fa2d 	bl	8000c64 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 800080a:	2017      	movs	r0, #23
 800080c:	f7ff fe9a 	bl	8000544 <nrf24_ReadReg>
 8000810:	4603      	mov	r3, r0
 8000812:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	f003 0310 	and.w	r3, r3, #16
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00f      	beq.n	800083e <NRF24_Transmit+0x6e>
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10a      	bne.n	800083e <NRF24_Transmit+0x6e>
	{
		cmdtosend = FLUSH_TX;
 8000828:	23e1      	movs	r3, #225	; 0xe1
 800082a:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 800082c:	7bbb      	ldrb	r3, [r7, #14]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff fec8 	bl	80005c4 <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 8000834:	2017      	movs	r0, #23
 8000836:	f7ff fedb 	bl	80005f0 <nrf24_reset>

		return 1;
 800083a:	2301      	movs	r3, #1
 800083c:	e000      	b.n	8000840 <NRF24_Transmit+0x70>
	}

	return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000248 	.word	0x20000248

0800084c <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	e00c      	b.n	8000874 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	b2d9      	uxtb	r1, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	18d4      	adds	r4, r2, r3
 8000864:	4608      	mov	r0, r1
 8000866:	f7ff fe6d 	bl	8000544 <nrf24_ReadReg>
 800086a:	4603      	mov	r3, r0
 800086c:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b09      	cmp	r3, #9
 8000878:	ddef      	ble.n	800085a <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	330a      	adds	r3, #10
 800087e:	2205      	movs	r2, #5
 8000880:	4619      	mov	r1, r3
 8000882:	200a      	movs	r0, #10
 8000884:	f7ff fe7e 	bl	8000584 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	330f      	adds	r3, #15
 800088c:	2205      	movs	r2, #5
 800088e:	4619      	mov	r1, r3
 8000890:	200b      	movs	r0, #11
 8000892:	f7ff fe77 	bl	8000584 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f103 0414 	add.w	r4, r3, #20
 800089c:	200c      	movs	r0, #12
 800089e:	f7ff fe51 	bl	8000544 <nrf24_ReadReg>
 80008a2:	4603      	mov	r3, r0
 80008a4:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f103 0415 	add.w	r4, r3, #21
 80008ac:	200d      	movs	r0, #13
 80008ae:	f7ff fe49 	bl	8000544 <nrf24_ReadReg>
 80008b2:	4603      	mov	r3, r0
 80008b4:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f103 0416 	add.w	r4, r3, #22
 80008bc:	200e      	movs	r0, #14
 80008be:	f7ff fe41 	bl	8000544 <nrf24_ReadReg>
 80008c2:	4603      	mov	r3, r0
 80008c4:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f103 0417 	add.w	r4, r3, #23
 80008cc:	200f      	movs	r0, #15
 80008ce:	f7ff fe39 	bl	8000544 <nrf24_ReadReg>
 80008d2:	4603      	mov	r3, r0
 80008d4:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(TX_ADDR, (data+24), 5);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3318      	adds	r3, #24
 80008da:	2205      	movs	r2, #5
 80008dc:	4619      	mov	r1, r3
 80008de:	2010      	movs	r0, #16
 80008e0:	f7ff fe50 	bl	8000584 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 80008e4:	231d      	movs	r3, #29
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	e00e      	b.n	8000908 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	3b0c      	subs	r3, #12
 80008f0:	b2d9      	uxtb	r1, r3
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	18d4      	adds	r4, r2, r3
 80008f8:	4608      	mov	r0, r1
 80008fa:	f7ff fe23 	bl	8000544 <nrf24_ReadReg>
 80008fe:	4603      	mov	r3, r0
 8000900:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	3301      	adds	r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	2b25      	cmp	r3, #37	; 0x25
 800090c:	dded      	ble.n	80008ea <NRF24_ReadAll+0x9e>
	}

}
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bd90      	pop	{r4, r7, pc}

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x44>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6613      	str	r3, [r2, #96]	; 0x60
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x44>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6593      	str	r3, [r2, #88]	; 0x58
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a17      	ldr	r2, [pc, #92]	; (80009dc <HAL_SPI_MspInit+0x7c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d127      	bne.n	80009d2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_SPI_MspInit+0x80>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <HAL_SPI_MspInit+0x80>)
 8000988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800098c:	6593      	str	r3, [r2, #88]	; 0x58
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_SPI_MspInit+0x80>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_SPI_MspInit+0x80>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <HAL_SPI_MspInit+0x80>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_SPI_MspInit+0x80>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009b2:	2338      	movs	r3, #56	; 0x38
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009c2:	2306      	movs	r3, #6
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <HAL_SPI_MspInit+0x84>)
 80009ce:	f000 fa7f 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	; 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40003c00 	.word	0x40003c00
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48000400 	.word	0x48000400

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f8f6 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <USB_IRQHandler+0x10>)
 8000a42:	f000 fd15 	bl	8001470 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000f90 	.word	0x20000f90

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d207      	bcs.n	8000a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a80:	f008 f9e4 	bl	8008e4c <__errno>
 8000a84:	4603      	mov	r3, r0
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20010000 	.word	0x20010000
 8000ab0:	00000800 	.word	0x00000800
 8000ab4:	20000238 	.word	0x20000238
 8000ab8:	20001298 	.word	0x20001298

08000abc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <SystemInit+0x64>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <SystemInit+0x64>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <SystemInit+0x68>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <SystemInit+0x68>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <SystemInit+0x68>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <SystemInit+0x68>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <SystemInit+0x68>)
 8000ae8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000aec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000af0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <SystemInit+0x68>)
 8000af4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000af8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <SystemInit+0x68>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <SystemInit+0x68>)
 8000b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <SystemInit+0x68>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SystemInit+0x64>)
 8000b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b12:	609a      	str	r2, [r3, #8]
#endif
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00
 8000b24:	40021000 	.word	0x40021000

08000b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b2c:	f7ff ffc6 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b32:	e003      	b.n	8000b3c <LoopCopyDataInit>

08000b34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b3a:	3104      	adds	r1, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b3c:	480a      	ldr	r0, [pc, #40]	; (8000b68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b44:	d3f6      	bcc.n	8000b34 <CopyDataInit>
	ldr	r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b48:	e002      	b.n	8000b50 <LoopFillZerobss>

08000b4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b4c:	f842 3b04 	str.w	r3, [r2], #4

08000b50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <LoopForever+0x16>)
	cmp	r2, r3
 8000b52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b54:	d3f9      	bcc.n	8000b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f008 f97f 	bl	8008e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5a:	f7ff fb37 	bl	80001cc <main>

08000b5e <LoopForever>:

LoopForever:
    b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b60:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000b64:	08009118 	.word	0x08009118
	ldr	r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b6c:	2000021c 	.word	0x2000021c
	ldr	r2, =_sbss
 8000b70:	2000021c 	.word	0x2000021c
	ldr	r3, = _ebss
 8000b74:	20001294 	.word	0x20001294

08000b78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC1_IRQHandler>

08000b7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f961 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 f80e 	bl	8000bac <HAL_InitTick>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	e001      	b.n	8000ba0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b9c:	f7ff febc 	bl	8000918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_InitTick+0x6c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d023      	beq.n	8000c08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_InitTick+0x70>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_InitTick+0x6c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f96d 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10f      	bne.n	8000c02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d809      	bhi.n	8000bfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	f000 f937 	bl	8000e62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_InitTick+0x74>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e007      	b.n	8000c0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e004      	b.n	8000c0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]
 8000c06:	e001      	b.n	8000c0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000030 	.word	0x20000030
 8000c1c:	20000028 	.word	0x20000028
 8000c20:	2000002c 	.word	0x2000002c

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000030 	.word	0x20000030
 8000c48:	200002ec 	.word	0x200002ec

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	200002ec 	.word	0x200002ec

08000c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c6c:	f7ff ffee 	bl	8000c4c <HAL_GetTick>
 8000c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c7c:	d005      	beq.n	8000c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_Delay+0x44>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c8a:	bf00      	nop
 8000c8c:	f7ff ffde 	bl	8000c4c <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d8f7      	bhi.n	8000c8c <HAL_Delay+0x28>
  {
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000030 	.word	0x20000030

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db0b      	blt.n	8000d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <__NVIC_EnableIRQ+0x38>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e2c:	f7ff ff8e 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff29 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff3e 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff8e 	bl	8000da0 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff31 	bl	8000d10 <__NVIC_EnableIRQ>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffa2 	bl	8000e08 <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ede:	e148      	b.n	8001172 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 813a 	beq.w	800116c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d00b      	beq.n	8000f18 <HAL_GPIO_Init+0x48>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d007      	beq.n	8000f18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0c:	2b11      	cmp	r3, #17
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b12      	cmp	r3, #18
 8000f16:	d130      	bne.n	8000f7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	091b      	lsrs	r3, r3, #4
 8000f64:	f003 0201 	and.w	r2, r3, #1
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0xea>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b12      	cmp	r3, #18
 8000fb8:	d123      	bne.n	8001002 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	691a      	ldr	r2, [r3, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	6939      	ldr	r1, [r7, #16]
 8000ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0203 	and.w	r2, r3, #3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 8094 	beq.w	800116c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001044:	4b52      	ldr	r3, [pc, #328]	; (8001190 <HAL_GPIO_Init+0x2c0>)
 8001046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001048:	4a51      	ldr	r2, [pc, #324]	; (8001190 <HAL_GPIO_Init+0x2c0>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6613      	str	r3, [r2, #96]	; 0x60
 8001050:	4b4f      	ldr	r3, [pc, #316]	; (8001190 <HAL_GPIO_Init+0x2c0>)
 8001052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800105c:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001086:	d00d      	beq.n	80010a4 <HAL_GPIO_Init+0x1d4>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a43      	ldr	r2, [pc, #268]	; (8001198 <HAL_GPIO_Init+0x2c8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d007      	beq.n	80010a0 <HAL_GPIO_Init+0x1d0>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a42      	ldr	r2, [pc, #264]	; (800119c <HAL_GPIO_Init+0x2cc>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d101      	bne.n	800109c <HAL_GPIO_Init+0x1cc>
 8001098:	2302      	movs	r3, #2
 800109a:	e004      	b.n	80010a6 <HAL_GPIO_Init+0x1d6>
 800109c:	2307      	movs	r3, #7
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_Init+0x1d6>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <HAL_GPIO_Init+0x1d6>
 80010a4:	2300      	movs	r3, #0
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	f002 0203 	and.w	r2, r2, #3
 80010ac:	0092      	lsls	r2, r2, #2
 80010ae:	4093      	lsls	r3, r2
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010b6:	4937      	ldr	r1, [pc, #220]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010e8:	4a2d      	ldr	r2, [pc, #180]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010ee:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001112:	4a23      	ldr	r2, [pc, #140]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800113c:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3301      	adds	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	fa22 f303 	lsr.w	r3, r2, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	f47f aeaf 	bne.w	8000ee0 <HAL_GPIO_Init+0x10>
  }
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	371c      	adds	r7, #28
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40021000 	.word	0x40021000
 8001194:	40010000 	.word	0x40010000
 8001198:	48000400 	.word	0x48000400
 800119c:	48000800 	.word	0x48000800
 80011a0:	40010400 	.word	0x40010400

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4013      	ands	r3, r2
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43d9      	mvns	r1, r3
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	400b      	ands	r3, r1
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120a:	b08b      	sub	sp, #44	; 0x2c
 800120c:	af06      	add	r7, sp, #24
 800120e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e104      	b.n	8001424 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f007 faa4 	bl	800877c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2203      	movs	r2, #3
 8001238:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fbfd 	bl	8004a40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	687e      	ldr	r6, [r7, #4]
 800124e:	466d      	mov	r5, sp
 8001250:	f106 0410 	add.w	r4, r6, #16
 8001254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	602b      	str	r3, [r5, #0]
 800125c:	1d33      	adds	r3, r6, #4
 800125e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001260:	6838      	ldr	r0, [r7, #0]
 8001262:	f003 fbc5 	bl	80049f0 <USB_CoreInit>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2202      	movs	r2, #2
 8001270:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0d5      	b.n	8001424 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f003 fbf9 	bl	8004a76 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e04c      	b.n	8001324 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	3301      	adds	r3, #1
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	b298      	uxth	r0, r3
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	440b      	add	r3, r1
 80012c6:	3336      	adds	r3, #54	; 0x36
 80012c8:	4602      	mov	r2, r0
 80012ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	3303      	adds	r3, #3
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	440b      	add	r3, r1
 80012f0:	3338      	adds	r3, #56	; 0x38
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	333c      	adds	r3, #60	; 0x3c
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800130a:	7bfa      	ldrb	r2, [r7, #15]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	3340      	adds	r3, #64	; 0x40
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	3301      	adds	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	d3ad      	bcc.n	800128a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	e044      	b.n	80013be <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	440b      	add	r3, r1
 800136e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	440b      	add	r3, r1
 8001384:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	440b      	add	r3, r1
 800139a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	3301      	adds	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d3b5      	bcc.n	8001334 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	687e      	ldr	r6, [r7, #4]
 80013d0:	466d      	mov	r5, sp
 80013d2:	f106 0410 	add.w	r4, r6, #16
 80013d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	602b      	str	r3, [r5, #0]
 80013de:	1d33      	adds	r3, r6, #4
 80013e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e2:	6838      	ldr	r0, [r7, #0]
 80013e4:	f003 fb54 	bl	8004a90 <USB_DevInit>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2202      	movs	r2, #2
 80013f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e014      	b.n	8001424 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d102      	bne.n	8001418 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f001 fa71 	bl	80028fa <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f005 fb0d 	bl	8006a3c <USB_DevDisconnect>

  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800142c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <HAL_PCD_Start+0x16>
 800143e:	2302      	movs	r3, #2
 8001440:	e012      	b.n	8001468 <HAL_PCD_Start+0x3c>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f003 fadf 	bl	8004a12 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f005 fad8 	bl	8006a0e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f005 faf2 	bl	8006a66 <USB_ReadInterrupts>
 8001482:	4603      	mov	r3, r0
 8001484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800148c:	d102      	bne.n	8001494 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fb5b 	bl	8001b4a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f005 fae4 	bl	8006a66 <USB_ReadInterrupts>
 800149e:	4603      	mov	r3, r0
 80014a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a8:	d112      	bne.n	80014d0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014bc:	b292      	uxth	r2, r2
 80014be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f007 f9d5 	bl	8008872 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80014c8:	2100      	movs	r1, #0
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f91e 	bl	800170c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 fac6 	bl	8006a66 <USB_ReadInterrupts>
 80014da:	4603      	mov	r3, r0
 80014dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014e4:	d10b      	bne.n	80014fe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014f8:	b292      	uxth	r2, r2
 80014fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f005 faaf 	bl	8006a66 <USB_ReadInterrupts>
 8001508:	4603      	mov	r3, r0
 800150a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800150e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001512:	d10b      	bne.n	800152c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800151c:	b29a      	uxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001526:	b292      	uxth	r2, r2
 8001528:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f005 fa98 	bl	8006a66 <USB_ReadInterrupts>
 8001536:	4603      	mov	r3, r0
 8001538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800153c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001540:	d133      	bne.n	80015aa <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800154a:	b29a      	uxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0204 	bic.w	r2, r2, #4
 8001554:	b292      	uxth	r2, r2
 8001556:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001562:	b29a      	uxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0208 	bic.w	r2, r2, #8
 800156c:	b292      	uxth	r2, r2
 800156e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001578:	2b01      	cmp	r3, #1
 800157a:	d107      	bne.n	800158c <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001584:	2100      	movs	r1, #0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f007 fc24 	bl	8008dd4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f007 f9a9 	bl	80088e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015a4:	b292      	uxth	r2, r2
 80015a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f005 fa59 	bl	8006a66 <USB_ReadInterrupts>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015be:	d126      	bne.n	800160e <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0208 	orr.w	r2, r2, #8
 80015d2:	b292      	uxth	r2, r2
 80015d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ea:	b292      	uxth	r2, r2
 80015ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0204 	orr.w	r2, r2, #4
 8001602:	b292      	uxth	r2, r2
 8001604:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f007 f951 	bl	80088b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f005 fa27 	bl	8006a66 <USB_ReadInterrupts>
 8001618:	4603      	mov	r3, r0
 800161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161e:	2b80      	cmp	r3, #128	; 0x80
 8001620:	d13f      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800162a:	b29a      	uxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001634:	b292      	uxth	r2, r2
 8001636:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d12b      	bne.n	800169c <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800164c:	b29a      	uxth	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0204 	orr.w	r2, r2, #4
 8001656:	b292      	uxth	r2, r2
 8001658:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001664:	b29a      	uxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0208 	orr.w	r2, r2, #8
 800166e:	b292      	uxth	r2, r2
 8001670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001684:	b29b      	uxth	r3, r3
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001692:	2101      	movs	r1, #1
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f007 fb9d 	bl	8008dd4 <HAL_PCDEx_LPM_Callback>
 800169a:	e002      	b.n	80016a2 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f007 f907 	bl	80088b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f005 f9dd 	bl	8006a66 <USB_ReadInterrupts>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016b6:	d10e      	bne.n	80016d6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016ca:	b292      	uxth	r2, r2
 80016cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f007 f8c0 	bl	8008856 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f005 f9c3 	bl	8006a66 <USB_ReadInterrupts>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ea:	d10b      	bne.n	8001704 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016fe:	b292      	uxth	r2, r2
 8001700:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_PCD_SetAddress+0x1a>
 8001722:	2302      	movs	r3, #2
 8001724:	e013      	b.n	800174e <HAL_PCD_SetAddress+0x42>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	78fa      	ldrb	r2, [r7, #3]
 8001732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	78fa      	ldrb	r2, [r7, #3]
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f005 f951 	bl	80069e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	4608      	mov	r0, r1
 8001760:	4611      	mov	r1, r2
 8001762:	461a      	mov	r2, r3
 8001764:	4603      	mov	r3, r0
 8001766:	70fb      	strb	r3, [r7, #3]
 8001768:	460b      	mov	r3, r1
 800176a:	803b      	strh	r3, [r7, #0]
 800176c:	4613      	mov	r3, r2
 800176e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001778:	2b00      	cmp	r3, #0
 800177a:	da0e      	bge.n	800179a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	705a      	strb	r2, [r3, #1]
 8001798:	e00e      	b.n	80017b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	f003 0207 	and.w	r2, r3, #7
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80017c4:	883a      	ldrh	r2, [r7, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	78ba      	ldrb	r2, [r7, #2]
 80017ce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	785b      	ldrb	r3, [r3, #1]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017e2:	78bb      	ldrb	r3, [r7, #2]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d102      	bne.n	80017ee <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_PCD_EP_Open+0xa6>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e00e      	b.n	800181a <HAL_PCD_EP_Open+0xc4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	4618      	mov	r0, r3
 800180c:	f003 f962 	bl	8004ad4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001818:	7afb      	ldrb	r3, [r7, #11]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800182e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001832:	2b00      	cmp	r3, #0
 8001834:	da0e      	bge.n	8001854 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2201      	movs	r2, #1
 8001850:	705a      	strb	r2, [r3, #1]
 8001852:	e00e      	b.n	8001872 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	f003 0207 	and.w	r2, r3, #7
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	b2da      	uxtb	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_PCD_EP_Close+0x6a>
 8001888:	2302      	movs	r3, #2
 800188a:	e00e      	b.n	80018aa <HAL_PCD_EP_Close+0x88>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	4618      	mov	r0, r3
 800189c:	f003 fc88 	bl	80051b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	460b      	mov	r3, r1
 80018c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018c2:	7afb      	ldrb	r3, [r7, #11]
 80018c4:	f003 0207 	and.w	r2, r3, #7
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2200      	movs	r2, #0
 80018f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018f2:	7afb      	ldrb	r3, [r7, #11]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018fe:	7afb      	ldrb	r3, [r7, #11]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	2b00      	cmp	r3, #0
 8001906:	d106      	bne.n	8001916 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6979      	ldr	r1, [r7, #20]
 800190e:	4618      	mov	r0, r3
 8001910:	f003 fe3b 	bl	800558a <USB_EPStartXfer>
 8001914:	e005      	b.n	8001922 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6979      	ldr	r1, [r7, #20]
 800191c:	4618      	mov	r0, r3
 800191e:	f003 fe34 	bl	800558a <USB_EPStartXfer>
  }

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	f003 0207 	and.w	r2, r3, #7
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	460b      	mov	r3, r1
 800196a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196c:	7afb      	ldrb	r3, [r7, #11]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2201      	movs	r2, #1
 80019a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019a8:	7afb      	ldrb	r3, [r7, #11]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6979      	ldr	r1, [r7, #20]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 fde0 	bl	800558a <USB_EPStartXfer>
 80019ca:	e005      	b.n	80019d8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6979      	ldr	r1, [r7, #20]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 fdd9 	bl	800558a <USB_EPStartXfer>
  }

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	f003 0207 	and.w	r2, r3, #7
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d901      	bls.n	8001a00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e04c      	b.n	8001a9a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da0e      	bge.n	8001a26 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	705a      	strb	r2, [r3, #1]
 8001a24:	e00c      	b.n	8001a40 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a26:	78fa      	ldrb	r2, [r7, #3]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <HAL_PCD_EP_SetStall+0x7e>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e01c      	b.n	8001a9a <HAL_PCD_EP_SetStall+0xb8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f004 feba 	bl	80067e8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d108      	bne.n	8001a90 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	f004 fffb 	bl	8006a86 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	f003 020f 	and.w	r2, r3, #15
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d901      	bls.n	8001ac0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e040      	b.n	8001b42 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	da0e      	bge.n	8001ae6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	705a      	strb	r2, [r3, #1]
 8001ae4:	e00e      	b.n	8001b04 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	f003 0207 	and.w	r2, r3, #7
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_PCD_EP_ClrStall+0x82>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e00e      	b.n	8001b42 <HAL_PCD_EP_ClrStall+0xa0>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68f9      	ldr	r1, [r7, #12]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f004 fea9 	bl	800688a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b08e      	sub	sp, #56	; 0x38
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b52:	e2d1      	b.n	80020f8 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 8152 	bne.w	8001e18 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d150      	bne.n	8001c20 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8e:	81fb      	strh	r3, [r7, #14]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	89fb      	ldrh	r3, [r7, #14]
 8001b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3328      	adds	r3, #40	; 0x28
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	441a      	add	r2, r3
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001bde:	2100      	movs	r1, #0
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f006 fe1e 	bl	8008822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8282 	beq.w	80020f8 <PCD_EP_ISR_Handler+0x5ae>
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 827d 	bne.w	80020f8 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	b292      	uxth	r2, r2
 8001c12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c1e:	e26b      	b.n	80020f8 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d032      	beq.n	8001ca0 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f004 ff54 	bl	8006b22 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c86:	4013      	ands	r3, r2
 8001c88:	823b      	strh	r3, [r7, #16]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	8a3a      	ldrh	r2, [r7, #16]
 8001c90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c94:	b292      	uxth	r2, r2
 8001c96:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f006 fd95 	bl	80087c8 <HAL_PCD_SetupStageCallback>
 8001c9e:	e22b      	b.n	80020f8 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ca0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f280 8227 	bge.w	80020f8 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	83bb      	strh	r3, [r7, #28]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	8bba      	ldrh	r2, [r7, #28]
 8001cc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cc4:	b292      	uxth	r2, r2
 8001cc6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d019      	beq.n	8001d2c <PCD_EP_ISR_Handler+0x1e2>
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d015      	beq.n	8001d2c <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	6959      	ldr	r1, [r3, #20]
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	f004 ff06 	bl	8006b22 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	441a      	add	r2, r3
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d24:	2100      	movs	r1, #0
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f006 fd60 	bl	80087ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	4413      	add	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d112      	bne.n	8001d7a <PCD_EP_ISR_Handler+0x230>
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	801a      	strh	r2, [r3, #0]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	801a      	strh	r2, [r3, #0]
 8001d78:	e02f      	b.n	8001dda <PCD_EP_ISR_Handler+0x290>
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8001d80:	d813      	bhi.n	8001daa <PCD_EP_ISR_Handler+0x260>
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	633b      	str	r3, [r7, #48]	; 0x30
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <PCD_EP_ISR_Handler+0x252>
 8001d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d98:	3301      	adds	r3, #1
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	029b      	lsls	r3, r3, #10
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	801a      	strh	r2, [r3, #0]
 8001da8:	e017      	b.n	8001dda <PCD_EP_ISR_Handler+0x290>
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <PCD_EP_ISR_Handler+0x27a>
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8001dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	029b      	lsls	r3, r3, #10
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dea:	827b      	strh	r3, [r7, #18]
 8001dec:	8a7b      	ldrh	r3, [r7, #18]
 8001dee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001df2:	827b      	strh	r3, [r7, #18]
 8001df4:	8a7b      	ldrh	r3, [r7, #18]
 8001df6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001dfa:	827b      	strh	r3, [r7, #18]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	8a7b      	ldrh	r3, [r7, #18]
 8001e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	8013      	strh	r3, [r2, #0]
 8001e16:	e16f      	b.n	80020f8 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e2a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f280 80e4 	bge.w	8001ffc <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e62:	b292      	uxth	r2, r2
 8001e64:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e66:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	7b1b      	ldrb	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d120      	bne.n	8001ec6 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ea8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001eaa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 8083 	beq.w	8001fb8 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	6959      	ldr	r1, [r3, #20]
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	88da      	ldrh	r2, [r3, #6]
 8001ebe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ec0:	f004 fe2f 	bl	8006b22 <USB_ReadPMA>
 8001ec4:	e078      	b.n	8001fb8 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	78db      	ldrb	r3, [r3, #3]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d108      	bne.n	8001ee0 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ece:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f91d 	bl	8002114 <HAL_PCD_EP_DB_Receive>
 8001eda:	4603      	mov	r3, r0
 8001edc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ede:	e06b      	b.n	8001fb8 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efa:	847b      	strh	r3, [r7, #34]	; 0x22
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	441a      	add	r2, r3
 8001f0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d01f      	beq.n	8001f7a <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f5e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d028      	beq.n	8001fb8 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	6959      	ldr	r1, [r3, #20]
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	891a      	ldrh	r2, [r3, #8]
 8001f72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f74:	f004 fdd5 	bl	8006b22 <USB_ReadPMA>
 8001f78:	e01e      	b.n	8001fb8 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f9e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d008      	beq.n	8001fb8 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	6959      	ldr	r1, [r3, #20]
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	895a      	ldrh	r2, [r3, #10]
 8001fb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fb4:	f004 fdb5 	bl	8006b22 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	69da      	ldr	r2, [r3, #28]
 8001fbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fbe:	441a      	add	r2, r3
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fca:	441a      	add	r2, r3
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d004      	beq.n	8001fe2 <PCD_EP_ISR_Handler+0x498>
 8001fd8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d206      	bcs.n	8001ff0 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f006 fbff 	bl	80087ec <HAL_PCD_DataOutStageCallback>
 8001fee:	e005      	b.n	8001ffc <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 fac7 	bl	800558a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ffc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002002:	2b00      	cmp	r3, #0
 8002004:	d078      	beq.n	80020f8 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002006:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002034:	843b      	strh	r3, [r7, #32]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	441a      	add	r2, r3
 8002044:	8c3b      	ldrh	r3, [r7, #32]
 8002046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800204a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800204e:	b29b      	uxth	r3, r3
 8002050:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	78db      	ldrb	r3, [r3, #3]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d108      	bne.n	800206c <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800205e:	2b02      	cmp	r3, #2
 8002060:	d144      	bne.n	80020ec <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002062:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d13f      	bne.n	80020ec <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002074:	b29b      	uxth	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	4413      	add	r3, r2
 8002086:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002090:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	8bfb      	ldrh	r3, [r7, #30]
 8002098:	429a      	cmp	r2, r3
 800209a:	d906      	bls.n	80020aa <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	699a      	ldr	r2, [r3, #24]
 80020a0:	8bfb      	ldrh	r3, [r7, #30]
 80020a2:	1ad2      	subs	r2, r2, r3
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	619a      	str	r2, [r3, #24]
 80020a8:	e002      	b.n	80020b0 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d106      	bne.n	80020c6 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f006 fbaf 	bl	8008822 <HAL_PCD_DataInStageCallback>
 80020c4:	e018      	b.n	80020f8 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	8bfb      	ldrh	r3, [r7, #30]
 80020cc:	441a      	add	r2, r3
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	8bfb      	ldrh	r3, [r7, #30]
 80020d8:	441a      	add	r2, r3
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020e4:	4618      	mov	r0, r3
 80020e6:	f003 fa50 	bl	800558a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80020ea:	e005      	b.n	80020f8 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020ee:	461a      	mov	r2, r3
 80020f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f917 	bl	8002326 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002100:	b29b      	uxth	r3, r3
 8002102:	b21b      	sxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	f6ff ad25 	blt.w	8001b54 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3738      	adds	r7, #56	; 0x38
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	4613      	mov	r3, r2
 8002120:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d07c      	beq.n	8002226 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002134:	b29b      	uxth	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	4413      	add	r3, r2
 8002146:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002150:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	8b7b      	ldrh	r3, [r7, #26]
 8002158:	429a      	cmp	r2, r3
 800215a:	d306      	bcc.n	800216a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	8b7b      	ldrh	r3, [r7, #26]
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	619a      	str	r2, [r3, #24]
 8002168:	e002      	b.n	8002170 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d123      	bne.n	80021c0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800218e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002192:	833b      	strh	r3, [r7, #24]
 8002194:	8b3b      	ldrh	r3, [r7, #24]
 8002196:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800219a:	833b      	strh	r3, [r7, #24]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	441a      	add	r2, r3
 80021aa:	8b3b      	ldrh	r3, [r7, #24]
 80021ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021bc:	b29b      	uxth	r3, r3
 80021be:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d01f      	beq.n	800220a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e4:	82fb      	strh	r3, [r7, #22]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	441a      	add	r2, r3
 80021f4:	8afb      	ldrh	r3, [r7, #22]
 80021f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002202:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002206:	b29b      	uxth	r3, r3
 8002208:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800220a:	8b7b      	ldrh	r3, [r7, #26]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8085 	beq.w	800231c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	6959      	ldr	r1, [r3, #20]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	891a      	ldrh	r2, [r3, #8]
 800221e:	8b7b      	ldrh	r3, [r7, #26]
 8002220:	f004 fc7f 	bl	8006b22 <USB_ReadPMA>
 8002224:	e07a      	b.n	800231c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800222e:	b29b      	uxth	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	4413      	add	r3, r2
 8002240:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800224a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	8b7b      	ldrh	r3, [r7, #26]
 8002252:	429a      	cmp	r2, r3
 8002254:	d306      	bcc.n	8002264 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	8b7b      	ldrh	r3, [r7, #26]
 800225c:	1ad2      	subs	r2, r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	619a      	str	r2, [r3, #24]
 8002262:	e002      	b.n	800226a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d123      	bne.n	80022ba <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228c:	83fb      	strh	r3, [r7, #30]
 800228e:	8bfb      	ldrh	r3, [r7, #30]
 8002290:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002294:	83fb      	strh	r3, [r7, #30]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	441a      	add	r2, r3
 80022a4:	8bfb      	ldrh	r3, [r7, #30]
 80022a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11f      	bne.n	8002304 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022de:	83bb      	strh	r3, [r7, #28]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	441a      	add	r2, r3
 80022ee:	8bbb      	ldrh	r3, [r7, #28]
 80022f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002300:	b29b      	uxth	r3, r3
 8002302:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002304:	8b7b      	ldrh	r3, [r7, #26]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	6959      	ldr	r1, [r3, #20]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	895a      	ldrh	r2, [r3, #10]
 8002316:	8b7b      	ldrh	r3, [r7, #26]
 8002318:	f004 fc03 	bl	8006b22 <USB_ReadPMA>
    }
  }

  return count;
 800231c:	8b7b      	ldrh	r3, [r7, #26]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b094      	sub	sp, #80	; 0x50
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	4613      	mov	r3, r2
 8002332:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8136 	beq.w	80025ac <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002348:	b29b      	uxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	4413      	add	r3, r2
 800235a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002364:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	699a      	ldr	r2, [r3, #24]
 800236c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002370:	429a      	cmp	r2, r3
 8002372:	d907      	bls.n	8002384 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	699a      	ldr	r2, [r3, #24]
 8002378:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800237c:	1ad2      	subs	r2, r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	619a      	str	r2, [r3, #24]
 8002382:	e002      	b.n	800238a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d12c      	bne.n	80023ec <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	4619      	mov	r1, r3
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f006 fa42 	bl	8008822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8238 	beq.w	800281a <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c4:	82fb      	strh	r3, [r7, #22]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	441a      	add	r2, r3
 80023d4:	8afb      	ldrh	r3, [r7, #22]
 80023d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	8013      	strh	r3, [r2, #0]
 80023ea:	e216      	b.n	800281a <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01f      	beq.n	8002436 <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800240c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002410:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	441a      	add	r2, r3
 8002420:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800242a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800242e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002432:	b29b      	uxth	r3, r3
 8002434:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800243c:	2b01      	cmp	r3, #1
 800243e:	f040 81ec 	bne.w	800281a <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800244a:	441a      	add	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002458:	441a      	add	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	6a1a      	ldr	r2, [r3, #32]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	429a      	cmp	r2, r3
 8002468:	d309      	bcc.n	800247e <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	6a1a      	ldr	r2, [r3, #32]
 8002474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002476:	1ad2      	subs	r2, r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	621a      	str	r2, [r3, #32]
 800247c:	e015      	b.n	80024aa <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d107      	bne.n	8002496 <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 8002486:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800248a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002494:	e009      	b.n	80024aa <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2200      	movs	r2, #0
 80024a8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	785b      	ldrb	r3, [r3, #1]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d155      	bne.n	800255e <HAL_PCD_EP_DB_Transmit+0x238>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	00da      	lsls	r2, r3, #3
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d112      	bne.n	8002506 <HAL_PCD_EP_DB_Transmit+0x1e0>
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	801a      	strh	r2, [r3, #0]
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024fe:	b29a      	uxth	r2, r3
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	e047      	b.n	8002596 <HAL_PCD_EP_DB_Transmit+0x270>
 8002506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002508:	2b3e      	cmp	r3, #62	; 0x3e
 800250a:	d811      	bhi.n	8002530 <HAL_PCD_EP_DB_Transmit+0x20a>
 800250c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800250e:	085b      	lsrs	r3, r3, #1
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_PCD_EP_DB_Transmit+0x1fc>
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	3301      	adds	r3, #1
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	b29b      	uxth	r3, r3
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	b29a      	uxth	r2, r3
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	e032      	b.n	8002596 <HAL_PCD_EP_DB_Transmit+0x270>
 8002530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <HAL_PCD_EP_DB_Transmit+0x220>
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	3b01      	subs	r3, #1
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	b29b      	uxth	r3, r3
 800254a:	029b      	lsls	r3, r3, #10
 800254c:	b29b      	uxth	r3, r3
 800254e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002556:	b29a      	uxth	r2, r3
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	801a      	strh	r2, [r3, #0]
 800255c:	e01b      	b.n	8002596 <HAL_PCD_EP_DB_Transmit+0x270>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	785b      	ldrb	r3, [r3, #1]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d117      	bne.n	8002596 <HAL_PCD_EP_DB_Transmit+0x270>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002574:	b29b      	uxth	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	4413      	add	r3, r2
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	00da      	lsls	r2, r3, #3
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	4413      	add	r3, r2
 8002588:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800258c:	623b      	str	r3, [r7, #32]
 800258e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002590:	b29a      	uxth	r2, r3
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6959      	ldr	r1, [r3, #20]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	891a      	ldrh	r2, [r3, #8]
 80025a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f004 fa7a 	bl	8006a9e <USB_WritePMA>
 80025aa:	e136      	b.n	800281a <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	699a      	ldr	r2, [r3, #24]
 80025d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025dc:	429a      	cmp	r2, r3
 80025de:	d307      	bcc.n	80025f0 <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	699a      	ldr	r2, [r3, #24]
 80025e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025e8:	1ad2      	subs	r2, r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	619a      	str	r2, [r3, #24]
 80025ee:	e002      	b.n	80025f6 <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2200      	movs	r2, #0
 80025f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d12e      	bne.n	800265c <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f006 f90c 	bl	8008822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f040 8102 	bne.w	800281a <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800262c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002630:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800264a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800264e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002656:	b29b      	uxth	r3, r3
 8002658:	8013      	strh	r3, [r2, #0]
 800265a:	e0de      	b.n	800281a <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d11f      	bne.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800267c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002680:	867b      	strh	r3, [r7, #50]	; 0x32
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	441a      	add	r2, r3
 8002690:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800269a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800269e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	f040 80b4 	bne.w	800281a <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026ba:	441a      	add	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026c8:	441a      	add	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	6a1a      	ldr	r2, [r3, #32]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d309      	bcc.n	80026ee <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	6a1a      	ldr	r2, [r3, #32]
 80026e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e6:	1ad2      	subs	r2, r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	621a      	str	r2, [r3, #32]
 80026ec:	e015      	b.n	800271a <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 80026f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026fa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002704:	e009      	b.n	800271a <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2200      	movs	r2, #0
 8002710:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	643b      	str	r3, [r7, #64]	; 0x40
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	785b      	ldrb	r3, [r3, #1]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d155      	bne.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x4ae>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	63bb      	str	r3, [r7, #56]	; 0x38
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	4413      	add	r3, r2
 800273e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	00da      	lsls	r2, r3, #3
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	4413      	add	r3, r2
 800274a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
 8002750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002752:	2b00      	cmp	r3, #0
 8002754:	d112      	bne.n	800277c <HAL_PCD_EP_DB_Transmit+0x456>
 8002756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002760:	b29a      	uxth	r2, r3
 8002762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002764:	801a      	strh	r2, [r3, #0]
 8002766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002774:	b29a      	uxth	r2, r3
 8002776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002778:	801a      	strh	r2, [r3, #0]
 800277a:	e044      	b.n	8002806 <HAL_PCD_EP_DB_Transmit+0x4e0>
 800277c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277e:	2b3e      	cmp	r3, #62	; 0x3e
 8002780:	d811      	bhi.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x480>
 8002782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_PCD_EP_DB_Transmit+0x472>
 8002792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002794:	3301      	adds	r3, #1
 8002796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800279a:	b29b      	uxth	r3, r3
 800279c:	029b      	lsls	r3, r3, #10
 800279e:	b29a      	uxth	r2, r3
 80027a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a2:	801a      	strh	r2, [r3, #0]
 80027a4:	e02f      	b.n	8002806 <HAL_PCD_EP_DB_Transmit+0x4e0>
 80027a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <HAL_PCD_EP_DB_Transmit+0x496>
 80027b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b8:	3b01      	subs	r3, #1
 80027ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027be:	b29b      	uxth	r3, r3
 80027c0:	029b      	lsls	r3, r3, #10
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	e018      	b.n	8002806 <HAL_PCD_EP_DB_Transmit+0x4e0>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	785b      	ldrb	r3, [r3, #1]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d114      	bne.n	8002806 <HAL_PCD_EP_DB_Transmit+0x4e0>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ea:	4413      	add	r3, r2
 80027ec:	643b      	str	r3, [r7, #64]	; 0x40
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	00da      	lsls	r2, r3, #3
 80027f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f6:	4413      	add	r3, r2
 80027f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002800:	b29a      	uxth	r2, r3
 8002802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002804:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	6959      	ldr	r1, [r3, #20]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	895a      	ldrh	r2, [r3, #10]
 8002812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002814:	b29b      	uxth	r3, r3
 8002816:	f004 f942 	bl	8006a9e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002834:	82bb      	strh	r3, [r7, #20]
 8002836:	8abb      	ldrh	r3, [r7, #20]
 8002838:	f083 0310 	eor.w	r3, r3, #16
 800283c:	82bb      	strh	r3, [r7, #20]
 800283e:	8abb      	ldrh	r3, [r7, #20]
 8002840:	f083 0320 	eor.w	r3, r3, #32
 8002844:	82bb      	strh	r3, [r7, #20]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	441a      	add	r2, r3
 8002854:	8abb      	ldrh	r3, [r7, #20]
 8002856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800285a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800285e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002866:	b29b      	uxth	r3, r3
 8002868:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3750      	adds	r7, #80	; 0x50
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	817b      	strh	r3, [r7, #10]
 8002882:	4613      	mov	r3, r2
 8002884:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002886:	897b      	ldrh	r3, [r7, #10]
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002892:	897b      	ldrh	r3, [r7, #10]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4413      	add	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e009      	b.n	80028be <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028aa:	897a      	ldrh	r2, [r7, #10]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4413      	add	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028be:	893b      	ldrh	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d107      	bne.n	80028d4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2200      	movs	r2, #0
 80028c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	80da      	strh	r2, [r3, #6]
 80028d2:	e00b      	b.n	80028ec <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2201      	movs	r2, #1
 80028d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	b29a      	uxth	r2, r3
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800291e:	b29b      	uxth	r3, r3
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002932:	b29b      	uxth	r3, r3
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <HAL_PWREx_GetVoltageRange+0x18>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40007000 	.word	0x40007000

0800296c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800297a:	d130      	bne.n	80029de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002988:	d038      	beq.n	80029fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002992:	4a1e      	ldr	r2, [pc, #120]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002994:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002998:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800299a:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2232      	movs	r2, #50	; 0x32
 80029a0:	fb02 f303 	mul.w	r3, r2, r3
 80029a4:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0c9b      	lsrs	r3, r3, #18
 80029ac:	3301      	adds	r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b0:	e002      	b.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3b01      	subs	r3, #1
 80029b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c4:	d102      	bne.n	80029cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f2      	bne.n	80029b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d8:	d110      	bne.n	80029fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e00f      	b.n	80029fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ea:	d007      	beq.n	80029fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029ec:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029f4:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	20000028 	.word	0x20000028
 8002a14:	431bde83 	.word	0x431bde83

08002a18 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a26:	6053      	str	r3, [r2, #4]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40007000 	.word	0x40007000

08002a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f000 bc11 	b.w	800326e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4c:	4ba0      	ldr	r3, [pc, #640]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a56:	4b9e      	ldr	r3, [pc, #632]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80e4 	beq.w	8002c36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <HAL_RCC_OscConfig+0x4c>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	f040 808b 	bne.w	8002b92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	f040 8087 	bne.w	8002b92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a84:	4b92      	ldr	r3, [pc, #584]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_OscConfig+0x64>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e3e8      	b.n	800326e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1a      	ldr	r2, [r3, #32]
 8002aa0:	4b8b      	ldr	r3, [pc, #556]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x7e>
 8002aac:	4b88      	ldr	r3, [pc, #544]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab4:	e005      	b.n	8002ac2 <HAL_RCC_OscConfig+0x8a>
 8002ab6:	4b86      	ldr	r3, [pc, #536]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d223      	bcs.n	8002b0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fd42 	bl	8003554 <RCC_SetFlashLatencyFromMSIRange>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e3c9      	b.n	800326e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ada:	4b7d      	ldr	r3, [pc, #500]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a7c      	ldr	r2, [pc, #496]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002ae0:	f043 0308 	orr.w	r3, r3, #8
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b7a      	ldr	r3, [pc, #488]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4977      	ldr	r1, [pc, #476]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af8:	4b75      	ldr	r3, [pc, #468]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	4972      	ldr	r1, [pc, #456]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
 8002b0c:	e025      	b.n	8002b5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b0e:	4b70      	ldr	r3, [pc, #448]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a6f      	ldr	r2, [pc, #444]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002b14:	f043 0308 	orr.w	r3, r3, #8
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b6d      	ldr	r3, [pc, #436]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	496a      	ldr	r1, [pc, #424]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b2c:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	4965      	ldr	r1, [pc, #404]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fd02 	bl	8003554 <RCC_SetFlashLatencyFromMSIRange>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e389      	b.n	800326e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b5a:	f000 fc6f 	bl	800343c <HAL_RCC_GetSysClockFreq>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	4b5b      	ldr	r3, [pc, #364]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	495a      	ldr	r1, [pc, #360]	; (8002cd4 <HAL_RCC_OscConfig+0x29c>)
 8002b6c:	5ccb      	ldrb	r3, [r1, r3]
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	fa22 f303 	lsr.w	r3, r2, r3
 8002b76:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <HAL_RCC_OscConfig+0x2a0>)
 8002b78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b7a:	4b58      	ldr	r3, [pc, #352]	; (8002cdc <HAL_RCC_OscConfig+0x2a4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe f814 	bl	8000bac <HAL_InitTick>
 8002b84:	4603      	mov	r3, r0
 8002b86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d052      	beq.n	8002c34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	e36d      	b.n	800326e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d032      	beq.n	8002c00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b9a:	4b4d      	ldr	r3, [pc, #308]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a4c      	ldr	r2, [pc, #304]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ba6:	f7fe f851 	bl	8000c4c <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bae:	f7fe f84d 	bl	8000c4c <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e356      	b.n	800326e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bc0:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bcc:	4b40      	ldr	r3, [pc, #256]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002bd2:	f043 0308 	orr.w	r3, r3, #8
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	493a      	ldr	r1, [pc, #232]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bea:	4b39      	ldr	r3, [pc, #228]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	4935      	ldr	r1, [pc, #212]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
 8002bfe:	e01a      	b.n	8002c36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c00:	4b33      	ldr	r3, [pc, #204]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a32      	ldr	r2, [pc, #200]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe f81e 	bl	8000c4c <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c14:	f7fe f81a 	bl	8000c4c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e323      	b.n	800326e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c26:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x1dc>
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d073      	beq.n	8002d2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_OscConfig+0x21c>
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d10e      	bne.n	8002c6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d10b      	bne.n	8002c6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d063      	beq.n	8002d28 <HAL_RCC_OscConfig+0x2f0>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d15f      	bne.n	8002d28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e300      	b.n	800326e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c74:	d106      	bne.n	8002c84 <HAL_RCC_OscConfig+0x24c>
 8002c76:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e01d      	b.n	8002cc0 <HAL_RCC_OscConfig+0x288>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x270>
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a0f      	ldr	r2, [pc, #60]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a0c      	ldr	r2, [pc, #48]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0x288>
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <HAL_RCC_OscConfig+0x298>)
 8002cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01b      	beq.n	8002d00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fd ffc0 	bl	8000c4c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cce:	e010      	b.n	8002cf2 <HAL_RCC_OscConfig+0x2ba>
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	080090d0 	.word	0x080090d0
 8002cd8:	20000028 	.word	0x20000028
 8002cdc:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fd ffb4 	bl	8000c4c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	; 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e2bd      	b.n	800326e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cf2:	4baf      	ldr	r3, [pc, #700]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x2a8>
 8002cfe:	e014      	b.n	8002d2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fd ffa4 	bl	8000c4c <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fd ffa0 	bl	8000c4c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e2a9      	b.n	800326e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d1a:	4ba5      	ldr	r3, [pc, #660]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x2d0>
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d060      	beq.n	8002df8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_OscConfig+0x310>
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d119      	bne.n	8002d76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d116      	bne.n	8002d76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d48:	4b99      	ldr	r3, [pc, #612]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_OscConfig+0x328>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e286      	b.n	800326e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d60:	4b93      	ldr	r3, [pc, #588]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	061b      	lsls	r3, r3, #24
 8002d6e:	4990      	ldr	r1, [pc, #576]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d74:	e040      	b.n	8002df8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d023      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d7e:	4b8c      	ldr	r3, [pc, #560]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a8b      	ldr	r2, [pc, #556]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fd ff5f 	bl	8000c4c <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fd ff5b 	bl	8000c4c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e264      	b.n	800326e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da4:	4b82      	ldr	r3, [pc, #520]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	4b7f      	ldr	r3, [pc, #508]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	061b      	lsls	r3, r3, #24
 8002dbe:	497c      	ldr	r1, [pc, #496]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
 8002dc4:	e018      	b.n	8002df8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc6:	4b7a      	ldr	r3, [pc, #488]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a79      	ldr	r2, [pc, #484]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7fd ff3b 	bl	8000c4c <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dda:	f7fd ff37 	bl	8000c4c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e240      	b.n	800326e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dec:	4b70      	ldr	r3, [pc, #448]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f0      	bne.n	8002dda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d03c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01c      	beq.n	8002e46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0c:	4b68      	ldr	r3, [pc, #416]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e12:	4a67      	ldr	r2, [pc, #412]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fd ff16 	bl	8000c4c <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e24:	f7fd ff12 	bl	8000c4c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e21b      	b.n	800326e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e36:	4b5e      	ldr	r3, [pc, #376]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ef      	beq.n	8002e24 <HAL_RCC_OscConfig+0x3ec>
 8002e44:	e01b      	b.n	8002e7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e46:	4b5a      	ldr	r3, [pc, #360]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4c:	4a58      	ldr	r2, [pc, #352]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7fd fef9 	bl	8000c4c <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5e:	f7fd fef5 	bl	8000c4c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e1fe      	b.n	800326e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e70:	4b4f      	ldr	r3, [pc, #316]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1ef      	bne.n	8002e5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80a6 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e90:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9c:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea0:	4a43      	ldr	r2, [pc, #268]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea8:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb8:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <HAL_RCC_OscConfig+0x57c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d118      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_OscConfig+0x57c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a3a      	ldr	r2, [pc, #232]	; (8002fb4 <HAL_RCC_OscConfig+0x57c>)
 8002eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ece:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed0:	f7fd febc 	bl	8000c4c <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed8:	f7fd feb8 	bl	8000c4c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e1c1      	b.n	800326e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eea:	4b32      	ldr	r3, [pc, #200]	; (8002fb4 <HAL_RCC_OscConfig+0x57c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d108      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4d8>
 8002efe:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f04:	4a2a      	ldr	r2, [pc, #168]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f0e:	e024      	b.n	8002f5a <HAL_RCC_OscConfig+0x522>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d110      	bne.n	8002f3a <HAL_RCC_OscConfig+0x502>
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	4a24      	ldr	r2, [pc, #144]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f28:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	4a20      	ldr	r2, [pc, #128]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f38:	e00f      	b.n	8002f5a <HAL_RCC_OscConfig+0x522>
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f40:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f4a:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	4a17      	ldr	r2, [pc, #92]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002f52:	f023 0304 	bic.w	r3, r3, #4
 8002f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d016      	beq.n	8002f90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fd fe73 	bl	8000c4c <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fd fe6f 	bl	8000c4c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e176      	b.n	800326e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCC_OscConfig+0x578>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0ed      	beq.n	8002f6a <HAL_RCC_OscConfig+0x532>
 8002f8e:	e01a      	b.n	8002fc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fd fe5c 	bl	8000c4c <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f96:	e00f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fd fe58 	bl	8000c4c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d906      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e15f      	b.n	800326e <HAL_RCC_OscConfig+0x836>
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fb8:	4baa      	ldr	r3, [pc, #680]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1e8      	bne.n	8002f98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc6:	7ffb      	ldrb	r3, [r7, #31]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d105      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fcc:	4ba5      	ldr	r3, [pc, #660]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	4aa4      	ldr	r2, [pc, #656]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8002fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d03c      	beq.n	800305e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01c      	beq.n	8003026 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fec:	4b9d      	ldr	r3, [pc, #628]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8002fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ff2:	4a9c      	ldr	r2, [pc, #624]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7fd fe26 	bl	8000c4c <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003004:	f7fd fe22 	bl	8000c4c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e12b      	b.n	800326e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003016:	4b93      	ldr	r3, [pc, #588]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8003018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0ef      	beq.n	8003004 <HAL_RCC_OscConfig+0x5cc>
 8003024:	e01b      	b.n	800305e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003026:	4b8f      	ldr	r3, [pc, #572]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8003028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800302c:	4a8d      	ldr	r2, [pc, #564]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7fd fe09 	bl	8000c4c <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800303e:	f7fd fe05 	bl	8000c4c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e10e      	b.n	800326e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003050:	4b84      	ldr	r3, [pc, #528]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8003052:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1ef      	bne.n	800303e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8102 	beq.w	800326c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	2b02      	cmp	r3, #2
 800306e:	f040 80c5 	bne.w	80031fc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003072:	4b7c      	ldr	r3, [pc, #496]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f003 0203 	and.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	429a      	cmp	r2, r3
 8003084:	d12c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	3b01      	subs	r3, #1
 8003092:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d123      	bne.n	80030e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d11b      	bne.n	80030e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d113      	bne.n	80030e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	3b01      	subs	r3, #1
 80030c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d109      	bne.n	80030e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	3b01      	subs	r3, #1
 80030da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d067      	beq.n	80031b0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d062      	beq.n	80031ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030e6:	4b5f      	ldr	r3, [pc, #380]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e0bb      	b.n	800326e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030f6:	4b5b      	ldr	r3, [pc, #364]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a5a      	ldr	r2, [pc, #360]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 80030fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003100:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003102:	f7fd fda3 	bl	8000c4c <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310a:	f7fd fd9f 	bl	8000c4c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e0a8      	b.n	800326e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311c:	4b51      	ldr	r3, [pc, #324]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003128:	4b4e      	ldr	r3, [pc, #312]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	4b4e      	ldr	r3, [pc, #312]	; (8003268 <HAL_RCC_OscConfig+0x830>)
 800312e:	4013      	ands	r3, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003138:	3a01      	subs	r2, #1
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	4311      	orrs	r1, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003142:	0212      	lsls	r2, r2, #8
 8003144:	4311      	orrs	r1, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800314a:	0852      	lsrs	r2, r2, #1
 800314c:	3a01      	subs	r2, #1
 800314e:	0552      	lsls	r2, r2, #21
 8003150:	4311      	orrs	r1, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003156:	0852      	lsrs	r2, r2, #1
 8003158:	3a01      	subs	r2, #1
 800315a:	0652      	lsls	r2, r2, #25
 800315c:	4311      	orrs	r1, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003162:	06d2      	lsls	r2, r2, #27
 8003164:	430a      	orrs	r2, r1
 8003166:	493f      	ldr	r1, [pc, #252]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8003168:	4313      	orrs	r3, r2
 800316a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800316c:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a3c      	ldr	r2, [pc, #240]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003176:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003178:	4b3a      	ldr	r3, [pc, #232]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a39      	ldr	r2, [pc, #228]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 800317e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003182:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003184:	f7fd fd62 	bl	8000c4c <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7fd fd5e 	bl	8000c4c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e067      	b.n	800326e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319e:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031aa:	e05f      	b.n	800326c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e05e      	b.n	800326e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b0:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d157      	bne.n	800326c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031bc:	4b29      	ldr	r3, [pc, #164]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a28      	ldr	r2, [pc, #160]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 80031c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031c8:	4b26      	ldr	r3, [pc, #152]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a25      	ldr	r2, [pc, #148]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 80031ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031d4:	f7fd fd3a 	bl	8000c4c <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fd fd36 	bl	8000c4c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e03f      	b.n	800326e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x7a4>
 80031fa:	e037      	b.n	800326c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d02d      	beq.n	800325e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003202:	4b18      	ldr	r3, [pc, #96]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a17      	ldr	r2, [pc, #92]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8003208:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800320c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800321a:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	4a11      	ldr	r2, [pc, #68]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8003220:	f023 0303 	bic.w	r3, r3, #3
 8003224:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4a0e      	ldr	r2, [pc, #56]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 800322c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003234:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003236:	f7fd fd09 	bl	8000c4c <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323e:	f7fd fd05 	bl	8000c4c <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e00e      	b.n	800326e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <HAL_RCC_OscConfig+0x82c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f0      	bne.n	800323e <HAL_RCC_OscConfig+0x806>
 800325c:	e006      	b.n	800326c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e005      	b.n	800326e <HAL_RCC_OscConfig+0x836>
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3720      	adds	r7, #32
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop

08003278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0c8      	b.n	800341e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b66      	ldr	r3, [pc, #408]	; (8003428 <HAL_RCC_ClockConfig+0x1b0>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d910      	bls.n	80032bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b63      	ldr	r3, [pc, #396]	; (8003428 <HAL_RCC_ClockConfig+0x1b0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 0207 	bic.w	r2, r3, #7
 80032a2:	4961      	ldr	r1, [pc, #388]	; (8003428 <HAL_RCC_ClockConfig+0x1b0>)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b5f      	ldr	r3, [pc, #380]	; (8003428 <HAL_RCC_ClockConfig+0x1b0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0b0      	b.n	800341e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d04c      	beq.n	8003362 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d0:	4b56      	ldr	r3, [pc, #344]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d121      	bne.n	8003320 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e09e      	b.n	800341e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e8:	4b50      	ldr	r3, [pc, #320]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d115      	bne.n	8003320 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e092      	b.n	800341e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d107      	bne.n	8003310 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003300:	4b4a      	ldr	r3, [pc, #296]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e086      	b.n	800341e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003310:	4b46      	ldr	r3, [pc, #280]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e07e      	b.n	800341e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003320:	4b42      	ldr	r3, [pc, #264]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f023 0203 	bic.w	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	493f      	ldr	r1, [pc, #252]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003332:	f7fd fc8b 	bl	8000c4c <HAL_GetTick>
 8003336:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003338:	e00a      	b.n	8003350 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333a:	f7fd fc87 	bl	8000c4c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e066      	b.n	800341e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003350:	4b36      	ldr	r3, [pc, #216]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 020c 	and.w	r2, r3, #12
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	429a      	cmp	r2, r3
 8003360:	d1eb      	bne.n	800333a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336e:	4b2f      	ldr	r3, [pc, #188]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	492c      	ldr	r1, [pc, #176]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003380:	4b29      	ldr	r3, [pc, #164]	; (8003428 <HAL_RCC_ClockConfig+0x1b0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d210      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b26      	ldr	r3, [pc, #152]	; (8003428 <HAL_RCC_ClockConfig+0x1b0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 0207 	bic.w	r2, r3, #7
 8003396:	4924      	ldr	r1, [pc, #144]	; (8003428 <HAL_RCC_ClockConfig+0x1b0>)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b22      	ldr	r3, [pc, #136]	; (8003428 <HAL_RCC_ClockConfig+0x1b0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e036      	b.n	800341e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4918      	ldr	r1, [pc, #96]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033da:	4b14      	ldr	r3, [pc, #80]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4910      	ldr	r1, [pc, #64]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033ee:	f000 f825 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80033f2:	4602      	mov	r2, r0
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <HAL_RCC_ClockConfig+0x1b4>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	490c      	ldr	r1, [pc, #48]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	5ccb      	ldrb	r3, [r1, r3]
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	fa22 f303 	lsr.w	r3, r2, r3
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd fbca 	bl	8000bac <HAL_InitTick>
 8003418:	4603      	mov	r3, r0
 800341a:	72fb      	strb	r3, [r7, #11]

  return status;
 800341c:	7afb      	ldrb	r3, [r7, #11]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40022000 	.word	0x40022000
 800342c:	40021000 	.word	0x40021000
 8003430:	080090d0 	.word	0x080090d0
 8003434:	20000028 	.word	0x20000028
 8003438:	2000002c 	.word	0x2000002c

0800343c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	2300      	movs	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344a:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003454:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0x34>
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	2b0c      	cmp	r3, #12
 8003468:	d121      	bne.n	80034ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d11e      	bne.n	80034ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003470:	4b34      	ldr	r3, [pc, #208]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800347c:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 800347e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	e005      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800348c:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003498:	4a2b      	ldr	r2, [pc, #172]	; (8003548 <HAL_RCC_GetSysClockFreq+0x10c>)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10d      	bne.n	80034c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ac:	e00a      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d102      	bne.n	80034ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_RCC_GetSysClockFreq+0x110>)
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	e004      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034c0:	4b23      	ldr	r3, [pc, #140]	; (8003550 <HAL_RCC_GetSysClockFreq+0x114>)
 80034c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d134      	bne.n	8003534 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d003      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d003      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0xac>
 80034e0:	e005      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034e2:	4b1a      	ldr	r3, [pc, #104]	; (800354c <HAL_RCC_GetSysClockFreq+0x110>)
 80034e4:	617b      	str	r3, [r7, #20]
      break;
 80034e6:	e005      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ea:	617b      	str	r3, [r7, #20]
      break;
 80034ec:	e002      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	617b      	str	r3, [r7, #20]
      break;
 80034f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	3301      	adds	r3, #1
 8003500:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	fb02 f203 	mul.w	r2, r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_RCC_GetSysClockFreq+0x108>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	0e5b      	lsrs	r3, r3, #25
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	3301      	adds	r3, #1
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003534:	69bb      	ldr	r3, [r7, #24]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3724      	adds	r7, #36	; 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	080090e0 	.word	0x080090e0
 800354c:	00f42400 	.word	0x00f42400
 8003550:	007a1200 	.word	0x007a1200

08003554 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003560:	4b2a      	ldr	r3, [pc, #168]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800356c:	f7ff f9f0 	bl	8002950 <HAL_PWREx_GetVoltageRange>
 8003570:	6178      	str	r0, [r7, #20]
 8003572:	e014      	b.n	800359e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	4a24      	ldr	r2, [pc, #144]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800358c:	f7ff f9e0 	bl	8002950 <HAL_PWREx_GetVoltageRange>
 8003590:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	4a1d      	ldr	r2, [pc, #116]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a4:	d10b      	bne.n	80035be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d919      	bls.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2ba0      	cmp	r3, #160	; 0xa0
 80035b0:	d902      	bls.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035b2:	2302      	movs	r3, #2
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	e013      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b8:	2301      	movs	r3, #1
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	e010      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b80      	cmp	r3, #128	; 0x80
 80035c2:	d902      	bls.n	80035ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035c4:	2303      	movs	r3, #3
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	e00a      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d102      	bne.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035d0:	2302      	movs	r3, #2
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	e004      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b70      	cmp	r3, #112	; 0x70
 80035da:	d101      	bne.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035dc:	2301      	movs	r3, #1
 80035de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f023 0207 	bic.w	r2, r3, #7
 80035e8:	4909      	ldr	r1, [pc, #36]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d001      	beq.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000
 8003610:	40022000 	.word	0x40022000

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800361c:	2300      	movs	r3, #0
 800361e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003620:	2300      	movs	r3, #0
 8003622:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362c:	2b00      	cmp	r3, #0
 800362e:	d031      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003638:	d01a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800363a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800363e:	d814      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d009      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003644:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003648:	d10f      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800364a:	4bac      	ldr	r3, [pc, #688]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4aab      	ldr	r2, [pc, #684]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003654:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003656:	e00c      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f9cc 	bl	80039fc <RCCEx_PLLSAI1_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003668:	e003      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	74fb      	strb	r3, [r7, #19]
      break;
 800366e:	e000      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003672:	7cfb      	ldrb	r3, [r7, #19]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003678:	4ba0      	ldr	r3, [pc, #640]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	499d      	ldr	r1, [pc, #628]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800368e:	e001      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 8099 	beq.w	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036a2:	2300      	movs	r3, #0
 80036a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036a6:	4b95      	ldr	r3, [pc, #596]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036bc:	4b8f      	ldr	r3, [pc, #572]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	4a8e      	ldr	r2, [pc, #568]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c6:	6593      	str	r3, [r2, #88]	; 0x58
 80036c8:	4b8c      	ldr	r3, [pc, #560]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d4:	2301      	movs	r3, #1
 80036d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d8:	4b89      	ldr	r3, [pc, #548]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a88      	ldr	r2, [pc, #544]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036e4:	f7fd fab2 	bl	8000c4c <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ea:	e009      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ec:	f7fd faae 	bl	8000c4c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d902      	bls.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	74fb      	strb	r3, [r7, #19]
        break;
 80036fe:	e005      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003700:	4b7f      	ldr	r3, [pc, #508]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ef      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d155      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003712:	4b7a      	ldr	r3, [pc, #488]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01e      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	429a      	cmp	r2, r3
 800372c:	d019      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800372e:	4b73      	ldr	r3, [pc, #460]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003738:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800373a:	4b70      	ldr	r3, [pc, #448]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800373c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003740:	4a6e      	ldr	r2, [pc, #440]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800374a:	4b6c      	ldr	r3, [pc, #432]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003750:	4a6a      	ldr	r2, [pc, #424]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800375a:	4a68      	ldr	r2, [pc, #416]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d016      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fd fa6e 	bl	8000c4c <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003772:	e00b      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003774:	f7fd fa6a 	bl	8000c4c <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d902      	bls.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	74fb      	strb	r3, [r7, #19]
            break;
 800378a:	e006      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378c:	4b5b      	ldr	r3, [pc, #364]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0ec      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800379a:	7cfb      	ldrb	r3, [r7, #19]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a0:	4b56      	ldr	r3, [pc, #344]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ae:	4953      	ldr	r1, [pc, #332]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037b6:	e004      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	74bb      	strb	r3, [r7, #18]
 80037bc:	e001      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c2:	7c7b      	ldrb	r3, [r7, #17]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c8:	4b4c      	ldr	r3, [pc, #304]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	4a4b      	ldr	r2, [pc, #300]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037e0:	4b46      	ldr	r3, [pc, #280]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f023 0203 	bic.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	4943      	ldr	r1, [pc, #268]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003802:	4b3e      	ldr	r3, [pc, #248]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f023 020c 	bic.w	r2, r3, #12
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	493a      	ldr	r1, [pc, #232]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003824:	4b35      	ldr	r3, [pc, #212]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	4932      	ldr	r1, [pc, #200]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003846:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003854:	4929      	ldr	r1, [pc, #164]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003868:	4b24      	ldr	r3, [pc, #144]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	4921      	ldr	r1, [pc, #132]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800388a:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	4918      	ldr	r1, [pc, #96]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ac:	4b13      	ldr	r3, [pc, #76]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	4910      	ldr	r1, [pc, #64]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d02c      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ce:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	4907      	ldr	r1, [pc, #28]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ec:	d10a      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ee:	4b03      	ldr	r3, [pc, #12]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	4a02      	ldr	r2, [pc, #8]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f8:	60d3      	str	r3, [r2, #12]
 80038fa:	e015      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80038fc:	40021000 	.word	0x40021000
 8003900:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800390c:	d10c      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	2101      	movs	r1, #1
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f871 	bl	80039fc <RCCEx_PLLSAI1_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d028      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	492d      	ldr	r1, [pc, #180]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003952:	d106      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003954:	4b28      	ldr	r3, [pc, #160]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800395a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395e:	60d3      	str	r3, [r2, #12]
 8003960:	e011      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800396a:	d10c      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f842 	bl	80039fc <RCCEx_PLLSAI1_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01c      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003992:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a0:	4915      	ldr	r1, [pc, #84]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039b0:	d10c      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2102      	movs	r1, #2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 f81f 	bl	80039fc <RCCEx_PLLSAI1_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039c2:	7cfb      	ldrb	r3, [r7, #19]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e6:	4904      	ldr	r1, [pc, #16]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000

080039fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a0a:	4b74      	ldr	r3, [pc, #464]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d018      	beq.n	8003a48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a16:	4b71      	ldr	r3, [pc, #452]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0203 	and.w	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d10d      	bne.n	8003a42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
       ||
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a2e:	4b6b      	ldr	r3, [pc, #428]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d047      	beq.n	8003ad2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	e044      	b.n	8003ad2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d018      	beq.n	8003a82 <RCCEx_PLLSAI1_Config+0x86>
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d825      	bhi.n	8003aa0 <RCCEx_PLLSAI1_Config+0xa4>
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d002      	beq.n	8003a5e <RCCEx_PLLSAI1_Config+0x62>
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d009      	beq.n	8003a70 <RCCEx_PLLSAI1_Config+0x74>
 8003a5c:	e020      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a5e:	4b5f      	ldr	r3, [pc, #380]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d11d      	bne.n	8003aa6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6e:	e01a      	b.n	8003aa6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a70:	4b5a      	ldr	r3, [pc, #360]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d116      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a80:	e013      	b.n	8003aaa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a82:	4b56      	ldr	r3, [pc, #344]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10f      	bne.n	8003aae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a8e:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a9e:	e006      	b.n	8003aae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa4:	e004      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e002      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10d      	bne.n	8003ad2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ab6:	4b49      	ldr	r3, [pc, #292]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	430b      	orrs	r3, r1
 8003acc:	4943      	ldr	r1, [pc, #268]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d17c      	bne.n	8003bd2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ad8:	4b40      	ldr	r3, [pc, #256]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3f      	ldr	r2, [pc, #252]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ade:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae4:	f7fd f8b2 	bl	8000c4c <HAL_GetTick>
 8003ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aea:	e009      	b.n	8003b00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aec:	f7fd f8ae 	bl	8000c4c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d902      	bls.n	8003b00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	73fb      	strb	r3, [r7, #15]
        break;
 8003afe:	e005      	b.n	8003b0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b00:	4b36      	ldr	r3, [pc, #216]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ef      	bne.n	8003aec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d15f      	bne.n	8003bd2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d110      	bne.n	8003b3a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b18:	4b30      	ldr	r3, [pc, #192]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6892      	ldr	r2, [r2, #8]
 8003b28:	0211      	lsls	r1, r2, #8
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68d2      	ldr	r2, [r2, #12]
 8003b2e:	06d2      	lsls	r2, r2, #27
 8003b30:	430a      	orrs	r2, r1
 8003b32:	492a      	ldr	r1, [pc, #168]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	610b      	str	r3, [r1, #16]
 8003b38:	e027      	b.n	8003b8a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d112      	bne.n	8003b66 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b40:	4b26      	ldr	r3, [pc, #152]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6892      	ldr	r2, [r2, #8]
 8003b50:	0211      	lsls	r1, r2, #8
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6912      	ldr	r2, [r2, #16]
 8003b56:	0852      	lsrs	r2, r2, #1
 8003b58:	3a01      	subs	r2, #1
 8003b5a:	0552      	lsls	r2, r2, #21
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	491f      	ldr	r1, [pc, #124]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	610b      	str	r3, [r1, #16]
 8003b64:	e011      	b.n	8003b8a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b66:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6892      	ldr	r2, [r2, #8]
 8003b76:	0211      	lsls	r1, r2, #8
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6952      	ldr	r2, [r2, #20]
 8003b7c:	0852      	lsrs	r2, r2, #1
 8003b7e:	3a01      	subs	r2, #1
 8003b80:	0652      	lsls	r2, r2, #25
 8003b82:	430a      	orrs	r2, r1
 8003b84:	4915      	ldr	r1, [pc, #84]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b8a:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b96:	f7fd f859 	bl	8000c4c <HAL_GetTick>
 8003b9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b9c:	e009      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b9e:	f7fd f855 	bl	8000c4c <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d902      	bls.n	8003bb2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	73fb      	strb	r3, [r7, #15]
          break;
 8003bb0:	e005      	b.n	8003bbe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0ef      	beq.n	8003b9e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	4903      	ldr	r1, [pc, #12]	; (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000

08003be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e095      	b.n	8003d1e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d108      	bne.n	8003c0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c02:	d009      	beq.n	8003c18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	61da      	str	r2, [r3, #28]
 8003c0a:	e005      	b.n	8003c18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fc fe94 	bl	8000960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c58:	d902      	bls.n	8003c60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e002      	b.n	8003c66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c6e:	d007      	beq.n	8003c80 <HAL_SPI_Init+0xa0>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c78:	d002      	beq.n	8003c80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc2:	ea42 0103 	orr.w	r1, r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	f003 0204 	and.w	r2, r3, #4
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003cfc:	ea42 0103 	orr.w	r1, r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b088      	sub	sp, #32
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_SPI_Transmit+0x22>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e158      	b.n	8003ffa <HAL_SPI_Transmit+0x2d4>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d50:	f7fc ff7c 	bl	8000c4c <HAL_GetTick>
 8003d54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d002      	beq.n	8003d6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
 8003d68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d6a:	e13d      	b.n	8003fe8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_SPI_Transmit+0x52>
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d7c:	e134      	b.n	8003fe8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2203      	movs	r2, #3
 8003d82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc8:	d10f      	bne.n	8003dea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d007      	beq.n	8003e08 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e10:	d94b      	bls.n	8003eaa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_SPI_Transmit+0xfa>
 8003e1a:	8afb      	ldrh	r3, [r7, #22]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d13e      	bne.n	8003e9e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	881a      	ldrh	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	1c9a      	adds	r2, r3, #2
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e44:	e02b      	b.n	8003e9e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d112      	bne.n	8003e7a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	881a      	ldrh	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	1c9a      	adds	r2, r3, #2
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e78:	e011      	b.n	8003e9e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e7a:	f7fc fee7 	bl	8000c4c <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d803      	bhi.n	8003e92 <HAL_SPI_Transmit+0x16c>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e90:	d102      	bne.n	8003e98 <HAL_SPI_Transmit+0x172>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d102      	bne.n	8003e9e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e9c:	e0a4      	b.n	8003fe8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ce      	bne.n	8003e46 <HAL_SPI_Transmit+0x120>
 8003ea8:	e07c      	b.n	8003fa4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_SPI_Transmit+0x192>
 8003eb2:	8afb      	ldrh	r3, [r7, #22]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d170      	bne.n	8003f9a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d912      	bls.n	8003ee8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	881a      	ldrh	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	1c9a      	adds	r2, r3, #2
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b02      	subs	r3, #2
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ee6:	e058      	b.n	8003f9a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	7812      	ldrb	r2, [r2, #0]
 8003ef4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f0e:	e044      	b.n	8003f9a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d12b      	bne.n	8003f76 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d912      	bls.n	8003f4e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	881a      	ldrh	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	1c9a      	adds	r2, r3, #2
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b02      	subs	r3, #2
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f4c:	e025      	b.n	8003f9a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f74:	e011      	b.n	8003f9a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f76:	f7fc fe69 	bl	8000c4c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d803      	bhi.n	8003f8e <HAL_SPI_Transmit+0x268>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f8c:	d102      	bne.n	8003f94 <HAL_SPI_Transmit+0x26e>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f98:	e026      	b.n	8003fe8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1b5      	bne.n	8003f10 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	6839      	ldr	r1, [r7, #0]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fcdb 	bl	8004964 <SPI_EndRxTxTransaction>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e000      	b.n	8003fe8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003fe6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ff8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b088      	sub	sp, #32
 8004006:	af02      	add	r7, sp, #8
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	4613      	mov	r3, r2
 8004010:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401e:	d112      	bne.n	8004046 <HAL_SPI_Receive+0x44>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10e      	bne.n	8004046 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2204      	movs	r2, #4
 800402c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004030:	88fa      	ldrh	r2, [r7, #6]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	4613      	mov	r3, r2
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f910 	bl	8004262 <HAL_SPI_TransmitReceive>
 8004042:	4603      	mov	r3, r0
 8004044:	e109      	b.n	800425a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_SPI_Receive+0x52>
 8004050:	2302      	movs	r3, #2
 8004052:	e102      	b.n	800425a <HAL_SPI_Receive+0x258>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800405c:	f7fc fdf6 	bl	8000c4c <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b01      	cmp	r3, #1
 800406c:	d002      	beq.n	8004074 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800406e:	2302      	movs	r3, #2
 8004070:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004072:	e0e9      	b.n	8004248 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_SPI_Receive+0x7e>
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004084:	e0e0      	b.n	8004248 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2204      	movs	r2, #4
 800408a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	88fa      	ldrh	r2, [r7, #6]
 800409e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040d0:	d908      	bls.n	80040e4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	e007      	b.n	80040f4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040f2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fc:	d10f      	bne.n	800411e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800410c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800411c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	d007      	beq.n	800413c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800413a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004144:	d867      	bhi.n	8004216 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004146:	e030      	b.n	80041aa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d117      	bne.n	8004186 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f103 020c 	add.w	r2, r3, #12
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	7812      	ldrb	r2, [r2, #0]
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004184:	e011      	b.n	80041aa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004186:	f7fc fd61 	bl	8000c4c <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d803      	bhi.n	800419e <HAL_SPI_Receive+0x19c>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800419c:	d102      	bne.n	80041a4 <HAL_SPI_Receive+0x1a2>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041a8:	e04e      	b.n	8004248 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1c8      	bne.n	8004148 <HAL_SPI_Receive+0x146>
 80041b6:	e034      	b.n	8004222 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d115      	bne.n	80041f2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	b292      	uxth	r2, r2
 80041d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	1c9a      	adds	r2, r3, #2
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80041f0:	e011      	b.n	8004216 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041f2:	f7fc fd2b 	bl	8000c4c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d803      	bhi.n	800420a <HAL_SPI_Receive+0x208>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004208:	d102      	bne.n	8004210 <HAL_SPI_Receive+0x20e>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d102      	bne.n	8004216 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004214:	e018      	b.n	8004248 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1ca      	bne.n	80041b8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fb44 	bl	80048b4 <SPI_EndRxTransaction>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
 8004244:	e000      	b.n	8004248 <HAL_SPI_Receive+0x246>
  }

error :
 8004246:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004258:	7dfb      	ldrb	r3, [r7, #23]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b08a      	sub	sp, #40	; 0x28
 8004266:	af00      	add	r7, sp, #0
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	607a      	str	r2, [r7, #4]
 800426e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004270:	2301      	movs	r3, #1
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_SPI_TransmitReceive+0x26>
 8004284:	2302      	movs	r3, #2
 8004286:	e1fb      	b.n	8004680 <HAL_SPI_TransmitReceive+0x41e>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004290:	f7fc fcdc 	bl	8000c4c <HAL_GetTick>
 8004294:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800429c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80042a4:	887b      	ldrh	r3, [r7, #2]
 80042a6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80042a8:	887b      	ldrh	r3, [r7, #2]
 80042aa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042ac:	7efb      	ldrb	r3, [r7, #27]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d00e      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x6e>
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b8:	d106      	bne.n	80042c8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d102      	bne.n	80042c8 <HAL_SPI_TransmitReceive+0x66>
 80042c2:	7efb      	ldrb	r3, [r7, #27]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d003      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042ce:	e1cd      	b.n	800466c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_SPI_TransmitReceive+0x80>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_SPI_TransmitReceive+0x80>
 80042dc:	887b      	ldrh	r3, [r7, #2]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d103      	bne.n	80042ea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042e8:	e1c0      	b.n	800466c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d003      	beq.n	80042fe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2205      	movs	r2, #5
 80042fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	887a      	ldrh	r2, [r7, #2]
 800430e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	887a      	ldrh	r2, [r7, #2]
 8004316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	887a      	ldrh	r2, [r7, #2]
 8004324:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	887a      	ldrh	r2, [r7, #2]
 800432a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004340:	d802      	bhi.n	8004348 <HAL_SPI_TransmitReceive+0xe6>
 8004342:	8a3b      	ldrh	r3, [r7, #16]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d908      	bls.n	800435a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004356:	605a      	str	r2, [r3, #4]
 8004358:	e007      	b.n	800436a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004368:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d007      	beq.n	8004388 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004386:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004390:	d97c      	bls.n	800448c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_SPI_TransmitReceive+0x13e>
 800439a:	8a7b      	ldrh	r3, [r7, #18]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d169      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	881a      	ldrh	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	1c9a      	adds	r2, r3, #2
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043c4:	e056      	b.n	8004474 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d11b      	bne.n	800440c <HAL_SPI_TransmitReceive+0x1aa>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <HAL_SPI_TransmitReceive+0x1aa>
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d113      	bne.n	800440c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	881a      	ldrh	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	1c9a      	adds	r2, r3, #2
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d11c      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x1f2>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	b292      	uxth	r2, r2
 8004432:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	1c9a      	adds	r2, r3, #2
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004450:	2301      	movs	r3, #1
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004454:	f7fc fbfa 	bl	8000c4c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004460:	429a      	cmp	r2, r3
 8004462:	d807      	bhi.n	8004474 <HAL_SPI_TransmitReceive+0x212>
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800446a:	d003      	beq.n	8004474 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004472:	e0fb      	b.n	800466c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1a3      	bne.n	80043c6 <HAL_SPI_TransmitReceive+0x164>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d19d      	bne.n	80043c6 <HAL_SPI_TransmitReceive+0x164>
 800448a:	e0df      	b.n	800464c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_SPI_TransmitReceive+0x23a>
 8004494:	8a7b      	ldrh	r3, [r7, #18]
 8004496:	2b01      	cmp	r3, #1
 8004498:	f040 80cb 	bne.w	8004632 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d912      	bls.n	80044cc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	881a      	ldrh	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	1c9a      	adds	r2, r3, #2
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b02      	subs	r3, #2
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044ca:	e0b2      	b.n	8004632 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	7812      	ldrb	r2, [r2, #0]
 80044d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044f2:	e09e      	b.n	8004632 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d134      	bne.n	800456c <HAL_SPI_TransmitReceive+0x30a>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d02f      	beq.n	800456c <HAL_SPI_TransmitReceive+0x30a>
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	2b01      	cmp	r3, #1
 8004510:	d12c      	bne.n	800456c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d912      	bls.n	8004542 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	881a      	ldrh	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	1c9a      	adds	r2, r3, #2
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b02      	subs	r3, #2
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004540:	e012      	b.n	8004568 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	330c      	adds	r3, #12
 800454c:	7812      	ldrb	r2, [r2, #0]
 800454e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b01      	cmp	r3, #1
 8004578:	d148      	bne.n	800460c <HAL_SPI_TransmitReceive+0x3aa>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d042      	beq.n	800460c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b01      	cmp	r3, #1
 8004590:	d923      	bls.n	80045da <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	b292      	uxth	r2, r2
 800459e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	1c9a      	adds	r2, r3, #2
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b02      	subs	r3, #2
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d81f      	bhi.n	8004608 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	e016      	b.n	8004608 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f103 020c 	add.w	r2, r3, #12
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	7812      	ldrb	r2, [r2, #0]
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004608:	2301      	movs	r3, #1
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800460c:	f7fc fb1e 	bl	8000c4c <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004618:	429a      	cmp	r2, r3
 800461a:	d803      	bhi.n	8004624 <HAL_SPI_TransmitReceive+0x3c2>
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004622:	d102      	bne.n	800462a <HAL_SPI_TransmitReceive+0x3c8>
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	2b00      	cmp	r3, #0
 8004628:	d103      	bne.n	8004632 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004630:	e01c      	b.n	800466c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	f47f af5b 	bne.w	80044f4 <HAL_SPI_TransmitReceive+0x292>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	f47f af54 	bne.w	80044f4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f987 	bl	8004964 <SPI_EndRxTxTransaction>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d006      	beq.n	800466a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	661a      	str	r2, [r3, #96]	; 0x60
 8004668:	e000      	b.n	800466c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800466a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800467c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004680:	4618      	mov	r0, r3
 8004682:	3728      	adds	r7, #40	; 0x28
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004698:	f7fc fad8 	bl	8000c4c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	4413      	add	r3, r2
 80046a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046a8:	f7fc fad0 	bl	8000c4c <HAL_GetTick>
 80046ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046ae:	4b39      	ldr	r3, [pc, #228]	; (8004794 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	015b      	lsls	r3, r3, #5
 80046b4:	0d1b      	lsrs	r3, r3, #20
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	fb02 f303 	mul.w	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046be:	e054      	b.n	800476a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c6:	d050      	beq.n	800476a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046c8:	f7fc fac0 	bl	8000c4c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d902      	bls.n	80046de <SPI_WaitFlagStateUntilTimeout+0x56>
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d13d      	bne.n	800475a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f6:	d111      	bne.n	800471c <SPI_WaitFlagStateUntilTimeout+0x94>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004700:	d004      	beq.n	800470c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470a:	d107      	bne.n	800471c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004724:	d10f      	bne.n	8004746 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e017      	b.n	800478a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	3b01      	subs	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4013      	ands	r3, r2
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	429a      	cmp	r2, r3
 8004786:	d19b      	bne.n	80046c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3720      	adds	r7, #32
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000028 	.word	0x20000028

08004798 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80047a6:	f7fc fa51 	bl	8000c4c <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	4413      	add	r3, r2
 80047b4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047b6:	f7fc fa49 	bl	8000c4c <HAL_GetTick>
 80047ba:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80047bc:	4b3c      	ldr	r3, [pc, #240]	; (80048b0 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	00da      	lsls	r2, r3, #3
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	0d1b      	lsrs	r3, r3, #20
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80047d4:	e05f      	b.n	8004896 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047dc:	d106      	bne.n	80047ec <SPI_WaitFifoStateUntilTimeout+0x54>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d103      	bne.n	80047ec <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047f2:	d050      	beq.n	8004896 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047f4:	f7fc fa2a 	bl	8000c4c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	429a      	cmp	r2, r3
 8004802:	d902      	bls.n	800480a <SPI_WaitFifoStateUntilTimeout+0x72>
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d13d      	bne.n	8004886 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004818:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004822:	d111      	bne.n	8004848 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482c:	d004      	beq.n	8004838 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004836:	d107      	bne.n	8004848 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004846:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004850:	d10f      	bne.n	8004872 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004870:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e010      	b.n	80048a8 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	3b01      	subs	r3, #1
 8004894:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4013      	ands	r3, r2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d197      	bne.n	80047d6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000028 	.word	0x20000028

080048b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c8:	d111      	bne.n	80048ee <SPI_EndRxTransaction+0x3a>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d2:	d004      	beq.n	80048de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048dc:	d107      	bne.n	80048ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2200      	movs	r2, #0
 80048f6:	2180      	movs	r1, #128	; 0x80
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff fec5 	bl	8004688 <SPI_WaitFlagStateUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004908:	f043 0220 	orr.w	r2, r3, #32
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e023      	b.n	800495c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800491c:	d11d      	bne.n	800495a <SPI_EndRxTransaction+0xa6>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004926:	d004      	beq.n	8004932 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004930:	d113      	bne.n	800495a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2200      	movs	r2, #0
 800493a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff ff2a 	bl	8004798 <SPI_WaitFifoStateUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494e:	f043 0220 	orr.w	r2, r3, #32
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e000      	b.n	800495c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2200      	movs	r2, #0
 8004978:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f7ff ff0b 	bl	8004798 <SPI_WaitFifoStateUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498c:	f043 0220 	orr.w	r2, r3, #32
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e027      	b.n	80049e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2200      	movs	r2, #0
 80049a0:	2180      	movs	r1, #128	; 0x80
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f7ff fe70 	bl	8004688 <SPI_WaitFlagStateUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b2:	f043 0220 	orr.w	r2, r3, #32
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e014      	b.n	80049e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7ff fee4 	bl	8004798 <SPI_WaitFifoStateUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049da:	f043 0220 	orr.w	r2, r3, #32
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e000      	b.n	80049e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049f0:	b084      	sub	sp, #16
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	f107 0014 	add.w	r0, r7, #20
 80049fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	b004      	add	sp, #16
 8004a10:	4770      	bx	lr

08004a12 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b085      	sub	sp, #20
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a22:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a26:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a48:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a4c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	4013      	ands	r3, r2
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a90:	b084      	sub	sp, #16
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	f107 0014 	add.w	r0, r7, #20
 8004a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	b004      	add	sp, #16
 8004ad0:	4770      	bx	lr
	...

08004ad4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b09b      	sub	sp, #108	; 0x6c
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	78db      	ldrb	r3, [r3, #3]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d81f      	bhi.n	8004b46 <USB_ActivateEndpoint+0x72>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <USB_ActivateEndpoint+0x38>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b1d 	.word	0x08004b1d
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b4f 	.word	0x08004b4f
 8004b18:	08004b2b 	.word	0x08004b2b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b24:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b28:	e012      	b.n	8004b50 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b2e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b36:	e00b      	b.n	8004b50 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b44:	e004      	b.n	8004b50 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b4c:	e000      	b.n	8004b50 <USB_ActivateEndpoint+0x7c>
      break;
 8004b4e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	b21b      	sxth	r3, r3
 8004b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8a:	b21a      	sxth	r2, r3
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	b21b      	sxth	r3, r3
 8004b92:	4313      	orrs	r3, r2
 8004b94:	b21b      	sxth	r3, r3
 8004b96:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	441a      	add	r2, r3
 8004ba4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	7b1b      	ldrb	r3, [r3, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 8149 	bne.w	8004e58 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	785b      	ldrb	r3, [r3, #1]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 8084 	beq.w	8004cd8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	4413      	add	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	00da      	lsls	r2, r3, #3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	88db      	ldrh	r3, [r3, #6]
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	81fb      	strh	r3, [r7, #14]
 8004c12:	89fb      	ldrh	r3, [r7, #14]
 8004c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <USB_ActivateEndpoint+0x180>
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	81bb      	strh	r3, [r7, #12]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	441a      	add	r2, r3
 8004c3e:	89bb      	ldrh	r3, [r7, #12]
 8004c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	78db      	ldrb	r3, [r3, #3]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d020      	beq.n	8004c9e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c72:	813b      	strh	r3, [r7, #8]
 8004c74:	893b      	ldrh	r3, [r7, #8]
 8004c76:	f083 0320 	eor.w	r3, r3, #32
 8004c7a:	813b      	strh	r3, [r7, #8]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	441a      	add	r2, r3
 8004c86:	893b      	ldrh	r3, [r7, #8]
 8004c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	8013      	strh	r3, [r2, #0]
 8004c9c:	e27f      	b.n	800519e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb4:	817b      	strh	r3, [r7, #10]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	441a      	add	r2, r3
 8004cc0:	897b      	ldrh	r3, [r7, #10]
 8004cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	8013      	strh	r3, [r2, #0]
 8004cd6:	e262      	b.n	800519e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce8:	4413      	add	r3, r2
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	00da      	lsls	r2, r3, #3
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	88db      	ldrh	r3, [r3, #6]
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	4413      	add	r3, r2
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	00da      	lsls	r2, r3, #3
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	4413      	add	r3, r2
 8004d2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d2e:	623b      	str	r3, [r7, #32]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d112      	bne.n	8004d5e <USB_ActivateEndpoint+0x28a>
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	801a      	strh	r2, [r3, #0]
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	e02f      	b.n	8004dbe <USB_ActivateEndpoint+0x2ea>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b3e      	cmp	r3, #62	; 0x3e
 8004d64:	d813      	bhi.n	8004d8e <USB_ActivateEndpoint+0x2ba>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <USB_ActivateEndpoint+0x2ac>
 8004d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	663b      	str	r3, [r7, #96]	; 0x60
 8004d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	029b      	lsls	r3, r3, #10
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	e017      	b.n	8004dbe <USB_ActivateEndpoint+0x2ea>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	663b      	str	r3, [r7, #96]	; 0x60
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 031f 	and.w	r3, r3, #31
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <USB_ActivateEndpoint+0x2d4>
 8004da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da4:	3b01      	subs	r3, #1
 8004da6:	663b      	str	r3, [r7, #96]	; 0x60
 8004da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	029b      	lsls	r3, r3, #10
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	83fb      	strh	r3, [r7, #30]
 8004dcc:	8bfb      	ldrh	r3, [r7, #30]
 8004dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01b      	beq.n	8004e0e <USB_ActivateEndpoint+0x33a>
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dec:	83bb      	strh	r3, [r7, #28]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	8bbb      	ldrh	r3, [r7, #28]
 8004dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e24:	837b      	strh	r3, [r7, #26]
 8004e26:	8b7b      	ldrh	r3, [r7, #26]
 8004e28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e2c:	837b      	strh	r3, [r7, #26]
 8004e2e:	8b7b      	ldrh	r3, [r7, #26]
 8004e30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e34:	837b      	strh	r3, [r7, #26]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	441a      	add	r2, r3
 8004e40:	8b7b      	ldrh	r3, [r7, #26]
 8004e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	8013      	strh	r3, [r2, #0]
 8004e56:	e1a2      	b.n	800519e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	441a      	add	r2, r3
 8004e7c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e88:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ea4:	4413      	add	r3, r2
 8004ea6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	00da      	lsls	r2, r3, #3
 8004eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	891b      	ldrh	r3, [r3, #8]
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec6:	801a      	strh	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	653b      	str	r3, [r7, #80]	; 0x50
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed8:	4413      	add	r3, r2
 8004eda:	653b      	str	r3, [r7, #80]	; 0x50
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	00da      	lsls	r2, r3, #3
 8004ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	895b      	ldrh	r3, [r3, #10]
 8004ef0:	085b      	lsrs	r3, r3, #1
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f040 8091 	bne.w	8005028 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01b      	beq.n	8004f56 <USB_ActivateEndpoint+0x482>
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f34:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	441a      	add	r2, r3
 8004f40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01b      	beq.n	8004fa6 <USB_ActivateEndpoint+0x4d2>
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f84:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	441a      	add	r2, r3
 8004f90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fbe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fc4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fcc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	441a      	add	r2, r3
 8004fd8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005004:	867b      	strh	r3, [r7, #50]	; 0x32
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	441a      	add	r2, r3
 8005010:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005022:	b29b      	uxth	r3, r3
 8005024:	8013      	strh	r3, [r2, #0]
 8005026:	e0ba      	b.n	800519e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005038:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800503c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01d      	beq.n	8005080 <USB_ActivateEndpoint+0x5ac>
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	441a      	add	r2, r3
 8005068:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800506c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507c:	b29b      	uxth	r3, r3
 800507e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005090:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01d      	beq.n	80050d8 <USB_ActivateEndpoint+0x604>
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	78db      	ldrb	r3, [r3, #3]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d024      	beq.n	800512a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80050fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80050fe:	f083 0320 	eor.w	r3, r3, #32
 8005102:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	441a      	add	r2, r3
 8005110:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005124:	b29b      	uxth	r3, r3
 8005126:	8013      	strh	r3, [r2, #0]
 8005128:	e01d      	b.n	8005166 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005140:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	441a      	add	r2, r3
 800514e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005162:	b29b      	uxth	r3, r3
 8005164:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	441a      	add	r2, r3
 8005188:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800518a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519a:	b29b      	uxth	r3, r3
 800519c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800519e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	376c      	adds	r7, #108	; 0x6c
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop

080051b0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b08d      	sub	sp, #52	; 0x34
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	7b1b      	ldrb	r3, [r3, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f040 808e 	bne.w	80052e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d044      	beq.n	8005256 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	81bb      	strh	r3, [r7, #12]
 80051da:	89bb      	ldrh	r3, [r7, #12]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01b      	beq.n	800521c <USB_DeactivateEndpoint+0x6c>
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	817b      	strh	r3, [r7, #10]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	441a      	add	r2, r3
 8005206:	897b      	ldrh	r3, [r7, #10]
 8005208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005214:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005218:	b29b      	uxth	r3, r3
 800521a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005232:	813b      	strh	r3, [r7, #8]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	441a      	add	r2, r3
 800523e:	893b      	ldrh	r3, [r7, #8]
 8005240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005250:	b29b      	uxth	r3, r3
 8005252:	8013      	strh	r3, [r2, #0]
 8005254:	e192      	b.n	800557c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	827b      	strh	r3, [r7, #18]
 8005264:	8a7b      	ldrh	r3, [r7, #18]
 8005266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01b      	beq.n	80052a6 <USB_DeactivateEndpoint+0xf6>
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005284:	823b      	strh	r3, [r7, #16]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	441a      	add	r2, r3
 8005290:	8a3b      	ldrh	r3, [r7, #16]
 8005292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800529a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800529e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052bc:	81fb      	strh	r3, [r7, #14]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	89fb      	ldrh	r3, [r7, #14]
 80052ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052da:	b29b      	uxth	r3, r3
 80052dc:	8013      	strh	r3, [r2, #0]
 80052de:	e14d      	b.n	800557c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	785b      	ldrb	r3, [r3, #1]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f040 80a5 	bne.w	8005434 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	843b      	strh	r3, [r7, #32]
 80052f8:	8c3b      	ldrh	r3, [r7, #32]
 80052fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01b      	beq.n	800533a <USB_DeactivateEndpoint+0x18a>
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005318:	83fb      	strh	r3, [r7, #30]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	441a      	add	r2, r3
 8005324:	8bfb      	ldrh	r3, [r7, #30]
 8005326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005336:	b29b      	uxth	r3, r3
 8005338:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	83bb      	strh	r3, [r7, #28]
 8005348:	8bbb      	ldrh	r3, [r7, #28]
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d01b      	beq.n	800538a <USB_DeactivateEndpoint+0x1da>
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005368:	837b      	strh	r3, [r7, #26]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	441a      	add	r2, r3
 8005374:	8b7b      	ldrh	r3, [r7, #26]
 8005376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800537a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005382:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005386:	b29b      	uxth	r3, r3
 8005388:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a0:	833b      	strh	r3, [r7, #24]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	8b3b      	ldrh	r3, [r7, #24]
 80053ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053be:	b29b      	uxth	r3, r3
 80053c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d8:	82fb      	strh	r3, [r7, #22]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	441a      	add	r2, r3
 80053e4:	8afb      	ldrh	r3, [r7, #22]
 80053e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005410:	82bb      	strh	r3, [r7, #20]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	441a      	add	r2, r3
 800541c:	8abb      	ldrh	r3, [r7, #20]
 800541e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542e:	b29b      	uxth	r3, r3
 8005430:	8013      	strh	r3, [r2, #0]
 8005432:	e0a3      	b.n	800557c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005442:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01b      	beq.n	8005484 <USB_DeactivateEndpoint+0x2d4>
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005462:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	441a      	add	r2, r3
 800546e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800547c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005480:	b29b      	uxth	r3, r3
 8005482:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005492:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01b      	beq.n	80054d4 <USB_DeactivateEndpoint+0x324>
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	441a      	add	r2, r3
 80054be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	441a      	add	r2, r3
 80054f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005508:	b29b      	uxth	r3, r3
 800550a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005522:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	441a      	add	r2, r3
 800552e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005540:	b29b      	uxth	r3, r3
 8005542:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	847b      	strh	r3, [r7, #34]	; 0x22
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	441a      	add	r2, r3
 8005566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005578:	b29b      	uxth	r3, r3
 800557a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3734      	adds	r7, #52	; 0x34
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b0c4      	sub	sp, #272	; 0x110
 800558e:	af00      	add	r7, sp, #0
 8005590:	1d3b      	adds	r3, r7, #4
 8005592:	6018      	str	r0, [r3, #0]
 8005594:	463b      	mov	r3, r7
 8005596:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005598:	463b      	mov	r3, r7
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	f040 8566 	bne.w	8006070 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055a4:	463b      	mov	r3, r7
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	463b      	mov	r3, r7
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d905      	bls.n	80055c0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80055b4:	463b      	mov	r3, r7
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80055be:	e004      	b.n	80055ca <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80055c0:	463b      	mov	r3, r7
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055ca:	463b      	mov	r3, r7
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	7b1b      	ldrb	r3, [r3, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d12c      	bne.n	800562e <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055d4:	463b      	mov	r3, r7
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6959      	ldr	r1, [r3, #20]
 80055da:	463b      	mov	r3, r7
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	88da      	ldrh	r2, [r3, #6]
 80055e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	1d38      	adds	r0, r7, #4
 80055e8:	6800      	ldr	r0, [r0, #0]
 80055ea:	f001 fa58 	bl	8006a9e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055ee:	1d3b      	adds	r3, r7, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	1d3b      	adds	r3, r7, #4
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	4413      	add	r3, r2
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	463b      	mov	r3, r7
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	00da      	lsls	r2, r3, #3
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	4413      	add	r3, r2
 8005612:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005616:	f107 0310 	add.w	r3, r7, #16
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005620:	b29a      	uxth	r2, r3
 8005622:	f107 0310 	add.w	r3, r7, #16
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	f000 bcec 	b.w	8006006 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800562e:	463b      	mov	r3, r7
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	78db      	ldrb	r3, [r3, #3]
 8005634:	2b02      	cmp	r3, #2
 8005636:	f040 8356 	bne.w	8005ce6 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800563a:	463b      	mov	r3, r7
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6a1a      	ldr	r2, [r3, #32]
 8005640:	463b      	mov	r3, r7
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	429a      	cmp	r2, r3
 8005648:	f240 82fa 	bls.w	8005c40 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800564c:	1d3b      	adds	r3, r7, #4
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	463b      	mov	r3, r7
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005666:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800566a:	1d3b      	adds	r3, r7, #4
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	463b      	mov	r3, r7
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	441a      	add	r2, r3
 8005678:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800567c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005684:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568c:	b29b      	uxth	r3, r3
 800568e:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8005690:	463b      	mov	r3, r7
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800569a:	463b      	mov	r3, r7
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6a1a      	ldr	r2, [r3, #32]
 80056a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056a4:	1ad2      	subs	r2, r2, r3
 80056a6:	463b      	mov	r3, r7
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056ac:	1d3b      	adds	r3, r7, #4
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	463b      	mov	r3, r7
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 815e 	beq.w	8005984 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056c8:	1d3b      	adds	r3, r7, #4
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	637b      	str	r3, [r7, #52]	; 0x34
 80056ce:	463b      	mov	r3, r7
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	785b      	ldrb	r3, [r3, #1]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d164      	bne.n	80057a2 <USB_EPStartXfer+0x218>
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056de:	1d3b      	adds	r3, r7, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	4413      	add	r3, r2
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f0:	463b      	mov	r3, r7
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	00da      	lsls	r2, r3, #3
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	4413      	add	r3, r2
 80056fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005700:	62bb      	str	r3, [r7, #40]	; 0x28
 8005702:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005706:	2b00      	cmp	r3, #0
 8005708:	d112      	bne.n	8005730 <USB_EPStartXfer+0x1a6>
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005714:	b29a      	uxth	r2, r3
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005728:	b29a      	uxth	r2, r3
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	e054      	b.n	80057da <USB_EPStartXfer+0x250>
 8005730:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005734:	2b3e      	cmp	r3, #62	; 0x3e
 8005736:	d817      	bhi.n	8005768 <USB_EPStartXfer+0x1de>
 8005738:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800573c:	085b      	lsrs	r3, r3, #1
 800573e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005742:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d004      	beq.n	8005758 <USB_EPStartXfer+0x1ce>
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005752:	3301      	adds	r3, #1
 8005754:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800575c:	b29b      	uxth	r3, r3
 800575e:	029b      	lsls	r3, r3, #10
 8005760:	b29a      	uxth	r2, r3
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	801a      	strh	r2, [r3, #0]
 8005766:	e038      	b.n	80057da <USB_EPStartXfer+0x250>
 8005768:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005772:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	2b00      	cmp	r3, #0
 800577c:	d104      	bne.n	8005788 <USB_EPStartXfer+0x1fe>
 800577e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005782:	3b01      	subs	r3, #1
 8005784:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800578c:	b29b      	uxth	r3, r3
 800578e:	029b      	lsls	r3, r3, #10
 8005790:	b29b      	uxth	r3, r3
 8005792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800579a:	b29a      	uxth	r2, r3
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	801a      	strh	r2, [r3, #0]
 80057a0:	e01b      	b.n	80057da <USB_EPStartXfer+0x250>
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	785b      	ldrb	r3, [r3, #1]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d116      	bne.n	80057da <USB_EPStartXfer+0x250>
 80057ac:	1d3b      	adds	r3, r7, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ba:	4413      	add	r3, r2
 80057bc:	637b      	str	r3, [r7, #52]	; 0x34
 80057be:	463b      	mov	r3, r7
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	00da      	lsls	r2, r3, #3
 80057c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c8:	4413      	add	r3, r2
 80057ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057ce:	633b      	str	r3, [r7, #48]	; 0x30
 80057d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057da:	463b      	mov	r3, r7
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	895b      	ldrh	r3, [r3, #10]
 80057e0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057e4:	463b      	mov	r3, r7
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6959      	ldr	r1, [r3, #20]
 80057ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80057f4:	1d38      	adds	r0, r7, #4
 80057f6:	6800      	ldr	r0, [r0, #0]
 80057f8:	f001 f951 	bl	8006a9e <USB_WritePMA>
            ep->xfer_buff += len;
 80057fc:	463b      	mov	r3, r7
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005806:	441a      	add	r2, r3
 8005808:	463b      	mov	r3, r7
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800580e:	463b      	mov	r3, r7
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6a1a      	ldr	r2, [r3, #32]
 8005814:	463b      	mov	r3, r7
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	429a      	cmp	r2, r3
 800581c:	d90e      	bls.n	800583c <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800581e:	463b      	mov	r3, r7
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005828:	463b      	mov	r3, r7
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6a1a      	ldr	r2, [r3, #32]
 800582e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005832:	1ad2      	subs	r2, r2, r3
 8005834:	463b      	mov	r3, r7
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	621a      	str	r2, [r3, #32]
 800583a:	e008      	b.n	800584e <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800583c:	463b      	mov	r3, r7
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005846:	463b      	mov	r3, r7
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2200      	movs	r2, #0
 800584c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800584e:	463b      	mov	r3, r7
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d164      	bne.n	8005922 <USB_EPStartXfer+0x398>
 8005858:	1d3b      	adds	r3, r7, #4
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	1d3b      	adds	r3, r7, #4
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005866:	b29b      	uxth	r3, r3
 8005868:	461a      	mov	r2, r3
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	4413      	add	r3, r2
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	463b      	mov	r3, r7
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	00da      	lsls	r2, r3, #3
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	4413      	add	r3, r2
 800587c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005886:	2b00      	cmp	r3, #0
 8005888:	d112      	bne.n	80058b0 <USB_EPStartXfer+0x326>
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005894:	b29a      	uxth	r2, r3
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	801a      	strh	r2, [r3, #0]
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	801a      	strh	r2, [r3, #0]
 80058ae:	e057      	b.n	8005960 <USB_EPStartXfer+0x3d6>
 80058b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058b4:	2b3e      	cmp	r3, #62	; 0x3e
 80058b6:	d817      	bhi.n	80058e8 <USB_EPStartXfer+0x35e>
 80058b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058bc:	085b      	lsrs	r3, r3, #1
 80058be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <USB_EPStartXfer+0x34e>
 80058ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058d2:	3301      	adds	r3, #1
 80058d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058dc:	b29b      	uxth	r3, r3
 80058de:	029b      	lsls	r3, r3, #10
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	e03b      	b.n	8005960 <USB_EPStartXfer+0x3d6>
 80058e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058f6:	f003 031f 	and.w	r3, r3, #31
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <USB_EPStartXfer+0x37e>
 80058fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005902:	3b01      	subs	r3, #1
 8005904:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005908:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800590c:	b29b      	uxth	r3, r3
 800590e:	029b      	lsls	r3, r3, #10
 8005910:	b29b      	uxth	r3, r3
 8005912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591a:	b29a      	uxth	r2, r3
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	801a      	strh	r2, [r3, #0]
 8005920:	e01e      	b.n	8005960 <USB_EPStartXfer+0x3d6>
 8005922:	463b      	mov	r3, r7
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d119      	bne.n	8005960 <USB_EPStartXfer+0x3d6>
 800592c:	1d3b      	adds	r3, r7, #4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
 8005932:	1d3b      	adds	r3, r7, #4
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800593a:	b29b      	uxth	r3, r3
 800593c:	461a      	mov	r2, r3
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	4413      	add	r3, r2
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
 8005944:	463b      	mov	r3, r7
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	00da      	lsls	r2, r3, #3
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	4413      	add	r3, r2
 8005950:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005954:	623b      	str	r3, [r7, #32]
 8005956:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800595a:	b29a      	uxth	r2, r3
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005960:	463b      	mov	r3, r7
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	891b      	ldrh	r3, [r3, #8]
 8005966:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800596a:	463b      	mov	r3, r7
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6959      	ldr	r1, [r3, #20]
 8005970:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005974:	b29b      	uxth	r3, r3
 8005976:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800597a:	1d38      	adds	r0, r7, #4
 800597c:	6800      	ldr	r0, [r0, #0]
 800597e:	f001 f88e 	bl	8006a9e <USB_WritePMA>
 8005982:	e340      	b.n	8006006 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005984:	463b      	mov	r3, r7
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	785b      	ldrb	r3, [r3, #1]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d164      	bne.n	8005a58 <USB_EPStartXfer+0x4ce>
 800598e:	1d3b      	adds	r3, r7, #4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005994:	1d3b      	adds	r3, r7, #4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800599c:	b29b      	uxth	r3, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a2:	4413      	add	r3, r2
 80059a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a6:	463b      	mov	r3, r7
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	00da      	lsls	r2, r3, #3
 80059ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b0:	4413      	add	r3, r2
 80059b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d112      	bne.n	80059e6 <USB_EPStartXfer+0x45c>
 80059c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059de:	b29a      	uxth	r2, r3
 80059e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e2:	801a      	strh	r2, [r3, #0]
 80059e4:	e057      	b.n	8005a96 <USB_EPStartXfer+0x50c>
 80059e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059ea:	2b3e      	cmp	r3, #62	; 0x3e
 80059ec:	d817      	bhi.n	8005a1e <USB_EPStartXfer+0x494>
 80059ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059f2:	085b      	lsrs	r3, r3, #1
 80059f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d004      	beq.n	8005a0e <USB_EPStartXfer+0x484>
 8005a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a08:	3301      	adds	r3, #1
 8005a0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	029b      	lsls	r3, r3, #10
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	e03b      	b.n	8005a96 <USB_EPStartXfer+0x50c>
 8005a1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d104      	bne.n	8005a3e <USB_EPStartXfer+0x4b4>
 8005a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	029b      	lsls	r3, r3, #10
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a54:	801a      	strh	r2, [r3, #0]
 8005a56:	e01e      	b.n	8005a96 <USB_EPStartXfer+0x50c>
 8005a58:	463b      	mov	r3, r7
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	785b      	ldrb	r3, [r3, #1]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d119      	bne.n	8005a96 <USB_EPStartXfer+0x50c>
 8005a62:	1d3b      	adds	r3, r7, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	657b      	str	r3, [r7, #84]	; 0x54
 8005a68:	1d3b      	adds	r3, r7, #4
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a76:	4413      	add	r3, r2
 8005a78:	657b      	str	r3, [r7, #84]	; 0x54
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	00da      	lsls	r2, r3, #3
 8005a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a84:	4413      	add	r3, r2
 8005a86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8005a8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a96:	463b      	mov	r3, r7
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	891b      	ldrh	r3, [r3, #8]
 8005a9c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6959      	ldr	r1, [r3, #20]
 8005aa6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005ab0:	1d38      	adds	r0, r7, #4
 8005ab2:	6800      	ldr	r0, [r0, #0]
 8005ab4:	f000 fff3 	bl	8006a9e <USB_WritePMA>
            ep->xfer_buff += len;
 8005ab8:	463b      	mov	r3, r7
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695a      	ldr	r2, [r3, #20]
 8005abe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ac2:	441a      	add	r2, r3
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005aca:	463b      	mov	r3, r7
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6a1a      	ldr	r2, [r3, #32]
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d90e      	bls.n	8005af8 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005ada:	463b      	mov	r3, r7
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005ae4:	463b      	mov	r3, r7
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6a1a      	ldr	r2, [r3, #32]
 8005aea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aee:	1ad2      	subs	r2, r2, r3
 8005af0:	463b      	mov	r3, r7
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	621a      	str	r2, [r3, #32]
 8005af6:	e008      	b.n	8005b0a <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005af8:	463b      	mov	r3, r7
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005b02:	463b      	mov	r3, r7
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2200      	movs	r2, #0
 8005b08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b0a:	1d3b      	adds	r3, r7, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b10:	463b      	mov	r3, r7
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	785b      	ldrb	r3, [r3, #1]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d164      	bne.n	8005be4 <USB_EPStartXfer+0x65a>
 8005b1a:	1d3b      	adds	r3, r7, #4
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b20:	1d3b      	adds	r3, r7, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2e:	4413      	add	r3, r2
 8005b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b32:	463b      	mov	r3, r7
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	00da      	lsls	r2, r3, #3
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d112      	bne.n	8005b72 <USB_EPStartXfer+0x5e8>
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	801a      	strh	r2, [r3, #0]
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	e054      	b.n	8005c1c <USB_EPStartXfer+0x692>
 8005b72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b76:	2b3e      	cmp	r3, #62	; 0x3e
 8005b78:	d817      	bhi.n	8005baa <USB_EPStartXfer+0x620>
 8005b7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <USB_EPStartXfer+0x610>
 8005b90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b94:	3301      	adds	r3, #1
 8005b96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	029b      	lsls	r3, r3, #10
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	e038      	b.n	8005c1c <USB_EPStartXfer+0x692>
 8005baa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <USB_EPStartXfer+0x640>
 8005bc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	e01b      	b.n	8005c1c <USB_EPStartXfer+0x692>
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d116      	bne.n	8005c1c <USB_EPStartXfer+0x692>
 8005bee:	1d3b      	adds	r3, r7, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bfc:	4413      	add	r3, r2
 8005bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8005c00:	463b      	mov	r3, r7
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	00da      	lsls	r2, r3, #3
 8005c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c10:	643b      	str	r3, [r7, #64]	; 0x40
 8005c12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	895b      	ldrh	r3, [r3, #10]
 8005c22:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6959      	ldr	r1, [r3, #20]
 8005c2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005c36:	1d38      	adds	r0, r7, #4
 8005c38:	6800      	ldr	r0, [r0, #0]
 8005c3a:	f000 ff30 	bl	8006a9e <USB_WritePMA>
 8005c3e:	e1e2      	b.n	8006006 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005c40:	463b      	mov	r3, r7
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005c4a:	1d3b      	adds	r3, r7, #4
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	463b      	mov	r3, r7
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c64:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005c68:	1d3b      	adds	r3, r7, #4
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	441a      	add	r2, r3
 8005c76:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c8e:	1d3b      	adds	r3, r7, #4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	663b      	str	r3, [r7, #96]	; 0x60
 8005c94:	1d3b      	adds	r3, r7, #4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ca2:	4413      	add	r3, r2
 8005ca4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca6:	463b      	mov	r3, r7
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	00da      	lsls	r2, r3, #3
 8005cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	891b      	ldrh	r3, [r3, #8]
 8005cc8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ccc:	463b      	mov	r3, r7
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6959      	ldr	r1, [r3, #20]
 8005cd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005cdc:	1d38      	adds	r0, r7, #4
 8005cde:	6800      	ldr	r0, [r0, #0]
 8005ce0:	f000 fedd 	bl	8006a9e <USB_WritePMA>
 8005ce4:	e18f      	b.n	8006006 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ce6:	1d3b      	adds	r3, r7, #4
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	463b      	mov	r3, r7
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 808f 	beq.w	8005e20 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d02:	1d3b      	adds	r3, r7, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d08:	463b      	mov	r3, r7
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d164      	bne.n	8005ddc <USB_EPStartXfer+0x852>
 8005d12:	1d3b      	adds	r3, r7, #4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	673b      	str	r3, [r7, #112]	; 0x70
 8005d18:	1d3b      	adds	r3, r7, #4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d26:	4413      	add	r3, r2
 8005d28:	673b      	str	r3, [r7, #112]	; 0x70
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	00da      	lsls	r2, r3, #3
 8005d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d34:	4413      	add	r3, r2
 8005d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d112      	bne.n	8005d6a <USB_EPStartXfer+0x7e0>
 8005d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	e054      	b.n	8005e14 <USB_EPStartXfer+0x88a>
 8005d6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d70:	d817      	bhi.n	8005da2 <USB_EPStartXfer+0x818>
 8005d72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d76:	085b      	lsrs	r3, r3, #1
 8005d78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <USB_EPStartXfer+0x808>
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	029b      	lsls	r3, r3, #10
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	e038      	b.n	8005e14 <USB_EPStartXfer+0x88a>
 8005da2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005db0:	f003 031f 	and.w	r3, r3, #31
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d104      	bne.n	8005dc2 <USB_EPStartXfer+0x838>
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	029b      	lsls	r3, r3, #10
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e01b      	b.n	8005e14 <USB_EPStartXfer+0x88a>
 8005ddc:	463b      	mov	r3, r7
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d116      	bne.n	8005e14 <USB_EPStartXfer+0x88a>
 8005de6:	1d3b      	adds	r3, r7, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005df4:	4413      	add	r3, r2
 8005df6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005df8:	463b      	mov	r3, r7
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	00da      	lsls	r2, r3, #3
 8005e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e02:	4413      	add	r3, r2
 8005e04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e08:	677b      	str	r3, [r7, #116]	; 0x74
 8005e0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e14:	463b      	mov	r3, r7
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	895b      	ldrh	r3, [r3, #10]
 8005e1a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005e1e:	e097      	b.n	8005f50 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e20:	463b      	mov	r3, r7
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d168      	bne.n	8005efc <USB_EPStartXfer+0x972>
 8005e2a:	1d3b      	adds	r3, r7, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e32:	1d3b      	adds	r3, r7, #4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e42:	4413      	add	r3, r2
 8005e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	00da      	lsls	r2, r3, #3
 8005e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d112      	bne.n	8005e8a <USB_EPStartXfer+0x900>
 8005e64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e86:	801a      	strh	r2, [r3, #0]
 8005e88:	e05d      	b.n	8005f46 <USB_EPStartXfer+0x9bc>
 8005e8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005e90:	d817      	bhi.n	8005ec2 <USB_EPStartXfer+0x938>
 8005e92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <USB_EPStartXfer+0x928>
 8005ea8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005eac:	3301      	adds	r3, #1
 8005eae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005eb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ebe:	801a      	strh	r2, [r3, #0]
 8005ec0:	e041      	b.n	8005f46 <USB_EPStartXfer+0x9bc>
 8005ec2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ecc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d104      	bne.n	8005ee2 <USB_EPStartXfer+0x958>
 8005ed8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005edc:	3b01      	subs	r3, #1
 8005ede:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ee2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	029b      	lsls	r3, r3, #10
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	e024      	b.n	8005f46 <USB_EPStartXfer+0x9bc>
 8005efc:	463b      	mov	r3, r7
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	785b      	ldrb	r3, [r3, #1]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d11f      	bne.n	8005f46 <USB_EPStartXfer+0x9bc>
 8005f06:	1d3b      	adds	r3, r7, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f0e:	1d3b      	adds	r3, r7, #4
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f1e:	4413      	add	r3, r2
 8005f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f24:	463b      	mov	r3, r7
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	00da      	lsls	r2, r3, #3
 8005f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f30:	4413      	add	r3, r2
 8005f32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f46:	463b      	mov	r3, r7
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	891b      	ldrh	r3, [r3, #8]
 8005f4c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f50:	463b      	mov	r3, r7
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6959      	ldr	r1, [r3, #20]
 8005f56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005f60:	1d38      	adds	r0, r7, #4
 8005f62:	6800      	ldr	r0, [r0, #0]
 8005f64:	f000 fd9b 	bl	8006a9e <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005f68:	463b      	mov	r3, r7
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d122      	bne.n	8005fb8 <USB_EPStartXfer+0xa2e>
 8005f72:	1d3b      	adds	r3, r7, #4
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	463b      	mov	r3, r7
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005f90:	1d3b      	adds	r3, r7, #4
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	463b      	mov	r3, r7
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	441a      	add	r2, r3
 8005f9e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	8013      	strh	r3, [r2, #0]
 8005fb6:	e026      	b.n	8006006 <USB_EPStartXfer+0xa7c>
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d121      	bne.n	8006006 <USB_EPStartXfer+0xa7c>
 8005fc2:	1d3b      	adds	r3, r7, #4
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fdc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005fe0:	1d3b      	adds	r3, r7, #4
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	441a      	add	r2, r3
 8005fee:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006002:	b29b      	uxth	r3, r3
 8006004:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006006:	1d3b      	adds	r3, r7, #4
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	463b      	mov	r3, r7
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f107 020e 	add.w	r2, r7, #14
 800601c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006024:	8013      	strh	r3, [r2, #0]
 8006026:	f107 030e 	add.w	r3, r7, #14
 800602a:	f107 020e 	add.w	r2, r7, #14
 800602e:	8812      	ldrh	r2, [r2, #0]
 8006030:	f082 0210 	eor.w	r2, r2, #16
 8006034:	801a      	strh	r2, [r3, #0]
 8006036:	f107 030e 	add.w	r3, r7, #14
 800603a:	f107 020e 	add.w	r2, r7, #14
 800603e:	8812      	ldrh	r2, [r2, #0]
 8006040:	f082 0220 	eor.w	r2, r2, #32
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	1d3b      	adds	r3, r7, #4
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	463b      	mov	r3, r7
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	441a      	add	r2, r3
 8006054:	f107 030e 	add.w	r3, r7, #14
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]
 800606e:	e3b5      	b.n	80067dc <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006070:	463b      	mov	r3, r7
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	7b1b      	ldrb	r3, [r3, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f040 8090 	bne.w	800619c <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800607c:	463b      	mov	r3, r7
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	463b      	mov	r3, r7
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	429a      	cmp	r2, r3
 800608a:	d90e      	bls.n	80060aa <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006096:	463b      	mov	r3, r7
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	699a      	ldr	r2, [r3, #24]
 800609c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060a0:	1ad2      	subs	r2, r2, r3
 80060a2:	463b      	mov	r3, r7
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	619a      	str	r2, [r3, #24]
 80060a8:	e008      	b.n	80060bc <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 80060aa:	463b      	mov	r3, r7
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 80060b4:	463b      	mov	r3, r7
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2200      	movs	r2, #0
 80060ba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80060bc:	1d3b      	adds	r3, r7, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060c4:	1d3b      	adds	r3, r7, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060d4:	4413      	add	r3, r2
 80060d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060da:	463b      	mov	r3, r7
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	00da      	lsls	r2, r3, #3
 80060e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060e6:	4413      	add	r3, r2
 80060e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d116      	bne.n	8006126 <USB_EPStartXfer+0xb9c>
 80060f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006104:	b29a      	uxth	r2, r3
 8006106:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611c:	b29a      	uxth	r2, r3
 800611e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	e32c      	b.n	8006780 <USB_EPStartXfer+0x11f6>
 8006126:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800612a:	2b3e      	cmp	r3, #62	; 0x3e
 800612c:	d818      	bhi.n	8006160 <USB_EPStartXfer+0xbd6>
 800612e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006138:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d004      	beq.n	800614e <USB_EPStartXfer+0xbc4>
 8006144:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006148:	3301      	adds	r3, #1
 800614a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800614e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006152:	b29b      	uxth	r3, r3
 8006154:	029b      	lsls	r3, r3, #10
 8006156:	b29a      	uxth	r2, r3
 8006158:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	e30f      	b.n	8006780 <USB_EPStartXfer+0x11f6>
 8006160:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800616a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	2b00      	cmp	r3, #0
 8006174:	d104      	bne.n	8006180 <USB_EPStartXfer+0xbf6>
 8006176:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800617a:	3b01      	subs	r3, #1
 800617c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006180:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006184:	b29b      	uxth	r3, r3
 8006186:	029b      	lsls	r3, r3, #10
 8006188:	b29b      	uxth	r3, r3
 800618a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006192:	b29a      	uxth	r2, r3
 8006194:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006198:	801a      	strh	r2, [r3, #0]
 800619a:	e2f1      	b.n	8006780 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800619c:	463b      	mov	r3, r7
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	78db      	ldrb	r3, [r3, #3]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	f040 818f 	bne.w	80064c6 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061a8:	463b      	mov	r3, r7
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	785b      	ldrb	r3, [r3, #1]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d175      	bne.n	800629e <USB_EPStartXfer+0xd14>
 80061b2:	1d3b      	adds	r3, r7, #4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ba:	1d3b      	adds	r3, r7, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061ca:	4413      	add	r3, r2
 80061cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061d0:	463b      	mov	r3, r7
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	00da      	lsls	r2, r3, #3
 80061d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061dc:	4413      	add	r3, r2
 80061de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061e6:	463b      	mov	r3, r7
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d116      	bne.n	800621e <USB_EPStartXfer+0xc94>
 80061f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006202:	801a      	strh	r2, [r3, #0]
 8006204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006214:	b29a      	uxth	r2, r3
 8006216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	e065      	b.n	80062ea <USB_EPStartXfer+0xd60>
 800621e:	463b      	mov	r3, r7
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	2b3e      	cmp	r3, #62	; 0x3e
 8006226:	d81a      	bhi.n	800625e <USB_EPStartXfer+0xcd4>
 8006228:	463b      	mov	r3, r7
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006234:	463b      	mov	r3, r7
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <USB_EPStartXfer+0xcc2>
 8006242:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006246:	3301      	adds	r3, #1
 8006248:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800624c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006250:	b29b      	uxth	r3, r3
 8006252:	029b      	lsls	r3, r3, #10
 8006254:	b29a      	uxth	r2, r3
 8006256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	e045      	b.n	80062ea <USB_EPStartXfer+0xd60>
 800625e:	463b      	mov	r3, r7
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800626a:	463b      	mov	r3, r7
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	2b00      	cmp	r3, #0
 8006276:	d104      	bne.n	8006282 <USB_EPStartXfer+0xcf8>
 8006278:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800627c:	3b01      	subs	r3, #1
 800627e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006282:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006286:	b29b      	uxth	r3, r3
 8006288:	029b      	lsls	r3, r3, #10
 800628a:	b29b      	uxth	r3, r3
 800628c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006294:	b29a      	uxth	r2, r3
 8006296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	e025      	b.n	80062ea <USB_EPStartXfer+0xd60>
 800629e:	463b      	mov	r3, r7
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d120      	bne.n	80062ea <USB_EPStartXfer+0xd60>
 80062a8:	1d3b      	adds	r3, r7, #4
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062b0:	1d3b      	adds	r3, r7, #4
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062c0:	4413      	add	r3, r2
 80062c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062c6:	463b      	mov	r3, r7
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	00da      	lsls	r2, r3, #3
 80062ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062d2:	4413      	add	r3, r2
 80062d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062dc:	463b      	mov	r3, r7
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	1d3b      	adds	r3, r7, #4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062f2:	463b      	mov	r3, r7
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	785b      	ldrb	r3, [r3, #1]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d175      	bne.n	80063e8 <USB_EPStartXfer+0xe5e>
 80062fc:	1d3b      	adds	r3, r7, #4
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006304:	1d3b      	adds	r3, r7, #4
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800630c:	b29b      	uxth	r3, r3
 800630e:	461a      	mov	r2, r3
 8006310:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006314:	4413      	add	r3, r2
 8006316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800631a:	463b      	mov	r3, r7
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	00da      	lsls	r2, r3, #3
 8006322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006326:	4413      	add	r3, r2
 8006328:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800632c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006330:	463b      	mov	r3, r7
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d116      	bne.n	8006368 <USB_EPStartXfer+0xdde>
 800633a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006346:	b29a      	uxth	r2, r3
 8006348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800634c:	801a      	strh	r2, [r3, #0]
 800634e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	b29b      	uxth	r3, r3
 8006356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800635a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800635e:	b29a      	uxth	r2, r3
 8006360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	e061      	b.n	800642c <USB_EPStartXfer+0xea2>
 8006368:	463b      	mov	r3, r7
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b3e      	cmp	r3, #62	; 0x3e
 8006370:	d81a      	bhi.n	80063a8 <USB_EPStartXfer+0xe1e>
 8006372:	463b      	mov	r3, r7
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	085b      	lsrs	r3, r3, #1
 800637a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800637e:	463b      	mov	r3, r7
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <USB_EPStartXfer+0xe0c>
 800638c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006390:	3301      	adds	r3, #1
 8006392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639a:	b29b      	uxth	r3, r3
 800639c:	029b      	lsls	r3, r3, #10
 800639e:	b29a      	uxth	r2, r3
 80063a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063a4:	801a      	strh	r2, [r3, #0]
 80063a6:	e041      	b.n	800642c <USB_EPStartXfer+0xea2>
 80063a8:	463b      	mov	r3, r7
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063b4:	463b      	mov	r3, r7
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d104      	bne.n	80063cc <USB_EPStartXfer+0xe42>
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c6:	3b01      	subs	r3, #1
 80063c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	029b      	lsls	r3, r3, #10
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063de:	b29a      	uxth	r2, r3
 80063e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063e4:	801a      	strh	r2, [r3, #0]
 80063e6:	e021      	b.n	800642c <USB_EPStartXfer+0xea2>
 80063e8:	463b      	mov	r3, r7
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d11c      	bne.n	800642c <USB_EPStartXfer+0xea2>
 80063f2:	1d3b      	adds	r3, r7, #4
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006402:	4413      	add	r3, r2
 8006404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006408:	463b      	mov	r3, r7
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	00da      	lsls	r2, r3, #3
 8006410:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006414:	4413      	add	r3, r2
 8006416:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800641a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800641e:	463b      	mov	r3, r7
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	b29a      	uxth	r2, r3
 8006426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800642a:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800642c:	463b      	mov	r3, r7
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 81a4 	beq.w	8006780 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006438:	1d3b      	adds	r3, r7, #4
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	463b      	mov	r3, r7
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800644c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <USB_EPStartXfer+0xeda>
 8006458:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10d      	bne.n	8006480 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006464:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 8187 	bne.w	8006780 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006472:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	f040 8180 	bne.w	8006780 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006480:	1d3b      	adds	r3, r7, #4
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	463b      	mov	r3, r7
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800649e:	1d3b      	adds	r3, r7, #4
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	463b      	mov	r3, r7
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	441a      	add	r2, r3
 80064ac:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80064b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	8013      	strh	r3, [r2, #0]
 80064c4:	e15c      	b.n	8006780 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064c6:	463b      	mov	r3, r7
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	78db      	ldrb	r3, [r3, #3]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	f040 8155 	bne.w	800677c <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80064d2:	463b      	mov	r3, r7
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699a      	ldr	r2, [r3, #24]
 80064d8:	463b      	mov	r3, r7
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d90e      	bls.n	8006500 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80064e2:	463b      	mov	r3, r7
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80064ec:	463b      	mov	r3, r7
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064f6:	1ad2      	subs	r2, r2, r3
 80064f8:	463b      	mov	r3, r7
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	619a      	str	r2, [r3, #24]
 80064fe:	e008      	b.n	8006512 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8006500:	463b      	mov	r3, r7
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800650a:	463b      	mov	r3, r7
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006512:	463b      	mov	r3, r7
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d16f      	bne.n	80065fc <USB_EPStartXfer+0x1072>
 800651c:	1d3b      	adds	r3, r7, #4
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006524:	1d3b      	adds	r3, r7, #4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652c:	b29b      	uxth	r3, r3
 800652e:	461a      	mov	r2, r3
 8006530:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006534:	4413      	add	r3, r2
 8006536:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800653a:	463b      	mov	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	00da      	lsls	r2, r3, #3
 8006542:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006546:	4413      	add	r3, r2
 8006548:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800654c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006550:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006554:	2b00      	cmp	r3, #0
 8006556:	d116      	bne.n	8006586 <USB_EPStartXfer+0xffc>
 8006558:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006564:	b29a      	uxth	r2, r3
 8006566:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657c:	b29a      	uxth	r2, r3
 800657e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	e05f      	b.n	8006646 <USB_EPStartXfer+0x10bc>
 8006586:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800658a:	2b3e      	cmp	r3, #62	; 0x3e
 800658c:	d818      	bhi.n	80065c0 <USB_EPStartXfer+0x1036>
 800658e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006592:	085b      	lsrs	r3, r3, #1
 8006594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006598:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d004      	beq.n	80065ae <USB_EPStartXfer+0x1024>
 80065a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a8:	3301      	adds	r3, #1
 80065aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	029b      	lsls	r3, r3, #10
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	e042      	b.n	8006646 <USB_EPStartXfer+0x10bc>
 80065c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ce:	f003 031f 	and.w	r3, r3, #31
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <USB_EPStartXfer+0x1056>
 80065d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065da:	3b01      	subs	r3, #1
 80065dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	029b      	lsls	r3, r3, #10
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065f8:	801a      	strh	r2, [r3, #0]
 80065fa:	e024      	b.n	8006646 <USB_EPStartXfer+0x10bc>
 80065fc:	463b      	mov	r3, r7
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d11f      	bne.n	8006646 <USB_EPStartXfer+0x10bc>
 8006606:	1d3b      	adds	r3, r7, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800660e:	1d3b      	adds	r3, r7, #4
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006616:	b29b      	uxth	r3, r3
 8006618:	461a      	mov	r2, r3
 800661a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800661e:	4413      	add	r3, r2
 8006620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006624:	463b      	mov	r3, r7
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	00da      	lsls	r2, r3, #3
 800662c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006630:	4413      	add	r3, r2
 8006632:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006636:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800663a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800663e:	b29a      	uxth	r2, r3
 8006640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006644:	801a      	strh	r2, [r3, #0]
 8006646:	1d3b      	adds	r3, r7, #4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800664e:	463b      	mov	r3, r7
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d16f      	bne.n	8006738 <USB_EPStartXfer+0x11ae>
 8006658:	1d3b      	adds	r3, r7, #4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006660:	1d3b      	adds	r3, r7, #4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006668:	b29b      	uxth	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006670:	4413      	add	r3, r2
 8006672:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006676:	463b      	mov	r3, r7
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	00da      	lsls	r2, r3, #3
 800667e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006682:	4413      	add	r3, r2
 8006684:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800668c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006690:	2b00      	cmp	r3, #0
 8006692:	d116      	bne.n	80066c2 <USB_EPStartXfer+0x1138>
 8006694:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	b29b      	uxth	r3, r3
 800669c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066a6:	801a      	strh	r2, [r3, #0]
 80066a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	e05e      	b.n	8006780 <USB_EPStartXfer+0x11f6>
 80066c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066c6:	2b3e      	cmp	r3, #62	; 0x3e
 80066c8:	d818      	bhi.n	80066fc <USB_EPStartXfer+0x1172>
 80066ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d004      	beq.n	80066ea <USB_EPStartXfer+0x1160>
 80066e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e4:	3301      	adds	r3, #1
 80066e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	029b      	lsls	r3, r3, #10
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066f8:	801a      	strh	r2, [r3, #0]
 80066fa:	e041      	b.n	8006780 <USB_EPStartXfer+0x11f6>
 80066fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006706:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800670a:	f003 031f 	and.w	r3, r3, #31
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <USB_EPStartXfer+0x1192>
 8006712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006716:	3b01      	subs	r3, #1
 8006718:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800671c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006720:	b29b      	uxth	r3, r3
 8006722:	029b      	lsls	r3, r3, #10
 8006724:	b29b      	uxth	r3, r3
 8006726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800672a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672e:	b29a      	uxth	r2, r3
 8006730:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	e023      	b.n	8006780 <USB_EPStartXfer+0x11f6>
 8006738:	463b      	mov	r3, r7
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d11e      	bne.n	8006780 <USB_EPStartXfer+0x11f6>
 8006742:	1d3b      	adds	r3, r7, #4
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800674a:	b29b      	uxth	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006752:	4413      	add	r3, r2
 8006754:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006758:	463b      	mov	r3, r7
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	00da      	lsls	r2, r3, #3
 8006760:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006764:	4413      	add	r3, r2
 8006766:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800676a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800676e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006772:	b29a      	uxth	r2, r3
 8006774:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	e001      	b.n	8006780 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e02e      	b.n	80067de <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006780:	1d3b      	adds	r3, r7, #4
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	463b      	mov	r3, r7
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800679e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067b6:	1d3b      	adds	r3, r7, #4
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	463b      	mov	r3, r7
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d8:	b29b      	uxth	r3, r3
 80067da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d020      	beq.n	800683c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	b29b      	uxth	r3, r3
 8006808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006810:	81bb      	strh	r3, [r7, #12]
 8006812:	89bb      	ldrh	r3, [r7, #12]
 8006814:	f083 0310 	eor.w	r3, r3, #16
 8006818:	81bb      	strh	r3, [r7, #12]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	441a      	add	r2, r3
 8006824:	89bb      	ldrh	r3, [r7, #12]
 8006826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006836:	b29b      	uxth	r3, r3
 8006838:	8013      	strh	r3, [r2, #0]
 800683a:	e01f      	b.n	800687c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800684e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006852:	81fb      	strh	r3, [r7, #14]
 8006854:	89fb      	ldrh	r3, [r7, #14]
 8006856:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800685a:	81fb      	strh	r3, [r7, #14]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	441a      	add	r2, r3
 8006866:	89fb      	ldrh	r3, [r7, #14]
 8006868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800686c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006878:	b29b      	uxth	r3, r3
 800687a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800688a:	b480      	push	{r7}
 800688c:	b087      	sub	sp, #28
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	7b1b      	ldrb	r3, [r3, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f040 809d 	bne.w	80069d8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d04c      	beq.n	8006940 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	823b      	strh	r3, [r7, #16]
 80068b4:	8a3b      	ldrh	r3, [r7, #16]
 80068b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d01b      	beq.n	80068f6 <USB_EPClearStall+0x6c>
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d4:	81fb      	strh	r3, [r7, #14]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	441a      	add	r2, r3
 80068e0:	89fb      	ldrh	r3, [r7, #14]
 80068e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	78db      	ldrb	r3, [r3, #3]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d06c      	beq.n	80069d8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006914:	81bb      	strh	r3, [r7, #12]
 8006916:	89bb      	ldrh	r3, [r7, #12]
 8006918:	f083 0320 	eor.w	r3, r3, #32
 800691c:	81bb      	strh	r3, [r7, #12]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	441a      	add	r2, r3
 8006928:	89bb      	ldrh	r3, [r7, #12]
 800692a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693a:	b29b      	uxth	r3, r3
 800693c:	8013      	strh	r3, [r2, #0]
 800693e:	e04b      	b.n	80069d8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	82fb      	strh	r3, [r7, #22]
 800694e:	8afb      	ldrh	r3, [r7, #22]
 8006950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01b      	beq.n	8006990 <USB_EPClearStall+0x106>
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	82bb      	strh	r3, [r7, #20]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	441a      	add	r2, r3
 800697a:	8abb      	ldrh	r3, [r7, #20]
 800697c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698c:	b29b      	uxth	r3, r3
 800698e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	827b      	strh	r3, [r7, #18]
 80069a8:	8a7b      	ldrh	r3, [r7, #18]
 80069aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069ae:	827b      	strh	r3, [r7, #18]
 80069b0:	8a7b      	ldrh	r3, [r7, #18]
 80069b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069b6:	827b      	strh	r3, [r7, #18]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	441a      	add	r2, r3
 80069c2:	8a7b      	ldrh	r3, [r7, #18]
 80069c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2280      	movs	r2, #128	; 0x80
 80069fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b085      	sub	sp, #20
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a78:	68fb      	ldr	r3, [r7, #12]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b08d      	sub	sp, #52	; 0x34
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	461a      	mov	r2, r3
 8006aac:	460b      	mov	r3, r1
 8006aae:	80fb      	strh	r3, [r7, #6]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ab4:	88bb      	ldrh	r3, [r7, #4]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	085b      	lsrs	r3, r3, #1
 8006aba:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ac4:	88fa      	ldrh	r2, [r7, #6]
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad4:	e01b      	b.n	8006b0e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	3301      	adds	r3, #1
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	461a      	mov	r2, r3
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afe:	3302      	adds	r3, #2
 8006b00:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	3301      	adds	r3, #1
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e0      	bne.n	8006ad6 <USB_WritePMA+0x38>
  }
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop
 8006b18:	3734      	adds	r7, #52	; 0x34
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b08b      	sub	sp, #44	; 0x2c
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	461a      	mov	r2, r3
 8006b30:	460b      	mov	r3, r1
 8006b32:	80fb      	strh	r3, [r7, #6]
 8006b34:	4613      	mov	r3, r2
 8006b36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b38:	88bb      	ldrh	r3, [r7, #4]
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b48:	88fa      	ldrh	r2, [r7, #6]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b52:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
 8006b58:	e018      	b.n	8006b8c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	3302      	adds	r3, #2
 8006b66:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	3301      	adds	r3, #1
 8006b74:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	0a1b      	lsrs	r3, r3, #8
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	3301      	adds	r3, #1
 8006b84:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e3      	bne.n	8006b5a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006b92:	88bb      	ldrh	r3, [r7, #4]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d007      	beq.n	8006bae <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	701a      	strb	r2, [r3, #0]
  }
}
 8006bae:	bf00      	nop
 8006bb0:	372c      	adds	r7, #44	; 0x2c
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bc6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bca:	f002 f969 	bl	8008ea0 <malloc>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d105      	bne.n	8006be4 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006be0:	2302      	movs	r3, #2
 8006be2:	e066      	b.n	8006cb2 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	7c1b      	ldrb	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d119      	bne.n	8006c28 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	2181      	movs	r1, #129	; 0x81
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 ff21 	bl	8008a44 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	2101      	movs	r1, #1
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 ff17 	bl	8008a44 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2210      	movs	r2, #16
 8006c22:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c26:	e016      	b.n	8006c56 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c28:	2340      	movs	r3, #64	; 0x40
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	2181      	movs	r1, #129	; 0x81
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 ff08 	bl	8008a44 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c3a:	2340      	movs	r3, #64	; 0x40
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	2101      	movs	r1, #1
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 feff 	bl	8008a44 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2210      	movs	r2, #16
 8006c52:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c56:	2308      	movs	r3, #8
 8006c58:	2203      	movs	r2, #3
 8006c5a:	2182      	movs	r1, #130	; 0x82
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 fef1 	bl	8008a44 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	7c1b      	ldrb	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c96:	2101      	movs	r1, #1
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f002 f84f 	bl	8008d3c <USBD_LL_PrepareReceive>
 8006c9e:	e007      	b.n	8006cb0 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ca6:	2340      	movs	r3, #64	; 0x40
 8006ca8:	2101      	movs	r1, #1
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f002 f846 	bl	8008d3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b082      	sub	sp, #8
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cc6:	2181      	movs	r1, #129	; 0x81
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 fef9 	bl	8008ac0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 fef2 	bl	8008ac0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006ce4:	2182      	movs	r1, #130	; 0x82
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 feea 	bl	8008ac0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00e      	beq.n	8006d24 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d16:	4618      	mov	r0, r3
 8006d18:	f002 f8ca 	bl	8008eb0 <free>
    pdev->pClassData = NULL;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d40:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d03a      	beq.n	8006dd0 <USBD_CDC_Setup+0xa0>
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	f040 8097 	bne.w	8006e8e <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	88db      	ldrh	r3, [r3, #6]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d029      	beq.n	8006dbc <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b25b      	sxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	da11      	bge.n	8006d96 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006d7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	88d2      	ldrh	r2, [r2, #6]
 8006d84:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006d86:	6939      	ldr	r1, [r7, #16]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	88db      	ldrh	r3, [r3, #6]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f001 fa6c 	bl	800826c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006d94:	e082      	b.n	8006e9c <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	785a      	ldrb	r2, [r3, #1]
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	88db      	ldrh	r3, [r3, #6]
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006dac:	6939      	ldr	r1, [r7, #16]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	88db      	ldrh	r3, [r3, #6]
 8006db2:	461a      	mov	r2, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 fa85 	bl	80082c4 <USBD_CtlPrepareRx>
      break;
 8006dba:	e06f      	b.n	8006e9c <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	7850      	ldrb	r0, [r2, #1]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	4798      	blx	r3
      break;
 8006dce:	e065      	b.n	8006e9c <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b0b      	cmp	r3, #11
 8006dd6:	d84f      	bhi.n	8006e78 <USBD_CDC_Setup+0x148>
 8006dd8:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <USBD_CDC_Setup+0xb0>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006e11 	.word	0x08006e11
 8006de4:	08006e87 	.word	0x08006e87
 8006de8:	08006e79 	.word	0x08006e79
 8006dec:	08006e79 	.word	0x08006e79
 8006df0:	08006e79 	.word	0x08006e79
 8006df4:	08006e79 	.word	0x08006e79
 8006df8:	08006e79 	.word	0x08006e79
 8006dfc:	08006e79 	.word	0x08006e79
 8006e00:	08006e79 	.word	0x08006e79
 8006e04:	08006e79 	.word	0x08006e79
 8006e08:	08006e39 	.word	0x08006e39
 8006e0c:	08006e61 	.word	0x08006e61
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d107      	bne.n	8006e2a <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e1a:	f107 030c 	add.w	r3, r7, #12
 8006e1e:	2202      	movs	r2, #2
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 fa22 	bl	800826c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e28:	e030      	b.n	8006e8c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 f9ac 	bl	800818a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e32:	2303      	movs	r3, #3
 8006e34:	75fb      	strb	r3, [r7, #23]
          break;
 8006e36:	e029      	b.n	8006e8c <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d107      	bne.n	8006e52 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e42:	f107 030f 	add.w	r3, r7, #15
 8006e46:	2201      	movs	r2, #1
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 fa0e 	bl	800826c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e50:	e01c      	b.n	8006e8c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 f998 	bl	800818a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e5e:	e015      	b.n	8006e8c <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d00f      	beq.n	8006e8a <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 f98c 	bl	800818a <USBD_CtlError>
            ret = USBD_FAIL;
 8006e72:	2303      	movs	r3, #3
 8006e74:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e76:	e008      	b.n	8006e8a <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 f985 	bl	800818a <USBD_CtlError>
          ret = USBD_FAIL;
 8006e80:	2303      	movs	r3, #3
 8006e82:	75fb      	strb	r3, [r7, #23]
          break;
 8006e84:	e002      	b.n	8006e8c <USBD_CDC_Setup+0x15c>
          break;
 8006e86:	bf00      	nop
 8006e88:	e008      	b.n	8006e9c <USBD_CDC_Setup+0x16c>
          break;
 8006e8a:	bf00      	nop
      }
      break;
 8006e8c:	e006      	b.n	8006e9c <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 f97a 	bl	800818a <USBD_CtlError>
      ret = USBD_FAIL;
 8006e96:	2303      	movs	r3, #3
 8006e98:	75fb      	strb	r3, [r7, #23]
      break;
 8006e9a:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop

08006ea8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006eba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e04f      	b.n	8006f6a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ed0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ed2:	78fa      	ldrb	r2, [r7, #3]
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	3318      	adds	r3, #24
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d029      	beq.n	8006f3c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ee8:	78fa      	ldrb	r2, [r7, #3]
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	3318      	adds	r3, #24
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	78f9      	ldrb	r1, [r7, #3]
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	460b      	mov	r3, r1
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	4403      	add	r3, r0
 8006f08:	3338      	adds	r3, #56	; 0x38
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f10:	fb03 f301 	mul.w	r3, r3, r1
 8006f14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d110      	bne.n	8006f3c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f1a:	78fa      	ldrb	r2, [r7, #3]
 8006f1c:	6879      	ldr	r1, [r7, #4]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	440b      	add	r3, r1
 8006f28:	3318      	adds	r3, #24
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f2e:	78f9      	ldrb	r1, [r7, #3]
 8006f30:	2300      	movs	r3, #0
 8006f32:	2200      	movs	r2, #0
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 fec9 	bl	8008ccc <USBD_LL_Transmit>
 8006f3a:	e015      	b.n	8006f68 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f64:	78fa      	ldrb	r2, [r7, #3]
 8006f66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e015      	b.n	8006fc0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f001 ff07 	bl	8008dac <USBD_LL_GetRxDataSize>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fd6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d015      	beq.n	800700e <USBD_CDC_EP0_RxReady+0x46>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fe8:	2bff      	cmp	r3, #255	; 0xff
 8006fea:	d010      	beq.n	800700e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006ffa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007002:	b292      	uxth	r2, r2
 8007004:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	22ff      	movs	r2, #255	; 0xff
 800700a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2243      	movs	r2, #67	; 0x43
 8007024:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007026:	4b03      	ldr	r3, [pc, #12]	; (8007034 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	200000bc 	.word	0x200000bc

08007038 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2243      	movs	r2, #67	; 0x43
 8007044:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007046:	4b03      	ldr	r3, [pc, #12]	; (8007054 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	20000078 	.word	0x20000078

08007058 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2243      	movs	r2, #67	; 0x43
 8007064:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007066:	4b03      	ldr	r3, [pc, #12]	; (8007074 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	20000100 	.word	0x20000100

08007078 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	220a      	movs	r2, #10
 8007084:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007086:	4b03      	ldr	r3, [pc, #12]	; (8007094 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	20000034 	.word	0x20000034

08007098 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e004      	b.n	80070b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b087      	sub	sp, #28
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070d4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007104:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800712a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007136:	2303      	movs	r3, #3
 8007138:	e016      	b.n	8007168 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	7c1b      	ldrb	r3, [r3, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800714c:	2101      	movs	r1, #1
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 fdf4 	bl	8008d3c <USBD_LL_PrepareReceive>
 8007154:	e007      	b.n	8007166 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800715c:	2340      	movs	r3, #64	; 0x40
 800715e:	2101      	movs	r1, #1
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 fdeb 	bl	8008d3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	4613      	mov	r3, r2
 800717c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007184:	2303      	movs	r3, #3
 8007186:	e01f      	b.n	80071c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	79fa      	ldrb	r2, [r7, #7]
 80071ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f001 fbad 	bl	800891c <USBD_LL_Init>
 80071c2:	4603      	mov	r3, r0
 80071c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e016      	b.n	8007216 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	f107 020e 	add.w	r2, r7, #14
 8007208:	4610      	mov	r0, r2
 800720a:	4798      	blx	r3
 800720c:	4602      	mov	r2, r0
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 fbda 	bl	80089e0 <USBD_LL_Start>
 800722c:	4603      	mov	r3, r0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007258:	2303      	movs	r3, #3
 800725a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007262:	2b00      	cmp	r3, #0
 8007264:	d009      	beq.n	800727a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	78fa      	ldrb	r2, [r7, #3]
 8007270:	4611      	mov	r1, r2
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	4798      	blx	r3
 8007276:	4603      	mov	r3, r0
 8007278:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d007      	beq.n	80072aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	78fa      	ldrb	r2, [r7, #3]
 80072a4:	4611      	mov	r1, r2
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
  }

  return USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 ff25 	bl	8008116 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072e8:	f003 031f 	and.w	r3, r3, #31
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d01a      	beq.n	8007326 <USBD_LL_SetupStage+0x72>
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d822      	bhi.n	800733a <USBD_LL_SetupStage+0x86>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <USBD_LL_SetupStage+0x4a>
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d00a      	beq.n	8007312 <USBD_LL_SetupStage+0x5e>
 80072fc:	e01d      	b.n	800733a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f9d6 	bl	80076b8 <USBD_StdDevReq>
 800730c:	4603      	mov	r3, r0
 800730e:	73fb      	strb	r3, [r7, #15]
      break;
 8007310:	e020      	b.n	8007354 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa3a 	bl	8007794 <USBD_StdItfReq>
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]
      break;
 8007324:	e016      	b.n	8007354 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fa78 	bl	8007824 <USBD_StdEPReq>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]
      break;
 8007338:	e00c      	b.n	8007354 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007340:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007344:	b2db      	uxtb	r3, r3
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 fbef 	bl	8008b2c <USBD_LL_StallEP>
 800734e:	4603      	mov	r3, r0
 8007350:	73fb      	strb	r3, [r7, #15]
      break;
 8007352:	bf00      	nop
  }

  return ret;
 8007354:	7bfb      	ldrb	r3, [r7, #15]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b086      	sub	sp, #24
 8007362:	af00      	add	r7, sp, #0
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	460b      	mov	r3, r1
 8007368:	607a      	str	r2, [r7, #4]
 800736a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800736c:	7afb      	ldrb	r3, [r7, #11]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d137      	bne.n	80073e2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007378:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007380:	2b03      	cmp	r3, #3
 8007382:	d14a      	bne.n	800741a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	429a      	cmp	r2, r3
 800738e:	d913      	bls.n	80073b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	1ad2      	subs	r2, r2, r3
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	4293      	cmp	r3, r2
 80073a8:	bf28      	it	cs
 80073aa:	4613      	movcs	r3, r2
 80073ac:	461a      	mov	r2, r3
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 ffa4 	bl	80082fe <USBD_CtlContinueRx>
 80073b6:	e030      	b.n	800741a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00a      	beq.n	80073da <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d105      	bne.n	80073da <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 ffa0 	bl	8008320 <USBD_CtlSendStatus>
 80073e0:	e01b      	b.n	800741a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d013      	beq.n	8007416 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d10e      	bne.n	8007416 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	7afa      	ldrb	r2, [r7, #11]
 8007402:	4611      	mov	r1, r2
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	4798      	blx	r3
 8007408:	4603      	mov	r3, r0
 800740a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007412:	7dfb      	ldrb	r3, [r7, #23]
 8007414:	e002      	b.n	800741c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007416:	2303      	movs	r3, #3
 8007418:	e000      	b.n	800741c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	460b      	mov	r3, r1
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d16a      	bne.n	800750e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3314      	adds	r3, #20
 800743c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007444:	2b02      	cmp	r3, #2
 8007446:	d155      	bne.n	80074f4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	429a      	cmp	r2, r3
 8007452:	d914      	bls.n	800747e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	1ad2      	subs	r2, r2, r3
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	461a      	mov	r2, r3
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 ff19 	bl	80082a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007470:	2300      	movs	r3, #0
 8007472:	2200      	movs	r2, #0
 8007474:	2100      	movs	r1, #0
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f001 fc60 	bl	8008d3c <USBD_LL_PrepareReceive>
 800747c:	e03a      	b.n	80074f4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	429a      	cmp	r2, r3
 8007488:	d11c      	bne.n	80074c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007492:	429a      	cmp	r2, r3
 8007494:	d316      	bcc.n	80074c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d20f      	bcs.n	80074c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074a4:	2200      	movs	r2, #0
 80074a6:	2100      	movs	r1, #0
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 fefa 	bl	80082a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074b6:	2300      	movs	r3, #0
 80074b8:	2200      	movs	r2, #0
 80074ba:	2100      	movs	r1, #0
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f001 fc3d 	bl	8008d3c <USBD_LL_PrepareReceive>
 80074c2:	e017      	b.n	80074f4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d105      	bne.n	80074e6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074e6:	2180      	movs	r1, #128	; 0x80
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f001 fb1f 	bl	8008b2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 ff29 	bl	8008346 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d123      	bne.n	8007546 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f7ff fe99 	bl	8007236 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800750c:	e01b      	b.n	8007546 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d013      	beq.n	8007542 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007520:	2b03      	cmp	r3, #3
 8007522:	d10e      	bne.n	8007542 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	7afa      	ldrb	r2, [r7, #11]
 800752e:	4611      	mov	r1, r2
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	4798      	blx	r3
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	e002      	b.n	8007548 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007542:	2303      	movs	r3, #3
 8007544:	e000      	b.n	8007548 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800757c:	2b00      	cmp	r3, #0
 800757e:	d009      	beq.n	8007594 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6852      	ldr	r2, [r2, #4]
 800758c:	b2d2      	uxtb	r2, r2
 800758e:	4611      	mov	r1, r2
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007594:	2340      	movs	r3, #64	; 0x40
 8007596:	2200      	movs	r2, #0
 8007598:	2100      	movs	r1, #0
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f001 fa52 	bl	8008a44 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2240      	movs	r2, #64	; 0x40
 80075ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075b0:	2340      	movs	r3, #64	; 0x40
 80075b2:	2200      	movs	r2, #0
 80075b4:	2180      	movs	r1, #128	; 0x80
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 fa44 	bl	8008a44 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2240      	movs	r2, #64	; 0x40
 80075c6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	460b      	mov	r3, r1
 80075dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	78fa      	ldrb	r2, [r7, #3]
 80075e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2204      	movs	r2, #4
 800760a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800762a:	2b04      	cmp	r3, #4
 800762c:	d105      	bne.n	800763a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007656:	2b03      	cmp	r3, #3
 8007658:	d10b      	bne.n	8007672 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d005      	beq.n	8007672 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	3301      	adds	r3, #1
 8007692:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800769a:	8a3b      	ldrh	r3, [r7, #16]
 800769c:	021b      	lsls	r3, r3, #8
 800769e:	b21a      	sxth	r2, r3
 80076a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	b21b      	sxth	r3, r3
 80076a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076aa:	89fb      	ldrh	r3, [r7, #14]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	371c      	adds	r7, #28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ce:	2b40      	cmp	r3, #64	; 0x40
 80076d0:	d005      	beq.n	80076de <USBD_StdDevReq+0x26>
 80076d2:	2b40      	cmp	r3, #64	; 0x40
 80076d4:	d853      	bhi.n	800777e <USBD_StdDevReq+0xc6>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <USBD_StdDevReq+0x3a>
 80076da:	2b20      	cmp	r3, #32
 80076dc:	d14f      	bne.n	800777e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	4798      	blx	r3
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]
    break;
 80076f0:	e04a      	b.n	8007788 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	785b      	ldrb	r3, [r3, #1]
 80076f6:	2b09      	cmp	r3, #9
 80076f8:	d83b      	bhi.n	8007772 <USBD_StdDevReq+0xba>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <USBD_StdDevReq+0x48>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007755 	.word	0x08007755
 8007704:	08007769 	.word	0x08007769
 8007708:	08007773 	.word	0x08007773
 800770c:	0800775f 	.word	0x0800775f
 8007710:	08007773 	.word	0x08007773
 8007714:	08007733 	.word	0x08007733
 8007718:	08007729 	.word	0x08007729
 800771c:	08007773 	.word	0x08007773
 8007720:	0800774b 	.word	0x0800774b
 8007724:	0800773d 	.word	0x0800773d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f9da 	bl	8007ae4 <USBD_GetDescriptor>
      break;
 8007730:	e024      	b.n	800777c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fb69 	bl	8007e0c <USBD_SetAddress>
      break;
 800773a:	e01f      	b.n	800777c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fba8 	bl	8007e94 <USBD_SetConfig>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
      break;
 8007748:	e018      	b.n	800777c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fc45 	bl	8007fdc <USBD_GetConfig>
      break;
 8007752:	e013      	b.n	800777c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fc75 	bl	8008046 <USBD_GetStatus>
      break;
 800775c:	e00e      	b.n	800777c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fca3 	bl	80080ac <USBD_SetFeature>
      break;
 8007766:	e009      	b.n	800777c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fcb2 	bl	80080d4 <USBD_ClrFeature>
      break;
 8007770:	e004      	b.n	800777c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fd08 	bl	800818a <USBD_CtlError>
      break;
 800777a:	bf00      	nop
    }
    break;
 800777c:	e004      	b.n	8007788 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fd02 	bl	800818a <USBD_CtlError>
    break;
 8007786:	bf00      	nop
  }

  return ret;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop

08007794 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d005      	beq.n	80077ba <USBD_StdItfReq+0x26>
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d82e      	bhi.n	8007810 <USBD_StdItfReq+0x7c>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <USBD_StdItfReq+0x26>
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d12a      	bne.n	8007810 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c0:	3b01      	subs	r3, #1
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d81d      	bhi.n	8007802 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	889b      	ldrh	r3, [r3, #4]
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d813      	bhi.n	80077f8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	4798      	blx	r3
 80077de:	4603      	mov	r3, r0
 80077e0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	88db      	ldrh	r3, [r3, #6]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d110      	bne.n	800780c <USBD_StdItfReq+0x78>
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10d      	bne.n	800780c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fd95 	bl	8008320 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80077f6:	e009      	b.n	800780c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fcc5 	bl	800818a <USBD_CtlError>
      break;
 8007800:	e004      	b.n	800780c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fcc0 	bl	800818a <USBD_CtlError>
      break;
 800780a:	e000      	b.n	800780e <USBD_StdItfReq+0x7a>
      break;
 800780c:	bf00      	nop
    }
    break;
 800780e:	e004      	b.n	800781a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fcb9 	bl	800818a <USBD_CtlError>
    break;
 8007818:	bf00      	nop
  }

  return ret;
 800781a:	7bfb      	ldrb	r3, [r7, #15]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	889b      	ldrh	r3, [r3, #4]
 8007836:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d007      	beq.n	8007854 <USBD_StdEPReq+0x30>
 8007844:	2b40      	cmp	r3, #64	; 0x40
 8007846:	f200 8142 	bhi.w	8007ace <USBD_StdEPReq+0x2aa>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00c      	beq.n	8007868 <USBD_StdEPReq+0x44>
 800784e:	2b20      	cmp	r3, #32
 8007850:	f040 813d 	bne.w	8007ace <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	4798      	blx	r3
 8007862:	4603      	mov	r3, r0
 8007864:	73fb      	strb	r3, [r7, #15]
    break;
 8007866:	e137      	b.n	8007ad8 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	2b03      	cmp	r3, #3
 800786e:	d007      	beq.n	8007880 <USBD_StdEPReq+0x5c>
 8007870:	2b03      	cmp	r3, #3
 8007872:	f300 8126 	bgt.w	8007ac2 <USBD_StdEPReq+0x29e>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d07d      	beq.n	8007976 <USBD_StdEPReq+0x152>
 800787a:	2b01      	cmp	r3, #1
 800787c:	d03b      	beq.n	80078f6 <USBD_StdEPReq+0xd2>
 800787e:	e120      	b.n	8007ac2 <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007886:	2b02      	cmp	r3, #2
 8007888:	d002      	beq.n	8007890 <USBD_StdEPReq+0x6c>
 800788a:	2b03      	cmp	r3, #3
 800788c:	d016      	beq.n	80078bc <USBD_StdEPReq+0x98>
 800788e:	e02c      	b.n	80078ea <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00d      	beq.n	80078b2 <USBD_StdEPReq+0x8e>
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b80      	cmp	r3, #128	; 0x80
 800789a:	d00a      	beq.n	80078b2 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 f943 	bl	8008b2c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078a6:	2180      	movs	r1, #128	; 0x80
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 f93f 	bl	8008b2c <USBD_LL_StallEP>
 80078ae:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078b0:	e020      	b.n	80078f4 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fc68 	bl	800818a <USBD_CtlError>
        break;
 80078ba:	e01b      	b.n	80078f4 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	885b      	ldrh	r3, [r3, #2]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10e      	bne.n	80078e2 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00b      	beq.n	80078e2 <USBD_StdEPReq+0xbe>
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b80      	cmp	r3, #128	; 0x80
 80078ce:	d008      	beq.n	80078e2 <USBD_StdEPReq+0xbe>
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	88db      	ldrh	r3, [r3, #6]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d104      	bne.n	80078e2 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 f925 	bl	8008b2c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fd1c 	bl	8008320 <USBD_CtlSendStatus>

        break;
 80078e8:	e004      	b.n	80078f4 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fc4c 	bl	800818a <USBD_CtlError>
        break;
 80078f2:	bf00      	nop
      }
      break;
 80078f4:	e0ea      	b.n	8007acc <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d002      	beq.n	8007906 <USBD_StdEPReq+0xe2>
 8007900:	2b03      	cmp	r3, #3
 8007902:	d016      	beq.n	8007932 <USBD_StdEPReq+0x10e>
 8007904:	e030      	b.n	8007968 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00d      	beq.n	8007928 <USBD_StdEPReq+0x104>
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	2b80      	cmp	r3, #128	; 0x80
 8007910:	d00a      	beq.n	8007928 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 f908 	bl	8008b2c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800791c:	2180      	movs	r1, #128	; 0x80
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 f904 	bl	8008b2c <USBD_LL_StallEP>
 8007924:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007926:	e025      	b.n	8007974 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fc2d 	bl	800818a <USBD_CtlError>
        break;
 8007930:	e020      	b.n	8007974 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	885b      	ldrh	r3, [r3, #2]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d11b      	bne.n	8007972 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007940:	2b00      	cmp	r3, #0
 8007942:	d004      	beq.n	800794e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f925 	bl	8008b98 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fce6 	bl	8008320 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
 8007962:	4603      	mov	r3, r0
 8007964:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007966:	e004      	b.n	8007972 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fc0d 	bl	800818a <USBD_CtlError>
        break;
 8007970:	e000      	b.n	8007974 <USBD_StdEPReq+0x150>
        break;
 8007972:	bf00      	nop
      }
      break;
 8007974:	e0aa      	b.n	8007acc <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800797c:	2b02      	cmp	r3, #2
 800797e:	d002      	beq.n	8007986 <USBD_StdEPReq+0x162>
 8007980:	2b03      	cmp	r3, #3
 8007982:	d032      	beq.n	80079ea <USBD_StdEPReq+0x1c6>
 8007984:	e097      	b.n	8007ab6 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d007      	beq.n	800799c <USBD_StdEPReq+0x178>
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	2b80      	cmp	r3, #128	; 0x80
 8007990:	d004      	beq.n	800799c <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fbf8 	bl	800818a <USBD_CtlError>
          break;
 800799a:	e091      	b.n	8007ac0 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800799c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	da0b      	bge.n	80079bc <USBD_StdEPReq+0x198>
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	3310      	adds	r3, #16
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	4413      	add	r3, r2
 80079b8:	3304      	adds	r3, #4
 80079ba:	e00b      	b.n	80079d4 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079c2:	4613      	mov	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	3304      	adds	r3, #4
 80079d4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2202      	movs	r2, #2
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fc42 	bl	800826c <USBD_CtlSendData>
        break;
 80079e8:	e06a      	b.n	8007ac0 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80079ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	da11      	bge.n	8007a16 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	f003 020f 	and.w	r2, r3, #15
 80079f8:	6879      	ldr	r1, [r7, #4]
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	440b      	add	r3, r1
 8007a04:	3324      	adds	r3, #36	; 0x24
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d117      	bne.n	8007a3c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fbbb 	bl	800818a <USBD_CtlError>
            break;
 8007a14:	e054      	b.n	8007ac0 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	f003 020f 	and.w	r2, r3, #15
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	440b      	add	r3, r1
 8007a28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d104      	bne.n	8007a3c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fba8 	bl	800818a <USBD_CtlError>
            break;
 8007a3a:	e041      	b.n	8007ac0 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	da0b      	bge.n	8007a5c <USBD_StdEPReq+0x238>
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	3310      	adds	r3, #16
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	4413      	add	r3, r2
 8007a58:	3304      	adds	r3, #4
 8007a5a:	e00b      	b.n	8007a74 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	4413      	add	r3, r2
 8007a72:	3304      	adds	r3, #4
 8007a74:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <USBD_StdEPReq+0x25e>
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b80      	cmp	r3, #128	; 0x80
 8007a80:	d103      	bne.n	8007a8a <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	e00e      	b.n	8007aa8 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 f8b8 	bl	8008c04 <USBD_LL_IsStallEP>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	e002      	b.n	8007aa8 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fbdc 	bl	800826c <USBD_CtlSendData>
          break;
 8007ab4:	e004      	b.n	8007ac0 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fb66 	bl	800818a <USBD_CtlError>
        break;
 8007abe:	bf00      	nop
      }
      break;
 8007ac0:	e004      	b.n	8007acc <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fb60 	bl	800818a <USBD_CtlError>
      break;
 8007aca:	bf00      	nop
    }
    break;
 8007acc:	e004      	b.n	8007ad8 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fb5a 	bl	800818a <USBD_CtlError>
    break;
 8007ad6:	bf00      	nop
  }

  return ret;
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	885b      	ldrh	r3, [r3, #2]
 8007afe:	0a1b      	lsrs	r3, r3, #8
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	3b01      	subs	r3, #1
 8007b04:	2b0e      	cmp	r3, #14
 8007b06:	f200 8152 	bhi.w	8007dae <USBD_GetDescriptor+0x2ca>
 8007b0a:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <USBD_GetDescriptor+0x2c>)
 8007b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b10:	08007b81 	.word	0x08007b81
 8007b14:	08007b99 	.word	0x08007b99
 8007b18:	08007bd9 	.word	0x08007bd9
 8007b1c:	08007daf 	.word	0x08007daf
 8007b20:	08007daf 	.word	0x08007daf
 8007b24:	08007d4f 	.word	0x08007d4f
 8007b28:	08007d7b 	.word	0x08007d7b
 8007b2c:	08007daf 	.word	0x08007daf
 8007b30:	08007daf 	.word	0x08007daf
 8007b34:	08007daf 	.word	0x08007daf
 8007b38:	08007daf 	.word	0x08007daf
 8007b3c:	08007daf 	.word	0x08007daf
 8007b40:	08007daf 	.word	0x08007daf
 8007b44:	08007daf 	.word	0x08007daf
 8007b48:	08007b4d 	.word	0x08007b4d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	7c12      	ldrb	r2, [r2, #16]
 8007b64:	f107 0108 	add.w	r1, r7, #8
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
 8007b6c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007b6e:	e126      	b.n	8007dbe <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fb09 	bl	800818a <USBD_CtlError>
      err++;
 8007b78:	7afb      	ldrb	r3, [r7, #11]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	72fb      	strb	r3, [r7, #11]
    break;
 8007b7e:	e11e      	b.n	8007dbe <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	7c12      	ldrb	r2, [r2, #16]
 8007b8c:	f107 0108 	add.w	r1, r7, #8
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
 8007b94:	60f8      	str	r0, [r7, #12]
    break;
 8007b96:	e112      	b.n	8007dbe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	7c1b      	ldrb	r3, [r3, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10d      	bne.n	8007bbc <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba8:	f107 0208 	add.w	r2, r7, #8
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007bba:	e100      	b.n	8007dbe <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	f107 0208 	add.w	r2, r7, #8
 8007bc8:	4610      	mov	r0, r2
 8007bca:	4798      	blx	r3
 8007bcc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	701a      	strb	r2, [r3, #0]
    break;
 8007bd6:	e0f2      	b.n	8007dbe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	885b      	ldrh	r3, [r3, #2]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b05      	cmp	r3, #5
 8007be0:	f200 80ac 	bhi.w	8007d3c <USBD_GetDescriptor+0x258>
 8007be4:	a201      	add	r2, pc, #4	; (adr r2, 8007bec <USBD_GetDescriptor+0x108>)
 8007be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bea:	bf00      	nop
 8007bec:	08007c05 	.word	0x08007c05
 8007bf0:	08007c39 	.word	0x08007c39
 8007bf4:	08007c6d 	.word	0x08007c6d
 8007bf8:	08007ca1 	.word	0x08007ca1
 8007bfc:	08007cd5 	.word	0x08007cd5
 8007c00:	08007d09 	.word	0x08007d09
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00b      	beq.n	8007c28 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	7c12      	ldrb	r2, [r2, #16]
 8007c1c:	f107 0108 	add.w	r1, r7, #8
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
 8007c24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c26:	e091      	b.n	8007d4c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 faad 	bl	800818a <USBD_CtlError>
        err++;
 8007c30:	7afb      	ldrb	r3, [r7, #11]
 8007c32:	3301      	adds	r3, #1
 8007c34:	72fb      	strb	r3, [r7, #11]
      break;
 8007c36:	e089      	b.n	8007d4c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	7c12      	ldrb	r2, [r2, #16]
 8007c50:	f107 0108 	add.w	r1, r7, #8
 8007c54:	4610      	mov	r0, r2
 8007c56:	4798      	blx	r3
 8007c58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c5a:	e077      	b.n	8007d4c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fa93 	bl	800818a <USBD_CtlError>
        err++;
 8007c64:	7afb      	ldrb	r3, [r7, #11]
 8007c66:	3301      	adds	r3, #1
 8007c68:	72fb      	strb	r3, [r7, #11]
      break;
 8007c6a:	e06f      	b.n	8007d4c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	7c12      	ldrb	r2, [r2, #16]
 8007c84:	f107 0108 	add.w	r1, r7, #8
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4798      	blx	r3
 8007c8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c8e:	e05d      	b.n	8007d4c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa79 	bl	800818a <USBD_CtlError>
        err++;
 8007c98:	7afb      	ldrb	r3, [r7, #11]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c9e:	e055      	b.n	8007d4c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00b      	beq.n	8007cc4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	7c12      	ldrb	r2, [r2, #16]
 8007cb8:	f107 0108 	add.w	r1, r7, #8
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
 8007cc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cc2:	e043      	b.n	8007d4c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fa5f 	bl	800818a <USBD_CtlError>
        err++;
 8007ccc:	7afb      	ldrb	r3, [r7, #11]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	72fb      	strb	r3, [r7, #11]
      break;
 8007cd2:	e03b      	b.n	8007d4c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	7c12      	ldrb	r2, [r2, #16]
 8007cec:	f107 0108 	add.w	r1, r7, #8
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
 8007cf4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cf6:	e029      	b.n	8007d4c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fa45 	bl	800818a <USBD_CtlError>
        err++;
 8007d00:	7afb      	ldrb	r3, [r7, #11]
 8007d02:	3301      	adds	r3, #1
 8007d04:	72fb      	strb	r3, [r7, #11]
      break;
 8007d06:	e021      	b.n	8007d4c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	7c12      	ldrb	r2, [r2, #16]
 8007d20:	f107 0108 	add.w	r1, r7, #8
 8007d24:	4610      	mov	r0, r2
 8007d26:	4798      	blx	r3
 8007d28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d2a:	e00f      	b.n	8007d4c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa2b 	bl	800818a <USBD_CtlError>
        err++;
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	3301      	adds	r3, #1
 8007d38:	72fb      	strb	r3, [r7, #11]
      break;
 8007d3a:	e007      	b.n	8007d4c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fa23 	bl	800818a <USBD_CtlError>
      err++;
 8007d44:	7afb      	ldrb	r3, [r7, #11]
 8007d46:	3301      	adds	r3, #1
 8007d48:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007d4a:	bf00      	nop
    }
    break;
 8007d4c:	e037      	b.n	8007dbe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	7c1b      	ldrb	r3, [r3, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d109      	bne.n	8007d6a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5e:	f107 0208 	add.w	r2, r7, #8
 8007d62:	4610      	mov	r0, r2
 8007d64:	4798      	blx	r3
 8007d66:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d68:	e029      	b.n	8007dbe <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fa0c 	bl	800818a <USBD_CtlError>
      err++;
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	3301      	adds	r3, #1
 8007d76:	72fb      	strb	r3, [r7, #11]
    break;
 8007d78:	e021      	b.n	8007dbe <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	7c1b      	ldrb	r3, [r3, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10d      	bne.n	8007d9e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8a:	f107 0208 	add.w	r2, r7, #8
 8007d8e:	4610      	mov	r0, r2
 8007d90:	4798      	blx	r3
 8007d92:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3301      	adds	r3, #1
 8007d98:	2207      	movs	r2, #7
 8007d9a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d9c:	e00f      	b.n	8007dbe <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f9f2 	bl	800818a <USBD_CtlError>
      err++;
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	3301      	adds	r3, #1
 8007daa:	72fb      	strb	r3, [r7, #11]
    break;
 8007dac:	e007      	b.n	8007dbe <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f9ea 	bl	800818a <USBD_CtlError>
    err++;
 8007db6:	7afb      	ldrb	r3, [r7, #11]
 8007db8:	3301      	adds	r3, #1
 8007dba:	72fb      	strb	r3, [r7, #11]
    break;
 8007dbc:	bf00      	nop
  }

  if (err != 0U)
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d11e      	bne.n	8007e02 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	88db      	ldrh	r3, [r3, #6]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d016      	beq.n	8007dfa <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007dcc:	893b      	ldrh	r3, [r7, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00e      	beq.n	8007df0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	88da      	ldrh	r2, [r3, #6]
 8007dd6:	893b      	ldrh	r3, [r7, #8]
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	bf28      	it	cs
 8007ddc:	4613      	movcs	r3, r2
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007de2:	893b      	ldrh	r3, [r7, #8]
 8007de4:	461a      	mov	r2, r3
 8007de6:	68f9      	ldr	r1, [r7, #12]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fa3f 	bl	800826c <USBD_CtlSendData>
 8007dee:	e009      	b.n	8007e04 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f9c9 	bl	800818a <USBD_CtlError>
 8007df8:	e004      	b.n	8007e04 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fa90 	bl	8008320 <USBD_CtlSendStatus>
 8007e00:	e000      	b.n	8007e04 <USBD_GetDescriptor+0x320>
    return;
 8007e02:	bf00      	nop
    }
  }
}
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop

08007e0c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	889b      	ldrh	r3, [r3, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d130      	bne.n	8007e80 <USBD_SetAddress+0x74>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	88db      	ldrh	r3, [r3, #6]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d12c      	bne.n	8007e80 <USBD_SetAddress+0x74>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	885b      	ldrh	r3, [r3, #2]
 8007e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e2c:	d828      	bhi.n	8007e80 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	885b      	ldrh	r3, [r3, #2]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d104      	bne.n	8007e4e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f99f 	bl	800818a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4c:	e01d      	b.n	8007e8a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	7bfa      	ldrb	r2, [r7, #15]
 8007e52:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 ff00 	bl	8008c60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fa5d 	bl	8008320 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d004      	beq.n	8007e76 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e74:	e009      	b.n	8007e8a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7e:	e004      	b.n	8007e8a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f981 	bl	800818a <USBD_CtlError>
  }
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	885b      	ldrh	r3, [r3, #2]
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	4b4b      	ldr	r3, [pc, #300]	; (8007fd8 <USBD_SetConfig+0x144>)
 8007eaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007eac:	4b4a      	ldr	r3, [pc, #296]	; (8007fd8 <USBD_SetConfig+0x144>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d905      	bls.n	8007ec0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f967 	bl	800818a <USBD_CtlError>
    return USBD_FAIL;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e087      	b.n	8007fd0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d002      	beq.n	8007ed0 <USBD_SetConfig+0x3c>
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d025      	beq.n	8007f1a <USBD_SetConfig+0x86>
 8007ece:	e071      	b.n	8007fb4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007ed0:	4b41      	ldr	r3, [pc, #260]	; (8007fd8 <USBD_SetConfig+0x144>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01c      	beq.n	8007f12 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007ed8:	4b3f      	ldr	r3, [pc, #252]	; (8007fd8 <USBD_SetConfig+0x144>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ee2:	4b3d      	ldr	r3, [pc, #244]	; (8007fd8 <USBD_SetConfig+0x144>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff f9af 	bl	800724c <USBD_SetClassConfig>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d004      	beq.n	8007f02 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f945 	bl	800818a <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f00:	e065      	b.n	8007fce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa0c 	bl	8008320 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2203      	movs	r2, #3
 8007f0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f10:	e05d      	b.n	8007fce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fa04 	bl	8008320 <USBD_CtlSendStatus>
    break;
 8007f18:	e059      	b.n	8007fce <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007f1a:	4b2f      	ldr	r3, [pc, #188]	; (8007fd8 <USBD_SetConfig+0x144>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d112      	bne.n	8007f48 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2202      	movs	r2, #2
 8007f26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007f2a:	4b2b      	ldr	r3, [pc, #172]	; (8007fd8 <USBD_SetConfig+0x144>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f34:	4b28      	ldr	r3, [pc, #160]	; (8007fd8 <USBD_SetConfig+0x144>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff f9a2 	bl	8007284 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f9ed 	bl	8008320 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f46:	e042      	b.n	8007fce <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007f48:	4b23      	ldr	r3, [pc, #140]	; (8007fd8 <USBD_SetConfig+0x144>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d02a      	beq.n	8007fac <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7ff f990 	bl	8007284 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007f64:	4b1c      	ldr	r3, [pc, #112]	; (8007fd8 <USBD_SetConfig+0x144>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f6e:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <USBD_SetConfig+0x144>)
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff f969 	bl	800724c <USBD_SetClassConfig>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00f      	beq.n	8007fa4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f8ff 	bl	800818a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff f975 	bl	8007284 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007fa2:	e014      	b.n	8007fce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f9bb 	bl	8008320 <USBD_CtlSendStatus>
    break;
 8007faa:	e010      	b.n	8007fce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f9b7 	bl	8008320 <USBD_CtlSendStatus>
    break;
 8007fb2:	e00c      	b.n	8007fce <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f8e7 	bl	800818a <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fbc:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <USBD_SetConfig+0x144>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7ff f95e 	bl	8007284 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	73fb      	strb	r3, [r7, #15]
    break;
 8007fcc:	bf00      	nop
  }

  return ret;
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	2000023c 	.word	0x2000023c

08007fdc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	88db      	ldrh	r3, [r3, #6]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d004      	beq.n	8007ff8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f8ca 	bl	800818a <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007ff6:	e022      	b.n	800803e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	dc02      	bgt.n	8008008 <USBD_GetConfig+0x2c>
 8008002:	2b00      	cmp	r3, #0
 8008004:	dc03      	bgt.n	800800e <USBD_GetConfig+0x32>
 8008006:	e015      	b.n	8008034 <USBD_GetConfig+0x58>
 8008008:	2b03      	cmp	r3, #3
 800800a:	d00b      	beq.n	8008024 <USBD_GetConfig+0x48>
 800800c:	e012      	b.n	8008034 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3308      	adds	r3, #8
 8008018:	2201      	movs	r2, #1
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f925 	bl	800826c <USBD_CtlSendData>
      break;
 8008022:	e00c      	b.n	800803e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3304      	adds	r3, #4
 8008028:	2201      	movs	r2, #1
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f91d 	bl	800826c <USBD_CtlSendData>
      break;
 8008032:	e004      	b.n	800803e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f8a7 	bl	800818a <USBD_CtlError>
      break;
 800803c:	bf00      	nop
}
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008056:	3b01      	subs	r3, #1
 8008058:	2b02      	cmp	r3, #2
 800805a:	d81e      	bhi.n	800809a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	88db      	ldrh	r3, [r3, #6]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d004      	beq.n	800806e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f88f 	bl	800818a <USBD_CtlError>
      break;
 800806c:	e01a      	b.n	80080a4 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f043 0202 	orr.w	r2, r3, #2
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	330c      	adds	r3, #12
 800808e:	2202      	movs	r2, #2
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f8ea 	bl	800826c <USBD_CtlSendData>
    break;
 8008098:	e004      	b.n	80080a4 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f874 	bl	800818a <USBD_CtlError>
    break;
 80080a2:	bf00      	nop
  }
}
 80080a4:	bf00      	nop
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	885b      	ldrh	r3, [r3, #2]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d106      	bne.n	80080cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f92a 	bl	8008320 <USBD_CtlSendStatus>
  }
}
 80080cc:	bf00      	nop
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e4:	3b01      	subs	r3, #1
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d80b      	bhi.n	8008102 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	885b      	ldrh	r3, [r3, #2]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d10c      	bne.n	800810c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f910 	bl	8008320 <USBD_CtlSendStatus>
      }
      break;
 8008100:	e004      	b.n	800810c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f840 	bl	800818a <USBD_CtlError>
      break;
 800810a:	e000      	b.n	800810e <USBD_ClrFeature+0x3a>
      break;
 800810c:	bf00      	nop
  }
}
 800810e:	bf00      	nop
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	781a      	ldrb	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3301      	adds	r3, #1
 8008130:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3301      	adds	r3, #1
 800813e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7ff fa9b 	bl	800767c <SWAPBYTE>
 8008146:	4603      	mov	r3, r0
 8008148:	461a      	mov	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3301      	adds	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	3301      	adds	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f7ff fa8e 	bl	800767c <SWAPBYTE>
 8008160:	4603      	mov	r3, r0
 8008162:	461a      	mov	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3301      	adds	r3, #1
 800816c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3301      	adds	r3, #1
 8008172:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f7ff fa81 	bl	800767c <SWAPBYTE>
 800817a:	4603      	mov	r3, r0
 800817c:	461a      	mov	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	80da      	strh	r2, [r3, #6]
}
 8008182:	bf00      	nop
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008194:	2180      	movs	r1, #128	; 0x80
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fcc8 	bl	8008b2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800819c:	2100      	movs	r1, #0
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fcc4 	bl	8008b2c <USBD_LL_StallEP>
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d036      	beq.n	8008230 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081c6:	6938      	ldr	r0, [r7, #16]
 80081c8:	f000 f836 	bl	8008238 <USBD_GetLen>
 80081cc:	4603      	mov	r3, r0
 80081ce:	3301      	adds	r3, #1
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	4413      	add	r3, r2
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	7812      	ldrb	r2, [r2, #0]
 80081e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	3301      	adds	r3, #1
 80081ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4413      	add	r3, r2
 80081f2:	2203      	movs	r2, #3
 80081f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	3301      	adds	r3, #1
 80081fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081fc:	e013      	b.n	8008226 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	4413      	add	r3, r2
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	7812      	ldrb	r2, [r2, #0]
 8008208:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	3301      	adds	r3, #1
 800820e:	613b      	str	r3, [r7, #16]
    idx++;
 8008210:	7dfb      	ldrb	r3, [r7, #23]
 8008212:	3301      	adds	r3, #1
 8008214:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	4413      	add	r3, r2
 800821c:	2200      	movs	r2, #0
 800821e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	3301      	adds	r3, #1
 8008224:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e7      	bne.n	80081fe <USBD_GetString+0x52>
 800822e:	e000      	b.n	8008232 <USBD_GetString+0x86>
    return;
 8008230:	bf00      	nop
  }
}
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008248:	e005      	b.n	8008256 <USBD_GetLen+0x1e>
  {
    len++;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	3301      	adds	r3, #1
 800824e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	3301      	adds	r3, #1
 8008254:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1f5      	bne.n	800824a <USBD_GetLen+0x12>
  }

  return len;
 800825e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2202      	movs	r2, #2
 800827c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	2100      	movs	r1, #0
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 fd1a 	bl	8008ccc <USBD_LL_Transmit>

  return USBD_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	2100      	movs	r1, #0
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fd09 	bl	8008ccc <USBD_LL_Transmit>

  return USBD_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2203      	movs	r2, #3
 80082d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	2100      	movs	r1, #0
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 fd24 	bl	8008d3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	60f8      	str	r0, [r7, #12]
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	2100      	movs	r1, #0
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 fd13 	bl	8008d3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2204      	movs	r2, #4
 800832c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008330:	2300      	movs	r3, #0
 8008332:	2200      	movs	r2, #0
 8008334:	2100      	movs	r1, #0
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fcc8 	bl	8008ccc <USBD_LL_Transmit>

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2205      	movs	r2, #5
 8008352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008356:	2300      	movs	r3, #0
 8008358:	2200      	movs	r2, #0
 800835a:	2100      	movs	r1, #0
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fced 	bl	8008d3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008370:	2200      	movs	r2, #0
 8008372:	4912      	ldr	r1, [pc, #72]	; (80083bc <MX_USB_DEVICE_Init+0x50>)
 8008374:	4812      	ldr	r0, [pc, #72]	; (80083c0 <MX_USB_DEVICE_Init+0x54>)
 8008376:	f7fe fefb 	bl	8007170 <USBD_Init>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008380:	f7f8 f862 	bl	8000448 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008384:	490f      	ldr	r1, [pc, #60]	; (80083c4 <MX_USB_DEVICE_Init+0x58>)
 8008386:	480e      	ldr	r0, [pc, #56]	; (80083c0 <MX_USB_DEVICE_Init+0x54>)
 8008388:	f7fe ff22 	bl	80071d0 <USBD_RegisterClass>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008392:	f7f8 f859 	bl	8000448 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008396:	490c      	ldr	r1, [pc, #48]	; (80083c8 <MX_USB_DEVICE_Init+0x5c>)
 8008398:	4809      	ldr	r0, [pc, #36]	; (80083c0 <MX_USB_DEVICE_Init+0x54>)
 800839a:	f7fe fe7d 	bl	8007098 <USBD_CDC_RegisterInterface>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083a4:	f7f8 f850 	bl	8000448 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083a8:	4805      	ldr	r0, [pc, #20]	; (80083c0 <MX_USB_DEVICE_Init+0x54>)
 80083aa:	f7fe ff38 	bl	800721e <USBD_Start>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d001      	beq.n	80083b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083b4:	f7f8 f848 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083b8:	bf00      	nop
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20000158 	.word	0x20000158
 80083c0:	200002f0 	.word	0x200002f0
 80083c4:	20000040 	.word	0x20000040
 80083c8:	20000144 	.word	0x20000144

080083cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083d0:	2200      	movs	r2, #0
 80083d2:	4905      	ldr	r1, [pc, #20]	; (80083e8 <CDC_Init_FS+0x1c>)
 80083d4:	4805      	ldr	r0, [pc, #20]	; (80083ec <CDC_Init_FS+0x20>)
 80083d6:	f7fe fe74 	bl	80070c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083da:	4905      	ldr	r1, [pc, #20]	; (80083f0 <CDC_Init_FS+0x24>)
 80083dc:	4803      	ldr	r0, [pc, #12]	; (80083ec <CDC_Init_FS+0x20>)
 80083de:	f7fe fe89 	bl	80070f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	200009a8 	.word	0x200009a8
 80083ec:	200002f0 	.word	0x200002f0
 80083f0:	200005c0 	.word	0x200005c0

080083f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083f4:	b480      	push	{r7}
 80083f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	6039      	str	r1, [r7, #0]
 800840e:	71fb      	strb	r3, [r7, #7]
 8008410:	4613      	mov	r3, r2
 8008412:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b23      	cmp	r3, #35	; 0x23
 8008418:	d84a      	bhi.n	80084b0 <CDC_Control_FS+0xac>
 800841a:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <CDC_Control_FS+0x1c>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	080084b1 	.word	0x080084b1
 8008424:	080084b1 	.word	0x080084b1
 8008428:	080084b1 	.word	0x080084b1
 800842c:	080084b1 	.word	0x080084b1
 8008430:	080084b1 	.word	0x080084b1
 8008434:	080084b1 	.word	0x080084b1
 8008438:	080084b1 	.word	0x080084b1
 800843c:	080084b1 	.word	0x080084b1
 8008440:	080084b1 	.word	0x080084b1
 8008444:	080084b1 	.word	0x080084b1
 8008448:	080084b1 	.word	0x080084b1
 800844c:	080084b1 	.word	0x080084b1
 8008450:	080084b1 	.word	0x080084b1
 8008454:	080084b1 	.word	0x080084b1
 8008458:	080084b1 	.word	0x080084b1
 800845c:	080084b1 	.word	0x080084b1
 8008460:	080084b1 	.word	0x080084b1
 8008464:	080084b1 	.word	0x080084b1
 8008468:	080084b1 	.word	0x080084b1
 800846c:	080084b1 	.word	0x080084b1
 8008470:	080084b1 	.word	0x080084b1
 8008474:	080084b1 	.word	0x080084b1
 8008478:	080084b1 	.word	0x080084b1
 800847c:	080084b1 	.word	0x080084b1
 8008480:	080084b1 	.word	0x080084b1
 8008484:	080084b1 	.word	0x080084b1
 8008488:	080084b1 	.word	0x080084b1
 800848c:	080084b1 	.word	0x080084b1
 8008490:	080084b1 	.word	0x080084b1
 8008494:	080084b1 	.word	0x080084b1
 8008498:	080084b1 	.word	0x080084b1
 800849c:	080084b1 	.word	0x080084b1
 80084a0:	080084b1 	.word	0x080084b1
 80084a4:	080084b1 	.word	0x080084b1
 80084a8:	080084b1 	.word	0x080084b1
 80084ac:	080084b1 	.word	0x080084b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084b0:	bf00      	nop
  }

  return (USBD_OK);
 80084b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	480f      	ldr	r0, [pc, #60]	; (800850c <CDC_Receive_FS+0x4c>)
 80084ce:	f7fe fe11 	bl	80070f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084d2:	480e      	ldr	r0, [pc, #56]	; (800850c <CDC_Receive_FS+0x4c>)
 80084d4:	f7fe fe22 	bl	800711c <USBD_CDC_ReceivePacket>


  for(i=0;i<*Len;i++){
 80084d8:	2300      	movs	r3, #0
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	e00b      	b.n	80084f6 <CDC_Receive_FS+0x36>
	  rxBuffer[i] = Buf[i];
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4413      	add	r3, r2
 80084e4:	7819      	ldrb	r1, [r3, #0]
 80084e6:	4a0a      	ldr	r2, [pc, #40]	; (8008510 <CDC_Receive_FS+0x50>)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	460a      	mov	r2, r1
 80084ee:	701a      	strb	r2, [r3, #0]
  for(i=0;i<*Len;i++){
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d3ee      	bcc.n	80084de <CDC_Receive_FS+0x1e>


  //CDC_Transmit_FS((uint8_t *) rxBuffer,strlen(rxBuffer));


  return (USBD_OK);
 8008500:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200002f0 	.word	0x200002f0
 8008510:	200002ac 	.word	0x200002ac

08008514 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	4613      	mov	r3, r2
 8008520:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008526:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800852a:	4618      	mov	r0, r3
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
	...

08008538 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	6039      	str	r1, [r7, #0]
 8008542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2212      	movs	r2, #18
 8008548:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800854a:	4b03      	ldr	r3, [pc, #12]	; (8008558 <USBD_FS_DeviceDescriptor+0x20>)
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	20000178 	.word	0x20000178

0800855c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	6039      	str	r1, [r7, #0]
 8008566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2204      	movs	r2, #4
 800856c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800856e:	4b03      	ldr	r3, [pc, #12]	; (800857c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008570:	4618      	mov	r0, r3
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	20000198 	.word	0x20000198

08008580 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d105      	bne.n	800859e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4907      	ldr	r1, [pc, #28]	; (80085b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008596:	4808      	ldr	r0, [pc, #32]	; (80085b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008598:	f7ff fe08 	bl	80081ac <USBD_GetString>
 800859c:	e004      	b.n	80085a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	4904      	ldr	r1, [pc, #16]	; (80085b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80085a2:	4805      	ldr	r0, [pc, #20]	; (80085b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80085a4:	f7ff fe02 	bl	80081ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80085a8:	4b02      	ldr	r3, [pc, #8]	; (80085b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20000d90 	.word	0x20000d90
 80085b8:	08009088 	.word	0x08009088

080085bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	6039      	str	r1, [r7, #0]
 80085c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	4904      	ldr	r1, [pc, #16]	; (80085dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085cc:	4804      	ldr	r0, [pc, #16]	; (80085e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085ce:	f7ff fded 	bl	80081ac <USBD_GetString>
  return USBD_StrDesc;
 80085d2:	4b02      	ldr	r3, [pc, #8]	; (80085dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20000d90 	.word	0x20000d90
 80085e0:	080090a0 	.word	0x080090a0

080085e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	6039      	str	r1, [r7, #0]
 80085ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	221a      	movs	r2, #26
 80085f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085f6:	f000 f855 	bl	80086a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085fa:	4b02      	ldr	r3, [pc, #8]	; (8008604 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	2000019c 	.word	0x2000019c

08008608 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	6039      	str	r1, [r7, #0]
 8008612:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d105      	bne.n	8008626 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	4907      	ldr	r1, [pc, #28]	; (800863c <USBD_FS_ConfigStrDescriptor+0x34>)
 800861e:	4808      	ldr	r0, [pc, #32]	; (8008640 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008620:	f7ff fdc4 	bl	80081ac <USBD_GetString>
 8008624:	e004      	b.n	8008630 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	4904      	ldr	r1, [pc, #16]	; (800863c <USBD_FS_ConfigStrDescriptor+0x34>)
 800862a:	4805      	ldr	r0, [pc, #20]	; (8008640 <USBD_FS_ConfigStrDescriptor+0x38>)
 800862c:	f7ff fdbe 	bl	80081ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008630:	4b02      	ldr	r3, [pc, #8]	; (800863c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20000d90 	.word	0x20000d90
 8008640:	080090b4 	.word	0x080090b4

08008644 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	6039      	str	r1, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d105      	bne.n	8008662 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	4907      	ldr	r1, [pc, #28]	; (8008678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800865a:	4808      	ldr	r0, [pc, #32]	; (800867c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800865c:	f7ff fda6 	bl	80081ac <USBD_GetString>
 8008660:	e004      	b.n	800866c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	4904      	ldr	r1, [pc, #16]	; (8008678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008666:	4805      	ldr	r0, [pc, #20]	; (800867c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008668:	f7ff fda0 	bl	80081ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800866c:	4b02      	ldr	r3, [pc, #8]	; (8008678 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20000d90 	.word	0x20000d90
 800867c:	080090c0 	.word	0x080090c0

08008680 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	6039      	str	r1, [r7, #0]
 800868a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	220c      	movs	r2, #12
 8008690:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008692:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	2000018c 	.word	0x2000018c

080086a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086aa:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <Get_SerialNum+0x44>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086b0:	4b0e      	ldr	r3, [pc, #56]	; (80086ec <Get_SerialNum+0x48>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086b6:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <Get_SerialNum+0x4c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4413      	add	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086ca:	2208      	movs	r2, #8
 80086cc:	4909      	ldr	r1, [pc, #36]	; (80086f4 <Get_SerialNum+0x50>)
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 f814 	bl	80086fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086d4:	2204      	movs	r2, #4
 80086d6:	4908      	ldr	r1, [pc, #32]	; (80086f8 <Get_SerialNum+0x54>)
 80086d8:	68b8      	ldr	r0, [r7, #8]
 80086da:	f000 f80f 	bl	80086fc <IntToUnicode>
  }
}
 80086de:	bf00      	nop
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	1fff7590 	.word	0x1fff7590
 80086ec:	1fff7594 	.word	0x1fff7594
 80086f0:	1fff7598 	.word	0x1fff7598
 80086f4:	2000019e 	.word	0x2000019e
 80086f8:	200001ae 	.word	0x200001ae

080086fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	4613      	mov	r3, r2
 8008708:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800870e:	2300      	movs	r3, #0
 8008710:	75fb      	strb	r3, [r7, #23]
 8008712:	e027      	b.n	8008764 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	0f1b      	lsrs	r3, r3, #28
 8008718:	2b09      	cmp	r3, #9
 800871a:	d80b      	bhi.n	8008734 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	0f1b      	lsrs	r3, r3, #28
 8008720:	b2da      	uxtb	r2, r3
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	4619      	mov	r1, r3
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	440b      	add	r3, r1
 800872c:	3230      	adds	r2, #48	; 0x30
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	e00a      	b.n	800874a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	0f1b      	lsrs	r3, r3, #28
 8008738:	b2da      	uxtb	r2, r3
 800873a:	7dfb      	ldrb	r3, [r7, #23]
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	4619      	mov	r1, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	440b      	add	r3, r1
 8008744:	3237      	adds	r2, #55	; 0x37
 8008746:	b2d2      	uxtb	r2, r2
 8008748:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	011b      	lsls	r3, r3, #4
 800874e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	3301      	adds	r3, #1
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	4413      	add	r3, r2
 800875a:	2200      	movs	r2, #0
 800875c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800875e:	7dfb      	ldrb	r3, [r7, #23]
 8008760:	3301      	adds	r3, #1
 8008762:	75fb      	strb	r3, [r7, #23]
 8008764:	7dfa      	ldrb	r2, [r7, #23]
 8008766:	79fb      	ldrb	r3, [r7, #7]
 8008768:	429a      	cmp	r2, r3
 800876a:	d3d3      	bcc.n	8008714 <IntToUnicode+0x18>
  }
}
 800876c:	bf00      	nop
 800876e:	bf00      	nop
 8008770:	371c      	adds	r7, #28
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
	...

0800877c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a0d      	ldr	r2, [pc, #52]	; (80087c0 <HAL_PCD_MspInit+0x44>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d113      	bne.n	80087b6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800878e:	4b0d      	ldr	r3, [pc, #52]	; (80087c4 <HAL_PCD_MspInit+0x48>)
 8008790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008792:	4a0c      	ldr	r2, [pc, #48]	; (80087c4 <HAL_PCD_MspInit+0x48>)
 8008794:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008798:	6593      	str	r3, [r2, #88]	; 0x58
 800879a:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <HAL_PCD_MspInit+0x48>)
 800879c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80087a6:	2200      	movs	r2, #0
 80087a8:	2100      	movs	r1, #0
 80087aa:	2043      	movs	r0, #67	; 0x43
 80087ac:	f7f8 fb59 	bl	8000e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80087b0:	2043      	movs	r0, #67	; 0x43
 80087b2:	f7f8 fb72 	bl	8000e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	40006800 	.word	0x40006800
 80087c4:	40021000 	.word	0x40021000

080087c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80087dc:	4619      	mov	r1, r3
 80087de:	4610      	mov	r0, r2
 80087e0:	f7fe fd68 	bl	80072b4 <USBD_LL_SetupStage>
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80087fe:	78fa      	ldrb	r2, [r7, #3]
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	00db      	lsls	r3, r3, #3
 800880a:	440b      	add	r3, r1
 800880c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	78fb      	ldrb	r3, [r7, #3]
 8008814:	4619      	mov	r1, r3
 8008816:	f7fe fda2 	bl	800735e <USBD_LL_DataOutStage>
}
 800881a:	bf00      	nop
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	460b      	mov	r3, r1
 800882c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008834:	78fa      	ldrb	r2, [r7, #3]
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	4613      	mov	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	440b      	add	r3, r1
 8008842:	333c      	adds	r3, #60	; 0x3c
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	4619      	mov	r1, r3
 800884a:	f7fe fdeb 	bl	8007424 <USBD_LL_DataInStage>
}
 800884e:	bf00      	nop
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe feef 	bl	8007648 <USBD_LL_SOF>
}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800887a:	2301      	movs	r3, #1
 800887c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	2b02      	cmp	r3, #2
 8008884:	d001      	beq.n	800888a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008886:	f7f7 fddf 	bl	8000448 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008890:	7bfa      	ldrb	r2, [r7, #15]
 8008892:	4611      	mov	r1, r2
 8008894:	4618      	mov	r0, r3
 8008896:	f7fe fe9c 	bl	80075d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fe fe55 	bl	8007550 <USBD_LL_Reset>
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fe97 	bl	80075f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088cc:	4b04      	ldr	r3, [pc, #16]	; (80088e0 <HAL_PCD_SuspendCallback+0x30>)
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	4a03      	ldr	r2, [pc, #12]	; (80088e0 <HAL_PCD_SuspendCallback+0x30>)
 80088d2:	f043 0306 	orr.w	r3, r3, #6
 80088d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088d8:	bf00      	nop
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	e000ed00 	.word	0xe000ed00

080088e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d007      	beq.n	8008904 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088f4:	4b08      	ldr	r3, [pc, #32]	; (8008918 <HAL_PCD_ResumeCallback+0x34>)
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	4a07      	ldr	r2, [pc, #28]	; (8008918 <HAL_PCD_ResumeCallback+0x34>)
 80088fa:	f023 0306 	bic.w	r3, r3, #6
 80088fe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008900:	f000 fa9e 	bl	8008e40 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe fe86 	bl	800761c <USBD_LL_Resume>
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	e000ed00 	.word	0xe000ed00

0800891c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008924:	f7fa f878 	bl	8002a18 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008928:	4a2b      	ldr	r2, [pc, #172]	; (80089d8 <USBD_LL_Init+0xbc>)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a29      	ldr	r2, [pc, #164]	; (80089d8 <USBD_LL_Init+0xbc>)
 8008934:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008938:	4b27      	ldr	r3, [pc, #156]	; (80089d8 <USBD_LL_Init+0xbc>)
 800893a:	4a28      	ldr	r2, [pc, #160]	; (80089dc <USBD_LL_Init+0xc0>)
 800893c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800893e:	4b26      	ldr	r3, [pc, #152]	; (80089d8 <USBD_LL_Init+0xbc>)
 8008940:	2208      	movs	r2, #8
 8008942:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008944:	4b24      	ldr	r3, [pc, #144]	; (80089d8 <USBD_LL_Init+0xbc>)
 8008946:	2202      	movs	r2, #2
 8008948:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800894a:	4b23      	ldr	r3, [pc, #140]	; (80089d8 <USBD_LL_Init+0xbc>)
 800894c:	2202      	movs	r2, #2
 800894e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008950:	4b21      	ldr	r3, [pc, #132]	; (80089d8 <USBD_LL_Init+0xbc>)
 8008952:	2200      	movs	r2, #0
 8008954:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008956:	4b20      	ldr	r3, [pc, #128]	; (80089d8 <USBD_LL_Init+0xbc>)
 8008958:	2200      	movs	r2, #0
 800895a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800895c:	4b1e      	ldr	r3, [pc, #120]	; (80089d8 <USBD_LL_Init+0xbc>)
 800895e:	2200      	movs	r2, #0
 8008960:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008962:	4b1d      	ldr	r3, [pc, #116]	; (80089d8 <USBD_LL_Init+0xbc>)
 8008964:	2200      	movs	r2, #0
 8008966:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008968:	481b      	ldr	r0, [pc, #108]	; (80089d8 <USBD_LL_Init+0xbc>)
 800896a:	f7f8 fc4d 	bl	8001208 <HAL_PCD_Init>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008974:	f7f7 fd68 	bl	8000448 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800897e:	2318      	movs	r3, #24
 8008980:	2200      	movs	r2, #0
 8008982:	2100      	movs	r1, #0
 8008984:	f7f9 ff76 	bl	8002874 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800898e:	2358      	movs	r3, #88	; 0x58
 8008990:	2200      	movs	r2, #0
 8008992:	2180      	movs	r1, #128	; 0x80
 8008994:	f7f9 ff6e 	bl	8002874 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800899e:	23c0      	movs	r3, #192	; 0xc0
 80089a0:	2200      	movs	r2, #0
 80089a2:	2181      	movs	r1, #129	; 0x81
 80089a4:	f7f9 ff66 	bl	8002874 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80089b2:	2200      	movs	r2, #0
 80089b4:	2101      	movs	r1, #1
 80089b6:	f7f9 ff5d 	bl	8002874 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089c4:	2200      	movs	r2, #0
 80089c6:	2182      	movs	r1, #130	; 0x82
 80089c8:	f7f9 ff54 	bl	8002874 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	20000f90 	.word	0x20000f90
 80089dc:	40006800 	.word	0x40006800

080089e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7f8 fd18 	bl	800142c <HAL_PCD_Start>
 80089fc:	4603      	mov	r3, r0
 80089fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d816      	bhi.n	8008a34 <USBD_LL_Start+0x54>
 8008a06:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <USBD_LL_Start+0x2c>)
 8008a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0c:	08008a1d 	.word	0x08008a1d
 8008a10:	08008a23 	.word	0x08008a23
 8008a14:	08008a29 	.word	0x08008a29
 8008a18:	08008a2f 	.word	0x08008a2f
    case HAL_OK :
      usb_status = USBD_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a20:	e00b      	b.n	8008a3a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a22:	2303      	movs	r3, #3
 8008a24:	73fb      	strb	r3, [r7, #15]
    break;
 8008a26:	e008      	b.n	8008a3a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a2c:	e005      	b.n	8008a3a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	73fb      	strb	r3, [r7, #15]
    break;
 8008a32:	e002      	b.n	8008a3a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008a34:	2303      	movs	r3, #3
 8008a36:	73fb      	strb	r3, [r7, #15]
    break;
 8008a38:	bf00      	nop
  }
  return usb_status;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	4608      	mov	r0, r1
 8008a4e:	4611      	mov	r1, r2
 8008a50:	461a      	mov	r2, r3
 8008a52:	4603      	mov	r3, r0
 8008a54:	70fb      	strb	r3, [r7, #3]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70bb      	strb	r3, [r7, #2]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a6c:	78bb      	ldrb	r3, [r7, #2]
 8008a6e:	883a      	ldrh	r2, [r7, #0]
 8008a70:	78f9      	ldrb	r1, [r7, #3]
 8008a72:	f7f8 fe70 	bl	8001756 <HAL_PCD_EP_Open>
 8008a76:	4603      	mov	r3, r0
 8008a78:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a7a:	7bbb      	ldrb	r3, [r7, #14]
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d817      	bhi.n	8008ab0 <USBD_LL_OpenEP+0x6c>
 8008a80:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <USBD_LL_OpenEP+0x44>)
 8008a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a86:	bf00      	nop
 8008a88:	08008a99 	.word	0x08008a99
 8008a8c:	08008a9f 	.word	0x08008a9f
 8008a90:	08008aa5 	.word	0x08008aa5
 8008a94:	08008aab 	.word	0x08008aab
    case HAL_OK :
      usb_status = USBD_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a9c:	e00b      	b.n	8008ab6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa2:	e008      	b.n	8008ab6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa8:	e005      	b.n	8008ab6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	73fb      	strb	r3, [r7, #15]
    break;
 8008aae:	e002      	b.n	8008ab6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab4:	bf00      	nop
  }
  return usb_status;
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ada:	78fa      	ldrb	r2, [r7, #3]
 8008adc:	4611      	mov	r1, r2
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7f8 fe9f 	bl	8001822 <HAL_PCD_EP_Close>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d816      	bhi.n	8008b1c <USBD_LL_CloseEP+0x5c>
 8008aee:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <USBD_LL_CloseEP+0x34>)
 8008af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af4:	08008b05 	.word	0x08008b05
 8008af8:	08008b0b 	.word	0x08008b0b
 8008afc:	08008b11 	.word	0x08008b11
 8008b00:	08008b17 	.word	0x08008b17
    case HAL_OK :
      usb_status = USBD_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
    break;
 8008b08:	e00b      	b.n	8008b22 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b0e:	e008      	b.n	8008b22 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b10:	2301      	movs	r3, #1
 8008b12:	73fb      	strb	r3, [r7, #15]
    break;
 8008b14:	e005      	b.n	8008b22 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b16:	2303      	movs	r3, #3
 8008b18:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1a:	e002      	b.n	8008b22 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b20:	bf00      	nop
  }
  return usb_status;
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7f8 ff49 	bl	80019e2 <HAL_PCD_EP_SetStall>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d816      	bhi.n	8008b88 <USBD_LL_StallEP+0x5c>
 8008b5a:	a201      	add	r2, pc, #4	; (adr r2, 8008b60 <USBD_LL_StallEP+0x34>)
 8008b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b60:	08008b71 	.word	0x08008b71
 8008b64:	08008b77 	.word	0x08008b77
 8008b68:	08008b7d 	.word	0x08008b7d
 8008b6c:	08008b83 	.word	0x08008b83
    case HAL_OK :
      usb_status = USBD_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
    break;
 8008b74:	e00b      	b.n	8008b8e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b76:	2303      	movs	r3, #3
 8008b78:	73fb      	strb	r3, [r7, #15]
    break;
 8008b7a:	e008      	b.n	8008b8e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b80:	e005      	b.n	8008b8e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b82:	2303      	movs	r3, #3
 8008b84:	73fb      	strb	r3, [r7, #15]
    break;
 8008b86:	e002      	b.n	8008b8e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8c:	bf00      	nop
  }
  return usb_status;
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bb2:	78fa      	ldrb	r2, [r7, #3]
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7f8 ff73 	bl	8001aa2 <HAL_PCD_EP_ClrStall>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d816      	bhi.n	8008bf4 <USBD_LL_ClearStallEP+0x5c>
 8008bc6:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <USBD_LL_ClearStallEP+0x34>)
 8008bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bcc:	08008bdd 	.word	0x08008bdd
 8008bd0:	08008be3 	.word	0x08008be3
 8008bd4:	08008be9 	.word	0x08008be9
 8008bd8:	08008bef 	.word	0x08008bef
    case HAL_OK :
      usb_status = USBD_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]
    break;
 8008be0:	e00b      	b.n	8008bfa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008be2:	2303      	movs	r3, #3
 8008be4:	73fb      	strb	r3, [r7, #15]
    break;
 8008be6:	e008      	b.n	8008bfa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008be8:	2301      	movs	r3, #1
 8008bea:	73fb      	strb	r3, [r7, #15]
    break;
 8008bec:	e005      	b.n	8008bfa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf2:	e002      	b.n	8008bfa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf8:	bf00      	nop
  }
  return usb_status;
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	da0c      	bge.n	8008c3a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c26:	68f9      	ldr	r1, [r7, #12]
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	440b      	add	r3, r1
 8008c34:	3302      	adds	r3, #2
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	e00b      	b.n	8008c52 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c40:	68f9      	ldr	r1, [r7, #12]
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	440b      	add	r3, r1
 8008c4c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008c50:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
	...

08008c60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c7a:	78fa      	ldrb	r2, [r7, #3]
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7f8 fd44 	bl	800170c <HAL_PCD_SetAddress>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d816      	bhi.n	8008cbc <USBD_LL_SetUSBAddress+0x5c>
 8008c8e:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <USBD_LL_SetUSBAddress+0x34>)
 8008c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c94:	08008ca5 	.word	0x08008ca5
 8008c98:	08008cab 	.word	0x08008cab
 8008c9c:	08008cb1 	.word	0x08008cb1
 8008ca0:	08008cb7 	.word	0x08008cb7
    case HAL_OK :
      usb_status = USBD_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca8:	e00b      	b.n	8008cc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008caa:	2303      	movs	r3, #3
 8008cac:	73fb      	strb	r3, [r7, #15]
    break;
 8008cae:	e008      	b.n	8008cc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb4:	e005      	b.n	8008cc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cba:	e002      	b.n	8008cc2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc0:	bf00      	nop
  }
  return usb_status;
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	607a      	str	r2, [r7, #4]
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008cea:	7af9      	ldrb	r1, [r7, #11]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	f7f8 fe34 	bl	800195c <HAL_PCD_EP_Transmit>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008cf8:	7dbb      	ldrb	r3, [r7, #22]
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	d816      	bhi.n	8008d2c <USBD_LL_Transmit+0x60>
 8008cfe:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <USBD_LL_Transmit+0x38>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008d15 	.word	0x08008d15
 8008d08:	08008d1b 	.word	0x08008d1b
 8008d0c:	08008d21 	.word	0x08008d21
 8008d10:	08008d27 	.word	0x08008d27
    case HAL_OK :
      usb_status = USBD_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	75fb      	strb	r3, [r7, #23]
    break;
 8008d18:	e00b      	b.n	8008d32 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	75fb      	strb	r3, [r7, #23]
    break;
 8008d1e:	e008      	b.n	8008d32 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d20:	2301      	movs	r3, #1
 8008d22:	75fb      	strb	r3, [r7, #23]
    break;
 8008d24:	e005      	b.n	8008d32 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d26:	2303      	movs	r3, #3
 8008d28:	75fb      	strb	r3, [r7, #23]
    break;
 8008d2a:	e002      	b.n	8008d32 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	75fb      	strb	r3, [r7, #23]
    break;
 8008d30:	bf00      	nop
  }
  return usb_status;
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3718      	adds	r7, #24
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	607a      	str	r2, [r7, #4]
 8008d46:	603b      	str	r3, [r7, #0]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d5a:	7af9      	ldrb	r1, [r7, #11]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	f7f8 fda7 	bl	80018b2 <HAL_PCD_EP_Receive>
 8008d64:	4603      	mov	r3, r0
 8008d66:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008d68:	7dbb      	ldrb	r3, [r7, #22]
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d816      	bhi.n	8008d9c <USBD_LL_PrepareReceive+0x60>
 8008d6e:	a201      	add	r2, pc, #4	; (adr r2, 8008d74 <USBD_LL_PrepareReceive+0x38>)
 8008d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d74:	08008d85 	.word	0x08008d85
 8008d78:	08008d8b 	.word	0x08008d8b
 8008d7c:	08008d91 	.word	0x08008d91
 8008d80:	08008d97 	.word	0x08008d97
    case HAL_OK :
      usb_status = USBD_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	75fb      	strb	r3, [r7, #23]
    break;
 8008d88:	e00b      	b.n	8008da2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	75fb      	strb	r3, [r7, #23]
    break;
 8008d8e:	e008      	b.n	8008da2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d90:	2301      	movs	r3, #1
 8008d92:	75fb      	strb	r3, [r7, #23]
    break;
 8008d94:	e005      	b.n	8008da2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d96:	2303      	movs	r3, #3
 8008d98:	75fb      	strb	r3, [r7, #23]
    break;
 8008d9a:	e002      	b.n	8008da2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	75fb      	strb	r3, [r7, #23]
    break;
 8008da0:	bf00      	nop
  }
  return usb_status;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dbe:	78fa      	ldrb	r2, [r7, #3]
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7f8 fdb2 	bl	800192c <HAL_PCD_EP_GetRxCount>
 8008dc8:	4603      	mov	r3, r0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
	...

08008dd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <HAL_PCDEx_LPM_Callback+0x18>
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d013      	beq.n	8008e12 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008dea:	e023      	b.n	8008e34 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d007      	beq.n	8008e04 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008df4:	f000 f824 	bl	8008e40 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008df8:	4b10      	ldr	r3, [pc, #64]	; (8008e3c <HAL_PCDEx_LPM_Callback+0x68>)
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	4a0f      	ldr	r2, [pc, #60]	; (8008e3c <HAL_PCDEx_LPM_Callback+0x68>)
 8008dfe:	f023 0306 	bic.w	r3, r3, #6
 8008e02:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe fc06 	bl	800761c <USBD_LL_Resume>
    break;
 8008e10:	e010      	b.n	8008e34 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fe fbea 	bl	80075f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d005      	beq.n	8008e32 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e26:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <HAL_PCDEx_LPM_Callback+0x68>)
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	4a04      	ldr	r2, [pc, #16]	; (8008e3c <HAL_PCDEx_LPM_Callback+0x68>)
 8008e2c:	f043 0306 	orr.w	r3, r3, #6
 8008e30:	6113      	str	r3, [r2, #16]
    break;
 8008e32:	bf00      	nop
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	e000ed00 	.word	0xe000ed00

08008e40 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008e44:	f7f7 f9f4 	bl	8000230 <SystemClock_Config>
}
 8008e48:	bf00      	nop
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <__errno>:
 8008e4c:	4b01      	ldr	r3, [pc, #4]	; (8008e54 <__errno+0x8>)
 8008e4e:	6818      	ldr	r0, [r3, #0]
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	200001b8 	.word	0x200001b8

08008e58 <__libc_init_array>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	4d0d      	ldr	r5, [pc, #52]	; (8008e90 <__libc_init_array+0x38>)
 8008e5c:	4c0d      	ldr	r4, [pc, #52]	; (8008e94 <__libc_init_array+0x3c>)
 8008e5e:	1b64      	subs	r4, r4, r5
 8008e60:	10a4      	asrs	r4, r4, #2
 8008e62:	2600      	movs	r6, #0
 8008e64:	42a6      	cmp	r6, r4
 8008e66:	d109      	bne.n	8008e7c <__libc_init_array+0x24>
 8008e68:	4d0b      	ldr	r5, [pc, #44]	; (8008e98 <__libc_init_array+0x40>)
 8008e6a:	4c0c      	ldr	r4, [pc, #48]	; (8008e9c <__libc_init_array+0x44>)
 8008e6c:	f000 f8f8 	bl	8009060 <_init>
 8008e70:	1b64      	subs	r4, r4, r5
 8008e72:	10a4      	asrs	r4, r4, #2
 8008e74:	2600      	movs	r6, #0
 8008e76:	42a6      	cmp	r6, r4
 8008e78:	d105      	bne.n	8008e86 <__libc_init_array+0x2e>
 8008e7a:	bd70      	pop	{r4, r5, r6, pc}
 8008e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e80:	4798      	blx	r3
 8008e82:	3601      	adds	r6, #1
 8008e84:	e7ee      	b.n	8008e64 <__libc_init_array+0xc>
 8008e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e8a:	4798      	blx	r3
 8008e8c:	3601      	adds	r6, #1
 8008e8e:	e7f2      	b.n	8008e76 <__libc_init_array+0x1e>
 8008e90:	08009110 	.word	0x08009110
 8008e94:	08009110 	.word	0x08009110
 8008e98:	08009110 	.word	0x08009110
 8008e9c:	08009114 	.word	0x08009114

08008ea0 <malloc>:
 8008ea0:	4b02      	ldr	r3, [pc, #8]	; (8008eac <malloc+0xc>)
 8008ea2:	4601      	mov	r1, r0
 8008ea4:	6818      	ldr	r0, [r3, #0]
 8008ea6:	f000 b863 	b.w	8008f70 <_malloc_r>
 8008eaa:	bf00      	nop
 8008eac:	200001b8 	.word	0x200001b8

08008eb0 <free>:
 8008eb0:	4b02      	ldr	r3, [pc, #8]	; (8008ebc <free+0xc>)
 8008eb2:	4601      	mov	r1, r0
 8008eb4:	6818      	ldr	r0, [r3, #0]
 8008eb6:	f000 b80b 	b.w	8008ed0 <_free_r>
 8008eba:	bf00      	nop
 8008ebc:	200001b8 	.word	0x200001b8

08008ec0 <memset>:
 8008ec0:	4402      	add	r2, r0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d100      	bne.n	8008eca <memset+0xa>
 8008ec8:	4770      	bx	lr
 8008eca:	f803 1b01 	strb.w	r1, [r3], #1
 8008ece:	e7f9      	b.n	8008ec4 <memset+0x4>

08008ed0 <_free_r>:
 8008ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ed2:	2900      	cmp	r1, #0
 8008ed4:	d048      	beq.n	8008f68 <_free_r+0x98>
 8008ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eda:	9001      	str	r0, [sp, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f1a1 0404 	sub.w	r4, r1, #4
 8008ee2:	bfb8      	it	lt
 8008ee4:	18e4      	addlt	r4, r4, r3
 8008ee6:	f000 f8ad 	bl	8009044 <__malloc_lock>
 8008eea:	4a20      	ldr	r2, [pc, #128]	; (8008f6c <_free_r+0x9c>)
 8008eec:	9801      	ldr	r0, [sp, #4]
 8008eee:	6813      	ldr	r3, [r2, #0]
 8008ef0:	4615      	mov	r5, r2
 8008ef2:	b933      	cbnz	r3, 8008f02 <_free_r+0x32>
 8008ef4:	6063      	str	r3, [r4, #4]
 8008ef6:	6014      	str	r4, [r2, #0]
 8008ef8:	b003      	add	sp, #12
 8008efa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008efe:	f000 b8a7 	b.w	8009050 <__malloc_unlock>
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	d90b      	bls.n	8008f1e <_free_r+0x4e>
 8008f06:	6821      	ldr	r1, [r4, #0]
 8008f08:	1862      	adds	r2, r4, r1
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	bf04      	itt	eq
 8008f0e:	681a      	ldreq	r2, [r3, #0]
 8008f10:	685b      	ldreq	r3, [r3, #4]
 8008f12:	6063      	str	r3, [r4, #4]
 8008f14:	bf04      	itt	eq
 8008f16:	1852      	addeq	r2, r2, r1
 8008f18:	6022      	streq	r2, [r4, #0]
 8008f1a:	602c      	str	r4, [r5, #0]
 8008f1c:	e7ec      	b.n	8008ef8 <_free_r+0x28>
 8008f1e:	461a      	mov	r2, r3
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	b10b      	cbz	r3, 8008f28 <_free_r+0x58>
 8008f24:	42a3      	cmp	r3, r4
 8008f26:	d9fa      	bls.n	8008f1e <_free_r+0x4e>
 8008f28:	6811      	ldr	r1, [r2, #0]
 8008f2a:	1855      	adds	r5, r2, r1
 8008f2c:	42a5      	cmp	r5, r4
 8008f2e:	d10b      	bne.n	8008f48 <_free_r+0x78>
 8008f30:	6824      	ldr	r4, [r4, #0]
 8008f32:	4421      	add	r1, r4
 8008f34:	1854      	adds	r4, r2, r1
 8008f36:	42a3      	cmp	r3, r4
 8008f38:	6011      	str	r1, [r2, #0]
 8008f3a:	d1dd      	bne.n	8008ef8 <_free_r+0x28>
 8008f3c:	681c      	ldr	r4, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	6053      	str	r3, [r2, #4]
 8008f42:	4421      	add	r1, r4
 8008f44:	6011      	str	r1, [r2, #0]
 8008f46:	e7d7      	b.n	8008ef8 <_free_r+0x28>
 8008f48:	d902      	bls.n	8008f50 <_free_r+0x80>
 8008f4a:	230c      	movs	r3, #12
 8008f4c:	6003      	str	r3, [r0, #0]
 8008f4e:	e7d3      	b.n	8008ef8 <_free_r+0x28>
 8008f50:	6825      	ldr	r5, [r4, #0]
 8008f52:	1961      	adds	r1, r4, r5
 8008f54:	428b      	cmp	r3, r1
 8008f56:	bf04      	itt	eq
 8008f58:	6819      	ldreq	r1, [r3, #0]
 8008f5a:	685b      	ldreq	r3, [r3, #4]
 8008f5c:	6063      	str	r3, [r4, #4]
 8008f5e:	bf04      	itt	eq
 8008f60:	1949      	addeq	r1, r1, r5
 8008f62:	6021      	streq	r1, [r4, #0]
 8008f64:	6054      	str	r4, [r2, #4]
 8008f66:	e7c7      	b.n	8008ef8 <_free_r+0x28>
 8008f68:	b003      	add	sp, #12
 8008f6a:	bd30      	pop	{r4, r5, pc}
 8008f6c:	20000240 	.word	0x20000240

08008f70 <_malloc_r>:
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	1ccd      	adds	r5, r1, #3
 8008f74:	f025 0503 	bic.w	r5, r5, #3
 8008f78:	3508      	adds	r5, #8
 8008f7a:	2d0c      	cmp	r5, #12
 8008f7c:	bf38      	it	cc
 8008f7e:	250c      	movcc	r5, #12
 8008f80:	2d00      	cmp	r5, #0
 8008f82:	4606      	mov	r6, r0
 8008f84:	db01      	blt.n	8008f8a <_malloc_r+0x1a>
 8008f86:	42a9      	cmp	r1, r5
 8008f88:	d903      	bls.n	8008f92 <_malloc_r+0x22>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	6033      	str	r3, [r6, #0]
 8008f8e:	2000      	movs	r0, #0
 8008f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f92:	f000 f857 	bl	8009044 <__malloc_lock>
 8008f96:	4921      	ldr	r1, [pc, #132]	; (800901c <_malloc_r+0xac>)
 8008f98:	680a      	ldr	r2, [r1, #0]
 8008f9a:	4614      	mov	r4, r2
 8008f9c:	b99c      	cbnz	r4, 8008fc6 <_malloc_r+0x56>
 8008f9e:	4f20      	ldr	r7, [pc, #128]	; (8009020 <_malloc_r+0xb0>)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	b923      	cbnz	r3, 8008fae <_malloc_r+0x3e>
 8008fa4:	4621      	mov	r1, r4
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f000 f83c 	bl	8009024 <_sbrk_r>
 8008fac:	6038      	str	r0, [r7, #0]
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f000 f837 	bl	8009024 <_sbrk_r>
 8008fb6:	1c43      	adds	r3, r0, #1
 8008fb8:	d123      	bne.n	8009002 <_malloc_r+0x92>
 8008fba:	230c      	movs	r3, #12
 8008fbc:	6033      	str	r3, [r6, #0]
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f000 f846 	bl	8009050 <__malloc_unlock>
 8008fc4:	e7e3      	b.n	8008f8e <_malloc_r+0x1e>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	1b5b      	subs	r3, r3, r5
 8008fca:	d417      	bmi.n	8008ffc <_malloc_r+0x8c>
 8008fcc:	2b0b      	cmp	r3, #11
 8008fce:	d903      	bls.n	8008fd8 <_malloc_r+0x68>
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	441c      	add	r4, r3
 8008fd4:	6025      	str	r5, [r4, #0]
 8008fd6:	e004      	b.n	8008fe2 <_malloc_r+0x72>
 8008fd8:	6863      	ldr	r3, [r4, #4]
 8008fda:	42a2      	cmp	r2, r4
 8008fdc:	bf0c      	ite	eq
 8008fde:	600b      	streq	r3, [r1, #0]
 8008fe0:	6053      	strne	r3, [r2, #4]
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f000 f834 	bl	8009050 <__malloc_unlock>
 8008fe8:	f104 000b 	add.w	r0, r4, #11
 8008fec:	1d23      	adds	r3, r4, #4
 8008fee:	f020 0007 	bic.w	r0, r0, #7
 8008ff2:	1ac2      	subs	r2, r0, r3
 8008ff4:	d0cc      	beq.n	8008f90 <_malloc_r+0x20>
 8008ff6:	1a1b      	subs	r3, r3, r0
 8008ff8:	50a3      	str	r3, [r4, r2]
 8008ffa:	e7c9      	b.n	8008f90 <_malloc_r+0x20>
 8008ffc:	4622      	mov	r2, r4
 8008ffe:	6864      	ldr	r4, [r4, #4]
 8009000:	e7cc      	b.n	8008f9c <_malloc_r+0x2c>
 8009002:	1cc4      	adds	r4, r0, #3
 8009004:	f024 0403 	bic.w	r4, r4, #3
 8009008:	42a0      	cmp	r0, r4
 800900a:	d0e3      	beq.n	8008fd4 <_malloc_r+0x64>
 800900c:	1a21      	subs	r1, r4, r0
 800900e:	4630      	mov	r0, r6
 8009010:	f000 f808 	bl	8009024 <_sbrk_r>
 8009014:	3001      	adds	r0, #1
 8009016:	d1dd      	bne.n	8008fd4 <_malloc_r+0x64>
 8009018:	e7cf      	b.n	8008fba <_malloc_r+0x4a>
 800901a:	bf00      	nop
 800901c:	20000240 	.word	0x20000240
 8009020:	20000244 	.word	0x20000244

08009024 <_sbrk_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	4d06      	ldr	r5, [pc, #24]	; (8009040 <_sbrk_r+0x1c>)
 8009028:	2300      	movs	r3, #0
 800902a:	4604      	mov	r4, r0
 800902c:	4608      	mov	r0, r1
 800902e:	602b      	str	r3, [r5, #0]
 8009030:	f7f7 fd0e 	bl	8000a50 <_sbrk>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d102      	bne.n	800903e <_sbrk_r+0x1a>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	b103      	cbz	r3, 800903e <_sbrk_r+0x1a>
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	20001284 	.word	0x20001284

08009044 <__malloc_lock>:
 8009044:	4801      	ldr	r0, [pc, #4]	; (800904c <__malloc_lock+0x8>)
 8009046:	f000 b809 	b.w	800905c <__retarget_lock_acquire_recursive>
 800904a:	bf00      	nop
 800904c:	2000128c 	.word	0x2000128c

08009050 <__malloc_unlock>:
 8009050:	4801      	ldr	r0, [pc, #4]	; (8009058 <__malloc_unlock+0x8>)
 8009052:	f000 b804 	b.w	800905e <__retarget_lock_release_recursive>
 8009056:	bf00      	nop
 8009058:	2000128c 	.word	0x2000128c

0800905c <__retarget_lock_acquire_recursive>:
 800905c:	4770      	bx	lr

0800905e <__retarget_lock_release_recursive>:
 800905e:	4770      	bx	lr

08009060 <_init>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	bf00      	nop
 8009064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009066:	bc08      	pop	{r3}
 8009068:	469e      	mov	lr, r3
 800906a:	4770      	bx	lr

0800906c <_fini>:
 800906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906e:	bf00      	nop
 8009070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009072:	bc08      	pop	{r3}
 8009074:	469e      	mov	lr, r3
 8009076:	4770      	bx	lr
